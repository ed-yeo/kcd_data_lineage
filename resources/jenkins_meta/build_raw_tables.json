{
  "name": "build_raw_tables",
  "udfs": [
    {
      "name": "estimate_paid_at",
      "class": "com.kcd.thrush.cardsales.spark.udfs.EstimatePaidAt",
      "params": {
        "business_days_path": "s3://kcd-de-production/raw/db/snowdon/snapshot/latest/business_days"
      }
    },
    {
      "name": "mask_card_number",
      "class": "com.kcd.thrush.udfs.MarkCardNumberUDF",
      "params": {}
    },
    {
      "name": "purchase_delayed",
      "class": "com.kcd.thrush.cardsales.spark.udfs.PurchaseDelayed",
      "params": {
        "business_days_path": "s3://kcd-de-production/raw/db/snowdon/snapshot/latest/business_days"
      }
    }
  ],
  "source": [
    {
      "inputs": [],
      "name": "businesses",
      "options": {
        "url": "jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb",
        "dbtable": "businesses",
        "user": "scraper",
        "password": "g6XEyybrQU.nDA6jTp",
        "fetchsize": "5000",
        "numRowsPerPartition": "50000"
      },
      "type": "jdbc"
    },
    {
      "inputs": [],
      "name": "card_merchants",
      "options": {
        "url": "jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb",
        "dbtable": "card_merchants",
        "user": "scraper",
        "password": "g6XEyybrQU.nDA6jTp",
        "fetchsize": "5000",
        "numRowsPerPartition": "50000"
      },
      "type": "jdbc"
    },
    {
      "inputs": [],
      "name": "credential_keys",
      "options": {
        "url": "jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb",
        "dbtable": "credential_keys",
        "user": "scraper",
        "password": "g6XEyybrQU.nDA6jTp",
        "fetchsize": "5000",
        "numRowsPerPartition": "50000"
      },
      "type": "jdbc"
    },
    {
      "inputs": [],
      "name": "prev_approvals_raw",
      "options": {
        "paths": "s3://kcd-de-production/raw/etl/snowdon/card_sales/approvals",
        "format": "parquet"
      },
      "type": "file"
    },
    {
      "inputs": [],
      "name": "after_approvals_raw",
      "options": {
        "class": "com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource",
        "paths": "s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=31,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=30,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=29,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=28,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=27,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=26,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=25,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=24,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=23,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=22",
        "format": "json",
        "partition_keys": "year,month,day,hour",
        "log_leaf_file": "true",
        "mergeSchema": "true",
        "extraColumns": "credential_key:string,scraping_type:string"
      },
      "type": "custom"
    },
    {
      "inputs": [],
      "name": "catalog_approvals_raw",
      "options": {
        "class": "com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource",
        "paths": "s3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_approvals",
        "format": "json",
        "partition_keys": "created_at_date,created_at_hour",
        "log_leaf_file": "true",
        "mergeSchema": "true",
        "extraColumns": "credential_key:string,scraping_type:string"
      },
      "type": "custom"
    },
    {
      "inputs": [],
      "name": "prev_purchases_raw",
      "options": {
        "paths": "s3://kcd-de-production/raw/etl/snowdon/card_sales/purchases",
        "format": "parquet"
      },
      "type": "file"
    },
    {
      "inputs": [],
      "name": "after_purchases_raw",
      "options": {
        "class": "com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource",
        "paths": "s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=31,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=30,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=29,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=28,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=27,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=26,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=25,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=24,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=23,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=22",
        "format": "json",
        "partition_keys": "year,month,day,hour",
        "log_leaf_file": "true",
        "mergeSchema": "true",
        "extraColumns": "credential_key:string,scraping_type:string"
      },
      "type": "custom"
    },
    {
      "inputs": [],
      "name": "catalog_purchases_raw",
      "options": {
        "class": "com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource",
        "paths": "s3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_purchases",
        "format": "json",
        "partition_keys": "created_at_date,created_at_hour",
        "log_leaf_file": "true",
        "mergeSchema": "true",
        "extraColumns": "credential_key:string,scraping_type:string"
      },
      "type": "custom"
    },
    {
      "inputs": [],
      "name": "prev_payments_raw",
      "options": {
        "paths": "s3://kcd-de-production/raw/etl/snowdon/card_sales/payments",
        "format": "parquet"
      },
      "type": "file"
    },
    {
      "inputs": [],
      "name": "after_payments_raw",
      "options": {
        "class": "com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource",
        "paths": "s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=31,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=30,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=29,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=28,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=27,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=26,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=25,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=24,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=23,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=22",
        "format": "json",
        "partition_keys": "year,month,day,hour",
        "log_leaf_file": "true",
        "mergeSchema": "true",
        "extraColumns": "credential_key:string,scraping_type:string"
      },
      "type": "custom"
    },
    {
      "inputs": [],
      "name": "catalog_payments_raw",
      "options": {
        "class": "com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource",
        "paths": "s3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_payments",
        "format": "json",
        "partition_keys": "created_at_date,created_at_hour",
        "log_leaf_file": "true",
        "mergeSchema": "true",
        "extraColumns": "credential_key:string,scraping_type:string"
      },
      "type": "custom"
    }
  ],
  "process": [
    {
      "name": "prev_approvals",
      "inputs": [
        "prev_approvals_raw"
      ],
      "type": "sql",
      "options": {
        "sql": " SELECT   *\n FROM     prev_approvals_raw\n WHERE    created_at_date >= '2019-12-15'\n AND      created_at_date < '2019-12-22'"
      }
    },
    {
      "name": "catalog_approvals_filtered",
      "inputs": [
        "catalog_approvals_raw"
      ],
      "type": "sql",
      "options": {
        "sql": " SELECT   *\n FROM     catalog_approvals_raw\n WHERE    created_at_date >= '2019-12-22'\n AND      created_at_date < '2020-01-01'"
      }
    },
    {
      "name": "after_approvals",
      "inputs": [
        "credential_keys",
        "after_approvals_raw",
        "catalog_approvals_filtered"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\n\nUNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at,\n          created_at_date\n FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null"
      }
    },
    {
      "name": "reformat_approvals",
      "inputs": [
        "after_approvals"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT    *\nFROM      (\n SELECT * FROM   after_approvals\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null"
      }
    },
    {
      "name": "approvals",
      "inputs": [
        "reformat_approvals"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT    business_id,\n          credential_key,\n          transacted_at,\n          authorization_number,\n          amount,\n          MIN(acquirer_name) AS acquirer_name,\n          MIN(card_number) AS card_number,\n          MIN(card_type) AS card_type,\n          MIN(encrypted_card_number) AS encrypted_card_number,\n          MIN(installment) AS installment,\n          MIN(issuer_name) AS issuer_name,\n          MIN(masked_card_number) AS masked_card_number,\n          MIN(merchant_number) AS merchant_number,\n          MIN(scraping_type) AS scraping_type,\n          MIN(status) AS status,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(created_at_date) AS created_at_date\nFROM      reformat_approvals\nGROUP BY  business_id, credential_key, transacted_at, authorization_number, amount"
      }
    },
    {
      "name": "current_approvals",
      "inputs": [
        "approvals",
        "prev_approvals"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT    c.*\nFROM      approvals c LEFT ANTI JOIN prev_approvals p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.transacted_at = c.transacted_at AND\n  p.authorization_number = c.authorization_number AND\n  p.amount = c.amount AND\n  p.credential_key = c.credential_key\n)"
      }
    },
    {
      "name": "merged_approvals",
      "inputs": [
        "businesses",
        "card_merchants",
        "current_approvals"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)"
      }
    },
    {
      "name": "prev_purchases",
      "inputs": [
        "prev_purchases_raw"
      ],
      "type": "sql",
      "options": {
        "sql": " SELECT   *\n FROM     prev_purchases_raw\n WHERE    created_at_date >= '2019-12-15'\n AND      created_at_date < '2019-12-22'"
      }
    },
    {
      "name": "catalog_purchases_filtered",
      "inputs": [
        "catalog_purchases_raw"
      ],
      "type": "sql",
      "options": {
        "sql": " SELECT   *\n FROM     catalog_purchases_raw\n WHERE    created_at_date >= '2019-12-22'\n AND      created_at_date < '2020-01-01'"
      }
    },
    {
      "name": "after_purchases",
      "inputs": [
        "credential_keys",
        "after_purchases_raw",
        "catalog_purchases_filtered"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null"
      }
    },
    {
      "name": "reformat_purchases",
      "inputs": [
        "card_merchants",
        "after_purchases"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      after_purchases a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number"
      }
    },
    {
      "name": "purchases",
      "inputs": [
        "reformat_purchases"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n  SELECT    business_id,\n            credential_key,\n            authorization_number,\n            masked_card_number,\n            amount,\n            purchased_at,\n            paid_at,\n            MIN(acquirer_name) AS acquirer_name,\n            MIN(base_fee) AS base_fee,\n            MIN(card_number) AS card_number,\n            MIN(card_type) AS card_type,\n            MIN(etc_fee) AS etc_fee,\n            MIN(fee) AS fee,\n            MIN(issuer_name) AS issuer_name,\n            MIN(merchant_number) AS merchant_number,\n            MIN(payment) AS payment,\n            MIN(point_fee) AS point_fee,\n            MIN(purchase_delayed) AS purchase_delayed,\n            MIN(scraping_type) AS scraping_type,\n            MIN(transacted_at) AS transacted_at,\n            MIN(vat_fee) AS vat_fee,\n            MIN(created_at) AS created_at,\n            MIN(updated_at) AS updated_at,\n            MIN(created_at_date) AS created_at_date\n  FROM      reformat_purchases\n  GROUP BY  1, 2, 3, 4, 5, 6, 7\n)"
      }
    },
    {
      "name": "current_purchases",
      "inputs": [
        "purchases",
        "prev_purchases"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT    c.*\nFROM      purchases c LEFT ANTI JOIN prev_purchases p\nON        (\n  p.business_id = c.business_id AND\n  p.authorization_number = c.authorization_number AND\n  p.masked_card_number = c.masked_card_number AND\n  p.amount = c.amount AND\n  p.purchased_at = c.purchased_at AND\n  p.paid_at = c.paid_at AND\n  p.credential_key = c.credential_key\n)"
      }
    },
    {
      "name": "merged_purchases",
      "inputs": [
        "current_purchases"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, transacted_at, masked_card_number, amount\n              ORDER BY purchased_at DESC, authorization_number\n          ) AS purchase_cancel_seq,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), authorization_number, masked_card_number, amount\n              ORDER BY purchased_at ASC\n          ) AS purchase_seq,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      current_purchases"
      }
    },
    {
      "name": "prev_payments",
      "inputs": [
        "prev_payments_raw"
      ],
      "type": "sql",
      "options": {
        "sql": " SELECT   *\n FROM     prev_payments_raw\n WHERE    created_at_date >= '2019-12-15'\n AND      created_at_date < '2019-12-22'"
      }
    },
    {
      "name": "catalog_payments_filtered",
      "inputs": [
        "catalog_payments_raw"
      ],
      "type": "sql",
      "options": {
        "sql": " SELECT   *\n FROM     catalog_payments_raw\n WHERE    created_at_date >= '2019-12-22'\n AND      created_at_date < '2020-01-01'"
      }
    },
    {
      "name": "after_payments",
      "inputs": [
        "credential_keys",
        "after_payments_raw",
        "catalog_payments_filtered"
      ],
      "type": "sql",
      "options": {
        "sql": "  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n\n  UNION ALL\n\n  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          trim(IF (stlbanknm = '', null, replace(stlbanknm, '은행', ''))) AS bank_name,\n          trim(stlacctno) AS account_number,\n          CAST(pcacnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvamt AS BIGINT) AS reserved_amount,\n          CAST(etcamt AS BIGINT) AS etc_amount,\n          CAST(pcaamt AS BIGINT) AS sales_amount,\n          CAST(rcpscdamt AS BIGINT) AS received_amount,\n          CAST(vatfeeamt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymdate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n  FROM    catalog_payments_filtered a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id"
      }
    },
    {
      "name": "reformat_payments",
      "inputs": [
        "after_payments"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT    *\nFROM      (\n  SELECT * FROM after_payments\n)\nWHERE     business_id is not null\nAND       merchant_number is not null\nAND       bank_name is not null\nAND       received_at is not null"
      }
    },
    {
      "name": "payments",
      "inputs": [
        "reformat_payments"
      ],
      "type": "sql",
      "options": {
        "sql": "  SELECT  business_id,\n          credential_key,\n          merchant_number,\n          bank_name,\n          received_at,\n          MIN(issuer_name) AS issuer_name,\n          MIN(account_number) AS account_number,\n          MIN(sales_count) AS sales_count,\n          MIN(scraping_type) AS scraping_type,\n          MIN(reserved_amount) AS reserved_amount,\n          MIN(etc_amount) AS etc_amount,\n          MIN(sales_amount) AS sales_amount,\n          MIN(received_amount) AS received_amount,\n          MIN(vat_fee_amount) AS vat_fee_amount,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(date_format(created_at, 'yyyy-MM-dd')) AS created_at_date\n  FROM    reformat_payments\n  GROUP BY business_id, credential_key, merchant_number, bank_name, received_at"
      }
    },
    {
      "name": "merged_payments",
      "inputs": [
        "payments",
        "prev_payments"
      ],
      "type": "sql",
      "options": {
        "sql": "SELECT    c.*\nFROM      payments c LEFT ANTI JOIN prev_payments p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.merchant_number = c.merchant_number AND\n  p.bank_name = c.bank_name AND\n  p.received_at = c.received_at AND\n  p.credential_key = c.credential_key\n)"
      }
    }
  ],
  "sink": [
    {
      "inputs": [
        "merged_approvals"
      ],
      "name": "approvals_sink",
      "options": {
        "mode": "overwritePartitions",
        "path": "s3://kcd-de-production/raw/etl/snowdon/card_sales/approvals",
        "format": "parquet",
        "class": "com.kcd.thrush.jobs.tasks.EvenPartitionFileSink",
        "partitions": "created_at_date",
        "evenPartitions": "true",
        "numOfRecordPerFile": "4000000",
        "sampleRatio": "0.1",
        "checkpoint": "false"
      },
      "type": "custom"
    },
    {
      "inputs": [
        "merged_purchases"
      ],
      "name": "purchases_sink",
      "options": {
        "mode": "overwritePartitions",
        "path": "s3://kcd-de-production/raw/etl/snowdon/card_sales/purchases",
        "format": "parquet",
        "class": "com.kcd.thrush.jobs.tasks.EvenPartitionFileSink",
        "partitions": "created_at_date",
        "evenPartitions": "true",
        "numOfRecordPerFile": "4000000",
        "sampleRatio": "0.1",
        "checkpoint": "false"
      },
      "type": "custom"
    },
    {
      "inputs": [
        "merged_payments"
      ],
      "name": "payments_sink",
      "options": {
        "mode": "overwritePartitions",
        "path": "s3://kcd-de-production/raw/etl/snowdon/card_sales/payments",
        "format": "parquet",
        "class": "com.kcd.thrush.jobs.tasks.EvenPartitionFileSink",
        "partitions": "created_at_date",
        "evenPartitions": "true",
        "numOfRecordPerFile": "4000000",
        "sampleRatio": "0.1",
        "checkpoint": "false"
      },
      "type": "custom"
    }
  ]
}
