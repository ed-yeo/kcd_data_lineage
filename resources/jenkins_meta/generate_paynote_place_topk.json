{
  "name": "paynote_place_topk",
  "udfs": [],
  "source": [
    {
      "inputs": [],
      "name": "paynote_location_mapping",
      "options": {
        "format": "csv",
        "read": "{\"header\":\"true\",\"delimiter\":\"\\\\t\"}",
        "paths": "s3://kcd-de-production/data_sources/lookup/subject=paynote/paynote_location_mapping.tsv"
      },
      "type": "file"
    },
    {
      "inputs": [],
      "name": "registration_number_meta",
      "options": {
        "format": "parquet",
        "paths": "s3://kcd-de-production/data_cubes/dimension/name=registration_number_meta"
      },
      "type": "file"
    }
  ],
  "process": [
    {
      "inputs": [
        "registration_number_meta"
      ],
      "name": "filtered_business",
      "options": {
        "sql": "SELECT\n        registration_number,\n        places.name,\n\n        location.full_address,\n        location.b_code,\n        location.sigungu_code,\n        location.sido_code,\n\n        CONCAT(classification.depth_1_name, '>', classification.depth_2_name, '>', classification.depth_3_name) AS classification_full_name,\n\n        places.reviews.total_review_cnt AS place_review_cnt,\n        places.reviews.total_avg_rating AS place_avg_rating,\n\n        cardsales.cashnote.amount_sum AS cashnote_amount_sum,\n        cardsales.cashnote.tx_count AS cashnote_tx_count,\n        cardsales.paynote_age_band_gender.total_amount_sum AS paynote_amount_sum,\n        cardsales.paynote_age_band_gender.total_tx_count AS paynote_tx_count,\n        cardsales.paynote_age_band_gender.stats AS age_band_gender_stats,\n        cardsales.paynote_age_band.stats AS age_band_stats,\n        cardsales.paynote_gender.stats AS gender_stats\nFROM   registration_number_meta\nWHERE  businesses.merchant_size <= 8\nAND    businesses.is_paynote_business = true\nAND    classification.depth_1_code = 'D'\nAND    classification.depth_2_code != 'D13'"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "filtered_business",
        "paynote_location_mapping"
      ],
      "name": "filtered_business_with_paynote_location",
      "options": {
        "sql": "SELECT meta.*,\n       paynote_location_mapping.depth_1_code AS paynote_location_depth_1_code,\n       paynote_location_mapping.depth_2_code AS paynote_location_depth_2_code\nFROM (\n        SELECT\n                *,\n                array(b_code, sigungu_code, sido_code) AS location_codes\n        FROM   filtered_business\n) AS meta\nJOIN paynote_location_mapping\nON array_contains(meta.location_codes, paynote_location_mapping.location_code)"
      },
      "type": "sql",
      "cache": true
    },
    {
      "inputs": [
        "filtered_business_with_paynote_location"
      ],
      "name": "location_topk",
      "options": {
        "sql": "SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score,\n        c_tx_score,\n        c_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location', 'key', paynote_location_depth_1_code),\n                            named_struct('type', 'location', 'key', paynote_location_depth_2_code)\n                        ) AS partitions,\n                        *,\n                        format_number((paynote_tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((paynote_amount_sum / max_p_am_score) * 10000, 4) AS p_am_score,\n                        format_number((cashnote_tx_count / max_c_tx_score) * 10000, 4) AS c_tx_score,\n                        format_number((cashnote_amount_sum / max_c_am_score) * 10000, 4) AS c_am_score\n                FROM   filtered_business_with_paynote_location\n                CROSS JOIN (\n                        SELECT\n                                max(paynote_tx_count) AS max_p_tx_score,\n                                max(paynote_amount_sum) AS max_p_am_score,\n                                max(cashnote_tx_count) AS max_c_tx_score,\n                                max(cashnote_amount_sum) AS max_c_am_score\n                        FROM   filtered_business_with_paynote_location\n                ) AS max_values\n                ON 1 = 1\n        )\n)"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "filtered_business_with_paynote_location"
      ],
      "name": "location_gender_topk",
      "options": {
        "sql": "SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location_gender', 'key', CONCAT(paynote_location_depth_1_code, '_', b.key)),\n                            named_struct('type', 'location_gender', 'key', CONCAT(paynote_location_depth_2_code, '_', b.key))\n                        ) AS partitions,\n                        *,\n                        format_number((b.values.tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((b.values.amount_sum / max_p_am_score) * 10000, 4) AS p_am_score\n                FROM  (\n                    SELECT\n                            stats.*, *\n                    FROM (\n                        SELECT explode(gender_stats) AS stats, *\n                        FROM   filtered_business_with_paynote_location\n                    )\n                ) AS b\n                JOIN (\n                    SELECT\n                            stats.key,\n                            max(stats.values.tx_count) AS max_p_tx_score,\n                            max(stats.values.amount_sum) AS max_p_am_score\n                    FROM (\n                            SELECT explode(gender_stats) AS stats\n                            FROM   filtered_business_with_paynote_location\n                    )\n                    WHERE stats.key is not null\n                    GROUP BY stats.key\n                ) AS max_values\n                ON b.key = max_values.key\n        )\n)"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "filtered_business_with_paynote_location"
      ],
      "name": "location_age_band_topk",
      "options": {
        "sql": "SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location_age_band', 'key', CONCAT(paynote_location_depth_1_code, '_', b.key)),\n                            named_struct('type', 'location_age_band', 'key', CONCAT(paynote_location_depth_2_code, '_', b.key))\n                        ) AS partitions,\n                        *,\n                        format_number((b.values.tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((b.values.amount_sum / max_p_am_score) * 10000, 4) AS p_am_score\n                FROM  (\n                    SELECT\n                            stats.*, *\n                    FROM (\n                        SELECT explode(age_band_stats) AS stats, *\n                        FROM   filtered_business_with_paynote_location\n                    )\n                ) AS b\n                JOIN (\n                    SELECT\n                            stats.key,\n                            max(stats.values.tx_count) AS max_p_tx_score,\n                            max(stats.values.amount_sum) AS max_p_am_score\n                    FROM (\n                            SELECT explode(age_band_stats) AS stats\n                            FROM   filtered_business_with_paynote_location\n                    )\n                    WHERE stats.key is not null\n                    AND stats.key != 'none'\n                    GROUP BY stats.key\n                ) AS max_values\n                ON b.key = max_values.key\n        )\n)"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "filtered_business_with_paynote_location"
      ],
      "name": "location_age_band_gender_topk",
      "options": {
        "sql": "SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location_age_band_gender', 'key', CONCAT(paynote_location_depth_1_code, '_', b.key)),\n                            named_struct('type', 'location_age_band_gender', 'key', CONCAT(paynote_location_depth_2_code, '_', b.key))\n                        ) AS partitions,\n                        *,\n                        format_number((b.values.tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((b.values.amount_sum / max_p_am_score) * 10000, 4) AS p_am_score\n                FROM  (\n                    SELECT\n                            stats.*, *\n                    FROM (\n                        SELECT explode(age_band_gender_stats) AS stats, *\n                        FROM   filtered_business_with_paynote_location\n                    )\n                ) AS b\n                JOIN (\n                    SELECT\n                            stats.key,\n                            max(stats.values.tx_count) AS max_p_tx_score,\n                            max(stats.values.amount_sum) AS max_p_am_score\n                    FROM (\n                            SELECT explode(age_band_gender_stats) AS stats\n                            FROM   filtered_business_with_paynote_location\n                    )\n                    WHERE stats.key is not null\n                    GROUP BY stats.key\n                ) AS max_values\n                ON b.key = max_values.key\n        )\n)"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "filtered_business_with_paynote_location"
      ],
      "name": "location_review_topk",
      "options": {
        "sql": "SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        review_score\nFROM (\n        SELECT explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                              named_struct('type', 'location_review', 'key', paynote_location_depth_1_code),\n                              named_struct('type', 'location_review', 'key', paynote_location_depth_2_code)\n                        ) AS partitions,\n                        *,\n                        CAST(\n                            format_number((place_review_cnt / max_review_cnt) * 100 * nvl(place_avg_rating, 2.5), 4)\n                            AS DOUBLE\n                        ) AS review_score\n                FROM (\n                        SELECT *\n                        FROM filtered_business_with_paynote_location\n                        WHERE place_review_cnt is not null\n                        AND place_review_cnt > 5\n                ) AS b\n                CROSS JOIN (\n                        SELECT\n                                max(place_review_cnt) AS max_review_cnt\n                        FROM  filtered_business_with_paynote_location\n                        WHERE place_review_cnt is not null\n                        AND place_review_cnt > 5\n                ) AS max_values\n                ON 1 = 1\n        )\n)"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "location_topk",
        "location_gender_topk",
        "location_age_band_topk",
        "location_age_band_gender_topk",
        "location_review_topk"
      ],
      "name": "merged_topk",
      "options": {
        "sql": "SELECT\n        unix_timestamp() * 1000 AS timestamp,\n        key AS `from`,\n        registration_number AS to,\n        'paynote_place_topk' AS label,\n        to_json(named_struct(\n            'type', type,\n            'name', name,\n            'address', full_address,\n            'classification_name', classification_full_name,\n            'p_tx_score', CAST(p_tx_score AS DOUBLE),\n            'p_am_score', CAST(p_am_score AS DOUBLE),\n            'c_tx_score', CAST(c_tx_score AS DOUBLE),\n            'c_am_score', CAST(c_am_score AS DOUBLE),\n            'review_score', CAST(review_score AS DOUBLE)\n        )) AS props\nFROM (\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              c_tx_score,\n              c_am_score,\n              null AS review_score\n    FROM      location_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM  location_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              null AS p_tx_score,\n              null AS p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              review_score\n    FROM      location_review_topk\n)\nWHERE key is not null"
      },
      "type": "sql"
    }
  ],
  "sink": [
    {
      "inputs": [
        "merged_topk"
      ],
      "name": "file_sink",
      "options": {
        "format": "parquet",
        "mode": "overwrite",
        "path": "s3://kcd-de-production/raw/etl/bulkload/paynote_place_topk"
      },
      "type": "file"
    }
  ]
}
