{
  "name": "store_info_sink",
  "udfs": [],
  "source": [
    {
      "inputs": [],
      "name": "user_tags_aggr",
      "options": {
        "format": "parquet",
        "paths": "s3://kcd-de-production/service/market_area/analysis/user_tags_aggr"
      },
      "type": "file"
    },
    {
      "inputs": [],
      "name": "snapshot_business_stat",
      "options": {
        "format": "parquet",
        "paths": "s3://kcd-de-production/service/market_area/analysis/snapshot_business_stat"
      },
      "type": "file"
    },
    {
      "inputs": [],
      "name": "cohort",
      "options": {
        "format": "parquet",
        "paths": "s3://kcd-de-production/service/market_area/analysis/cohort"
      },
      "type": "file"
    },
    {
      "inputs": [],
      "name": "business_meta",
      "options": {
        "format": "parquet",
        "paths": "s3://kcd-de-production/data_cubes/dimension/name=business_meta"
      },
      "type": "file"
    }
  ],
  "process": [
    {
      "inputs": [
        "user_tags_aggr"
      ],
      "name": "store_tag_status",
      "options": {
        "sql": "SELECT  business_id, collect_list(struct(tag, visitors_count)) AS tag_status\nFROM (\n    SELECT  business_id,\n            IF(tag = 'C_AVG', 'C', tag) AS tag,\n            IF(visitors_count is null, 0, visitors_count) AS visitors_count\n    FROM    user_tags_aggr\n    WHERE   type = '12_month'\n    AND     tag != 'C'\n)\nGROUP BY business_id"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "user_tags_aggr"
      ],
      "name": "store_tag_trend",
      "options": {
        "sql": "SELECT\n      business_id, collect_list(struct(tag, monthly_visitor_count)) AS tag_trend\nFROM (\n  SELECT business_id, tag, collect_list(\n                                  struct(\n                                       date_format(month, 'yyyy-MM') AS date_month,\n                                       visitors_count\n                          )) AS monthly_visitor_count\n  FROM (\n          SELECT    business_id,\n                    month,\n                    IF(tag = 'C_AVG', 'C', tag) AS tag,\n                    IF(visitors_count is null, 0, visitors_count) AS visitors_count\n          FROM      user_tags_aggr\n          WHERE     type = 'month'\n          AND       tag != 'C'\n  )\n  GROUP BY business_id, tag\n)\nGROUP BY business_id"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "cohort"
      ],
      "name": "store_cohort_trend",
      "options": {
        "sql": "SELECT business_id, collect_list(cohort) AS cohorts\nFROM (\n        SELECT\n                business_id,\n                struct(\n                    date_format(start_date, 'yyyy-MM-dd') AS start_date,\n                    date_format(end_date, 'yyyy-MM-dd') AS end_date,\n                    user_count,\n                    user_type\n                ) AS cohort\n        FROM cohort\n)\nGROUP BY business_id"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "snapshot_business_stat"
      ],
      "name": "visit_user_status",
      "options": {
        "sql": "SELECT\n        business_id,\n        collect_list(named_struct('user_type', user_type, 'value', sales_amount)) AS visit_user_sales_amount_status,\n        collect_list(named_struct('user_type', user_type, 'value', user_count)) AS visit_user_user_count_status,\n        collect_list(named_struct('user_type', user_type, 'value', unit_price)) AS visit_user_unit_price_status\nFROM (\n        SELECT  business_id,\n                CASE\n                    WHEN visit_count = '1회' THEN 'new'\n                    WHEN visit_count = '2회' THEN 'visit_2'\n                    WHEN visit_count = '3~9회' THEN 'visit_3_9'\n                    WHEN visit_count = '10회이상' THEN 'visit_10_more'\n                    ELSE 'etc'\n                END AS user_type,\n                total_amount AS sales_amount,\n                total_card_numbers AS user_count,\n                (total_amount / total_transaction_count) AS unit_price\n        FROM  snapshot_business_stat\n        WHERE type = '12_month'\n)\nGROUP BY business_id"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "snapshot_business_stat"
      ],
      "name": "visit_user_trend",
      "options": {
        "sql": "SELECT\n        business_id,\n        collect_list(named_struct('user_type', user_type, 'monthly_trend', sales_amount_trend)) AS visit_user_sales_amount_trend,\n        collect_list(named_struct('user_type', user_type, 'monthly_trend', user_count_trend)) AS visit_user_user_count_trend,\n        collect_list(named_struct('user_type', user_type, 'monthly_trend', unit_price_tend)) AS visit_user_unit_price_trend\nFROM (\n        SELECT\n                business_id,\n                user_type,\n                collect_list(named_struct('date_month', date_month, 'value', sales_amount)) AS sales_amount_trend,\n                collect_list(named_struct('date_month', date_month, 'value', user_count)) AS user_count_trend,\n                collect_list(named_struct('date_month', date_month, 'value', unit_price)) AS unit_price_tend\n        FROM (\n                SELECT  business_id,\n                        CASE\n                            WHEN visit_count = '1회' THEN 'new'\n                            WHEN visit_count = '2회' THEN 'visit_2'\n                            WHEN visit_count = '3~9회' THEN 'visit_3_9'\n                            WHEN visit_count = '10회이상' THEN 'visit_10_more'\n                            ELSE 'etc'\n                        END AS user_type,\n                        date_format(month, 'yyyy-MM') AS date_month,\n                        total_amount AS sales_amount,\n                        total_card_numbers AS user_count,\n                        (total_amount / total_transaction_count) AS unit_price\n                FROM  snapshot_business_stat\n                WHERE type = 'month'\n\n        )\n        GROUP BY business_id, user_type\n)\nGROUP BY business_id"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "business_meta",
        "store_tag_status",
        "store_tag_trend",
        "store_cohort_trend",
        "visit_user_trend",
        "visit_user_status"
      ],
      "name": "merge",
      "options": {
        "class": "com.kcd.thrush.dmp.spark.MergeSchemaProcess",
        "joinColumns": "business_id",
        "joinType": "full_outer"
      },
      "type": "custom"
    },
    {
      "inputs": [
        "merge"
      ],
      "name": "store_info",
      "options": {
        "sql": "SELECT\n        business_id,\n        business_meta.businesses.businesses.public_id,\n        business_meta.businesses.businesses.business_name AS name,\n        business_meta.classification.market_area AS classification,\n        business_meta.location.common AS address,\n        store_tag_status.tag_status,\n        store_tag_trend.tag_trend,\n        store_cohort_trend.cohorts,\n        visit_user_status.visit_user_sales_amount_status,\n        visit_user_status.visit_user_user_count_status,\n        visit_user_status.visit_user_unit_price_status,\n        visit_user_trend.visit_user_sales_amount_trend,\n        visit_user_trend.visit_user_user_count_trend,\n        visit_user_trend.visit_user_unit_price_trend\nFROM    merge"
      },
      "type": "sql"
    }
  ],
  "sink": [
    {
      "inputs": [
        "store_info"
      ],
      "name": "file_sink",
      "options": {
        "format": "parquet",
        "mode": "overwrite",
        "path": "s3://kcd-de-production/service/market_area/store_info"
      },
      "type": "file"
    }
  ]
}
