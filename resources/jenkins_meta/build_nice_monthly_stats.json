{
  "name": "build_nice_monthly_stats",
  "udfs": [],
  "source": [
    {
      "inputs": [],
      "name": "last_sent_businesses",
      "options": {
        "paths": "s3://kcd-de-staging/work/ryan/nice_monthly/2020-12-01/business_meta_with_status",
        "format": "parquet"
      },
      "type": "file"
    },
    {
      "inputs": [],
      "name": "business_meta",
      "options": {
        "paths": "s3://kcd-de-production/data_cubes/dimension/name=business_meta",
        "format": "parquet"
      },
      "type": "file"
    },
    {
      "inputs": [],
      "name": "transactions_stat_with_meta",
      "options": {
        "format": "parquet",
        "paths": "s3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta"
      },
      "type": "file"
    },
    {
      "inputs": [],
      "name": "hometax_stat",
      "options": {
        "format": "parquet",
        "paths": "s3://kcd-de-staging/work/ryan/raw/stat/snowdon/hometax/hometax_stat"
      },
      "type": "file"
    }
  ],
  "process": [
    {
      "inputs": [
        "last_sent_businesses",
        "business_meta"
      ],
      "name": "business_meta_with_status",
      "options": {
        "sql": "SELECT  DISTINCT\n        business_id,\n        registration_number,\n        registration_code,\n        status_code\nFROM\n(\n      SELECT  COALESCE(b.business_id, l.business_id) AS business_id,\n              COALESCE(b.registration_number, l.registration_number) AS registration_number,\n              COALESCE(b.registration_code, '7') AS registration_code,\n              CASE\n                WHEN b.crefia_registered AND b.hometax_registered THEN '00'\n                WHEN b.crefia_registered AND NOT b.hometax_registered THEN '01'\n                WHEN NOT b.crefia_registered AND b.hometax_registered THEN '02'\n                ELSE '03'\n              END AS status_code\n      FROM    (\n              SELECT  business_id,\n                      businesses.businesses.registration_number,\n                      IF(businesses.businesses.created_at >= '2020-12-01', '1', '3') AS registration_code,\n                      (\n                        array_contains(businesses.credentials.types, 'Crefia')\n                        OR array_contains(businesses.credentials.types, 'CrefiaBusiness')\n                      ) AS crefia_registered,\n                      (\n                        array_contains(businesses.credentials.types, 'HometaxLogin')\n                        OR array_contains(businesses.credentials.types, 'HometaxCertificate')\n                      ) AS hometax_registered\n              FROM    business_meta\n      ) b FULL OUTER JOIN (\n              SELECT   business_id,\n                       registration_number\n              FROM     last_sent_businesses\n              WHERE    registration_code != '7'\n      ) l ON b.registration_number = l.registration_number\n) t\nWHERE   t.business_id IS NOT NULL\nAND     t.registration_number IS NOT NULL"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "business_meta_with_status",
        "transactions_stat_with_meta"
      ],
      "name": "businesses_monthly_stats",
      "options": {
        "sql": "SELECT  meta.*,\n        stats.location_meta,\n        stats.classification_meta,\n        stats.3_month_avg_card_sales_amount,\n        stats.3_month_sum_card_sales_amount,\n        stats.3_month_sum_returning_count,\n        stats.3_month_sum_card_sales_count,\n        stats.3_month_avg_card_sales_count,\n        stats.6_month_sum_card_sales_amount,\n        stats.6_month_avg_card_sales_amount,\n        stats.6_month_sum_returning_count,\n        stats.6_month_sum_card_sales_count,\n        stats.6_month_avg_card_sales_count,\n        stats.12_month_avg_returning_count,\n        stats.before_6_month_sum_card_sales_amount,\n        stats.before_6_month_avg_card_sales_amount,\n        stats.before_6_month_sum_card_sales_count,\n        stats.before_6_month_avg_card_sales_count,\n        stats.last_year_3_month_avg_card_sales_amount,\n        stats.last_year_6_month_avg_card_sales_count,\n        CONCAT_WS('_', stats.location_meta.sido, stats.location_meta.sigungu, stats.location_meta.dong) AS address,\n        CONCAT_WS('_', stats.classification_meta.depth_1_name, stats.classification_meta.depth_2_name, stats.classification_meta.depth_3_name) AS classification,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -3), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -6), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 12_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -7), 'yyyyMMdd')) AS before_6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -15), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -18), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_6_month\nFROM (\n    SELECT  business_id,\n            MAX(location) as location_meta,\n            MAX(classification) as classification_meta,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) AS 3_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), returning_count, 0)) AS 3_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) AS 3_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) AS 6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), returning_count, 0)) AS 6_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) AS 6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -12), returning_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12), 1, 0)) AS 12_month_avg_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) AS before_6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) AS before_6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_6_month_avg_card_sales_count\n    FROM    transactions_stat_with_meta\n    WHERE   time_unit = 'month'\n    AND     time < '2021-01-01'\n    GROUP BY 1\n)   stats RIGHT OUTER JOIN business_meta_with_status meta\nON  stats.business_id = meta.business_id"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "businesses_monthly_stats"
      ],
      "name": "address_monthly_stats",
      "options": {
        "sql": "SELECT  address,\n        AVG(3_month_sum_card_sales_count) AS address_3_month_avg_card_sales_count\nFROM    businesses_monthly_stats\nWHERE   3_month_sum_card_sales_count > 0\nGROUP BY 1"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "businesses_monthly_stats"
      ],
      "name": "classification_monthly_stats",
      "options": {
        "sql": "SELECT  classification,\n        AVG(6_month_sum_card_sales_amount) AS classification_6_month_avg_card_sales_amount,\n        AVG(6_month_sum_card_sales_count) AS classification_6_month_avg_card_sales_count\nFROM    businesses_monthly_stats\nWHERE   6_month_sum_card_sales_count > 0\nGROUP BY 1"
      },
      "type": "sql"
    },
    {
      "inputs": [
        "hometax_stat"
      ],
      "name": "hometax_sales_monthly_stat",
      "options": {
        "sql": "SELECT  business_id,\n        (\n          SUM(IF (time >= add_months('2021-01-01', -3), hometax_sales_invoices_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -3), hometax_sales_cash_receipts_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -3), hometax_sales_card_transactions_amount, 0))\n        ) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_hometax_sales_amount,\n        (\n          SUM(IF (time >= add_months('2021-01-01', -12), hometax_sales_invoices_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -12), hometax_sales_cash_receipts_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -12), hometax_sales_card_transactions_amount, 0))\n        ) / SUM(IF (time >= add_months('2021-01-01', -12), 1, 0)) AS 12_month_avg_hometax_sales_amount\nFROM    hometax_stat\nWHERE   time_unit = 'month'\nAND     time < '2021-01-01'\nGROUP BY 1"
      },
      "type": "sql"
    }
  ],
  "sink": [
    {
      "inputs": [
        "business_meta_with_status"
      ],
      "name": "file_sink",
      "options": {
        "format": "parquet",
        "mode": "overwrite",
        "path": "s3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/business_meta_with_status"
      },
      "type": "file"
    },
    {
      "inputs": [
        "businesses_monthly_stats"
      ],
      "name": "file_sink",
      "options": {
        "format": "parquet",
        "mode": "overwrite",
        "path": "s3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats"
      },
      "type": "file"
    },
    {
      "inputs": [
        "address_monthly_stats"
      ],
      "name": "file_sink",
      "options": {
        "format": "parquet",
        "mode": "overwrite",
        "path": "s3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats"
      },
      "type": "file"
    },
    {
      "inputs": [
        "classification_monthly_stats"
      ],
      "name": "file_sink",
      "options": {
        "format": "parquet",
        "mode": "overwrite",
        "path": "s3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats"
      },
      "type": "file"
    },
    {
      "inputs": [
        "hometax_sales_monthly_stat"
      ],
      "name": "file_sink",
      "options": {
        "format": "parquet",
        "mode": "overwrite",
        "path": "s3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat"
      },
      "type": "file"
    }
  ]
}
