,source,sink,filename,jobname,src_attr,sink_attr
0,s3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/purchases,process:::purchases_with_sequence:::purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'add_seq_on_purchases.json', 'options': {'paths': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/purchases', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'add_seq_on_purchases.json', 'options': {'sql': '  SELECT    acquirer_name,\n            amount,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            etc_fee,\n            fee,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_delayed,\n            row_number() OVER (\n                PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, amount\n                ORDER BY purchased_at DESC, authorization_number\n            ) AS purchase_cancel_seq,\n            row_number() OVER (\n                PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), authorization_number, masked_card_number, amount\n                ORDER BY purchased_at ASC\n            ) AS purchase_seq,\n            purchased_at,\n            scraping_type,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\n  FROM      purchases'}, 'role': 'process', 'type': 'sql'}]"
1,process:::purchases_with_sequence:::purchases,purchases_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'add_seq_on_purchases.json', 'options': {'sql': '  SELECT    acquirer_name,\n            amount,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            etc_fee,\n            fee,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_delayed,\n            row_number() OVER (\n                PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, amount\n                ORDER BY purchased_at DESC, authorization_number\n            ) AS purchase_cancel_seq,\n            row_number() OVER (\n                PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), authorization_number, masked_card_number, amount\n                ORDER BY purchased_at ASC\n            ) AS purchase_seq,\n            purchased_at,\n            scraping_type,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\n  FROM      purchases'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'add_seq_on_purchases.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '2000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'staging_build_raw_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}]"
2,jdbc:businesses,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]"
3,jdbc:businesses,process:::businesses_info:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'daily_reports.json', 'options': {'sql': 'SELECT    businesses.id,\n          businesses.name AS report_business_name,\n          NVL(c.has_delivery_app_credentials, false) AS has_delivery_app_credentials,\n          NVL(c.has_baemin_credential, false) AS has_baemin_credential,\n          NVL(c.has_yogiyo_credential, false) AS has_yogiyo_credential,\n          NVL(c.has_baedaltong_credential, false) AS has_baedaltong_credential,\n          NVL(c.has_hometax_credentials, false) AS has_hometax_credentials\nFROM businesses\nLEFT OUTER JOIN (\n    SELECT\n            business_id,\n            IF(size(delivery_app_credentials) > 0, true, false) AS has_delivery_app_credentials,\n            IF(array_contains(delivery_app_credentials, \'baemin\'), true, false) AS has_baemin_credential,\n            IF(array_contains(delivery_app_credentials, \'yogiyo\'), true, false) AS has_yogiyo_credential,\n            IF(array_contains(delivery_app_credentials, \'baedaltong\'), true, false) AS has_baedaltong_credential,\n            IF(size(hometax_credentials) > 0, true, false) AS has_hometax_credentials\n\n    FROM (\n        SELECT  business_id,\n                collect_list(hometax_credential) AS hometax_credentials,\n                collect_list(delivery_app_credential) AS delivery_app_credentials\n        FROM (\n            SELECT  credentials.business_id,\n                    IF(\n                        credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS hometax_credential,\n                    IF(\n                        credentials.type not in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS delivery_app_credential\n            FROM credentials\n            JOIN scrapings\n            ON scrapings.credential_id = credentials.id\n            where credentials.status = 1\n            AND scrapings.status = 1\n            AND (\n                scrapings.tag in (\'BaeminShop\', \'YogiyoShop\', \'BaedaltongShop\') OR\n                credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\')\n            )\n        )\n        GROUP BY business_id\n    )\n) AS c\nON businesses.id = c.business_id'}, 'role': 'process', 'type': 'sql'}]"
4,jdbc:businesses,process:::current_approvals:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals_dedup a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
5,jdbc:businesses,process:::merged_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
6,jdbc:business_days,s3://kcd-de-production/raw/db/snowdon/snapshot/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'business_days', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'business_days', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/business_days'}, 'role': 'sink', 'type': 'file'}, {'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/business_days'}, 'role': 'sink', 'type': 'file'}]"
7,jdbc:iamport_customers,s3://kcd-de-production/raw/db/snowdon/snapshot/iamport_customers,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'iamport_customers', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'false'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/iamport_customers'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/iamport_customers'}, 'role': 'source', 'type': 'file'}]"
8,jdbc:credentials,s3://kcd-de-production/raw/db/snowdon/snapshot/credentials,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credentials'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credentials'}, 'role': 'source', 'type': 'file'}]"
9,jdbc:credentials,process:::transactions:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-28', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-28', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-01', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-01', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}]"
10,jdbc:credentials,process:::crefia_credential:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT business_id, collect_set(c)[0] AS confirmed\nFROM (\n    SELECT  business_id, IF(status = 1, true, false) AS c\n    FROM credentials\n    WHERE type in ('Credentials::CrefiaBusiness', 'Credentials::Crefia')\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]"
11,jdbc:credentials,process:::businesses_info:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'daily_reports.json', 'options': {'sql': 'SELECT    businesses.id,\n          businesses.name AS report_business_name,\n          NVL(c.has_delivery_app_credentials, false) AS has_delivery_app_credentials,\n          NVL(c.has_baemin_credential, false) AS has_baemin_credential,\n          NVL(c.has_yogiyo_credential, false) AS has_yogiyo_credential,\n          NVL(c.has_baedaltong_credential, false) AS has_baedaltong_credential,\n          NVL(c.has_hometax_credentials, false) AS has_hometax_credentials\nFROM businesses\nLEFT OUTER JOIN (\n    SELECT\n            business_id,\n            IF(size(delivery_app_credentials) > 0, true, false) AS has_delivery_app_credentials,\n            IF(array_contains(delivery_app_credentials, \'baemin\'), true, false) AS has_baemin_credential,\n            IF(array_contains(delivery_app_credentials, \'yogiyo\'), true, false) AS has_yogiyo_credential,\n            IF(array_contains(delivery_app_credentials, \'baedaltong\'), true, false) AS has_baedaltong_credential,\n            IF(size(hometax_credentials) > 0, true, false) AS has_hometax_credentials\n\n    FROM (\n        SELECT  business_id,\n                collect_list(hometax_credential) AS hometax_credentials,\n                collect_list(delivery_app_credential) AS delivery_app_credentials\n        FROM (\n            SELECT  credentials.business_id,\n                    IF(\n                        credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS hometax_credential,\n                    IF(\n                        credentials.type not in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS delivery_app_credential\n            FROM credentials\n            JOIN scrapings\n            ON scrapings.credential_id = credentials.id\n            where credentials.status = 1\n            AND scrapings.status = 1\n            AND (\n                scrapings.tag in (\'BaeminShop\', \'YogiyoShop\', \'BaedaltongShop\') OR\n                credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\')\n            )\n        )\n        GROUP BY business_id\n    )\n) AS c\nON businesses.id = c.business_id'}, 'role': 'process', 'type': 'sql'}]"
12,jdbc:credentials,process:::transactions:::build_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_stats.json', 'options': {'sql': 'SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )'}, 'role': 'process', 'type': 'sql'}]"
13,jdbc:credentials,process:::transactions:::daily_transaction_type_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credentials', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'daily_transaction_type_stats.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n          t.transacted_at >= '2020-01-01' OR\n          t.purchased_at >= '2020-01-01' OR\n          t.paid_at >= '2020-01-01'\n)\nAND      (\n          t.transacted_at < '2021-12-01' OR\n          t.purchased_at < '2021-12-01' OR\n          t.paid_at < '2021-12-01'\n)""}, 'role': 'process', 'type': 'sql'}]"
14,jdbc:credential_keys,s3://kcd-de-production/raw/db/snowdon/snapshot/credential_keys,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credential_keys'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys'}, 'role': 'source', 'type': 'file'}, {'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]"
15,jdbc:credential_keys,process:::transactions:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-28', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-28', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-01', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-01', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}]"
16,jdbc:credential_keys,process:::current_approvals_raw:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    business_id,\n          credential_key,\n          transacted_at,\n          authorization_number,\n          amount,\n          MIN(acquirer_name) AS acquirer_name,\n          MIN(card_number) AS card_number,\n          MIN(card_type) AS card_type,\n          MIN(encrypted_card_number) AS encrypted_card_number,\n          MIN(installment) AS installment,\n          MIN(issuer_name) AS issuer_name,\n          MIN(masked_card_number) AS masked_card_number,\n          MIN(merchant_number) AS merchant_number,\n          MIN(scraping_type) AS scraping_type,\n          MIN(status) AS status,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(created_at_date) AS created_at_date\nFROM      (\n   SELECT   *, date_format(created_at, 'yyyy-MM-dd') AS created_at_date\n   FROM (\n           SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n                    CAST(authAmt AS int) AS amount,\n                    trim(IF (authNo = '', null, authNo)) AS authorization_number,\n                    CAST(a.business_id AS int) AS business_id,\n                    trim(replace(cardNo, '', '')) AS card_number,\n                    CAST(trim(cardKnd) AS int) AS card_type,\n                    COALESCE(credential_key, k.uuid) AS credential_key,\n                    trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n                    IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n                    trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n                    mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n                    trim(IF (merNo = '', null, merNo)) AS merchant_number,\n                    scraping_type,\n                    IF (authClassNm = '승인', 0, 1) AS status,\n                    to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n                    to_timestamp(\n                     concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n                    ) AS created_at,\n                    to_timestamp(\n                     concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n                    ) AS updated_at\n           FROM     card_sales_approvals_raw a LEFT OUTER JOIN credential_keys k\n           ON       a.business_id = k.business_id\n           WHERE    cardNo is not null\n   )\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null\nGROUP BY  business_id, credential_key, transacted_at, authorization_number, amount"", 'old_sql': ""UNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n FROM     catalog_approvals_raw a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
17,jdbc:credential_keys,process:::current_purchases_raw:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    card_sales_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)"", 'old_sql': ""UNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_raw a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
18,jdbc:credential_keys,s3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/db/ts=09_50/credential_keys,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_card_sales_all.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/db/date_id=2021-01-27/ts=09_50/credential_keys', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
19,jdbc:credential_keys,process:::transactions:::build_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_stats.json', 'options': {'sql': 'SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )'}, 'role': 'process', 'type': 'sql'}]"
20,jdbc:credential_keys,process:::after_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\n\n  UNION ALL\n\n  SELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n            CAST(authamt AS int) AS amount,\n            trim(IF (authno = '', null, authno)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardno, '', '')) AS card_number,\n            CAST(trim(cardknd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n            IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n            trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n            trim(IF (merno = '', null, merno)) AS merchant_number,\n            scraping_type,\n            IF (authclassnm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n            ) AS updated_at,\n            created_at_date\n   FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\n\nUNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at,\n          created_at_date\n FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
21,jdbc:credential_keys,process:::after_purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n      CAST(pcaamt AS int) AS amount,\n      trim(IF (authno = '', null, authno)) AS authorization_number,\n      CAST(basicfee AS int) AS base_fee,\n      CAST(a.business_id AS int) AS business_id,\n      trim(replace(cardno, '-', '')) AS card_number,\n      CAST(trim(cardclss) AS int) AS card_type,\n      COALESCE(credential_key, k.uuid) AS credential_key,\n      CAST(etcfee AS int) AS etc_fee,\n      CAST(fee AS int) AS fee,\n      trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n      mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n      trim(IF (merno = '', null, merno)) AS merchant_number,\n      to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n      CAST(pymamt AS int) AS payment,\n      CAST(pointfee AS int) AS point_fee,\n      to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n      scraping_type,\n      to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n      CAST(vatfee AS int) AS vat_fee,\n      to_timestamp(\n       concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n      ) AS created_at,\n      to_timestamp(\n       concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n      ) AS updated_at,\n      created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
22,jdbc:credential_keys,process:::after_payments:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n\n  UNION ALL\n\n  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          trim(IF (stlbanknm = '', null, replace(stlbanknm, '은행', ''))) AS bank_name,\n          trim(stlacctno) AS account_number,\n          CAST(pcacnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvamt AS BIGINT) AS reserved_amount,\n          CAST(etcamt AS BIGINT) AS etc_amount,\n          CAST(pcaamt AS BIGINT) AS sales_amount,\n          CAST(rcpscdamt AS BIGINT) AS received_amount,\n          CAST(vatfeeamt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymdate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n  FROM    catalog_payments_filtered a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}]"
23,jdbc:credential_keys,process:::transactions:::daily_transaction_type_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'credential_keys', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'daily_transaction_type_stats.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n          t.transacted_at >= '2020-01-01' OR\n          t.purchased_at >= '2020-01-01' OR\n          t.paid_at >= '2020-01-01'\n)\nAND      (\n          t.transacted_at < '2021-12-01' OR\n          t.purchased_at < '2021-12-01' OR\n          t.paid_at < '2021-12-01'\n)""}, 'role': 'process', 'type': 'sql'}]"
24,jdbc:memberships,s3://kcd-de-production/raw/db/snowdon/snapshot/memberships,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'memberships', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/memberships'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}]"
25,jdbc:phones,s3://kcd-de-production/raw/db/snowdon/snapshot/phones,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'phones', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/phones'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/phones'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/phones'}, 'role': 'source', 'type': 'file'}]"
26,jdbc:subscriptions,s3://kcd-de-production/raw/db/snowdon/snapshot/subscriptions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'subscriptions', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/subscriptions'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/subscriptions'}, 'role': 'source', 'type': 'file'}]"
27,jdbc:places,s3://kcd-de-production/raw/db/snowdon/snapshot/places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'places', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'dump_db_goose.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'places', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/places'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}]"
28,jdbc:places,s3://kcd-de-production/raw/db/goose/snapshot/places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'places', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'dump_db_goose.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'places', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'registration_number_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/places'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}]"
29,jdbc:bank_accounts,s3://kcd-de-production/raw/db/snowdon/snapshot/bank_accounts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'bank_accounts', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/bank_accounts'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}]"
30,jdbc:delivery_apps,s3://kcd-de-production/raw/db/snowdon/snapshot/delivery_apps,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'delivery_apps', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/delivery_apps'}, 'role': 'sink', 'type': 'file'}, {'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}]"
31,jdbc:hometax_businesses,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_label_upload.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}]"
32,jdbc:hometax_tax_payments,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_tax_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_tax_payments', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_tax_payments'}, 'role': 'sink', 'type': 'file'}]"
33,jdbc:hometax_tax_notices,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_tax_notices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_tax_notices', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_tax_notices'}, 'role': 'sink', 'type': 'file'}]"
34,jdbc:hometax_tax_refunds,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_tax_refunds,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_tax_refunds', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_tax_refunds'}, 'role': 'sink', 'type': 'file'}]"
35,jdbc:hometax_overdue_taxes,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_overdue_taxes,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_overdue_taxes', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_overdue_taxes'}, 'role': 'sink', 'type': 'file'}]"
36,jdbc:hometax_sales_declarations,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_sales_declarations,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_sales_declarations', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_sales_declarations'}, 'role': 'sink', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_sales_declarations'}, 'role': 'source', 'type': 'file'}]"
37,jdbc:hometax_wht_declarations,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_wht_declarations,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_wht_declarations', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_wht_declarations'}, 'role': 'sink', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_wht_declarations'}, 'role': 'source', 'type': 'file'}]"
38,jdbc:hometax_vat_declarations,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_vat_declarations,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_vat_declarations', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_vat_declarations'}, 'role': 'sink', 'type': 'file'}]"
39,jdbc:scrapings,s3://kcd-de-production/raw/db/snowdon/snapshot/scrapings,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'scrapings', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'scrapings', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/scrapings'}, 'role': 'sink', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/scrapings'}, 'role': 'source', 'type': 'file'}]"
40,jdbc:scrapings,process:::businesses_info:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'scrapings', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'scrapings', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'daily_reports.json', 'options': {'sql': 'SELECT    businesses.id,\n          businesses.name AS report_business_name,\n          NVL(c.has_delivery_app_credentials, false) AS has_delivery_app_credentials,\n          NVL(c.has_baemin_credential, false) AS has_baemin_credential,\n          NVL(c.has_yogiyo_credential, false) AS has_yogiyo_credential,\n          NVL(c.has_baedaltong_credential, false) AS has_baedaltong_credential,\n          NVL(c.has_hometax_credentials, false) AS has_hometax_credentials\nFROM businesses\nLEFT OUTER JOIN (\n    SELECT\n            business_id,\n            IF(size(delivery_app_credentials) > 0, true, false) AS has_delivery_app_credentials,\n            IF(array_contains(delivery_app_credentials, \'baemin\'), true, false) AS has_baemin_credential,\n            IF(array_contains(delivery_app_credentials, \'yogiyo\'), true, false) AS has_yogiyo_credential,\n            IF(array_contains(delivery_app_credentials, \'baedaltong\'), true, false) AS has_baedaltong_credential,\n            IF(size(hometax_credentials) > 0, true, false) AS has_hometax_credentials\n\n    FROM (\n        SELECT  business_id,\n                collect_list(hometax_credential) AS hometax_credentials,\n                collect_list(delivery_app_credential) AS delivery_app_credentials\n        FROM (\n            SELECT  credentials.business_id,\n                    IF(\n                        credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS hometax_credential,\n                    IF(\n                        credentials.type not in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS delivery_app_credential\n            FROM credentials\n            JOIN scrapings\n            ON scrapings.credential_id = credentials.id\n            where credentials.status = 1\n            AND scrapings.status = 1\n            AND (\n                scrapings.tag in (\'BaeminShop\', \'YogiyoShop\', \'BaedaltongShop\') OR\n                credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\')\n            )\n        )\n        GROUP BY business_id\n    )\n) AS c\nON businesses.id = c.business_id'}, 'role': 'process', 'type': 'sql'}]"
41,jdbc:traders,s3://kcd-de-production/raw/db/snowdon/snapshot/traders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'traders', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/traders'}, 'role': 'sink', 'type': 'file'}]"
42,jdbc:cards,s3://kcd-de-production/raw/db/snowdon/snapshot/cards,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'cards', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/cards'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/cards'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_purchases_stat.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/cards', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]"
43,jdbc:card_merchants,s3://kcd-de-production/raw/db/snowdon/snapshot/card_merchants,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/card_merchants'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants'}, 'role': 'source', 'type': 'file'}]"
44,jdbc:card_merchants,process:::issuer_purchase_period:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': 'SELECT\n        business_id,\n        issuer_name,\n        merchant_number,\n        date_sub(purchased_up_to, purchase_period) AS limit_date\nFROM (\n    SELECT\n            business_id,\n            issuer_name,\n            merchant_number,\n            COALESCE(calculated_purchase_period, 1) AS purchase_period,\n            purchased_up_to\n    FROM card_merchants\n    JOIN (\n            SELECT  issuer AS name,\n                    max(date) AS purchased_up_to\n            FROM issuer_histories\n            WHERE purchases = true AND purchases_checked = true\n            GROUP BY issuer\n    ) AS issuers\n    ON card_merchants.issuer_name = issuers.name\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': 'SELECT\n        business_id,\n        issuer_name,\n        merchant_number,\n        date_sub(purchased_up_to, purchase_period) AS limit_date\nFROM (\n    SELECT\n            business_id,\n            issuer_name,\n            merchant_number,\n            COALESCE(calculated_purchase_period, 1) AS purchase_period,\n            purchased_up_to\n    FROM card_merchants\n    JOIN (\n            SELECT  issuer AS name,\n                    max(date) AS purchased_up_to\n            FROM issuer_histories\n            WHERE purchases = true AND purchases_checked = true\n            GROUP BY issuer\n    ) AS issuers\n    ON card_merchants.issuer_name = issuers.name\n)'}, 'role': 'process', 'type': 'sql'}]"
45,jdbc:card_merchants,process:::current_approvals:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals_dedup a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
46,jdbc:card_merchants,process:::current_purchases_reformat:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    business_id,\n        credential_key,\n        authorization_number,\n        masked_card_number,\n        amount,\n        purchased_at,\n        paid_at,\n        MIN(acquirer_name) AS acquirer_name,\n        MIN(base_fee) AS base_fee,\n        MIN(card_number) AS card_number,\n        MIN(card_type) AS card_type,\n        MIN(etc_fee) AS etc_fee,\n        MIN(fee) AS fee,\n        MIN(issuer_name) AS issuer_name,\n        MIN(merchant_number) AS merchant_number,\n        MIN(payment) AS payment,\n        MIN(point_fee) AS point_fee,\n        MIN(purchase_delayed) AS purchase_delayed,\n        MIN(scraping_type) AS scraping_type,\n        MIN(transacted_at) AS transacted_at,\n        MIN(vat_fee) AS vat_fee,\n        MIN(created_at) AS created_at,\n        MIN(updated_at) AS updated_at,\n        MIN(created_at_date) AS created_at_date\nFROM (\n        SELECT    a.acquirer_name,\n                  a.amount,\n                  a.authorization_number,\n                  a.base_fee,\n                  a.business_id,\n                  a.card_number,\n                  a.card_type,\n                  a.credential_key,\n                  a.etc_fee,\n                  a.fee,\n                  a.issuer_name,\n                  a.masked_card_number,\n                  a.merchant_number,\n                  COALESCE(a.paid_at,\n                      estimate_paid_at(\n                          a.issuer_name,\n                          c.bank_name,\n                          a.transacted_at,\n                          COALESCE(c.calculated_purchase_period, 1),\n                          COALESCE(c.calculated_payment_period, c.payment_period),\n                          c.paid_on_weekends\n                      )\n                  ) AS paid_at,\n                  a.payment,\n                  a.point_fee,\n                  purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n                  a.purchased_at,\n                  a.scraping_type,\n                  a.transacted_at,\n                  a.vat_fee,\n                  a.created_at,\n                  a.updated_at,\n                  a.created_at_date\n        FROM      current_purchases_raw a, card_merchants c\n        WHERE     a.business_id is not null\n        AND       a.issuer_name is not null\n        AND       a.card_number is not null\n        AND       a.purchased_at is not null\n        AND       a.business_id = c.business_id\n        AND       a.issuer_name = c.issuer_name\n        AND       a.merchant_number = c.merchant_number\n)\nGROUP BY  1, 2, 3, 4, 5, 6, 7'}, 'role': 'process', 'type': 'sql'}]"
47,jdbc:card_merchants,s3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/db/ts=09_50/card_merchants,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_card_sales_all.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/db/date_id=2021-01-27/ts=09_50/card_merchants', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
48,jdbc:card_merchants,process:::merged_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
49,jdbc:card_merchants,process:::reformat_purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_card_sales_all.json', 'options': {'url': 'jdbc:postgresql://snowdon-production-slave-1.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '500000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'build_raw_tables.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_merchants', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      after_purchases a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      after_purchases a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}]"
50,jdbc:shinhancard_businesses,s3://kcd-de-production/raw/db/snowdon/snapshot/shinhancard_businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'shinhancard_businesses', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/shinhancard_businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/shinhancard_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/shinhancard_businesses'}, 'role': 'source', 'type': 'file'}]"
51,jdbc:devices,s3://kcd-de-production/raw/db/snowdon/snapshot/devices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'devices', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'dump_db_goose.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'devices', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/devices'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/devices'}, 'role': 'source', 'type': 'file'}]"
52,jdbc:devices,s3://kcd-de-production/raw/db/goose/snapshot/devices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'devices', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'dump_db_goose.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'devices', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/devices'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/devices'}, 'role': 'sink', 'type': 'file'}]"
53,jdbc:users,s3://kcd-de-production/raw/db/snowdon/snapshot/users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'users', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'dump_db_goose.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'users', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/users'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}]"
54,jdbc:users,s3://kcd-de-production/raw/db/goose/snapshot/users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'users', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'dump_db_goose.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'users', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/users'}, 'role': 'sink', 'type': 'file'}]"
55,jdbc:acceptances,s3://kcd-de-production/raw/db/snowdon/snapshot/acceptances,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'acceptances', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/acceptances'}, 'role': 'sink', 'type': 'file'}]"
56,jdbc:pos_agents,s3://kcd-de-production/raw/db/snowdon/snapshot/pos_agents,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'pos_agents', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/pos_agents'}, 'role': 'sink', 'type': 'file'}]"
57,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::business_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT  id AS business_id,\n        get_addr_key(address) AS addr_key,\n        address\n    FROM businesses\n    WHERE address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address\n\nUNION ALL\n\nSELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        null AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n    SELECT\n            business_id,\n            get_addr_key_sigungu(addr_key) AS addr_key,\n            address\n    FROM (\n        SELECT  id AS business_id,\n                get_addr_key(address) AS addr_key,\n                address\n        FROM businesses\n        WHERE address is not null\n    )\n    WHERE is_street_address(addr_key) = true\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'sigungu'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
58,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::id_mapping:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n        b.id AS business_id,\n        b.public_id AS public_business_id,\n        u.id AS user_id,\n        u.uuid AS public_user_id,\n        'cashnote' AS user_type\nFROM cashnote_users AS u, cashnote_memberships AS m, cashnote_businesses AS b\nWHERE u.id = m.user_id\nAND m.business_id = b.id\n\nUNION ALL\n\nSELECT  null AS business_id,\n        null AS public_business_id,\n        id AS user_id,\n        uid AS public_user_id,\n        'paynote' AS user_type\nFROM paynote_users""}, 'role': 'process', 'type': 'sql'}]"
59,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::joined:::paynote_businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'paynote_businesses.json', 'options': {'sql': '  SELECT\n          cashnote_businesses.id AS business_id,\n          true AS is_paynote_business\n  FROM    cashnote_businesses\n  JOIN paynote_businesses\n  ON  cashnote_businesses.registration_number = paynote_businesses.registration_number'}, 'role': 'process', 'type': 'sql'}]"
60,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::businesses:::businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'businesses.json', 'options': {'sql': ""SELECT\n          *,\n          CASE\n              WHEN business_check_number BETWEEN 1 AND 79 THEN '개인과세사업자'\n              WHEN business_check_number >= 90 THEN '개인면세사업자'\n              ELSE '법인사업자'\n          END business_type\nFROM (\n      SELECT\n              id AS business_id,\n              owner_id,\n              name AS business_name,\n              registration_number,\n              public_id,\n              created_at,\n              opened_at,\n              closed_at,\n              tax_agent_id,\n              operation_status,\n              taxation_type,\n              vat_withheld,\n              card_merchant_signed_up_at,\n              crefia_owner_birthday,\n              crefia_size_code,\n              CAST(substr(registration_number, 4, 2) AS INT) AS business_check_number\n      FROM    businesses_src\n)""}, 'role': 'process', 'type': 'sql'}]"
61,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::owner:::businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'businesses.json', 'options': {'sql': 'SELECT\n        businesses_src.id AS business_id,\n        u.name AS owner_name,\n        u.phone_number\nFROM (\n      SELECT    users.id AS user_id,\n                users.name AS name,\n                phones.number AS phone_number\n      FROM      users\n      FULL OUTER JOIN   phones\n      ON        users.id = phones.user_id\n) AS u\nJOIN businesses_src\nON u.user_id = businesses_src.owner_id'}, 'role': 'process', 'type': 'sql'}]"
62,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::mappings:::card_classification_business_id,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    registration_number, id AS business_id\nFROM      businesses'}, 'role': 'process', 'type': 'sql'}]"
63,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::mappings:::registration_number_common_location,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_common_location.json', 'options': {'sql': 'SELECT    registration_number, id AS business_id\nFROM      businesses'}, 'role': 'process', 'type': 'sql'}]"
64,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::id_mapping:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'transform_message.json', 'options': {'sql': ""SELECT\n        b.id AS business_id,\n        b.public_id AS public_business_id,\n        u.id AS user_id,\n        u.uuid AS public_user_id,\n        'cashnote' AS user_type\nFROM cashnote_users AS u, cashnote_memberships AS m, cashnote_businesses AS b\nWHERE u.id = m.user_id\nAND m.business_id = b.id\n\nUNION ALL\n\nSELECT  null AS business_id,\n        null AS public_business_id,\n        id AS user_id,\n        uid AS public_user_id,\n        'paynote' AS user_type\nFROM paynote_users""}, 'role': 'process', 'type': 'sql'}]"
65,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::cashnote_businesses:::registration_number_businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_businesses.json', 'options': {'sql': ""  SELECT  business_id, registration_number,\n          collect_set(merchant) AS merchants,\n          collect_set(card_issuer) card_issuers\n  FROM (\n          SELECT\n                  business_id,\n                  registration_number,\n                  CASE\n                      WHEN merchant_number IS NOT NULL THEN struct(card_issuer,merchant_number)\n                      ELSE null\n                  END AS merchant,\n                  card_issuer\n          FROM (\n                  SELECT  businesses.id AS business_id,\n                          businesses.registration_number,\n                          IF(m.issuer_name == '하나(구 외환)', '하나', m.issuer_name) AS card_issuer,\n                          m.merchant_number\n                  FROM    businesses\n                  LEFT OUTER JOIN (\n                          SELECT  *\n                          FROM    card_merchants\n                          WHERE   current = true\n                          AND     affiliated = false\n                  ) AS m\n                  ON businesses.id = m.business_id\n          )\n  )\n  GROUP BY business_id, registration_number""}, 'role': 'process', 'type': 'sql'}]"
66,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::joined:::survey_monkey,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'survey_monkey.json', 'options': {'sql': 'SELECT    businesses.id AS business_id,\n          survey.survey_monkey_ids\nFROM (\n        SELECT    business_id, collect_set(survey_monkey_id) survey_monkey_ids\n        FROM      survey_monkey_responses\n        WHERE     business_id IS NOT NULL\n        GROUP BY  business_id\n) survey\nJOIN  businesses\nON    survey.business_id = businesses.public_id'}, 'role': 'process', 'type': 'sql'}]"
67,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::businesses_info:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': 'SELECT    businesses.id,\n          businesses.name AS report_business_name,\n          NVL(c.has_delivery_app_credentials, false) AS has_delivery_app_credentials,\n          NVL(c.has_baemin_credential, false) AS has_baemin_credential,\n          NVL(c.has_yogiyo_credential, false) AS has_yogiyo_credential,\n          NVL(c.has_baedaltong_credential, false) AS has_baedaltong_credential,\n          NVL(c.has_hometax_credentials, false) AS has_hometax_credentials\nFROM businesses\nLEFT OUTER JOIN (\n    SELECT\n            business_id,\n            IF(size(delivery_app_credentials) > 0, true, false) AS has_delivery_app_credentials,\n            IF(array_contains(delivery_app_credentials, \'baemin\'), true, false) AS has_baemin_credential,\n            IF(array_contains(delivery_app_credentials, \'yogiyo\'), true, false) AS has_yogiyo_credential,\n            IF(array_contains(delivery_app_credentials, \'baedaltong\'), true, false) AS has_baedaltong_credential,\n            IF(size(hometax_credentials) > 0, true, false) AS has_hometax_credentials\n\n    FROM (\n        SELECT  business_id,\n                collect_list(hometax_credential) AS hometax_credentials,\n                collect_list(delivery_app_credential) AS delivery_app_credentials\n        FROM (\n            SELECT  credentials.business_id,\n                    IF(\n                        credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS hometax_credential,\n                    IF(\n                        credentials.type not in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS delivery_app_credential\n            FROM credentials\n            JOIN scrapings\n            ON scrapings.credential_id = credentials.id\n            where credentials.status = 1\n            AND scrapings.status = 1\n            AND (\n                scrapings.tag in (\'BaeminShop\', \'YogiyoShop\', \'BaedaltongShop\') OR\n                credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\')\n            )\n        )\n        GROUP BY business_id\n    )\n) AS c\nON businesses.id = c.business_id'}, 'role': 'process', 'type': 'sql'}]"
68,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::merged_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
69,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::hometax_classification:::hometax_ksic_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_ksic_classification.json', 'options': {'sql': 'SELECT\n        businesses.id AS business_id,\n        businesses.registration_number,\n        hometax_classification_code AS code,\n        hometax_classification_code_1_depth AS depth_1_code,\n        hometax_classification_name_1_depth AS depth_1_name,\n        hometax_classification_code_2_depth AS depth_2_code,\n        hometax_classification_name_2_depth AS depth_2_name,\n        hometax_classification_code_3_depth AS depth_3_code,\n        hometax_classification_name_3_depth AS depth_3_name,\n        hometax_classification_code_4_depth AS depth_4_code,\n        hometax_classification_name_4_depth AS depth_4_name,\n        hometax_classification_name_5_depth AS depth_5_name\nFROM businesses\nJOIN (\n        SELECT *\n        FROM (\n                SELECT    *,\n                          row_number() OVER (PARTITION BY hometax_classification_code ORDER BY id) AS code_rank\n                FROM      hometax_ksic_map\n        )\n        WHERE code_rank = 1\n) AS dedup_map\nON businesses.hometax_business_classification_code = dedup_map.hometax_classification_code'}, 'role': 'process', 'type': 'sql'}]"
70,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::ksic_classification:::hometax_ksic_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_ksic_classification.json', 'options': {'sql': ""SELECT\n          businesses.id AS business_id,\n          businesses.registration_number,\n          code,\n          depth_1_code,\n          depth_1_name,\n          depth_2_code,\n          depth_2_name,\n          depth_3_code,\n          depth_3_name,\n          depth_4_code,\n          depth_4_name,\n          depth_5_name,\n          depth_all,\n          depth_1_2_code\nFROM      businesses\nJOIN (\n      SELECT\n              hometax_classification_code,\n              collect_set(standard_classification_code) AS code,\n              collect_set(standard_classification_code_1_depth) AS depth_1_code,\n              collect_set(standard_classification_name_1_depth) AS depth_1_name,\n              collect_set(standard_classification_code_2_depth) AS depth_2_code,\n              collect_set(standard_classification_name_2_depth) AS depth_2_name,\n              collect_set(standard_classification_code_3_depth) AS depth_3_code,\n              collect_set(standard_classification_name_3_depth) AS depth_3_name,\n              collect_set(standard_classification_code_4_depth) AS depth_4_code,\n              collect_set(standard_classification_name_4_depth) AS depth_4_name,\n              collect_set(standard_classification_name_5_depth) AS depth_5_name,\n              to_json(\n                  collect_set(\n                      named_struct(\n                          'depth_1_code', standard_classification_code_1_depth,\n                          'depth_1_name', standard_classification_name_1_depth,\n                          'depth_2_code', standard_classification_code_2_depth,\n                          'depth_2_name', standard_classification_name_2_depth,\n                          'depth_3_code', standard_classification_code_3_depth,\n                          'depth_3_name', standard_classification_name_3_depth,\n                          'depth_4_code', standard_classification_code_4_depth,\n                          'depth_4_name', standard_classification_name_4_depth,\n                          'depth_5_name', standard_classification_name_5_depth\n                      )\n                  )\n              ) AS depth_all,\n              collect_set(concat(standard_classification_code_1_depth,standard_classification_code_2_depth)) AS depth_1_2_code\n      FROM    hometax_ksic_map\n      GROUP BY hometax_classification_code\n) AS ksic\nON businesses.hometax_business_classification_code = ksic.hometax_classification_code""}, 'role': 'process', 'type': 'sql'}]"
71,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::hometax_invoices:::build_hometax_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_hometax_invoices.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(b) */\n        i.*,\n        b.id AS trader_business_id\nFROM    (\n  SELECT  business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          received,\n          CAST(null AS boolean) AS paid,\n          price,\n          tax,\n          amount,\n          note,\n          customer_registration_number AS registration_number,\n          customer_workplace_number AS workplace_number,\n          customer_business_name AS business_name,\n          customer_business_classification AS business_classification,\n          customer_business_category AS business_category,\n          customer_owner_name AS owner_name,\n          customer_email AS email,\n          items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          written_at,\n          issued_at,\n          sent_at,\n          created_at,\n          created_at_date,\n          updated_at,\n          customer_address AS address,\n          original_authorization_number,\n          true AS is_sales,\n          false AS is_purchases,\n          amount < 0 AS canceled,\n          invoice_type in ('일반(수정)', '수입(수정)', '위수탁(수정)', '영세율(수정)', '영세율위수탁(수정)') AS revised,\n          tax_invoice AND invoice_type in ('일반', '위수탁') AND tax = 0 AND ABS(price) >= 10 AS invalid_tax,\n          invoice_type like '%영세율%' AS zero_rate\n  FROM    hometax_sales_invoices_unique\n\n  UNION ALL\n\n  SELECT  business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          CAST(null AS boolean) AS received,\n          paid,\n          price,\n          tax,\n          amount,\n          note,\n          vendor_registration_number AS registration_number,\n          vendor_workplace_number AS workplace_number,\n          vendor_business_name AS business_name,\n          vendor_business_classification AS business_classification,\n          vendor_business_category AS business_category,\n          vendor_owner_name AS owner_name,\n          vendor_email AS email,\n          items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          written_at,\n          issued_at,\n          sent_at,\n          created_at,\n          created_at_date,\n          updated_at,\n          vendor_address AS address,\n          original_authorization_number,\n          false AS is_sales,\n          true AS is_purchases,\n          amount < 0 AS canceled,\n          invoice_type in ('일반(수정)', '수입(수정)', '위수탁(수정)', '영세율(수정)', '영세율위수탁(수정)') AS revised,\n          tax_invoice AND invoice_type in ('일반', '위수탁') AND tax = 0 AND ABS(price) >= 10 AS invalid_tax,\n          invoice_type like '%영세율%' AS zero_rate\n  FROM    hometax_purchases_invoices_unique\n) i LEFT OUTER JOIN businesses b\nON (i.registration_number = b.registration_number)""}, 'role': 'process', 'type': 'sql'}]"
72,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::approvals:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS integer)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS integer)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01'\n                      THEN CAST(a.amount * 4 / 110 AS integer)\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      unique_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
73,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::dim_public_id:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT\n          c.custom_set_id, c.status,\n          c.business_id,\n          memberships.user_id\n  FROM (\n          SELECT      custom_set_id, status,\n                      businesses.id AS business_id\n          FROM (\n            SELECT    custom_set_id, custom_set_value, status\n            FROM      custom_set_values\n            WHERE     dimension = 'public_id'\n            AND       status in ('RUNNING', 'COMPLETE')\n          ) AS custom_set\n          JOIN businesses\n          ON custom_set.custom_set_value = businesses.public_id\n  ) c\n  JOIN    memberships\n  ON      c.business_id = memberships.business_id""}, 'role': 'process', 'type': 'sql'}]"
74,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::mappings:::registration_number_card_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'sql': 'SELECT    registration_number, id AS business_id\nFROM      businesses'}, 'role': 'process', 'type': 'sql'}]"
75,s3://kcd-de-production/raw/db/snowdon/snapshot/businesses,process:::hometax_cash_receipts:::build_hometax_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': ""SELECT  /*+BROADCAST(b) */\n        r.*,\n        b.id AS trader_business_id\nFROM    (\n  SELECT  business_id,\n          price,\n          IF (receipt_type  = 1, -vat, vat) AS vat,\n          service,\n          IF (receipt_type = 1, -amount, amount) AS amount,\n          authorization_number,\n          identification_method,\n          receipt_type,\n          created_at,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          updated_at,\n          receipt_type = 0 AS approved,\n          receipt_type = 1 AS canceled,\n          authorization_number like 'I7%' AS online,\n          true AS is_sales,\n          false AS is_purchases,\n          CAST(null AS timestamp) AS purchased_at,\n          sold_at,\n          CAST(null AS boolean) AS tax_deductible,\n          CAST(null AS string) AS vendor_registration_number,\n          CAST(null AS string) AS vendor_business_name,\n          CAST(null AS string) AS vendor_business_code,\n          CAST(null AS string) AS vendor_address\n  FROM    hometax_sales_cash_receipts_unique\n\n  UNION ALL\n\n  SELECT  business_id,\n          price,\n          IF (receipt_type  = 1, -vat, vat) AS vat,\n          service,\n          IF (receipt_type = 1, -amount, amount) AS amount,\n          authorization_number,\n          identification_method,\n          receipt_type,\n          created_at,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          updated_at,\n          receipt_type = 0 AS approved,\n          receipt_type = 1 AS canceled,\n          CAST(null AS boolean) AS online,\n          true AS is_sales,\n          false AS is_purchases,\n          purchased_at,\n          CAST(null AS timestamp) AS sold_at,\n          tax_deductible,\n          vendor_registration_number,\n          vendor_business_name,\n          vendor_business_code,\n          CAST(null AS string) AS vendor_address\n  FROM    hometax_purchases_cash_receipts_unique\n) r LEFT OUTER JOIN businesses b\nON (COALESCE(r.vendor_registration_number, 'none') = b.registration_number)""}, 'role': 'process', 'type': 'sql'}]"
76,s3://kcd-de-production/raw/db/snowdon/snapshot/iamport_customers,process:::iamport_customers:::businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/iamport_customers'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/iamport_customers'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'businesses.json', 'options': {'sql': '  SELECT\n          business_id,\n          status,\n          card_name,\n          created_at\n  FROM    iamport_customers_src'}, 'role': 'process', 'type': 'sql'}]"
77,s3://kcd-de-production/raw/db/snowdon/snapshot/credentials,process:::credentials:::businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credentials'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credentials'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'businesses.json', 'options': {'sql': ""  SELECT\n          business_id,\n          collect_set(name)  AS types\n  FROM (\n          SELECT\n                  business_id,\n                  created_at,\n                  replace(type, 'Credentials::', '') AS name\n          FROM    credentials_src\n          WHERE   status != 2\n  )\n  GROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]"
78,s3://kcd-de-production/raw/db/snowdon/snapshot/credentials,process:::cards:::businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credentials'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credentials'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'businesses.json', 'options': {'sql': ""  SELECT  cards_src.business_id,\n          collect_set(concat(issuer, '_', card_type)) AS issuer,\n          collect_set(name) AS card_names\n  FROM    cards_src\n  JOIN    credentials_src\n  ON      cards_src.credential_id = credentials_src.id\n  WHERE   credentials_src.status != 2\n  GROUP BY cards_src.business_id""}, 'role': 'process', 'type': 'sql'}]"
79,s3://kcd-de-production/raw/db/snowdon/snapshot/credentials,process:::bank_accounts:::business_bank,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credentials'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credentials'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_bank.json', 'options': {'sql': ""  SELECT  bank_accounts_src.business_id,\n          collect_set(concat(bank_name, '_', account_type)) AS bank_names\n  FROM    bank_accounts_src\n  JOIN    credentials_src\n  ON      bank_accounts_src.credential_id = credentials_src.id\n  WHERE   credentials_src.status != 2\n  GROUP BY bank_accounts_src.business_id""}, 'role': 'process', 'type': 'sql'}]"
80,s3://kcd-de-production/raw/db/snowdon/snapshot/credentials,process:::crefia_credential:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credentials'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credentials'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT business_id, collect_set(c)[0] AS confirmed\nFROM (\n    SELECT  business_id, IF(status = 1, true, false) AS c\n    FROM credentials\n    WHERE type in ('Credentials::CrefiaBusiness', 'Credentials::Crefia')\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]"
81,s3://kcd-de-production/raw/db/snowdon/snapshot/credentials,process:::businesses_info:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credentials'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credentials'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': 'SELECT    businesses.id,\n          businesses.name AS report_business_name,\n          NVL(c.has_delivery_app_credentials, false) AS has_delivery_app_credentials,\n          NVL(c.has_baemin_credential, false) AS has_baemin_credential,\n          NVL(c.has_yogiyo_credential, false) AS has_yogiyo_credential,\n          NVL(c.has_baedaltong_credential, false) AS has_baedaltong_credential,\n          NVL(c.has_hometax_credentials, false) AS has_hometax_credentials\nFROM businesses\nLEFT OUTER JOIN (\n    SELECT\n            business_id,\n            IF(size(delivery_app_credentials) > 0, true, false) AS has_delivery_app_credentials,\n            IF(array_contains(delivery_app_credentials, \'baemin\'), true, false) AS has_baemin_credential,\n            IF(array_contains(delivery_app_credentials, \'yogiyo\'), true, false) AS has_yogiyo_credential,\n            IF(array_contains(delivery_app_credentials, \'baedaltong\'), true, false) AS has_baedaltong_credential,\n            IF(size(hometax_credentials) > 0, true, false) AS has_hometax_credentials\n\n    FROM (\n        SELECT  business_id,\n                collect_list(hometax_credential) AS hometax_credentials,\n                collect_list(delivery_app_credential) AS delivery_app_credentials\n        FROM (\n            SELECT  credentials.business_id,\n                    IF(\n                        credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS hometax_credential,\n                    IF(\n                        credentials.type not in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS delivery_app_credential\n            FROM credentials\n            JOIN scrapings\n            ON scrapings.credential_id = credentials.id\n            where credentials.status = 1\n            AND scrapings.status = 1\n            AND (\n                scrapings.tag in (\'BaeminShop\', \'YogiyoShop\', \'BaedaltongShop\') OR\n                credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\')\n            )\n        )\n        GROUP BY business_id\n    )\n) AS c\nON businesses.id = c.business_id'}, 'role': 'process', 'type': 'sql'}]"
82,s3://kcd-de-production/raw/db/snowdon/snapshot/credentials,process:::transactions:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credentials'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/credentials'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credentials'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-28', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-28', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-01', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-01', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}]"
83,s3://kcd-de-production/raw/db/snowdon/snapshot/credential_keys,process:::current_purchases:::purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credential_keys'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys'}, 'role': 'source', 'type': 'file'}, {'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'purchases_initial.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(acquirer_name) AS acquirer_name,\n          CAST(amount AS int) AS amount,\n          trim(authorization_number) AS authorization_number,\n          CAST(base_fee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(card_number) AS card_number,\n          CAST(card_type AS int) AS card_type,\n          k.uuid AS credential_key,\n          CAST(etc_fee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(issuer_name) AS issuer_name,\n          mask_card_number(trim(card_number)) AS masked_card_number,\n          trim(merchant_number) AS merchant_number,\n          to_timestamp(unix_timestamp(paid_at , 'yyyyMMdd')) AS paid_at,\n          CAST(payment AS int) AS payment,\n          CAST(point_fee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(purchased_at , 'yyyyMMdd')) AS purchased_at,\n          CAST(null AS string) AS scraping_type,\n          to_timestamp(unix_timestamp(transacted_at , 'yyyyMMdd')) AS transacted_at,\n          CAST(vat_fee AS int) AS vat_fee,\n          a.created_at,\n          a.updated_at\n  FROM    current_purchases_raw a INNER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n)""}, 'role': 'process', 'type': 'sql'}]"
84,s3://kcd-de-production/raw/db/snowdon/snapshot/credential_keys,process:::after_purchases:::purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credential_keys'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys'}, 'role': 'source', 'type': 'file'}, {'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'purchases_initial.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
85,s3://kcd-de-production/raw/db/snowdon/snapshot/credential_keys,process:::after_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credential_keys'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys'}, 'role': 'source', 'type': 'file'}, {'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\n\n  UNION ALL\n\n  SELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n            CAST(authamt AS int) AS amount,\n            trim(IF (authno = '', null, authno)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardno, '', '')) AS card_number,\n            CAST(trim(cardknd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n            IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n            trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n            trim(IF (merno = '', null, merno)) AS merchant_number,\n            scraping_type,\n            IF (authclassnm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n            ) AS updated_at,\n            created_at_date\n   FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\n\nUNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at,\n          created_at_date\n FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
86,s3://kcd-de-production/raw/db/snowdon/snapshot/credential_keys,process:::after_purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credential_keys'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys'}, 'role': 'source', 'type': 'file'}, {'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n      CAST(pcaamt AS int) AS amount,\n      trim(IF (authno = '', null, authno)) AS authorization_number,\n      CAST(basicfee AS int) AS base_fee,\n      CAST(a.business_id AS int) AS business_id,\n      trim(replace(cardno, '-', '')) AS card_number,\n      CAST(trim(cardclss) AS int) AS card_type,\n      COALESCE(credential_key, k.uuid) AS credential_key,\n      CAST(etcfee AS int) AS etc_fee,\n      CAST(fee AS int) AS fee,\n      trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n      mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n      trim(IF (merno = '', null, merno)) AS merchant_number,\n      to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n      CAST(pymamt AS int) AS payment,\n      CAST(pointfee AS int) AS point_fee,\n      to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n      scraping_type,\n      to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n      CAST(vatfee AS int) AS vat_fee,\n      to_timestamp(\n       concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n      ) AS created_at,\n      to_timestamp(\n       concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n      ) AS updated_at,\n      created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
87,s3://kcd-de-production/raw/db/snowdon/snapshot/credential_keys,process:::after_payments:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credential_keys'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys'}, 'role': 'source', 'type': 'file'}, {'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n\n  UNION ALL\n\n  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          trim(IF (stlbanknm = '', null, replace(stlbanknm, '은행', ''))) AS bank_name,\n          trim(stlacctno) AS account_number,\n          CAST(pcacnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvamt AS BIGINT) AS reserved_amount,\n          CAST(etcamt AS BIGINT) AS etc_amount,\n          CAST(pcaamt AS BIGINT) AS sales_amount,\n          CAST(rcpscdamt AS BIGINT) AS received_amount,\n          CAST(vatfeeamt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymdate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n  FROM    catalog_payments_filtered a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}]"
88,s3://kcd-de-production/raw/db/snowdon/snapshot/credential_keys,process:::current_approvals:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credential_keys'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys'}, 'role': 'source', 'type': 'file'}, {'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n     SELECT  trim(acquirer_name) AS acquirer_name,\n             CAST(amount AS int) AS amount,\n             trim(authorization_number) AS authorization_number,\n             CAST(a.business_id AS int) AS business_id,\n             trim(card_number) AS card_number,\n             CAST(card_type AS int) AS card_type,\n             k.uuid AS credential_key,\n             trim(encrypted_card_number) AS encrypted_card_number,\n             CAST(installment AS int) AS installment,\n             trim(issuer_name) AS issuer_name,\n             mask_card_number(trim(card_number)) AS masked_card_number,\n             trim(merchant_number) AS merchant_number,\n             CAST(null AS string) AS scraping_type,\n             CAST(status AS int) AS status,\n             to_timestamp(unix_timestamp(transacted_at , 'yyyy-MM-dd\\'T\\'HH:mm:ss')) AS transacted_at,\n             a.created_at,\n             a.updated_at\n     FROM    current_approvals_raw a INNER JOIN credential_keys k\n     ON      a.business_id = k.business_id\n)""}, 'role': 'process', 'type': 'sql'}]"
89,s3://kcd-de-production/raw/db/snowdon/snapshot/credential_keys,process:::after_approvals:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credential_keys'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys'}, 'role': 'source', 'type': 'file'}, {'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\nUNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at,\n          created_at_date\n FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
90,s3://kcd-de-production/raw/db/snowdon/snapshot/credential_keys,process:::transactions:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credential_keys'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys'}, 'role': 'source', 'type': 'file'}, {'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-28', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-28', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-01', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-01', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}]"
91,s3://kcd-de-production/raw/db/snowdon/snapshot/credential_keys,process:::current_payments:::payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credential_keys'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys'}, 'role': 'source', 'type': 'file'}, {'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'payments_initial.json', 'options': {'sql': '  SELECT  CAST(a.business_id AS int) AS business_id,\n          k.uuid AS credential_key,\n          trim(issuer_name) AS issuer_name,\n          trim(merchant_number) AS merchant_number,\n          trim(bank_name) AS bank_name,\n          trim(account_number) AS account_number,\n          CAST(COALESCE(sales_count, 0) AS INT) AS sales_count,\n          CAST(null AS string) AS scraping_type,\n          CAST(COALESCE(reserved_amount, 0) AS BIGINT) AS reserved_amount,\n          CAST(COALESCE(etc_amount, 0) AS BIGINT) AS etc_amount,\n          CAST(COALESCE(sales_amount, 0) AS BIGINT) AS sales_amount,\n          CAST(COALESCE(received_amount, 0) AS BIGINT) AS received_amount,\n          CAST(COALESCE(vat_fee_amount, 0) AS BIGINT) AS vat_fee_amount,\n          received_at,\n          a.created_at,\n          a.updated_at\n  FROM    current_payments_raw a INNER JOIN credential_keys k\n  ON      a.business_id = k.business_id'}, 'role': 'process', 'type': 'sql'}]"
92,s3://kcd-de-production/raw/db/snowdon/snapshot/credential_keys,process:::after_payments:::payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/credential_keys'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/credential_keys'}, 'role': 'source', 'type': 'file'}, {'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'payments_initial.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n\n  UNION ALL\n\n  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          trim(IF (stlbanknm = '', null, replace(stlbanknm, '은행', ''))) AS bank_name,\n          trim(stlacctno) AS account_number,\n          CAST(pcacnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvamt AS BIGINT) AS reserved_amount,\n          CAST(etcamt AS BIGINT) AS etc_amount,\n          CAST(pcaamt AS BIGINT) AS sales_amount,\n          CAST(rcpscdamt AS BIGINT) AS received_amount,\n          CAST(vatfeeamt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymdate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n  FROM    catalog_payments_filtered a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}]"
93,s3://kcd-de-production/raw/db/snowdon/snapshot/memberships,process:::id_mapping:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/memberships'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n        b.id AS business_id,\n        b.public_id AS public_business_id,\n        u.id AS user_id,\n        u.uuid AS public_user_id,\n        'cashnote' AS user_type\nFROM cashnote_users AS u, cashnote_memberships AS m, cashnote_businesses AS b\nWHERE u.id = m.user_id\nAND m.business_id = b.id\n\nUNION ALL\n\nSELECT  null AS business_id,\n        null AS public_business_id,\n        id AS user_id,\n        uid AS public_user_id,\n        'paynote' AS user_type\nFROM paynote_users""}, 'role': 'process', 'type': 'sql'}]"
94,s3://kcd-de-production/raw/db/snowdon/snapshot/memberships,process:::id_mapping:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/memberships'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'transform_message.json', 'options': {'sql': ""SELECT\n        b.id AS business_id,\n        b.public_id AS public_business_id,\n        u.id AS user_id,\n        u.uuid AS public_user_id,\n        'cashnote' AS user_type\nFROM cashnote_users AS u, cashnote_memberships AS m, cashnote_businesses AS b\nWHERE u.id = m.user_id\nAND m.business_id = b.id\n\nUNION ALL\n\nSELECT  null AS business_id,\n        null AS public_business_id,\n        id AS user_id,\n        uid AS public_user_id,\n        'paynote' AS user_type\nFROM paynote_users""}, 'role': 'process', 'type': 'sql'}]"
95,s3://kcd-de-production/raw/db/snowdon/snapshot/memberships,process:::memberships:::cashnote_users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/memberships'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_users.json', 'options': {'sql': '  SELECT\n          user_id,\n          collect_list(struct(business_id, role, notifications)) AS memberships\n  FROM (\n          SELECT\n                  user_id,\n                  business_id,\n                  role,\n                  filterJsonTrue(notification_preferences) AS notifications\n          FROM    memberships_src\n          WHERE   user_id IS NOT NULL\n  )\n  GROUP BY user_id'}, 'role': 'process', 'type': 'sql'}]"
96,s3://kcd-de-production/raw/db/snowdon/snapshot/memberships,process:::dim_user_id:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/memberships'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT      custom_set_id, status,\n              memberships.business_id,\n              memberships.user_id\n  FROM (\n    SELECT    custom_set_id, custom_set_value, status\n    FROM      custom_set_values\n    WHERE     dimension = 'user_id'\n    AND       status in ('RUNNING', 'COMPLETE')\n  ) AS custom_set\n  JOIN memberships\n  ON custom_set.custom_set_value = memberships.user_id""}, 'role': 'process', 'type': 'sql'}]"
97,s3://kcd-de-production/raw/db/snowdon/snapshot/memberships,process:::dim_business_id:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/memberships'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT      custom_set_id, status,\n              memberships.business_id,\n              memberships.user_id\n  FROM (\n    SELECT    custom_set_id, custom_set_value, status\n    FROM      custom_set_values\n    WHERE     dimension = 'business_id'\n    AND       status in ('RUNNING', 'COMPLETE')\n  ) AS custom_set\n  JOIN memberships\n  ON custom_set.custom_set_value = memberships.business_id""}, 'role': 'process', 'type': 'sql'}]"
98,s3://kcd-de-production/raw/db/snowdon/snapshot/memberships,process:::dim_public_id:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/memberships'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/memberships'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT\n          c.custom_set_id, c.status,\n          c.business_id,\n          memberships.user_id\n  FROM (\n          SELECT      custom_set_id, status,\n                      businesses.id AS business_id\n          FROM (\n            SELECT    custom_set_id, custom_set_value, status\n            FROM      custom_set_values\n            WHERE     dimension = 'public_id'\n            AND       status in ('RUNNING', 'COMPLETE')\n          ) AS custom_set\n          JOIN businesses\n          ON custom_set.custom_set_value = businesses.public_id\n  ) c\n  JOIN    memberships\n  ON      c.business_id = memberships.business_id""}, 'role': 'process', 'type': 'sql'}]"
99,s3://kcd-de-production/raw/db/snowdon/snapshot/phones,process:::owner:::businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/phones'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/phones'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/phones'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'businesses.json', 'options': {'sql': 'SELECT\n        businesses_src.id AS business_id,\n        u.name AS owner_name,\n        u.phone_number\nFROM (\n      SELECT    users.id AS user_id,\n                users.name AS name,\n                phones.number AS phone_number\n      FROM      users\n      FULL OUTER JOIN   phones\n      ON        users.id = phones.user_id\n) AS u\nJOIN businesses_src\nON u.user_id = businesses_src.owner_id'}, 'role': 'process', 'type': 'sql'}]"
100,s3://kcd-de-production/raw/db/snowdon/snapshot/phones,process:::phones:::cashnote_users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/phones'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/phones'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/phones'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_users.json', 'options': {'sql': '  SELECT\n          user_id,\n          number,\n          blocked\n  FROM    phones_src\n  WHERE   user_id IS NOT NULL'}, 'role': 'process', 'type': 'sql'}]"
101,s3://kcd-de-production/raw/db/snowdon/snapshot/subscriptions,process:::subscriptions:::businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/subscriptions'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/subscriptions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'businesses.json', 'options': {'sql': '  SELECT\n          business_id,\n          plan_id,\n          paid,\n          auto_renew,\n          started_at,\n          created_at,\n          canceled_at,\n          status\n  FROM    subscriptions_src\n  WHERE   status = 0'}, 'role': 'process', 'type': 'sql'}]"
102,s3://kcd-de-production/raw/db/snowdon/snapshot/places,process:::place_naver_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/places'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        source_address.business_id,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        business_id,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n            latitude > 100,\n            CONCAT(longitude, ',', latitude),\n            CONCAT(latitude, ',', longitude)\n        ) AS location\n    FROM places\n    WHERE type = 'Places::Naver'\n    AND business_id is not null\n    AND lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
103,s3://kcd-de-production/raw/db/snowdon/snapshot/places,process:::place_kakao_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/places'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        source_address.business_id,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        business_id,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n              latitude > 100,\n              CONCAT(longitude, ',', latitude),\n              CONCAT(latitude, ',', longitude)\n          ) AS location\n    FROM places\n    WHERE type = 'Places::Daum'\n    AND business_id is not null\n    AND lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
104,s3://kcd-de-production/raw/db/snowdon/snapshot/places,process:::reviews:::places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/places'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'fact_places.json', 'options': {'sql': ""SELECT\n          r.timestamp,\n          date_format(r.timestamp, 'yyyy-MM-dd') AS date_id,\n          places.business_id,\n          r.count,\n          lower(replace(places.type, 'Places::', '')) AS name\nFROM (\n  SELECT\n          timestamp,\n          place_id,\n          COUNT(1) AS count\n  FROM (\n          SELECT\n                  place_id,\n                  date_trunc('MONTH', authored_at) AS timestamp\n          FROM    place_reviews\n          WHERE   created_at_date between '2017-01-01' AND '2020-07-20'\n  )\n  GROUP BY timestamp, place_id\n) AS r\nJOIN places\nON r.place_id = places.id""}, 'role': 'process', 'type': 'sql'}]"
105,s3://kcd-de-production/raw/db/snowdon/snapshot/places,process:::comments:::places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/places'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'fact_places.json', 'options': {'sql': ""SELECT\n          c.timestamp,\n          date_format(c.timestamp, 'yyyy-MM-dd') AS date_id,\n          places.business_id,\n          c.count,\n          c.avg_rating,\n          lower(replace(places.type, 'Places::', '')) AS name\nFROM (\n  SELECT\n          timestamp,\n          place_id,\n          COUNT(1) AS count,\n          AVG(rating) AS avg_rating\n  FROM (\n          SELECT\n                  source_id AS place_id,\n                  date_trunc('MONTH', authored_at) AS timestamp,\n                  rating\n          FROM    place_comments\n          WHERE   created_at_date between '2017-01-01' AND '2020-07-20'\n          AND     source_type = 'Place'\n  )\n  GROUP BY timestamp, place_id\n) AS c\nJOIN places\nON c.place_id = places.id""}, 'role': 'process', 'type': 'sql'}]"
106,s3://kcd-de-production/raw/db/snowdon/snapshot/places,process:::naver:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/places'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT  *, classification AS naver_classification\nFROM    places_src\nWHERE   type = 'Places::Naver'""}, 'role': 'process', 'type': 'sql'}]"
107,s3://kcd-de-production/raw/db/snowdon/snapshot/places,process:::kakao:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/places'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT  *, classification AS kakao_classification\nFROM    places_src\nWHERE   type = 'Places::Daum'""}, 'role': 'process', 'type': 'sql'}]"
108,s3://kcd-de-production/raw/db/snowdon/snapshot/bank_accounts,process:::bank_accounts:::business_bank,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/bank_accounts'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_bank.json', 'options': {'sql': ""  SELECT  bank_accounts_src.business_id,\n          collect_set(concat(bank_name, '_', account_type)) AS bank_names\n  FROM    bank_accounts_src\n  JOIN    credentials_src\n  ON      bank_accounts_src.credential_id = credentials_src.id\n  WHERE   credentials_src.status != 2\n  GROUP BY bank_accounts_src.business_id""}, 'role': 'process', 'type': 'sql'}]"
109,s3://kcd-de-production/raw/db/snowdon/snapshot/bank_accounts,process:::invalid_account_numbers:::business_bank,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/bank_accounts'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_bank.json', 'options': {'sql': 'SELECT    business_id,\n          collect_set(account_number) account_numbers\nFROM (\n    SELECT    bank_accounts_src.business_id, bank_accounts_src.account_number\n    FROM      bank_accounts_src\n    LEFT OUTER JOIN (\n        SELECT    DISTINCT business_id, account_number\n        FROM (\n                SELECT    business_id, explode(account_numbers) AS account_number\n                FROM      bank_withdraw\n\n                UNION     ALL\n\n                SELECT    business_id, explode(account_numbers) AS account_number\n                FROM      bank_deposit\n        )\n    ) AS t\n    ON bank_accounts_src.account_number = t.account_number\n    AND bank_accounts_src.business_id = t.business_id\n    WHERE t.account_number IS NULL\n)\nGROUP BY business_id'}, 'role': 'process', 'type': 'sql'}]"
110,s3://kcd-de-production/raw/db/snowdon/snapshot/bank_accounts,process:::bank_withdraw:::bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/bank_accounts'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'bank_transactions.json', 'options': {'sql': ""SELECT\n      timestamp,\n      business_id,\n      date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n      SUM(withdrawal) AS amount_sum,\n      COUNT(1) AS tx_count,\n      collect_set(content) AS contents,\n      collect_set(account_number) AS account_numbers\nFROM (\n\n      SELECT\n              bank_accounts.business_id,\n              bank_accounts.account_number,\n              bank_tx_withdrawal.*\n      FROM bank_accounts\n      JOIN (\n          SELECT\n                  bank_account_id,\n                  date_trunc('MONTH', transacted_at) AS timestamp,\n                  withdrawal,\n                  content\n          FROM    bank_transactions\n          WHERE   withdrawal != 0\n          AND     transacted_at between '2017-01-01' AND '2021-01-24'\n      ) bank_tx_withdrawal\n      ON bank_accounts.id = bank_tx_withdrawal.bank_account_id\n      WHERE   business_id IS NOT NULL\n)\nGROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
111,s3://kcd-de-production/raw/db/snowdon/snapshot/bank_accounts,process:::bank_deposit:::bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/bank_accounts'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'bank_transactions.json', 'options': {'sql': ""SELECT\n      timestamp,\n      business_id,\n      date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n      SUM(deposit) AS amount_sum,\n      COUNT(1) AS tx_count,\n      collect_set(content) AS contents,\n      collect_set(account_number) AS account_numbers\nFROM (\n\n      SELECT\n              bank_accounts.business_id,\n              bank_accounts.account_number,\n              bank_tx_deposit.*\n      FROM bank_accounts\n      JOIN (\n          SELECT\n                  bank_account_id,\n                  date_trunc('MONTH', transacted_at) AS timestamp,\n                  deposit,\n                  content\n          FROM    bank_transactions\n          WHERE   deposit != 0\n          AND     transacted_at between '2017-01-01' AND '2021-01-24'\n      ) bank_tx_deposit\n      ON bank_accounts.id = bank_tx_deposit.bank_account_id\n      WHERE   business_id IS NOT NULL\n)\nGROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
112,s3://kcd-de-production/raw/db/snowdon/snapshot/bank_accounts,process:::merged_bank_transactions:::build_bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/bank_accounts'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/bank_accounts'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_bank_transactions.json', 'options': {'sql': ""SELECT  *,\n        row_number() OVER (\n            PARTITION BY bank_account_id, CAST(transacted_at AS DATE)\n            ORDER BY transacted_at DESC\n        ) AS seq\nFROM    (\n  SELECT  t.bank_account_id,\n          t.withdrawal,\n          t.deposit,\n          t.balance,\n          t.note,\n          t.content,\n          t.processing_branch,\n          t.transacted_at,\n          t.created_at,\n          t.updated_at,\n          a.business_id,\n          a.bank_name,\n          a.account_type,\n          a.account_number,\n          a.created_at AS account_created_at,\n          a.updated_at AS account_updated_at,\n          a.credential_id,\n          a.name,\n          a.uuid,\n          a.holder_name,\n          date_format(t.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    bank_transactions_unique t LEFT OUTER JOIN bank_accounts a\n  ON      t.bank_account_id = a.id\n)\nWHERE   created_at_date is not null""}, 'role': 'process', 'type': 'sql'}]"
113,s3://kcd-de-production/raw/db/snowdon/snapshot/delivery_apps,process:::baemin_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/delivery_apps'}, 'role': 'sink', 'type': 'file'}, {'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  a.business_id,\n        a.accepted_at,\n        a.amount,\n        a.arrived_at,\n        a.created_at,\n        a.delivery_addesss,\n        a.delivery_tip,\n        a.delivery_type,\n        a.discount,\n        a.fee_rate,\n        a.franchise_discount,\n        a.items,\n        a.order_method,\n        a.order_number,\n        v.order_type,\n        a.ordered_at,\n        a.payment,\n        a.payment_method,\n        v.payment_method AS payment_type,\n        a.reserved,\n        a.service_type,\n        a.shop_category,\n        a.shop_discount,\n        a.shop_id,\n        a.shop_name,\n        a.shop_number,\n        a.status,\n        a.takeout_discount,\n        a.updated_at,\n        a.order_amount,\n        a.paid_online,\n        a.paid_offline,\n        a.vat_returnable,\n        a.closed,\n        a.canceled,\n        a.app_name\nFROM    (\n  SELECT  a.business_id,\n          o.*,\n          'baemin' AS app_name\n  FROM    (\n      SELECT    accepted_at,\n                amount,\n                arrived_at,\n                created_at,\n                CAST(null AS string) AS delivery_addesss,\n                delivery_tip,\n                delivery_type,\n                discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                ordered_at,\n                payment,\n                payment_method,\n                reserved,\n                service_type,\n                shop_category,\n                CAST(null AS bigint) AS shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('BARO', 'RIDER') AS paid_online,\n                payment_method in ('MEET') AS paid_offline,\n                CAST(null AS boolean) AS vat_returnable,\n                status = 'CLOSED' AS closed,\n                status = 'CANCELLED' AS canceled\n      FROM      baemin_orders_raw\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id\n) a LEFT OUTER JOIN baemin_sales_vats_raw v\nON  (\n  a.shop_id = v.shop_id  AND\n  CAST(a.ordered_at AS DATE) = CAST(v.ordered_at AS DATE) AND\n  a.order_number = v.order_number\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  a.business_id,\n        a.accepted_at,\n        a.amount,\n        a.arrived_at,\n        a.created_at,\n        a.delivery_addesss,\n        a.delivery_tip,\n        a.delivery_type,\n        a.discount,\n        a.fee_rate,\n        a.franchise_discount,\n        a.id,\n        a.items,\n        a.order_method,\n        a.order_number,\n        a.ordered_at,\n        a.payment,\n        a.payment_method,\n        a.reserved,\n        v.sales_vats,\n        a.service_type,\n        a.shop_category,\n        a.shop_discount,\n        a.shop_id,\n        a.shop_name,\n        a.shop_number,\n        a.status,\n        a.takeout_discount,\n        a.updated_at,\n        a.order_amount,\n        a.paid_online,\n        a.paid_offline,\n        a.vat_returnable,\n        a.closed,\n        a.canceled,\n        a.app_name\nFROM    (\n  SELECT  a.business_id,\n          o.*,\n          'baemin' AS app_name\n  FROM    (\n      SELECT    accepted_at,\n                amount,\n                arrived_at,\n                created_at,\n                CAST(null AS string) AS delivery_addesss,\n                delivery_tip,\n                delivery_type,\n                discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                id,\n                items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                ordered_at,\n                payment,\n                payment_method,\n                reserved,\n                service_type,\n                shop_category,\n                CAST(null AS bigint) AS shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('BARO', 'RIDER') AS paid_online,\n                payment_method in ('MEET') AS paid_offline,\n                CAST(null AS boolean) AS vat_returnable,\n                status = 'CLOSED' AS closed,\n                status = 'CANCELLED' AS canceled\n      FROM      baemin_orders_unique\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id\n) a LEFT OUTER JOIN baemin_sales_vats_raw v\nON  (\n  a.shop_id = v.shop_id  AND\n  CAST(a.ordered_at AS DATE) = CAST(v.ordered_at AS DATE) AND\n  a.order_number = v.order_number\n)""}, 'role': 'process', 'type': 'sql'}]"
114,s3://kcd-de-production/raw/db/snowdon/snapshot/delivery_apps,process:::baedaltong_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/delivery_apps'}, 'role': 'sink', 'type': 'file'}, {'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT    a.business_id,\n          o.*,\n          'baedaltong' AS app_name\nFROM      (\n  SELECT    CAST(null AS timestamp) AS accepted_at,\n            amount,\n            CAST(null AS timestamp) AS arrived_at,\n            created_at,\n            CAST(null AS string) AS delivery_addesss,\n            CAST(null AS bigint) AS delivery_tip,\n            CAST(null AS string) AS delivery_type,\n            CAST(null AS bigint) AS discount,\n            CAST(null AS double) AS fee_rate,\n            CAST(null AS bigint) AS franchise_discount,\n            CAST(null AS string) AS items,\n            order_method,\n            order_number,\n            CAST(null AS string) AS order_type,\n            ordered_at,\n            payment,\n            payment_method,\n            payment_method AS payment_type,\n            CAST(null AS boolean) AS reserved,\n            CAST(null AS string) AS service_type,\n            CAST(null AS integer) AS shop_category,\n            CAST(null AS bigint) AS shop_discount,\n            shop_id,\n            shop_name,\n            shop_number,\n            status,\n            CAST(null AS bigint) AS takeout_discount,\n            updated_at,\n            amount AS order_amount,\n            payment_method not in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_online,\n            payment_method in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_offline,\n            payment_method not in (\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS vat_returnable,\n            status = '결제' AS closed,\n            status = '취소' AS canceled\n  FROM      baedaltong_orders_raw\n) o, delivery_apps a\nWHERE     o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT    a.business_id,\n          o.*,\n          'baedaltong' AS app_name\nFROM      (\n  SELECT    CAST(null AS timestamp) AS accepted_at,\n            amount,\n            CAST(null AS timestamp) AS arrived_at,\n            created_at,\n            CAST(null AS string) AS delivery_addesss,\n            CAST(null AS bigint) AS delivery_tip,\n            CAST(null AS string) AS delivery_type,\n            CAST(null AS bigint) AS discount,\n            CAST(null AS double) AS fee_rate,\n            CAST(null AS bigint) AS franchise_discount,\n            id,\n            CAST(null AS string) AS items,\n            order_method,\n            order_number,\n            CAST(null AS string) AS order_type,\n            ordered_at,\n            payment,\n            payment_method,\n            payment_method AS payment_type,\n            CAST(null AS boolean) AS reserved,\n            CAST(null AS string) AS service_type,\n            CAST(null AS integer) AS shop_category,\n            CAST(null AS bigint) AS shop_discount,\n            shop_id,\n            shop_name,\n            shop_number,\n            status,\n            CAST(null AS bigint) AS takeout_discount,\n            updated_at,\n            amount AS order_amount,\n            payment_method not in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_online,\n            payment_method in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_offline,\n            payment_method not in (\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS vat_returnable,\n            status = '결제' AS closed,\n            status = '취소' AS canceled\n  FROM      baedaltong_orders_unique\n) o, delivery_apps a\nWHERE     o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
115,s3://kcd-de-production/raw/db/snowdon/snapshot/delivery_apps,process:::yogiyo_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/delivery_apps'}, 'role': 'sink', 'type': 'file'}, {'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  a.business_id,\n          o.*,\n          'yogiyo' AS app_name\n  FROM    (\n      SELECT    CAST(null AS timestamp) AS accepted_at,\n                amount,\n                CAST(null AS timestamp) AS arrived_at,\n                created_at,\n                delivery_addesss,\n                delivery_tip,\n                CAST(null AS string) AS delivery_type,\n                CAST(null AS bigint) AS discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                CAST(null AS string) AS items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                payment_method AS order_type,\n                ordered_at,\n                CAST(null AS bigint) AS payment,\n                payment_method,\n                CAST(null AS string) AS payment_type,\n                CAST(null AS boolean) AS reserved,\n                CAST(null AS string) AS service_type,\n                CAST(null AS string) AS shop_category,\n                shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                CAST(null AS bigint) AS takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('온라인 결제') AS paid_online,\n                CAST(null AS boolean) AS vat_returnable,\n                payment_method in ('현금', '신용카드') AS paid_offline,\n                status = '성공' AS closed,\n                status = '취소' AS canceled\n      FROM      yogiyo_orders_raw\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  a.business_id,\n          o.*,\n          'yogiyo' AS app_name\n  FROM    (\n      SELECT    CAST(null AS timestamp) AS accepted_at,\n                amount,\n                CAST(null AS timestamp) AS arrived_at,\n                created_at,\n                delivery_addesss,\n                delivery_tip,\n                CAST(null AS string) AS delivery_type,\n                CAST(null AS bigint) AS discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                id,\n                CAST(null AS string) AS items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                payment_method AS order_type,\n                ordered_at,\n                CAST(null AS bigint) AS payment,\n                payment_method,\n                CAST(null AS string) AS payment_type,\n                CAST(null AS boolean) AS reserved,\n                CAST(null AS string) AS service_type,\n                CAST(null AS string) AS shop_category,\n                shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                CAST(null AS bigint) AS takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('온라인 결제') AS paid_online,\n                CAST(null AS boolean) AS vat_returnable,\n                payment_method in ('현금', '신용카드') AS paid_offline,\n                status = '성공' AS closed,\n                status = '취소' AS canceled\n      FROM      yogiyo_orders_unique\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
116,s3://kcd-de-production/raw/db/snowdon/snapshot/delivery_apps,process:::merged_baemin_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/delivery_apps'}, 'role': 'sink', 'type': 'file'}, {'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baemin' AS app_name\nFROM    (\n    SELECT  *,\n            row_number() OVER (\n                PARTITION BY shop_id, deposited_at, period_started_at, period_ended_at, settle_code\n                ORDER BY status_seq DESC\n            ) AS status_rank\n    FROM    (\n        SELECT *,\n               CASE\n                WHEN status = 'COMPLETE' THEN 2\n                WHEN status = 'REQUEST' THEN 1\n                WHEN status = 'PLAN' THEN 0\n                ELSE 0\n               END AS status_seq\n        FROM   baemin_payments_unique\n        WHERE  received_amount > 0\n    )\n) s, delivery_apps a\nWHERE   status_rank = 1\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baemin' AS app_name\nFROM    (\n    SELECT  *,\n            row_number() OVER (\n                PARTITION BY shop_id, deposited_at, period_started_at, period_ended_at, settle_code\n                ORDER BY status_seq DESC\n            ) AS status_rank\n    FROM    (\n        SELECT *,\n               CASE\n                WHEN status = 'COMPLETE' THEN 2\n                WHEN status = 'REQUEST' THEN 1\n                WHEN status = 'PLAN' THEN 0\n                ELSE 0\n               END AS status_seq\n        FROM   baemin_payments\n        WHERE  received_amount > 0\n    )\n) s, delivery_apps a\nWHERE   status_rank = 1\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
117,s3://kcd-de-production/raw/db/snowdon/snapshot/delivery_apps,process:::merged_baedaltong_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/delivery_apps'}, 'role': 'sink', 'type': 'file'}, {'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baedaltong' AS app_name\nFROM    baedaltong_payments_unique s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baedaltong' AS app_name\nFROM    baedaltong_payments s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
118,s3://kcd-de-production/raw/db/snowdon/snapshot/delivery_apps,process:::merged_yogiyo_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/delivery_apps'}, 'role': 'sink', 'type': 'file'}, {'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'yogiyo' AS app_name\nFROM    yogiyo_payments_unique s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'yogiyo' AS app_name\nFROM    yogiyo_payments s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
119,s3://kcd-de-production/raw/db/snowdon/snapshot/delivery_apps,process:::comments:::delivery,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/delivery_apps'}, 'role': 'sink', 'type': 'file'}, {'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/delivery_apps'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'fact_delivery.json', 'options': {'sql': ""SELECT\n          c.timestamp,\n          date_format(c.timestamp, 'yyyy-MM-dd') AS date_id,\n          delivery_apps.business_id,\n          c.count,\n          c.avg_rating,\n          lower(replace(delivery_apps.type, 'DeliveryApps::', '')) AS name\nFROM (\n  SELECT\n          timestamp,\n          delivery_app_id,\n          COUNT(1) AS count,\n          AVG(rating) AS avg_rating\n  FROM (\n          SELECT\n                  source_id AS delivery_app_id,\n                  date_trunc('MONTH', authored_at) AS timestamp,\n                  rating\n          FROM    place_comments\n          WHERE   created_at_date between '2017-01-01' AND '2020-07-20'\n          AND     source_type = 'DeliveryApp'\n  )\n  GROUP BY timestamp, delivery_app_id\n) AS c\nJOIN delivery_apps\nON c.delivery_app_id = delivery_apps.id""}, 'role': 'process', 'type': 'sql'}]"
120,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_businesses,process:::hometax_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_label_upload.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n    SELECT\n            business_id, address,\n            get_addr_key(address) AS addr_key\n    FROM hometax_business\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
121,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_businesses,process:::result:::hometax_business_label_upload,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_label_upload.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_business_label_upload.json', 'options': {'sql': '  SELECT  b.id,\n          b.business_id,\n          b.name,\n          b.address,\n          b.phone_number,\n          b.owner_name,\n          b.owner_birthday,\n          b.owner_nationality,\n          b.owner_email,\n          b.opened_at,\n          b.operation_status,\n          b.taxation_type,\n          b.item_name,\n          b.item_code,\n          b.login,\n          b.official_name,\n          b.official_code,\n          b.official_number,\n          b.tax_refunds_count,\n          b.created_at,\n          current_timestamp() AS updated_at,\n          l.regular_employees_count,\n          l.size_category,\n          b.owner_address,\n          b.type_name\n  FROM    hometax_businesses b LEFT OUTER JOIN business_label l\n  ON      b.business_id = l.business_id'}, 'role': 'process', 'type': 'sql'}]"
122,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_businesses,process:::hometax_amount:::hometax_business_amount_employee,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_label_upload.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_business_amount_employee.json', 'options': {'sql': ""  SELECT  business_id,\n          amount_sum,\n          fromYear, toYear,\n          year_cnt,\n          (amount_sum / year_cnt) AS amount_avg\n  FROM (\n      SELECT\n               sales.business_id,\n               sales.amount_sum,\n               sales.year_cnt,\n               CAST(YEAR(opend_at) AS INT) AS fromYear,\n               CAST(YEAR(current_date()) AS INT) AS toYear\n      FROM (\n          SELECT business_id, SUM(amount) AS amount_sum, COUNT(DISTINCT YEAR(date)) AS year_cnt\n          FROM hometax_sales_declarations\n          WHERE form_type = '부가가치세신고서'\n          GROUP BY business_id\n      ) sales\n      JOIN (\n          SELECT business_id, opend_at\n          FROM (\n              SELECT business_id, taxation_type, to_date(opened_at, 'yyyyMMdd') AS opend_at\n              FROM hometax_businesses\n          )\n          WHERE opend_at > '2015-12-31' AND opend_at < '2019-01-01'\n          AND taxation_type != '간이과세자'\n      ) valid_businesses\n      ON sales.business_id = valid_businesses.business_id\n  )""}, 'role': 'process', 'type': 'sql'}]"
123,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_businesses,process:::businesses:::hometax_business_amount_employee,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_label_upload.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_business_amount_employee.json', 'options': {'sql': ""  SELECT\n          business_id,\n          opend_at,\n          CASE\n              WHEN opend_at < '2019-01-01' THEN '2019-01-01'\n              WHEN date_trunc('MONTH', opend_at) <= date_trunc('MONTH', add_months(current_date(), -12)) THEN date_trunc('MONTH', add_months(current_date(), -12))\n              ELSE  date_trunc('MONTH', opend_at)\n          END AS from_date,\n          CASE\n              WHEN opend_at < '2019-01-01' THEN '2020-01-01'\n              ELSE  date_trunc('MONTH', current_date())\n          END AS to_date\n\n  FROM (\n      SELECT business_id, to_date(opened_at, 'yyyyMMdd') AS opend_at\n      FROM hometax_businesses\n  )""}, 'role': 'process', 'type': 'sql'}]"
124,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_businesses,process:::hometax_business:::hometax,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_label_upload.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax.json', 'options': {'sql': ""SELECT\n          business_id,\n          name,\n          phone_number,\n          to_date(opened_at, 'yyyyMMdd') AS opend_at,\n          operation_status,\n          taxation_type,\n          created_at\nFROM      hometax_businesses_src""}, 'role': 'process', 'type': 'sql'}]"
125,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_sales_declarations,process:::hometax_amount:::hometax_business_amount_employee,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_sales_declarations'}, 'role': 'sink', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_sales_declarations'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_business_amount_employee.json', 'options': {'sql': ""  SELECT  business_id,\n          amount_sum,\n          fromYear, toYear,\n          year_cnt,\n          (amount_sum / year_cnt) AS amount_avg\n  FROM (\n      SELECT\n               sales.business_id,\n               sales.amount_sum,\n               sales.year_cnt,\n               CAST(YEAR(opend_at) AS INT) AS fromYear,\n               CAST(YEAR(current_date()) AS INT) AS toYear\n      FROM (\n          SELECT business_id, SUM(amount) AS amount_sum, COUNT(DISTINCT YEAR(date)) AS year_cnt\n          FROM hometax_sales_declarations\n          WHERE form_type = '부가가치세신고서'\n          GROUP BY business_id\n      ) sales\n      JOIN (\n          SELECT business_id, opend_at\n          FROM (\n              SELECT business_id, taxation_type, to_date(opened_at, 'yyyyMMdd') AS opend_at\n              FROM hometax_businesses\n          )\n          WHERE opend_at > '2015-12-31' AND opend_at < '2019-01-01'\n          AND taxation_type != '간이과세자'\n      ) valid_businesses\n      ON sales.business_id = valid_businesses.business_id\n  )""}, 'role': 'process', 'type': 'sql'}]"
126,s3://kcd-de-production/raw/db/snowdon/snapshot/hometax_wht_declarations,process:::wht:::hometax_business_amount_employee,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/hometax_wht_declarations'}, 'role': 'sink', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/hometax_wht_declarations'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_business_amount_employee.json', 'options': {'sql': ""  SELECT\n          w.business_id,\n          w.imputed_at,\n          CASE\n              WHEN declare_period = '반기' THEN fulltime_employees_count * 6\n              ELSE fulltime_employees_count\n          END AS fulltime_employees_count\n  FROM hometax_wht_declarations w\n  JOIN (\n      SELECT business_id, imputed_at, max(declared_at) AS declared_at\n      FROM  hometax_wht_declarations\n      GROUP BY business_id, imputed_at\n  ) AS latest_wht\n  ON w.business_id = latest_wht.business_id\n  AND w.imputed_at = latest_wht.imputed_at\n  AND w.declared_at = latest_wht.declared_at""}, 'role': 'process', 'type': 'sql'}]"
127,s3://kcd-de-production/raw/db/snowdon/snapshot/scrapings,process:::businesses_info:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/scrapings'}, 'role': 'sink', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2021-01-02/hour=11/scrapings'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': 'SELECT    businesses.id,\n          businesses.name AS report_business_name,\n          NVL(c.has_delivery_app_credentials, false) AS has_delivery_app_credentials,\n          NVL(c.has_baemin_credential, false) AS has_baemin_credential,\n          NVL(c.has_yogiyo_credential, false) AS has_yogiyo_credential,\n          NVL(c.has_baedaltong_credential, false) AS has_baedaltong_credential,\n          NVL(c.has_hometax_credentials, false) AS has_hometax_credentials\nFROM businesses\nLEFT OUTER JOIN (\n    SELECT\n            business_id,\n            IF(size(delivery_app_credentials) > 0, true, false) AS has_delivery_app_credentials,\n            IF(array_contains(delivery_app_credentials, \'baemin\'), true, false) AS has_baemin_credential,\n            IF(array_contains(delivery_app_credentials, \'yogiyo\'), true, false) AS has_yogiyo_credential,\n            IF(array_contains(delivery_app_credentials, \'baedaltong\'), true, false) AS has_baedaltong_credential,\n            IF(size(hometax_credentials) > 0, true, false) AS has_hometax_credentials\n\n    FROM (\n        SELECT  business_id,\n                collect_list(hometax_credential) AS hometax_credentials,\n                collect_list(delivery_app_credential) AS delivery_app_credentials\n        FROM (\n            SELECT  credentials.business_id,\n                    IF(\n                        credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS hometax_credential,\n                    IF(\n                        credentials.type not in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS delivery_app_credential\n            FROM credentials\n            JOIN scrapings\n            ON scrapings.credential_id = credentials.id\n            where credentials.status = 1\n            AND scrapings.status = 1\n            AND (\n                scrapings.tag in (\'BaeminShop\', \'YogiyoShop\', \'BaedaltongShop\') OR\n                credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\')\n            )\n        )\n        GROUP BY business_id\n    )\n) AS c\nON businesses.id = c.business_id'}, 'role': 'process', 'type': 'sql'}]"
128,s3://kcd-de-production/raw/db/snowdon/snapshot/cards,process:::cards:::businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/cards'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/cards'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_purchases_stat.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/cards', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'businesses.json', 'options': {'sql': ""  SELECT  cards_src.business_id,\n          collect_set(concat(issuer, '_', card_type)) AS issuer,\n          collect_set(name) AS card_names\n  FROM    cards_src\n  JOIN    credentials_src\n  ON      cards_src.credential_id = credentials_src.id\n  WHERE   credentials_src.status != 2\n  GROUP BY cards_src.business_id""}, 'role': 'process', 'type': 'sql'}]"
129,s3://kcd-de-production/raw/db/snowdon/snapshot/cards,process:::card_purchases_stat:::build_card_purchases_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/cards'}, 'role': 'sink', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/cards'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_purchases_stat.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/cards', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_card_purchases_stat.json', 'options': {'sql': 'SELECT  s.*,\n        c.issuer,\n        c.name,\n        c.card_type\nFROM    (\n  SELECT    *\n  FROM      daily_card_purchases_stat\n\n  UNION ALL\n\n  SELECT    *\n  FROM      monthly_card_purchases_stat\n) s, cards c\nWHERE   s.card_id = c.id\nAND     s.business_id = c.business_id'}, 'role': 'process', 'type': 'sql'}]"
130,s3://kcd-de-production/raw/db/snowdon/snapshot/card_merchants,process:::reformat_purchases:::purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/card_merchants'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'purchases_initial.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      (\n  SELECT * FROM current_purchases\n\n  UNION ALL\n\n  SELECT * FROM after_purchases\n) a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}]"
131,s3://kcd-de-production/raw/db/snowdon/snapshot/card_merchants,process:::cashnote_businesses:::registration_number_businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/card_merchants'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_businesses.json', 'options': {'sql': ""  SELECT  business_id, registration_number,\n          collect_set(merchant) AS merchants,\n          collect_set(card_issuer) card_issuers\n  FROM (\n          SELECT\n                  business_id,\n                  registration_number,\n                  CASE\n                      WHEN merchant_number IS NOT NULL THEN struct(card_issuer,merchant_number)\n                      ELSE null\n                  END AS merchant,\n                  card_issuer\n          FROM (\n                  SELECT  businesses.id AS business_id,\n                          businesses.registration_number,\n                          IF(m.issuer_name == '하나(구 외환)', '하나', m.issuer_name) AS card_issuer,\n                          m.merchant_number\n                  FROM    businesses\n                  LEFT OUTER JOIN (\n                          SELECT  *\n                          FROM    card_merchants\n                          WHERE   current = true\n                          AND     affiliated = false\n                  ) AS m\n                  ON businesses.id = m.business_id\n          )\n  )\n  GROUP BY business_id, registration_number""}, 'role': 'process', 'type': 'sql'}]"
132,s3://kcd-de-production/raw/db/snowdon/snapshot/card_merchants,process:::merged_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/card_merchants'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
133,s3://kcd-de-production/raw/db/snowdon/snapshot/card_merchants,process:::reformat_purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/card_merchants'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      after_purchases a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      after_purchases a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}]"
134,s3://kcd-de-production/raw/db/snowdon/snapshot/card_merchants,process:::approvals:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/card_merchants'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS integer)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS integer)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01'\n                      THEN CAST(a.amount * 4 / 110 AS integer)\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      unique_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
135,s3://kcd-de-production/raw/db/snowdon/snapshot/card_merchants,process:::issuer_purchase_period:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/card_merchants'}, 'role': 'sink', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/card_merchants', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/card_merchants'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': 'SELECT\n        business_id,\n        issuer_name,\n        merchant_number,\n        date_sub(purchased_up_to, purchase_period) AS limit_date\nFROM (\n    SELECT\n            business_id,\n            issuer_name,\n            merchant_number,\n            COALESCE(calculated_purchase_period, 1) AS purchase_period,\n            purchased_up_to\n    FROM card_merchants\n    JOIN (\n            SELECT  issuer AS name,\n                    max(date) AS purchased_up_to\n            FROM issuer_histories\n            WHERE purchases = true AND purchases_checked = true\n            GROUP BY issuer\n    ) AS issuers\n    ON card_merchants.issuer_name = issuers.name\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': 'SELECT\n        business_id,\n        issuer_name,\n        merchant_number,\n        date_sub(purchased_up_to, purchase_period) AS limit_date\nFROM (\n    SELECT\n            business_id,\n            issuer_name,\n            merchant_number,\n            COALESCE(calculated_purchase_period, 1) AS purchase_period,\n            purchased_up_to\n    FROM card_merchants\n    JOIN (\n            SELECT  issuer AS name,\n                    max(date) AS purchased_up_to\n            FROM issuer_histories\n            WHERE purchases = true AND purchases_checked = true\n            GROUP BY issuer\n    ) AS issuers\n    ON card_merchants.issuer_name = issuers.name\n)'}, 'role': 'process', 'type': 'sql'}]"
136,s3://kcd-de-production/raw/db/snowdon/snapshot/shinhancard_businesses,process:::shinhancard_business_classification:::merchant_classification_card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/shinhancard_businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/shinhancard_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/shinhancard_businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_card.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT\n                  nvl(snowdon.registration_number, goose.registration_number) AS registration_number,\n                  nvl(snowdon.merchant_number, goose.merchant_number) AS merchant_number,\n                  'shinhan' AS card_issuer,\n                  nvl(snowdon.classification_code, goose.classification_code) AS classification_code,\n                  nvl(snowdon.classification_name, goose.classification_name) AS classification_name\n        FROM (\n                SELECT\n                          card_classification.registration_number,\n                          card_classification.card_issuer,\n                          card_classification.merchant_number,\n                          card_classification.classification_code,\n                          shinhancard_classification.classification_name\n                FROM  (\n                          SELECT  *\n                          FROM    merchant_info\n                          WHERE   card_issuer = 'shinhan'\n                ) card_classification\n                LEFT OUTER JOIN   shinhancard_classification\n                ON    card_classification.classification_code = shinhancard_classification.classification_code\n        ) goose\n        FULL OUTER JOIN (\n          SELECT  *\n          FROM (\n                SELECT    registration_number, merchant_number,\n                          classification_code, classification_name,\n                          row_number() OVER (PARTITION BY registration_number, merchant_number ORDER BY updated_at DESC) AS rank\n                FROM      shinhancard_businesses\n          )\n          WHERE rank = 1\n        ) snowdon\n        ON    goose.registration_number = snowdon.registration_number\n        AND   goose.merchant_number = snowdon.merchant_number\n)\nWHERE     classification_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
137,s3://kcd-de-production/raw/db/snowdon/snapshot/shinhancard_businesses,process:::shinhancard_business_classification:::card_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/shinhancard_businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/shinhancard_businesses'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/shinhancard_businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'card_classification.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT\n                  nvl(snowdon.registration_number, goose.registration_number) AS registration_number,\n                  'shinhan' AS card_issuer,\n                  nvl(snowdon.classification_code, goose.classification_code) AS classification_code,\n                  nvl(snowdon.classification_name, goose.classification_name) AS classification_name\n        FROM (\n                SELECT\n                          card_classification.registration_number,\n                          card_classification.card_issuer,\n                          card_classification.classification_code,\n                          shinhancard_classification.classification_name\n                FROM  (\n                          SELECT  *\n                          FROM    card_payments_classification\n                          WHERE   card_issuer = 'shinhan'\n                ) card_classification\n                LEFT OUTER JOIN   shinhancard_classification\n                ON    card_classification.classification_code = shinhancard_classification.classification_code\n        ) goose\n        FULL OUTER JOIN (\n          SELECT  *\n          FROM (\n                SELECT    registration_number, classification_code, classification_name,\n                          row_number() OVER (PARTITION BY registration_number ORDER BY updated_at DESC) AS rank\n                FROM      shinhancard_businesses\n          )\n          WHERE rank = 1\n        ) snowdon\n        ON    goose.registration_number = snowdon.registration_number\n)\nWHERE  classification_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
138,s3://kcd-de-production/raw/db/snowdon/snapshot/devices,process:::devices:::cashnote_users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/devices'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/devices'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_users.json', 'options': {'sql': '  SELECT\n          user_id,\n          collect_set(device_type) device_type\n  FROM    devices_src\n  WHERE   user_id IS NOT NULL\n  GROUP BY user_id'}, 'role': 'process', 'type': 'sql'}]"
139,s3://kcd-de-production/raw/db/snowdon/snapshot/users,process:::id_mapping:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/users'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n        b.id AS business_id,\n        b.public_id AS public_business_id,\n        u.id AS user_id,\n        u.uuid AS public_user_id,\n        'cashnote' AS user_type\nFROM cashnote_users AS u, cashnote_memberships AS m, cashnote_businesses AS b\nWHERE u.id = m.user_id\nAND m.business_id = b.id\n\nUNION ALL\n\nSELECT  null AS business_id,\n        null AS public_business_id,\n        id AS user_id,\n        uid AS public_user_id,\n        'paynote' AS user_type\nFROM paynote_users""}, 'role': 'process', 'type': 'sql'}]"
140,s3://kcd-de-production/raw/db/snowdon/snapshot/users,process:::owner:::businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/users'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'businesses.json', 'options': {'sql': 'SELECT\n        businesses_src.id AS business_id,\n        u.name AS owner_name,\n        u.phone_number\nFROM (\n      SELECT    users.id AS user_id,\n                users.name AS name,\n                phones.number AS phone_number\n      FROM      users\n      FULL OUTER JOIN   phones\n      ON        users.id = phones.user_id\n) AS u\nJOIN businesses_src\nON u.user_id = businesses_src.owner_id'}, 'role': 'process', 'type': 'sql'}]"
141,s3://kcd-de-production/raw/db/snowdon/snapshot/users,process:::id_mapping:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-10-13/hour=11/users'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'transform_message.json', 'options': {'sql': ""SELECT\n        b.id AS business_id,\n        b.public_id AS public_business_id,\n        u.id AS user_id,\n        u.uuid AS public_user_id,\n        'cashnote' AS user_type\nFROM cashnote_users AS u, cashnote_memberships AS m, cashnote_businesses AS b\nWHERE u.id = m.user_id\nAND m.business_id = b.id\n\nUNION ALL\n\nSELECT  null AS business_id,\n        null AS public_business_id,\n        id AS user_id,\n        uid AS public_user_id,\n        'paynote' AS user_type\nFROM paynote_users""}, 'role': 'process', 'type': 'sql'}]"
142,s3://kcd-de-production/raw/db/goose/snapshot/users,process:::users:::paynote_users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/users'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'paynote_users.json', 'options': {'sql': 'SELECT    *,\n          CASE\n              WHEN age < 20 THEN ""20_under""\n              WHEN age >= 20 AND age < 30 THEN ""20s""\n              WHEN age >= 30 AND age < 40 THEN ""30s""\n              WHEN age >= 40 AND age < 50 THEN ""40s""\n              WHEN age >= 50 AND age < 60 THEN ""50s""\n              WHEN age >= 60 THEN ""60_over""\n              ELSE ""none""\n          END AS age_band\nFROM (\n    SELECT\n            *,\n            year(birth_date) AS birth_year,\n            month(birth_date) AS birth_month,\n            date_format(birth_date, \'MM-dd\') AS birthday,\n            (year(current_date()) - year(birth_date) + 1) AS age\n    FROM (\n            SELECT\n                    id AS user_id,\n                    nickname,\n                    gender,\n                    provider,\n                    to_date(birthday, \'yyyyMMdd\') AS birth_date,\n                    plus_friends,\n                    created_at AS user_created_at\n            FROM    users_src\n    )\n)'}, 'role': 'process', 'type': 'sql'}]"
143,s3://kcd-de-production/raw/db/goose/snapshot/users,process:::id_mapping:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/users'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n        b.id AS business_id,\n        b.public_id AS public_business_id,\n        u.id AS user_id,\n        u.uuid AS public_user_id,\n        'cashnote' AS user_type\nFROM cashnote_users AS u, cashnote_memberships AS m, cashnote_businesses AS b\nWHERE u.id = m.user_id\nAND m.business_id = b.id\n\nUNION ALL\n\nSELECT  null AS business_id,\n        null AS public_business_id,\n        id AS user_id,\n        uid AS public_user_id,\n        'paynote' AS user_type\nFROM paynote_users""}, 'role': 'process', 'type': 'sql'}]"
144,s3://kcd-de-production/raw/db/goose/snapshot/users,process:::payments:::build_user_categories,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/users'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'build_user_categories.json', 'options': {'sql': ""SELECT a.*,\n       u.client_user_id,\n       u.gender,\n       year(current_date()) - year(u.birthday) + 1 AS age,\n       u.birthday,\n       u.plus_friends\nFROM   (\n    SELECT p.*,\n           m.location.sido,\n           m.location.sigungu,\n           m.location.dong,\n           m.location.geo_point,\n           m.classification.depth_1_name,\n           m.classification.depth_2_name,\n           m.classification.depth_3_name\n    FROM   card_payments p LEFT OUTER JOIN registration_number_meta m\n    ON     (p.registration_number = m.registration_number)\n) a, (\n  SELECT  m.client_user_id,\n          m.created,\n          u.id,\n          u.gender,\n          u.birthday,\n          u.plus_friends\n  FROM    users u, client_user_mapping m\n  WHERE   u.ci = m.ci\n  AND     m.realm_id = 'paynote'\n  AND     m.client_id = 'gsshop'\n) u\nWHERE  a.user_id = u.id""}, 'role': 'process', 'type': 'sql'}]"
145,s3://kcd-de-production/raw/db/goose/snapshot/users,process:::id_mapping:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/users'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'transform_message.json', 'options': {'sql': ""SELECT\n        b.id AS business_id,\n        b.public_id AS public_business_id,\n        u.id AS user_id,\n        u.uuid AS public_user_id,\n        'cashnote' AS user_type\nFROM cashnote_users AS u, cashnote_memberships AS m, cashnote_businesses AS b\nWHERE u.id = m.user_id\nAND m.business_id = b.id\n\nUNION ALL\n\nSELECT  null AS business_id,\n        null AS public_business_id,\n        id AS user_id,\n        uid AS public_user_id,\n        'paynote' AS user_type\nFROM paynote_users""}, 'role': 'process', 'type': 'sql'}]"
146,s3://kcd-de-production/raw/db/goose/snapshot/users,process:::dim_phone_number:::paynote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_custom_set.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/users'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/users'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'paynote_custom_set.json', 'options': {'sql': ""  SELECT      custom_set_id, status,\n              users.id AS user_id\n  FROM (\n    SELECT    custom_set_id, custom_set_value, status\n    FROM      custom_set_values\n    WHERE     dimension = 'phone_number'\n    AND       status in ('RUNNING', 'COMPLETE')\n  ) AS custom_set\n  JOIN users\n  ON custom_set.custom_set_value = users.phone_number""}, 'role': 'process', 'type': 'sql'}]"
147,s3://kcd-de-production/raw/db/goose/snapshot/card_agreements,process:::card_agreements:::paynote_users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/card_agreements'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/card_agreements'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'paynote_users.json', 'options': {'sql': '  SELECT  user_id,\n          collect_set(issuer) AS issuers,\n          collect_set(CONCAT(issuer, \'_\', option_type)) AS options\n  FROM (\n          SELECT  *, explode(option_arr) AS option_type\n          FROM (\n                  SELECT  *,\n                          IF(options = \'\\""{}\\""\', array(\'none\'), filterJsonTrue(options)) AS option_arr\n                  FROM    card_agreements_src\n          )\n          WHERE  agreed = true\n  )\n  GROUP BY user_id'}, 'role': 'process', 'type': 'sql'}]"
148,s3://kcd-de-production/raw/db/goose/snapshot/devices,process:::devices:::paynote_users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/devices'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/devices'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'paynote_users.json', 'options': {'sql': 'SELECT    user_id, device_type\nFROM      devices_src\nWHERE     user_id is not null'}, 'role': 'process', 'type': 'sql'}]"
149,s3://kcd-de-production/raw/db/bluebird/snapshot/acceptanced_business_template_answers,process:::acceptance_templates:::paynote_users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_template_answers'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_bluebird.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/bluebird/snapshot/date_id=2021-01-29/acceptanced_business_template_answers'}, 'role': 'sink', 'type': 'file'}, {'filename': 'acceptance_templates.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_template_answers'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'paynote_users.json', 'options': {'sql': ""SELECT\n        user_id,\n        collect_set(complete_poll) AS complete_polls,\n        collect_set(enter_poll) AS enter_polls,\n        collect_set(complete_application) AS complete_applications\nFROM (\n    SELECT\n            paynote_user_id AS user_id,\n            IF (template_type = 'poll' AND answer IS NOT NULL AND answer != '[]', t.id, null) AS complete_poll,\n            IF (template_type = 'poll', t.id, null) AS enter_poll,\n            IF (template_type = 'application', t.id, null) AS complete_application\n    FROM (\n        SELECT IF(step_layout = true, 'poll', 'application') AS template_type,\n                user_type, id, title\n        FROM templates\n        WHERE user_type = 'paynote'\n    ) AS t\n    JOIN answers\n    ON t.id = answers.acceptanced_business_template_id\n)\nGROUP BY user_id""}, 'role': 'process', 'type': 'sql'}]"
150,s3://kcd-de-production/raw/db/bluebird/snapshot/acceptanced_business_template_answers,process:::template_with_answers:::acceptance_templates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_template_answers'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_bluebird.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/bluebird/snapshot/date_id=2021-01-29/acceptanced_business_template_answers'}, 'role': 'sink', 'type': 'file'}, {'filename': 'acceptance_templates.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_template_answers'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'acceptance_templates.json', 'options': {'sql': ""  SELECT\n          business_id,\n          IF (template_type = 'poll' AND answer IS NOT NULL AND answer != '[]', t.id, null) AS complete_poll,\n          IF (template_type = 'poll', t.id, null) AS enter_poll,\n          IF (template_type = 'application', t.id, null) AS complete_application\n  FROM (\n      SELECT IF(step_layout = true, 'poll', 'application') AS template_type,\n              user_type, id, title\n      FROM templates\n      WHERE user_type = 'cashnote'\n  ) AS t\n  JOIN answers\n  ON t.id = answers.acceptanced_business_template_id""}, 'role': 'process', 'type': 'sql'}]"
151,s3://kcd-de-production/raw/db/bluebird/snapshot/acceptanced_business_templates,process:::acceptance_templates:::paynote_users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_templates'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_bluebird.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/bluebird/snapshot/date_id=2021-01-29/acceptanced_business_templates'}, 'role': 'sink', 'type': 'file'}, {'filename': 'acceptance_templates.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_templates'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'paynote_users.json', 'options': {'sql': ""SELECT\n        user_id,\n        collect_set(complete_poll) AS complete_polls,\n        collect_set(enter_poll) AS enter_polls,\n        collect_set(complete_application) AS complete_applications\nFROM (\n    SELECT\n            paynote_user_id AS user_id,\n            IF (template_type = 'poll' AND answer IS NOT NULL AND answer != '[]', t.id, null) AS complete_poll,\n            IF (template_type = 'poll', t.id, null) AS enter_poll,\n            IF (template_type = 'application', t.id, null) AS complete_application\n    FROM (\n        SELECT IF(step_layout = true, 'poll', 'application') AS template_type,\n                user_type, id, title\n        FROM templates\n        WHERE user_type = 'paynote'\n    ) AS t\n    JOIN answers\n    ON t.id = answers.acceptanced_business_template_id\n)\nGROUP BY user_id""}, 'role': 'process', 'type': 'sql'}]"
152,s3://kcd-de-production/raw/db/bluebird/snapshot/acceptanced_business_templates,process:::template_with_answers:::acceptance_templates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_templates'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_bluebird.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/bluebird/snapshot/date_id=2021-01-29/acceptanced_business_templates'}, 'role': 'sink', 'type': 'file'}, {'filename': 'acceptance_templates.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_templates'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'acceptance_templates.json', 'options': {'sql': ""  SELECT\n          business_id,\n          IF (template_type = 'poll' AND answer IS NOT NULL AND answer != '[]', t.id, null) AS complete_poll,\n          IF (template_type = 'poll', t.id, null) AS enter_poll,\n          IF (template_type = 'application', t.id, null) AS complete_application\n  FROM (\n      SELECT IF(step_layout = true, 'poll', 'application') AS template_type,\n              user_type, id, title\n      FROM templates\n      WHERE user_type = 'cashnote'\n  ) AS t\n  JOIN answers\n  ON t.id = answers.acceptanced_business_template_id""}, 'role': 'process', 'type': 'sql'}]"
153,process:::users:::paynote_users,s3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'sql': 'SELECT    *,\n          CASE\n              WHEN age < 20 THEN ""20_under""\n              WHEN age >= 20 AND age < 30 THEN ""20s""\n              WHEN age >= 30 AND age < 40 THEN ""30s""\n              WHEN age >= 40 AND age < 50 THEN ""40s""\n              WHEN age >= 50 AND age < 60 THEN ""50s""\n              WHEN age >= 60 THEN ""60_over""\n              ELSE ""none""\n          END AS age_band\nFROM (\n    SELECT\n            *,\n            year(birth_date) AS birth_year,\n            month(birth_date) AS birth_month,\n            date_format(birth_date, \'MM-dd\') AS birthday,\n            (year(current_date()) - year(birth_date) + 1) AS age\n    FROM (\n            SELECT\n                    id AS user_id,\n                    nickname,\n                    gender,\n                    provider,\n                    to_date(birthday, \'yyyyMMdd\') AS birth_date,\n                    plus_friends,\n                    created_at AS user_created_at\n            FROM    users_src\n    )\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=users'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=users'}, 'role': 'source', 'type': 'file'}]"
154,process:::card_agreements:::paynote_users,s3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=card_agreements,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'sql': '  SELECT  user_id,\n          collect_set(issuer) AS issuers,\n          collect_set(CONCAT(issuer, \'_\', option_type)) AS options\n  FROM (\n          SELECT  *, explode(option_arr) AS option_type\n          FROM (\n                  SELECT  *,\n                          IF(options = \'\\""{}\\""\', array(\'none\'), filterJsonTrue(options)) AS option_arr\n                  FROM    card_agreements_src\n          )\n          WHERE  agreed = true\n  )\n  GROUP BY user_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=card_agreements'}, 'role': 'sink', 'type': 'file'}]"
155,process:::devices:::paynote_users,s3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=devices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'sql': 'SELECT    user_id, device_type\nFROM      devices_src\nWHERE     user_id is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=devices'}, 'role': 'sink', 'type': 'file'}]"
156,process:::acceptance_templates:::paynote_users,s3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=acceptance_templates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'sql': ""SELECT\n        user_id,\n        collect_set(complete_poll) AS complete_polls,\n        collect_set(enter_poll) AS enter_polls,\n        collect_set(complete_application) AS complete_applications\nFROM (\n    SELECT\n            paynote_user_id AS user_id,\n            IF (template_type = 'poll' AND answer IS NOT NULL AND answer != '[]', t.id, null) AS complete_poll,\n            IF (template_type = 'poll', t.id, null) AS enter_poll,\n            IF (template_type = 'application', t.id, null) AS complete_application\n    FROM (\n        SELECT IF(step_layout = true, 'poll', 'application') AS template_type,\n                user_type, id, title\n        FROM templates\n        WHERE user_type = 'paynote'\n    ) AS t\n    JOIN answers\n    ON t.id = answers.acceptanced_business_template_id\n)\nGROUP BY user_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=acceptance_templates'}, 'role': 'sink', 'type': 'file'}]"
157,s3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=users,process:::payments_with_user_demo:::registration_number_card_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=users'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users/name=users'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'sql': "" SELECT\n         payment.*,\n         paynote_users.gender,\n         paynote_users.age_band\n FROM (\n     SELECT\n             date_trunc('MONTH', approved_at) AS timestamp,\n             registration_number,\n             user_id,\n             amount\n     FROM    card_payments\n     WHERE   approved_at between '2020-08-01' AND '2021-01-28'\n     AND     card_issuer IS NOT NULL\n ) AS payment\n JOIN paynote_users\n ON payment.user_id = paynote_users.user_id""}, 'role': 'process', 'type': 'sql'}]"
158,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/approvals_current,process:::transaction_candidates:::build_transaction_candidates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_transaction_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/approvals_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'match_to_approvals.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/approvals_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'build_transaction_candidates.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      merged_approvals a FULL OUTER JOIN merged_purchases p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        mask_card_number(a.card_number) = mask_card_number(p.card_number) AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
159,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/purchases_current,process:::transaction_candidates:::build_transaction_candidates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_transaction_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/purchases_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'match_to_purchases.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/purchases_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'build_transaction_candidates.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      merged_approvals a FULL OUTER JOIN merged_purchases p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        mask_card_number(a.card_number) = mask_card_number(p.card_number) AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
160,process:::transaction_candidates:::build_transaction_candidates,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/transactions_current,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_transaction_candidates.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      merged_approvals a FULL OUTER JOIN merged_purchases p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        mask_card_number(a.card_number) = mask_card_number(p.card_number) AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_transaction_candidates.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/transactions_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'match_to_transactions.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/transactions_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]"
161,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/transactions_current,process:::current_transactions:::match_to_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_transaction_candidates.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/transactions_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'match_to_transactions.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/transactions_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'match_to_transactions.json', 'options': {'sql': ""SELECT    DISTINCT\n            acquirer_name,\n            amount,\n            approval_canceled_at,\n            approval_seq,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            encrypted_card_number,\n            estimated_paid_at,\n            etc_fee,\n            fee,\n            installment,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_cancel_seq,\n            purchase_canceled_at,\n            purchase_delayed,\n            purchase_seq,\n            purchased_at,\n            scraping_type,\n            status,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\nFROM        (\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            CAST(null AS integer) AS base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            CAST(null AS integer) AS etc_fee,\n            approval.fee AS fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            CAST(null AS timestamp) AS paid_at,\n            approval.payment AS payment,\n            CAST(null AS integer) AS point_fee,\n            CAST(null AS integer) AS purchase_cancel_seq,\n            CAST(null AS timestamp) AS purchase_canceled_at,\n            CAST(null AS boolean) AS purchase_delayed,\n            CAST(null AS integer) AS purchase_seq,\n            CAST(null AS timestamp) AS purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            approval.vat_fee AS vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     purchase.business_id is null\n\n  UNION ALL\n\n  SELECT    purchase.acquirer_name,\n            purchase.amount,\n            CAST(null AS integer) AS approval_seq,\n            purchase.authorization_number,\n            purchase.base_fee,\n            purchase.business_id,\n            purchase.card_number,\n            purchase.card_type,\n            purchase.credential_key,\n            CAST(null AS string) AS encrypted_card_number,\n            CAST(null AS timestamp) AS estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            CAST(null AS integer) AS installment,\n            purchase.issuer_name,\n            purchase.masked_card_number,\n            purchase.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            purchase.scraping_type,\n            CAST(null AS integer) AS status,\n            purchase.transacted_at,\n            CAST(null AS timestamp) AS approval_canceled_at,\n            purchase.vat_fee,\n            purchase.created_at,\n            purchase.updated_at,\n            date_format(purchase.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is null\n\n  UNION ALL\n\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            purchase.base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            purchase.vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is not null AND purchase.business_id is not null\n)""}, 'role': 'process', 'type': 'sql'}]"
162,s3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders,process:::baemin_orders_raw:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  accepted_at,\n        amount,\n        arrived_at,\n        created_at,\n        delivery_tip,\n        delivery_type,\n        discount,\n        items,\n        order_number,\n        ordered_at,\n        payment,\n        payment_method,\n        reserved,\n        service_type,\n        shop_category,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        takeout_discount,\n        updated_at\nFROM    baemin_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(accepted_at) AS accepted_at,\n        MAX(amount) AS amount,\n        MAX(arrived_at) AS arrived_at,\n        MAX(created_at) AS created_at,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(delivery_type) AS delivery_type,\n        MAX(discount) AS discount,\n        MAX(items) AS items,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment) AS payment,\n        MAX(payment_method) AS payment_method,\n        MAX(reserved) AS reserved,\n        MAX(service_type) AS service_type,\n        MAX(shop_category) AS shop_category,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(takeout_discount) AS takeout_discount,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  to_timestamp(accepted_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS accepted_at,\n          CAST(amount AS int) AS amount,\n          to_timestamp(arrived_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS arrived_at,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          CAST(delivery_tip AS int) AS delivery_tip,\n          delivery_type,\n          CAST(discount AS int) AS discount,\n          items,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          CAST(payment AS int) AS payment,\n          payment_method,\n          reserved,\n          service_type,\n          shop_category,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          CAST(takeout_discount AS int) AS takeout_discount,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    baemin_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)\nGROUP BY shop_id, order_number, status""}, 'role': 'process', 'type': 'sql'}]"
163,s3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
164,s3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats,process:::baemin_sales_vats_raw:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  amount,\n        created_at,\n        order_number,\n        order_type,\n        ordered_at,\n        payment,\n        payment_method,\n        shop_id,\n        updated_at,\n        vat\nFROM    baemin_sales_vats_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        ordered_at,\n        order_number,\n        collect_list(struct(order_type, payment_method, payment, vat, amount)) AS sales_vats\nFROM    (\n  SELECT  CAST(amount AS int) AS amount,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          order_number,\n          order_type,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          CAST(payment AS int) AS payment,\n          payment_method,\n          shop_id,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          CAST(vat AS int) AS vat,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    baemin_sales_vats_src\n)\nGROUP BY shop_id, ordered_at, order_number""}, 'role': 'process', 'type': 'sql'}]"
165,s3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
166,s3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders,process:::yogiyo_orders_raw:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  amount,\n        created_at,\n        delivery_addesss,\n        delivery_tip,\n        franchise_discount,\n        order_number,\n        ordered_at,\n        payment_method,\n        shop_discount,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        updated_at\nFROM    yogiyo_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(amount) AS amount,\n        MAX(created_at) AS created_at,\n        MAX(delivery_addesss) AS delivery_addesss,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(franchise_discount) AS franchise_discount,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment_method) AS payment_method,\n        MAX(shop_discount) AS shop_discount,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  CAST(amount AS int) AS amount,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          delivery_addesss,\n          CAST(delivery_tip AS int) AS delivery_tip,\n          CAST(franchise_discount AS int) AS franchise_discount,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          payment_method,\n          CAST(shop_discount AS int) AS shop_discount,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    yogiyo_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)\nGROUP BY  shop_id, order_number, status""}, 'role': 'process', 'type': 'sql'}]"
167,s3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
168,s3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders,process:::baedaltong_orders_raw:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  amount,\n        created_at,\n        CAST(fee_rate AS double) AS fee_rate,\n        order_method,\n        order_number,\n        ordered_at,\n        payment,\n        payment_method,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        updated_at\nFROM    baedaltong_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(amount) AS amount,\n        MAX(created_at) AS created_at,\n        MAX(fee_rate) AS fee_rate,\n        MAX(order_method) AS order_method,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment) AS payment,\n        MAX(payment_method) AS payment_method,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  CAST(amount AS int) AS amount,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          CAST(fee_rate AS double) AS fee_rate,\n          order_method,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          CAST(payment AS int) AS payment,\n          payment_method,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    baedaltong_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)""}, 'role': 'process', 'type': 'sql'}]"
169,s3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
170,process:::baemin_orders_raw:::build_delivery_app_orders,process:::baemin_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  accepted_at,\n        amount,\n        arrived_at,\n        created_at,\n        delivery_tip,\n        delivery_type,\n        discount,\n        items,\n        order_number,\n        ordered_at,\n        payment,\n        payment_method,\n        reserved,\n        service_type,\n        shop_category,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        takeout_discount,\n        updated_at\nFROM    baemin_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(accepted_at) AS accepted_at,\n        MAX(amount) AS amount,\n        MAX(arrived_at) AS arrived_at,\n        MAX(created_at) AS created_at,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(delivery_type) AS delivery_type,\n        MAX(discount) AS discount,\n        MAX(items) AS items,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment) AS payment,\n        MAX(payment_method) AS payment_method,\n        MAX(reserved) AS reserved,\n        MAX(service_type) AS service_type,\n        MAX(shop_category) AS shop_category,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(takeout_discount) AS takeout_discount,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  to_timestamp(accepted_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS accepted_at,\n          CAST(amount AS int) AS amount,\n          to_timestamp(arrived_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS arrived_at,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          CAST(delivery_tip AS int) AS delivery_tip,\n          delivery_type,\n          CAST(discount AS int) AS discount,\n          items,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          CAST(payment AS int) AS payment,\n          payment_method,\n          reserved,\n          service_type,\n          shop_category,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          CAST(takeout_discount AS int) AS takeout_discount,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    baemin_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)\nGROUP BY shop_id, order_number, status""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  a.business_id,\n        a.accepted_at,\n        a.amount,\n        a.arrived_at,\n        a.created_at,\n        a.delivery_addesss,\n        a.delivery_tip,\n        a.delivery_type,\n        a.discount,\n        a.fee_rate,\n        a.franchise_discount,\n        a.items,\n        a.order_method,\n        a.order_number,\n        v.order_type,\n        a.ordered_at,\n        a.payment,\n        a.payment_method,\n        v.payment_method AS payment_type,\n        a.reserved,\n        a.service_type,\n        a.shop_category,\n        a.shop_discount,\n        a.shop_id,\n        a.shop_name,\n        a.shop_number,\n        a.status,\n        a.takeout_discount,\n        a.updated_at,\n        a.order_amount,\n        a.paid_online,\n        a.paid_offline,\n        a.vat_returnable,\n        a.closed,\n        a.canceled,\n        a.app_name\nFROM    (\n  SELECT  a.business_id,\n          o.*,\n          'baemin' AS app_name\n  FROM    (\n      SELECT    accepted_at,\n                amount,\n                arrived_at,\n                created_at,\n                CAST(null AS string) AS delivery_addesss,\n                delivery_tip,\n                delivery_type,\n                discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                ordered_at,\n                payment,\n                payment_method,\n                reserved,\n                service_type,\n                shop_category,\n                CAST(null AS bigint) AS shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('BARO', 'RIDER') AS paid_online,\n                payment_method in ('MEET') AS paid_offline,\n                CAST(null AS boolean) AS vat_returnable,\n                status = 'CLOSED' AS closed,\n                status = 'CANCELLED' AS canceled\n      FROM      baemin_orders_raw\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id\n) a LEFT OUTER JOIN baemin_sales_vats_raw v\nON  (\n  a.shop_id = v.shop_id  AND\n  CAST(a.ordered_at AS DATE) = CAST(v.ordered_at AS DATE) AND\n  a.order_number = v.order_number\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  a.business_id,\n        a.accepted_at,\n        a.amount,\n        a.arrived_at,\n        a.created_at,\n        a.delivery_addesss,\n        a.delivery_tip,\n        a.delivery_type,\n        a.discount,\n        a.fee_rate,\n        a.franchise_discount,\n        a.id,\n        a.items,\n        a.order_method,\n        a.order_number,\n        a.ordered_at,\n        a.payment,\n        a.payment_method,\n        a.reserved,\n        v.sales_vats,\n        a.service_type,\n        a.shop_category,\n        a.shop_discount,\n        a.shop_id,\n        a.shop_name,\n        a.shop_number,\n        a.status,\n        a.takeout_discount,\n        a.updated_at,\n        a.order_amount,\n        a.paid_online,\n        a.paid_offline,\n        a.vat_returnable,\n        a.closed,\n        a.canceled,\n        a.app_name\nFROM    (\n  SELECT  a.business_id,\n          o.*,\n          'baemin' AS app_name\n  FROM    (\n      SELECT    accepted_at,\n                amount,\n                arrived_at,\n                created_at,\n                CAST(null AS string) AS delivery_addesss,\n                delivery_tip,\n                delivery_type,\n                discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                id,\n                items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                ordered_at,\n                payment,\n                payment_method,\n                reserved,\n                service_type,\n                shop_category,\n                CAST(null AS bigint) AS shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('BARO', 'RIDER') AS paid_online,\n                payment_method in ('MEET') AS paid_offline,\n                CAST(null AS boolean) AS vat_returnable,\n                status = 'CLOSED' AS closed,\n                status = 'CANCELLED' AS canceled\n      FROM      baemin_orders_unique\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id\n) a LEFT OUTER JOIN baemin_sales_vats_raw v\nON  (\n  a.shop_id = v.shop_id  AND\n  CAST(a.ordered_at AS DATE) = CAST(v.ordered_at AS DATE) AND\n  a.order_number = v.order_number\n)""}, 'role': 'process', 'type': 'sql'}]"
171,process:::baemin_orders_raw:::build_delivery_app_orders,process:::baemin_orders_unique:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  accepted_at,\n        amount,\n        arrived_at,\n        created_at,\n        delivery_tip,\n        delivery_type,\n        discount,\n        items,\n        order_number,\n        ordered_at,\n        payment,\n        payment_method,\n        reserved,\n        service_type,\n        shop_category,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        takeout_discount,\n        updated_at\nFROM    baemin_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(accepted_at) AS accepted_at,\n        MAX(amount) AS amount,\n        MAX(arrived_at) AS arrived_at,\n        MAX(created_at) AS created_at,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(delivery_type) AS delivery_type,\n        MAX(discount) AS discount,\n        MAX(items) AS items,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment) AS payment,\n        MAX(payment_method) AS payment_method,\n        MAX(reserved) AS reserved,\n        MAX(service_type) AS service_type,\n        MAX(shop_category) AS shop_category,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(takeout_discount) AS takeout_discount,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  to_timestamp(accepted_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS accepted_at,\n          CAST(amount AS int) AS amount,\n          to_timestamp(arrived_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS arrived_at,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          CAST(delivery_tip AS int) AS delivery_tip,\n          delivery_type,\n          CAST(discount AS int) AS discount,\n          items,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          CAST(payment AS int) AS payment,\n          payment_method,\n          reserved,\n          service_type,\n          shop_category,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          CAST(takeout_discount AS int) AS takeout_discount,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    baemin_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)\nGROUP BY shop_id, order_number, status""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baemin_orders_raw prev RIGHT OUTER JOIN baemin_orders_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.order_number = current.order_number AND\n  prev.status = current.status\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
172,process:::baemin_sales_vats_raw:::build_delivery_app_orders,process:::baemin_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  amount,\n        created_at,\n        order_number,\n        order_type,\n        ordered_at,\n        payment,\n        payment_method,\n        shop_id,\n        updated_at,\n        vat\nFROM    baemin_sales_vats_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        ordered_at,\n        order_number,\n        collect_list(struct(order_type, payment_method, payment, vat, amount)) AS sales_vats\nFROM    (\n  SELECT  CAST(amount AS int) AS amount,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          order_number,\n          order_type,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          CAST(payment AS int) AS payment,\n          payment_method,\n          shop_id,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          CAST(vat AS int) AS vat,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    baemin_sales_vats_src\n)\nGROUP BY shop_id, ordered_at, order_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  a.business_id,\n        a.accepted_at,\n        a.amount,\n        a.arrived_at,\n        a.created_at,\n        a.delivery_addesss,\n        a.delivery_tip,\n        a.delivery_type,\n        a.discount,\n        a.fee_rate,\n        a.franchise_discount,\n        a.items,\n        a.order_method,\n        a.order_number,\n        v.order_type,\n        a.ordered_at,\n        a.payment,\n        a.payment_method,\n        v.payment_method AS payment_type,\n        a.reserved,\n        a.service_type,\n        a.shop_category,\n        a.shop_discount,\n        a.shop_id,\n        a.shop_name,\n        a.shop_number,\n        a.status,\n        a.takeout_discount,\n        a.updated_at,\n        a.order_amount,\n        a.paid_online,\n        a.paid_offline,\n        a.vat_returnable,\n        a.closed,\n        a.canceled,\n        a.app_name\nFROM    (\n  SELECT  a.business_id,\n          o.*,\n          'baemin' AS app_name\n  FROM    (\n      SELECT    accepted_at,\n                amount,\n                arrived_at,\n                created_at,\n                CAST(null AS string) AS delivery_addesss,\n                delivery_tip,\n                delivery_type,\n                discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                ordered_at,\n                payment,\n                payment_method,\n                reserved,\n                service_type,\n                shop_category,\n                CAST(null AS bigint) AS shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('BARO', 'RIDER') AS paid_online,\n                payment_method in ('MEET') AS paid_offline,\n                CAST(null AS boolean) AS vat_returnable,\n                status = 'CLOSED' AS closed,\n                status = 'CANCELLED' AS canceled\n      FROM      baemin_orders_raw\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id\n) a LEFT OUTER JOIN baemin_sales_vats_raw v\nON  (\n  a.shop_id = v.shop_id  AND\n  CAST(a.ordered_at AS DATE) = CAST(v.ordered_at AS DATE) AND\n  a.order_number = v.order_number\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  a.business_id,\n        a.accepted_at,\n        a.amount,\n        a.arrived_at,\n        a.created_at,\n        a.delivery_addesss,\n        a.delivery_tip,\n        a.delivery_type,\n        a.discount,\n        a.fee_rate,\n        a.franchise_discount,\n        a.id,\n        a.items,\n        a.order_method,\n        a.order_number,\n        a.ordered_at,\n        a.payment,\n        a.payment_method,\n        a.reserved,\n        v.sales_vats,\n        a.service_type,\n        a.shop_category,\n        a.shop_discount,\n        a.shop_id,\n        a.shop_name,\n        a.shop_number,\n        a.status,\n        a.takeout_discount,\n        a.updated_at,\n        a.order_amount,\n        a.paid_online,\n        a.paid_offline,\n        a.vat_returnable,\n        a.closed,\n        a.canceled,\n        a.app_name\nFROM    (\n  SELECT  a.business_id,\n          o.*,\n          'baemin' AS app_name\n  FROM    (\n      SELECT    accepted_at,\n                amount,\n                arrived_at,\n                created_at,\n                CAST(null AS string) AS delivery_addesss,\n                delivery_tip,\n                delivery_type,\n                discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                id,\n                items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                ordered_at,\n                payment,\n                payment_method,\n                reserved,\n                service_type,\n                shop_category,\n                CAST(null AS bigint) AS shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('BARO', 'RIDER') AS paid_online,\n                payment_method in ('MEET') AS paid_offline,\n                CAST(null AS boolean) AS vat_returnable,\n                status = 'CLOSED' AS closed,\n                status = 'CANCELLED' AS canceled\n      FROM      baemin_orders_unique\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id\n) a LEFT OUTER JOIN baemin_sales_vats_raw v\nON  (\n  a.shop_id = v.shop_id  AND\n  CAST(a.ordered_at AS DATE) = CAST(v.ordered_at AS DATE) AND\n  a.order_number = v.order_number\n)""}, 'role': 'process', 'type': 'sql'}]"
173,process:::yogiyo_orders_raw:::build_delivery_app_orders,process:::yogiyo_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  amount,\n        created_at,\n        delivery_addesss,\n        delivery_tip,\n        franchise_discount,\n        order_number,\n        ordered_at,\n        payment_method,\n        shop_discount,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        updated_at\nFROM    yogiyo_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(amount) AS amount,\n        MAX(created_at) AS created_at,\n        MAX(delivery_addesss) AS delivery_addesss,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(franchise_discount) AS franchise_discount,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment_method) AS payment_method,\n        MAX(shop_discount) AS shop_discount,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  CAST(amount AS int) AS amount,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          delivery_addesss,\n          CAST(delivery_tip AS int) AS delivery_tip,\n          CAST(franchise_discount AS int) AS franchise_discount,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          payment_method,\n          CAST(shop_discount AS int) AS shop_discount,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    yogiyo_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)\nGROUP BY  shop_id, order_number, status""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  a.business_id,\n          o.*,\n          'yogiyo' AS app_name\n  FROM    (\n      SELECT    CAST(null AS timestamp) AS accepted_at,\n                amount,\n                CAST(null AS timestamp) AS arrived_at,\n                created_at,\n                delivery_addesss,\n                delivery_tip,\n                CAST(null AS string) AS delivery_type,\n                CAST(null AS bigint) AS discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                CAST(null AS string) AS items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                payment_method AS order_type,\n                ordered_at,\n                CAST(null AS bigint) AS payment,\n                payment_method,\n                CAST(null AS string) AS payment_type,\n                CAST(null AS boolean) AS reserved,\n                CAST(null AS string) AS service_type,\n                CAST(null AS string) AS shop_category,\n                shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                CAST(null AS bigint) AS takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('온라인 결제') AS paid_online,\n                CAST(null AS boolean) AS vat_returnable,\n                payment_method in ('현금', '신용카드') AS paid_offline,\n                status = '성공' AS closed,\n                status = '취소' AS canceled\n      FROM      yogiyo_orders_raw\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  a.business_id,\n          o.*,\n          'yogiyo' AS app_name\n  FROM    (\n      SELECT    CAST(null AS timestamp) AS accepted_at,\n                amount,\n                CAST(null AS timestamp) AS arrived_at,\n                created_at,\n                delivery_addesss,\n                delivery_tip,\n                CAST(null AS string) AS delivery_type,\n                CAST(null AS bigint) AS discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                id,\n                CAST(null AS string) AS items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                payment_method AS order_type,\n                ordered_at,\n                CAST(null AS bigint) AS payment,\n                payment_method,\n                CAST(null AS string) AS payment_type,\n                CAST(null AS boolean) AS reserved,\n                CAST(null AS string) AS service_type,\n                CAST(null AS string) AS shop_category,\n                shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                CAST(null AS bigint) AS takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('온라인 결제') AS paid_online,\n                CAST(null AS boolean) AS vat_returnable,\n                payment_method in ('현금', '신용카드') AS paid_offline,\n                status = '성공' AS closed,\n                status = '취소' AS canceled\n      FROM      yogiyo_orders_unique\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
174,process:::yogiyo_orders_raw:::build_delivery_app_orders,process:::yogiyo_orders_unique:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  amount,\n        created_at,\n        delivery_addesss,\n        delivery_tip,\n        franchise_discount,\n        order_number,\n        ordered_at,\n        payment_method,\n        shop_discount,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        updated_at\nFROM    yogiyo_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(amount) AS amount,\n        MAX(created_at) AS created_at,\n        MAX(delivery_addesss) AS delivery_addesss,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(franchise_discount) AS franchise_discount,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment_method) AS payment_method,\n        MAX(shop_discount) AS shop_discount,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  CAST(amount AS int) AS amount,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          delivery_addesss,\n          CAST(delivery_tip AS int) AS delivery_tip,\n          CAST(franchise_discount AS int) AS franchise_discount,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          payment_method,\n          CAST(shop_discount AS int) AS shop_discount,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    yogiyo_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)\nGROUP BY  shop_id, order_number, status""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_yogiyo_orders_raw prev RIGHT OUTER JOIN yogiyo_orders_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.order_number = current.order_number AND\n  prev.status = current.status\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
175,process:::baedaltong_orders_raw:::build_delivery_app_orders,process:::baedaltong_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  amount,\n        created_at,\n        CAST(fee_rate AS double) AS fee_rate,\n        order_method,\n        order_number,\n        ordered_at,\n        payment,\n        payment_method,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        updated_at\nFROM    baedaltong_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(amount) AS amount,\n        MAX(created_at) AS created_at,\n        MAX(fee_rate) AS fee_rate,\n        MAX(order_method) AS order_method,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment) AS payment,\n        MAX(payment_method) AS payment_method,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  CAST(amount AS int) AS amount,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          CAST(fee_rate AS double) AS fee_rate,\n          order_method,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          CAST(payment AS int) AS payment,\n          payment_method,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    baedaltong_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT    a.business_id,\n          o.*,\n          'baedaltong' AS app_name\nFROM      (\n  SELECT    CAST(null AS timestamp) AS accepted_at,\n            amount,\n            CAST(null AS timestamp) AS arrived_at,\n            created_at,\n            CAST(null AS string) AS delivery_addesss,\n            CAST(null AS bigint) AS delivery_tip,\n            CAST(null AS string) AS delivery_type,\n            CAST(null AS bigint) AS discount,\n            CAST(null AS double) AS fee_rate,\n            CAST(null AS bigint) AS franchise_discount,\n            CAST(null AS string) AS items,\n            order_method,\n            order_number,\n            CAST(null AS string) AS order_type,\n            ordered_at,\n            payment,\n            payment_method,\n            payment_method AS payment_type,\n            CAST(null AS boolean) AS reserved,\n            CAST(null AS string) AS service_type,\n            CAST(null AS integer) AS shop_category,\n            CAST(null AS bigint) AS shop_discount,\n            shop_id,\n            shop_name,\n            shop_number,\n            status,\n            CAST(null AS bigint) AS takeout_discount,\n            updated_at,\n            amount AS order_amount,\n            payment_method not in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_online,\n            payment_method in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_offline,\n            payment_method not in (\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS vat_returnable,\n            status = '결제' AS closed,\n            status = '취소' AS canceled\n  FROM      baedaltong_orders_raw\n) o, delivery_apps a\nWHERE     o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT    a.business_id,\n          o.*,\n          'baedaltong' AS app_name\nFROM      (\n  SELECT    CAST(null AS timestamp) AS accepted_at,\n            amount,\n            CAST(null AS timestamp) AS arrived_at,\n            created_at,\n            CAST(null AS string) AS delivery_addesss,\n            CAST(null AS bigint) AS delivery_tip,\n            CAST(null AS string) AS delivery_type,\n            CAST(null AS bigint) AS discount,\n            CAST(null AS double) AS fee_rate,\n            CAST(null AS bigint) AS franchise_discount,\n            id,\n            CAST(null AS string) AS items,\n            order_method,\n            order_number,\n            CAST(null AS string) AS order_type,\n            ordered_at,\n            payment,\n            payment_method,\n            payment_method AS payment_type,\n            CAST(null AS boolean) AS reserved,\n            CAST(null AS string) AS service_type,\n            CAST(null AS integer) AS shop_category,\n            CAST(null AS bigint) AS shop_discount,\n            shop_id,\n            shop_name,\n            shop_number,\n            status,\n            CAST(null AS bigint) AS takeout_discount,\n            updated_at,\n            amount AS order_amount,\n            payment_method not in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_online,\n            payment_method in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_offline,\n            payment_method not in (\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS vat_returnable,\n            status = '결제' AS closed,\n            status = '취소' AS canceled\n  FROM      baedaltong_orders_unique\n) o, delivery_apps a\nWHERE     o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
176,process:::baedaltong_orders_raw:::build_delivery_app_orders,process:::baedaltong_orders_unique:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  amount,\n        created_at,\n        CAST(fee_rate AS double) AS fee_rate,\n        order_method,\n        order_number,\n        ordered_at,\n        payment,\n        payment_method,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        updated_at\nFROM    baedaltong_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(amount) AS amount,\n        MAX(created_at) AS created_at,\n        MAX(fee_rate) AS fee_rate,\n        MAX(order_method) AS order_method,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment) AS payment,\n        MAX(payment_method) AS payment_method,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  CAST(amount AS int) AS amount,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          CAST(fee_rate AS double) AS fee_rate,\n          order_method,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          CAST(payment AS int) AS payment,\n          payment_method,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    baedaltong_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baedaltong_orders_raw prev RIGHT OUTER JOIN baedaltong_orders_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.order_number = current.order_number AND\n  prev.status = current.status\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
177,process:::baemin_orders:::build_delivery_app_orders,process:::merged_baemin_orders_candidates:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  a.business_id,\n        a.accepted_at,\n        a.amount,\n        a.arrived_at,\n        a.created_at,\n        a.delivery_addesss,\n        a.delivery_tip,\n        a.delivery_type,\n        a.discount,\n        a.fee_rate,\n        a.franchise_discount,\n        a.items,\n        a.order_method,\n        a.order_number,\n        v.order_type,\n        a.ordered_at,\n        a.payment,\n        a.payment_method,\n        v.payment_method AS payment_type,\n        a.reserved,\n        a.service_type,\n        a.shop_category,\n        a.shop_discount,\n        a.shop_id,\n        a.shop_name,\n        a.shop_number,\n        a.status,\n        a.takeout_discount,\n        a.updated_at,\n        a.order_amount,\n        a.paid_online,\n        a.paid_offline,\n        a.vat_returnable,\n        a.closed,\n        a.canceled,\n        a.app_name\nFROM    (\n  SELECT  a.business_id,\n          o.*,\n          'baemin' AS app_name\n  FROM    (\n      SELECT    accepted_at,\n                amount,\n                arrived_at,\n                created_at,\n                CAST(null AS string) AS delivery_addesss,\n                delivery_tip,\n                delivery_type,\n                discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                ordered_at,\n                payment,\n                payment_method,\n                reserved,\n                service_type,\n                shop_category,\n                CAST(null AS bigint) AS shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('BARO', 'RIDER') AS paid_online,\n                payment_method in ('MEET') AS paid_offline,\n                CAST(null AS boolean) AS vat_returnable,\n                status = 'CLOSED' AS closed,\n                status = 'CANCELLED' AS canceled\n      FROM      baemin_orders_raw\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id\n) a LEFT OUTER JOIN baemin_sales_vats_raw v\nON  (\n  a.shop_id = v.shop_id  AND\n  CAST(a.ordered_at AS DATE) = CAST(v.ordered_at AS DATE) AND\n  a.order_number = v.order_number\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  a.business_id,\n        a.accepted_at,\n        a.amount,\n        a.arrived_at,\n        a.created_at,\n        a.delivery_addesss,\n        a.delivery_tip,\n        a.delivery_type,\n        a.discount,\n        a.fee_rate,\n        a.franchise_discount,\n        a.id,\n        a.items,\n        a.order_method,\n        a.order_number,\n        a.ordered_at,\n        a.payment,\n        a.payment_method,\n        a.reserved,\n        v.sales_vats,\n        a.service_type,\n        a.shop_category,\n        a.shop_discount,\n        a.shop_id,\n        a.shop_name,\n        a.shop_number,\n        a.status,\n        a.takeout_discount,\n        a.updated_at,\n        a.order_amount,\n        a.paid_online,\n        a.paid_offline,\n        a.vat_returnable,\n        a.closed,\n        a.canceled,\n        a.app_name\nFROM    (\n  SELECT  a.business_id,\n          o.*,\n          'baemin' AS app_name\n  FROM    (\n      SELECT    accepted_at,\n                amount,\n                arrived_at,\n                created_at,\n                CAST(null AS string) AS delivery_addesss,\n                delivery_tip,\n                delivery_type,\n                discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                id,\n                items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                ordered_at,\n                payment,\n                payment_method,\n                reserved,\n                service_type,\n                shop_category,\n                CAST(null AS bigint) AS shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('BARO', 'RIDER') AS paid_online,\n                payment_method in ('MEET') AS paid_offline,\n                CAST(null AS boolean) AS vat_returnable,\n                status = 'CLOSED' AS closed,\n                status = 'CANCELLED' AS canceled\n      FROM      baemin_orders_unique\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id\n) a LEFT OUTER JOIN baemin_sales_vats_raw v\nON  (\n  a.shop_id = v.shop_id  AND\n  CAST(a.ordered_at AS DATE) = CAST(v.ordered_at AS DATE) AND\n  a.order_number = v.order_number\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   baemin_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   baemin_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   baemin_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   baemin_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}]"
178,process:::baedaltong_orders:::build_delivery_app_orders,process:::merged_baedaltong_orders_candidates:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT    a.business_id,\n          o.*,\n          'baedaltong' AS app_name\nFROM      (\n  SELECT    CAST(null AS timestamp) AS accepted_at,\n            amount,\n            CAST(null AS timestamp) AS arrived_at,\n            created_at,\n            CAST(null AS string) AS delivery_addesss,\n            CAST(null AS bigint) AS delivery_tip,\n            CAST(null AS string) AS delivery_type,\n            CAST(null AS bigint) AS discount,\n            CAST(null AS double) AS fee_rate,\n            CAST(null AS bigint) AS franchise_discount,\n            CAST(null AS string) AS items,\n            order_method,\n            order_number,\n            CAST(null AS string) AS order_type,\n            ordered_at,\n            payment,\n            payment_method,\n            payment_method AS payment_type,\n            CAST(null AS boolean) AS reserved,\n            CAST(null AS string) AS service_type,\n            CAST(null AS integer) AS shop_category,\n            CAST(null AS bigint) AS shop_discount,\n            shop_id,\n            shop_name,\n            shop_number,\n            status,\n            CAST(null AS bigint) AS takeout_discount,\n            updated_at,\n            amount AS order_amount,\n            payment_method not in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_online,\n            payment_method in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_offline,\n            payment_method not in (\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS vat_returnable,\n            status = '결제' AS closed,\n            status = '취소' AS canceled\n  FROM      baedaltong_orders_raw\n) o, delivery_apps a\nWHERE     o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT    a.business_id,\n          o.*,\n          'baedaltong' AS app_name\nFROM      (\n  SELECT    CAST(null AS timestamp) AS accepted_at,\n            amount,\n            CAST(null AS timestamp) AS arrived_at,\n            created_at,\n            CAST(null AS string) AS delivery_addesss,\n            CAST(null AS bigint) AS delivery_tip,\n            CAST(null AS string) AS delivery_type,\n            CAST(null AS bigint) AS discount,\n            CAST(null AS double) AS fee_rate,\n            CAST(null AS bigint) AS franchise_discount,\n            id,\n            CAST(null AS string) AS items,\n            order_method,\n            order_number,\n            CAST(null AS string) AS order_type,\n            ordered_at,\n            payment,\n            payment_method,\n            payment_method AS payment_type,\n            CAST(null AS boolean) AS reserved,\n            CAST(null AS string) AS service_type,\n            CAST(null AS integer) AS shop_category,\n            CAST(null AS bigint) AS shop_discount,\n            shop_id,\n            shop_name,\n            shop_number,\n            status,\n            CAST(null AS bigint) AS takeout_discount,\n            updated_at,\n            amount AS order_amount,\n            payment_method not in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_online,\n            payment_method in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_offline,\n            payment_method not in (\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS vat_returnable,\n            status = '결제' AS closed,\n            status = '취소' AS canceled\n  FROM      baedaltong_orders_unique\n) o, delivery_apps a\nWHERE     o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   baedaltong_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   baedaltong_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   baedaltong_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   baedaltong_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}]"
179,process:::yogiyo_orders:::build_delivery_app_orders,process:::merged_yogiyo_orders_candidates:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  a.business_id,\n          o.*,\n          'yogiyo' AS app_name\n  FROM    (\n      SELECT    CAST(null AS timestamp) AS accepted_at,\n                amount,\n                CAST(null AS timestamp) AS arrived_at,\n                created_at,\n                delivery_addesss,\n                delivery_tip,\n                CAST(null AS string) AS delivery_type,\n                CAST(null AS bigint) AS discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                CAST(null AS string) AS items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                payment_method AS order_type,\n                ordered_at,\n                CAST(null AS bigint) AS payment,\n                payment_method,\n                CAST(null AS string) AS payment_type,\n                CAST(null AS boolean) AS reserved,\n                CAST(null AS string) AS service_type,\n                CAST(null AS string) AS shop_category,\n                shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                CAST(null AS bigint) AS takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('온라인 결제') AS paid_online,\n                CAST(null AS boolean) AS vat_returnable,\n                payment_method in ('현금', '신용카드') AS paid_offline,\n                status = '성공' AS closed,\n                status = '취소' AS canceled\n      FROM      yogiyo_orders_raw\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  a.business_id,\n          o.*,\n          'yogiyo' AS app_name\n  FROM    (\n      SELECT    CAST(null AS timestamp) AS accepted_at,\n                amount,\n                CAST(null AS timestamp) AS arrived_at,\n                created_at,\n                delivery_addesss,\n                delivery_tip,\n                CAST(null AS string) AS delivery_type,\n                CAST(null AS bigint) AS discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                id,\n                CAST(null AS string) AS items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                payment_method AS order_type,\n                ordered_at,\n                CAST(null AS bigint) AS payment,\n                payment_method,\n                CAST(null AS string) AS payment_type,\n                CAST(null AS boolean) AS reserved,\n                CAST(null AS string) AS service_type,\n                CAST(null AS string) AS shop_category,\n                shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                CAST(null AS bigint) AS takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('온라인 결제') AS paid_online,\n                CAST(null AS boolean) AS vat_returnable,\n                payment_method in ('현금', '신용카드') AS paid_offline,\n                status = '성공' AS closed,\n                status = '취소' AS canceled\n      FROM      yogiyo_orders_unique\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   yogiyo_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   yogiyo_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   yogiyo_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   yogiyo_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}]"
180,process:::merged_baemin_orders_candidates:::build_delivery_app_orders,process:::merged_baemin_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   baemin_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   baemin_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   baemin_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   baemin_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}]"
181,process:::merged_baemin_orders:::build_delivery_app_orders,process:::delivery_app_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baemin_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': '  SELECT  * FROM  merged_baemin_orders\n  UNION ALL\n  SELECT  * FROM  merged_baedaltong_orders\n  UNION ALL\n  SELECT  * FROM  merged_yogiyo_orders'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': '  SELECT  * FROM  merged_baemin_orders\n  UNION ALL\n  SELECT  * FROM  merged_baedaltong_orders\n  UNION ALL\n  SELECT  * FROM  merged_yogiyo_orders'}, 'role': 'process', 'type': 'sql'}]"
182,process:::merged_baedaltong_orders_candidates:::build_delivery_app_orders,process:::merged_baedaltong_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   baedaltong_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   baedaltong_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   baedaltong_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   baedaltong_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}]"
183,process:::merged_baedaltong_orders:::build_delivery_app_orders,process:::delivery_app_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_baedaltong_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': '  SELECT  * FROM  merged_baemin_orders\n  UNION ALL\n  SELECT  * FROM  merged_baedaltong_orders\n  UNION ALL\n  SELECT  * FROM  merged_yogiyo_orders'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': '  SELECT  * FROM  merged_baemin_orders\n  UNION ALL\n  SELECT  * FROM  merged_baedaltong_orders\n  UNION ALL\n  SELECT  * FROM  merged_yogiyo_orders'}, 'role': 'process', 'type': 'sql'}]"
184,process:::merged_yogiyo_orders_candidates:::build_delivery_app_orders,process:::merged_yogiyo_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   yogiyo_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   yogiyo_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': '  SELECT  struct(closed.*) AS closed,\n          struct(cancelled.*) AS cancelled\n  FROM    (\n      SELECT *\n      FROM   yogiyo_orders\n      WHERE  closed = true\n  ) closed FULL OUTER JOIN (\n      SELECT *\n      FROM   yogiyo_orders\n      WHERE  canceled = true\n  ) cancelled ON (\n    closed.shop_id = cancelled.shop_id AND\n    closed.order_number = cancelled.order_number\n  )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}]"
185,process:::merged_yogiyo_orders:::build_delivery_app_orders,process:::delivery_app_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  closed.*,\n          CAST(null AS timestamp) AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is null\n\n  UNION ALL\n\n  SELECT  closed.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(closed.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is not null AND cancelled.shop_id is not null\n\n  UNION ALL\n\n  SELECT  cancelled.*,\n          cancelled.ordered_at AS cancelled_at,\n          date_format(cancelled.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    merged_yogiyo_orders_candidates\n  WHERE   closed.shop_id is null AND cancelled.shop_id is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': '  SELECT  * FROM  merged_baemin_orders\n  UNION ALL\n  SELECT  * FROM  merged_baedaltong_orders\n  UNION ALL\n  SELECT  * FROM  merged_yogiyo_orders'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': '  SELECT  * FROM  merged_baemin_orders\n  UNION ALL\n  SELECT  * FROM  merged_baedaltong_orders\n  UNION ALL\n  SELECT  * FROM  merged_yogiyo_orders'}, 'role': 'process', 'type': 'sql'}]"
186,process:::delivery_app_orders:::build_delivery_app_orders,s3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': '  SELECT  * FROM  merged_baemin_orders\n  UNION ALL\n  SELECT  * FROM  merged_baedaltong_orders\n  UNION ALL\n  SELECT  * FROM  merged_yogiyo_orders'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': '  SELECT  * FROM  merged_baemin_orders\n  UNION ALL\n  SELECT  * FROM  merged_baedaltong_orders\n  UNION ALL\n  SELECT  * FROM  merged_yogiyo_orders'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'delivery_app_orders_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders'}, 'role': 'source', 'type': 'file'}]"
187,s3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders,process:::prev_baemin_orders_raw:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'delivery_app_orders_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_orders_src\nWHERE   app_name = 'baemin'\nAND     created_at_date >= '2020-10-02'\nAND     created_at_date < '2020-10-09'""}, 'role': 'process', 'type': 'sql'}]"
188,s3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders,process:::prev_yogiyo_orders_raw:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'delivery_app_orders_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_orders_src\nWHERE   app_name = 'yogiyo'\nAND     created_at_date >= '2020-10-02'\nAND     created_at_date < '2020-10-09'""}, 'role': 'process', 'type': 'sql'}]"
189,s3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders,process:::prev_baedaltong_orders_raw:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'delivery_app_orders_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_orders_src\nWHERE   app_name = 'baedaltong'\nAND     created_at_date >= '2020-10-02'\nAND     created_at_date < '2020-10-09'""}, 'role': 'process', 'type': 'sql'}]"
190,s3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders,process:::delivery_app_orders:::delivery_app_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'delivery_app_orders_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_src\nWHERE     created_at_date >= ''\nAND       created_at_date < ''\nAND       closed""}, 'role': 'process', 'type': 'sql'}]"
191,s3://kcd-de-production/data_sources/lookup/subject=location/name=total_region,process:::hometax_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n    SELECT\n            business_id, address,\n            get_addr_key(address) AS addr_key\n    FROM hometax_business\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
192,s3://kcd-de-production/data_sources/lookup/subject=location/name=total_region,process:::place_naver_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        source_address.business_id,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        business_id,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n            latitude > 100,\n            CONCAT(longitude, ',', latitude),\n            CONCAT(latitude, ',', longitude)\n        ) AS location\n    FROM places\n    WHERE type = 'Places::Naver'\n    AND business_id is not null\n    AND lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
193,s3://kcd-de-production/data_sources/lookup/subject=location/name=total_region,process:::place_kakao_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        source_address.business_id,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        business_id,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n              latitude > 100,\n              CONCAT(longitude, ',', latitude),\n              CONCAT(latitude, ',', longitude)\n          ) AS location\n    FROM places\n    WHERE type = 'Places::Daum'\n    AND business_id is not null\n    AND lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
194,s3://kcd-de-production/data_sources/lookup/subject=location/name=total_region,process:::business_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT  id AS business_id,\n        get_addr_key(address) AS addr_key,\n        address\n    FROM businesses\n    WHERE address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address\n\nUNION ALL\n\nSELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        null AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n    SELECT\n            business_id,\n            get_addr_key_sigungu(addr_key) AS addr_key,\n            address\n    FROM (\n        SELECT  id AS business_id,\n                get_addr_key(address) AS addr_key,\n                address\n        FROM businesses\n        WHERE address is not null\n    )\n    WHERE is_street_address(addr_key) = true\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'sigungu'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
195,s3://kcd-de-production/data_sources/lookup/subject=location/name=total_region,process:::naver_basic_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        source_address.location AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n            business_id, address, location,\n            get_addr_key(address) AS addr_key\n    FROM (\n            SELECT\n                    business_id,\n                    CONCAT(coordinate.y, ',', coordinate.x) AS location,\n                    to_region_address(full_road_addr, addr) AS address\n            FROM naver_basic\n            WHERE full_road_addr is not null AND addr is not null\n    )\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
196,s3://kcd-de-production/data_sources/lookup/subject=location/name=total_region,process:::kakao_basic_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n    SELECT\n        business_id,\n        get_addr_key(address.region.fullname) AS addr_key,\n        CONCAT(address.region.fullname, ' ', nvl(address.addrdetail, ''), address.addrbunho) AS address\n    FROM kakao_basic\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
197,s3://kcd-de-production/data_sources/lookup/subject=location/name=total_region,process:::result:::sales_amount_by_region,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'sales_amount_by_region.json', 'options': {'sql': ""  SELECT\n          place_metric.*,\n          to_json(region.geometry) AS geometry\n  FROM (\n  SELECT\n          address.sido, address.sigungu, address.sigungu_code,\n          place_classification.depth_1_name AS kcd_classification_1_depth,\n          COUNT(distinct(business_id)) AS business_cnt,\n          SUM(amount_sum) AS amount_sum,\n          cast(AVG(amount_sum) as bigint) AS amount_avg,\n          SUM(tx_count) AS payment_cnt_sum,\n          cast(AVG(tx_count) as bigint) AS payment_cnt_avg,\n          cast(AVG(unit_price) as bigint) AS unit_price\n  FROM (\n      SELECT  meta.business_id,\n              address,\n              place_classification,\n              amount_sum,\n              tx_count,\n              (amount_sum / tx_count) AS unit_price\n      FROM (\n              SELECT  business_id,\n                      location.common AS address,\n                      classification.place AS place_classification\n              FROM business_meta\n              WHERE classification.place is not null\n              AND  location.common is not null\n      ) AS meta\n      JOIN card_sales_transactions\n      ON meta.business_id = card_sales_transactions.business_id\n  )\n  GROUP BY address.sido, address.sigungu, address.sigungu_code, place_classification.depth_1_name\n  HAVING business_cnt > 10\n  ) AS place_metric\n  LEFT OUTER JOIN (SELECT * FROM total_region WHERE region_type = 'sigungu') AS region\n  ON place_metric.sigungu_code = region.code\n  ORDER BY sigungu, business_cnt DESC""}, 'role': 'process', 'type': 'sql'}]"
198,s3://kcd-de-production/data_sources/lookup/subject=location/name=total_region,process:::naver_address:::merchant_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_location_sources.json', 'options': {'sql': ""SELECT\n        registration_number, card_issuer, merchant_number,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        registration_number, card_issuer, merchant_number,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n            latitude > 100,\n            CONCAT(longitude, ',', latitude),\n            CONCAT(latitude, ',', longitude)\n        ) AS location\n    FROM  naver\n    WHERE lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
199,s3://kcd-de-production/data_sources/lookup/subject=location/name=total_region,process:::kakao_address:::merchant_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_location_sources.json', 'options': {'sql': ""SELECT\n        registration_number, card_issuer, merchant_number,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        registration_number, card_issuer, merchant_number,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n              latitude > 100,\n              CONCAT(longitude, ',', latitude),\n              CONCAT(latitude, ',', longitude)\n          ) AS location\n    FROM  kakao\n    WHERE lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
200,s3://kcd-de-production/data_sources/lookup/subject=location/name=total_region,process:::merchant_address:::merchant_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=location/name=total_region'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_location_sources.json', 'options': {'sql': ""SELECT\n        registration_number, card_issuer, merchant_number,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        CAST(null as STRING) AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n        SELECT  registration_number, card_issuer, merchant_number,\n                get_addr_key_sigungu(merchant_address) AS addr_key,\n                merchant_address AS address\n        FROM  merchant_info\n        WHERE merchant_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'sigungu'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
201,s3://kcd-data/table/place/naver_basic_uniq,process:::naver_basic_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/table/place/naver_basic_uniq'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        source_address.location AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n            business_id, address, location,\n            get_addr_key(address) AS addr_key\n    FROM (\n            SELECT\n                    business_id,\n                    CONCAT(coordinate.y, ',', coordinate.x) AS location,\n                    to_region_address(full_road_addr, addr) AS address\n            FROM naver_basic\n            WHERE full_road_addr is not null AND addr is not null\n    )\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
202,s3://kcd-data/table/place/kakao_basic_uniq,process:::kakao_basic_address:::business_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/table/place/kakao_basic_uniq'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n    SELECT\n        business_id,\n        get_addr_key(address.region.fullname) AS addr_key,\n        CONCAT(address.region.fullname, ' ', nvl(address.addrdetail, ''), address.addrbunho) AS address\n    FROM kakao_basic\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
203,process:::hometax_address:::business_location_sources,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=hometax,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n    SELECT\n            business_id, address,\n            get_addr_key(address) AS addr_key\n    FROM hometax_business\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=hometax'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=hometax'}, 'role': 'source', 'type': 'file'}]"
204,process:::place_naver_address:::business_location_sources,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_naver,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        source_address.business_id,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        business_id,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n            latitude > 100,\n            CONCAT(longitude, ',', latitude),\n            CONCAT(latitude, ',', longitude)\n        ) AS location\n    FROM places\n    WHERE type = 'Places::Naver'\n    AND business_id is not null\n    AND lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_naver'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_naver'}, 'role': 'source', 'type': 'file'}]"
205,process:::place_kakao_address:::business_location_sources,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_kakao,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        source_address.business_id,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        business_id,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n              latitude > 100,\n              CONCAT(longitude, ',', latitude),\n              CONCAT(latitude, ',', longitude)\n          ) AS location\n    FROM places\n    WHERE type = 'Places::Daum'\n    AND business_id is not null\n    AND lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_kakao'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_kakao'}, 'role': 'source', 'type': 'file'}]"
206,process:::business_address:::business_location_sources,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT  id AS business_id,\n        get_addr_key(address) AS addr_key,\n        address\n    FROM businesses\n    WHERE address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address\n\nUNION ALL\n\nSELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        null AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n    SELECT\n            business_id,\n            get_addr_key_sigungu(addr_key) AS addr_key,\n            address\n    FROM (\n        SELECT  id AS business_id,\n                get_addr_key(address) AS addr_key,\n                address\n        FROM businesses\n        WHERE address is not null\n    )\n    WHERE is_street_address(addr_key) = true\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'sigungu'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=businesses'}, 'role': 'source', 'type': 'file'}]"
207,process:::naver_basic_address:::business_location_sources,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=naver_basic,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        source_address.location AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n            business_id, address, location,\n            get_addr_key(address) AS addr_key\n    FROM (\n            SELECT\n                    business_id,\n                    CONCAT(coordinate.y, ',', coordinate.x) AS location,\n                    to_region_address(full_road_addr, addr) AS address\n            FROM naver_basic\n            WHERE full_road_addr is not null AND addr is not null\n    )\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=naver_basic'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=naver_basic'}, 'role': 'source', 'type': 'file'}]"
208,process:::kakao_basic_address:::business_location_sources,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=kakao_basic,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'sql': ""SELECT\n        CAST(source_address.business_id AS LONG) AS business_id,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n    SELECT\n        business_id,\n        get_addr_key(address.region.fullname) AS addr_key,\n        CONCAT(address.region.fullname, ' ', nvl(address.addrdetail, ''), address.addrbunho) AS address\n    FROM kakao_basic\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=kakao_basic'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=kakao_basic'}, 'role': 'source', 'type': 'file'}]"
209,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=hometax,process:::merged:::business_location_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=hometax'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=hometax'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_common.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
210,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=businesses,process:::merged:::business_location_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_common.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
211,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_naver,process:::merged:::business_location_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_naver'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_naver'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_common.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
212,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_kakao,process:::merged:::business_location_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_kakao'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_kakao'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_common.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
213,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=naver_basic,process:::merged:::business_location_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=naver_basic'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=naver_basic'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_common.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
214,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=kakao_basic,process:::merged:::business_location_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=kakao_basic'}, 'role': 'sink', 'type': 'file'}, {'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=kakao_basic'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_location_common.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
215,jdbc:ad_group,process:::target_group:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'click_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_message_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_target_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""  SELECT\n          named_struct(\n              'campaign_id',      a.campaign_id,\n              'ad_group_id',      c.ad_group_id,\n              'creative_id',      c.id,\n              'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),\n              'user_type',        a.user_type,\n              'type',             a.type,\n              'target_type',      a.target_type,\n              'path',             a.path,\n              'frequency_cap',    a.frequency_cap,\n              'message_type',     c.message_type,\n              'template_code',    c.template_code,\n              'exclude_sent_user', a.exclude_sent_user,\n              'test_mode',        a.test_mode,\n              'limit',            a.limit,\n              'test_sequence',    a.test_sequence,\n              'template',         named_struct(\n                                      'title',        c.title,\n                                      'message',      c.template,\n                                      'attachment',   c.attachment\n                                  ),\n              'report_name',      a.report_name\n          ) AS meta,\n\n           named_struct(\n              'title',        CAST(null as STRING),\n              'message',      CAST(null as STRING),\n              'attachment',   named_struct('button', array(\n                                                          named_struct(\n                                                              'name',         CAST(null as STRING),\n                                                              'type',         CAST(null as STRING),\n                                                              'url_mobile',   CAST(null as STRING),\n                                                              'target',       CAST(null as STRING)\n                                                          )\n                                                       ),\n                                            'image', named_struct(\n                                                          'img_url', CAST(null AS STRING),\n                                                          'img_link', CAST(null AS STRING)\n                                                      )\n                                           )\n          ) AS result,\n          named_struct(\n              'valid', true,\n              'error', CAST(null as STRING)\n          ) AS status\n  FROM (\n          SELECT  *\n          FROM    ad_group\n          WHERE   status = 'TRANSFORM_AND_SENDING'\n  ) AS a\n  JOIN    (\n          SELECT *\n          FROM    creative\n          WHERE   creative.type = 'MESSAGE_TEMPLATE'\n          AND     enabled = true\n  ) AS c\n  ON      a.id = c.ad_group_id""}, 'role': 'process', 'type': 'sql'}]"
216,jdbc:ad_group,process:::valid_ad_group:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'click_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_message_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_target_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': 'SELECT  ad_group.*\nFROM (\n        SELECT DISTINCT meta.ad_group_id AS ad_group_id\n        FROM   target_group\n) AS t\nJOIN ad_group\nON t.ad_group_id = ad_group.id'}, 'role': 'process', 'type': 'sql'}]"
217,jdbc:ad_group,process:::ad_group_filter:::target_download,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'click_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_message_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_target_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'target_download.json', 'options': {'sql': ""  SELECT  *\n  FROM    ad_group\n  WHERE   status = 'DOWNLOADING'""}, 'role': 'process', 'type': 'sql'}]"
218,jdbc:ad_group,process:::event_mapping:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'click_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_message_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_target_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': '    SELECT \tcampaign_id, ad_group_id, ad_group.user_type,\n            ad_group_event_map.event_type,\n            sdk_event.event_type AS sdk_event_type,\n            sdk_event.sdk_name\n    FROM  \tad_group, ad_group_event_map, sdk_event\n    WHERE \tad_group.id = ad_group_event_map.ad_group_id\n    AND\t \tad_group_event_map.sdk_event_id = sdk_event.id'}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': '    SELECT \tcampaign_id, ad_group_id, ad_group.user_type,\n            ad_group_event_map.event_type,\n            sdk_event.event_type AS sdk_event_type,\n            sdk_event.sdk_name\n    FROM  \tad_group, ad_group_event_map, sdk_event\n    WHERE \tad_group.id = ad_group_event_map.ad_group_id\n    AND\t \tad_group_event_map.sdk_event_id = sdk_event.id'}, 'role': 'process', 'type': 'sql'}]"
219,jdbc:ad_group,process:::add_ad_group_meta:::click_log_to_es,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'click_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_message_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_target_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'click_log.json', 'options': {'sql': 'SELECT\n        cashnote_web_click.*,\n        ad_group.user_type AS user_type,\n        ad_group.type AS ad_group_type\nFROM    cashnote_web_click\nLEFT OUTER JOIN ad_group\nON      cashnote_web_click.ad_group_id = ad_group.id'}, 'role': 'process', 'type': 'sql'}]"
220,jdbc:ad_group,process:::valid_ad_group:::update_extract_result,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'click_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_message_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_target_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'update_extract_result.json', 'options': {'sql': 'SELECT  ad_group.*\nFROM (\n        SELECT DISTINCT meta.ad_group_id AS ad_group_id\n        FROM   target_group\n) AS t\nJOIN ad_group\nON t.ad_group_id = ad_group.id'}, 'role': 'process', 'type': 'sql'}]"
221,jdbc:ad_group,process:::target_group:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'click_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_message_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_target_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'transform_message.json', 'options': {'sql': ""  SELECT\n          named_struct(\n              'campaign_id',      a.campaign_id,\n              'ad_group_id',      c.ad_group_id,\n              'creative_id',      c.id,\n              'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),\n              'user_type',        a.user_type,\n              'type',             a.type,\n              'target_type',      a.target_type,\n              'path',             a.path,\n              'frequency_cap',    a.frequency_cap,\n              'message_type',     c.message_type,\n              'template_code',    c.template_code,\n              'exclude_sent_user', a.exclude_sent_user,\n              'test_mode',        a.test_mode,\n              'limit',            a.limit,\n              'test_sequence',    a.test_sequence,\n              'template',         named_struct(\n                                      'title',        c.title,\n                                      'message',      c.template,\n                                      'attachment',   c.attachment\n                                  ),\n              'report_name',      a.report_name\n          ) AS meta,\n\n           named_struct(\n              'title',        CAST(null as STRING),\n              'message',      CAST(null as STRING),\n              'attachment',   named_struct('button', array(\n                                                          named_struct(\n                                                              'name',         CAST(null as STRING),\n                                                              'type',         CAST(null as STRING),\n                                                              'url_mobile',   CAST(null as STRING),\n                                                              'target',       CAST(null as STRING)\n                                                          )\n                                                       ),\n                                            'image', named_struct(\n                                                          'img_url', CAST(null AS STRING),\n                                                          'img_link', CAST(null AS STRING)\n                                                      )\n                                           )\n          ) AS result,\n          named_struct(\n              'valid', true,\n              'error', CAST(null as STRING)\n          ) AS status\n  FROM (\n          SELECT  *\n          FROM    ad_group\n          WHERE   status = 'RUNNING'\n  ) AS a\n  JOIN    (\n          SELECT *\n          FROM    creative\n          WHERE   creative.type = 'MESSAGE_TEMPLATE'\n          AND     enabled = true\n  ) AS c\n  ON      a.id = c.ad_group_id""}, 'role': 'process', 'type': 'sql'}]"
222,jdbc:ad_group,process:::meta:::message_stat_init,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'click_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_message_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_target_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}]"
223,jdbc:ad_group,process:::meta:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'click_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_message_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_target_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}]"
224,jdbc:ad_group,process:::filtered_target_users:::target_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'click_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_message_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'prod_target_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'prod_message_rest_sink.json', 'options': {'sql': ""SELECT    *\nFROM      ad_group\nWHERE     enabled = true\nAND       status = 'SENDING'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'prod_target_rest_sink.json', 'options': {'sql': ""SELECT    *\nFROM      ad_group\nWHERE     enabled = true\nAND       status = 'SENDING'""}, 'role': 'process', 'type': 'sql'}]"
225,jdbc:creative,process:::target_group:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""  SELECT\n          named_struct(\n              'campaign_id',      a.campaign_id,\n              'ad_group_id',      c.ad_group_id,\n              'creative_id',      c.id,\n              'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),\n              'user_type',        a.user_type,\n              'type',             a.type,\n              'target_type',      a.target_type,\n              'path',             a.path,\n              'frequency_cap',    a.frequency_cap,\n              'message_type',     c.message_type,\n              'template_code',    c.template_code,\n              'exclude_sent_user', a.exclude_sent_user,\n              'test_mode',        a.test_mode,\n              'limit',            a.limit,\n              'test_sequence',    a.test_sequence,\n              'template',         named_struct(\n                                      'title',        c.title,\n                                      'message',      c.template,\n                                      'attachment',   c.attachment\n                                  ),\n              'report_name',      a.report_name\n          ) AS meta,\n\n           named_struct(\n              'title',        CAST(null as STRING),\n              'message',      CAST(null as STRING),\n              'attachment',   named_struct('button', array(\n                                                          named_struct(\n                                                              'name',         CAST(null as STRING),\n                                                              'type',         CAST(null as STRING),\n                                                              'url_mobile',   CAST(null as STRING),\n                                                              'target',       CAST(null as STRING)\n                                                          )\n                                                       ),\n                                            'image', named_struct(\n                                                          'img_url', CAST(null AS STRING),\n                                                          'img_link', CAST(null AS STRING)\n                                                      )\n                                           )\n          ) AS result,\n          named_struct(\n              'valid', true,\n              'error', CAST(null as STRING)\n          ) AS status\n  FROM (\n          SELECT  *\n          FROM    ad_group\n          WHERE   status = 'TRANSFORM_AND_SENDING'\n  ) AS a\n  JOIN    (\n          SELECT *\n          FROM    creative\n          WHERE   creative.type = 'MESSAGE_TEMPLATE'\n          AND     enabled = true\n  ) AS c\n  ON      a.id = c.ad_group_id""}, 'role': 'process', 'type': 'sql'}]"
226,jdbc:creative,process:::target_group:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'transform_message.json', 'options': {'sql': ""  SELECT\n          named_struct(\n              'campaign_id',      a.campaign_id,\n              'ad_group_id',      c.ad_group_id,\n              'creative_id',      c.id,\n              'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),\n              'user_type',        a.user_type,\n              'type',             a.type,\n              'target_type',      a.target_type,\n              'path',             a.path,\n              'frequency_cap',    a.frequency_cap,\n              'message_type',     c.message_type,\n              'template_code',    c.template_code,\n              'exclude_sent_user', a.exclude_sent_user,\n              'test_mode',        a.test_mode,\n              'limit',            a.limit,\n              'test_sequence',    a.test_sequence,\n              'template',         named_struct(\n                                      'title',        c.title,\n                                      'message',      c.template,\n                                      'attachment',   c.attachment\n                                  ),\n              'report_name',      a.report_name\n          ) AS meta,\n\n           named_struct(\n              'title',        CAST(null as STRING),\n              'message',      CAST(null as STRING),\n              'attachment',   named_struct('button', array(\n                                                          named_struct(\n                                                              'name',         CAST(null as STRING),\n                                                              'type',         CAST(null as STRING),\n                                                              'url_mobile',   CAST(null as STRING),\n                                                              'target',       CAST(null as STRING)\n                                                          )\n                                                       ),\n                                            'image', named_struct(\n                                                          'img_url', CAST(null AS STRING),\n                                                          'img_link', CAST(null AS STRING)\n                                                      )\n                                           )\n          ) AS result,\n          named_struct(\n              'valid', true,\n              'error', CAST(null as STRING)\n          ) AS status\n  FROM (\n          SELECT  *\n          FROM    ad_group\n          WHERE   status = 'RUNNING'\n  ) AS a\n  JOIN    (\n          SELECT *\n          FROM    creative\n          WHERE   creative.type = 'MESSAGE_TEMPLATE'\n          AND     enabled = true\n  ) AS c\n  ON      a.id = c.ad_group_id""}, 'role': 'process', 'type': 'sql'}]"
227,jdbc:creative,process:::meta:::message_stat_init,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}]"
228,jdbc:creative,process:::meta:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'transform_message.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'creative', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}]"
229,s3://kcd-de-production/service/message/user_history/,process:::valid_filter:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'source', 'type': 'file'}, {'filename': 'user_message_history.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}, {'filename': 'user_message_history.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': 'SELECT    user_message_history.*\nFROM      (\n              SELECT * FROM target_group WHERE meta.exclude_sent_user = true\n) AS t\nJOIN      user_message_history\nON        t.meta.user_type = user_message_history.user_type\nAND       t.meta.ad_group_id = user_message_history.ad_group_id'}, 'role': 'process', 'type': 'sql'}]"
230,s3://kcd-de-production/service/message/user_history/,process:::user_message_history:::user_message_history,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'source', 'type': 'file'}, {'filename': 'user_message_history.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}, {'filename': 'user_message_history.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'user_message_history.json', 'options': {'sql': 'SELECT    m.*\nFROM (\n    SELECT\n              IF(prev.user_id IS NOT NULL, struct(prev.*), struct(cur.*)) AS m\n    FROM      user_message_history_prev AS prev\n    FULL OUTER JOIN   user_message_history_cur AS cur\n    ON    prev.business_id = cur.business_id\n    AND   prev.user_id = cur.user_id\n    AND   prev.ad_group_id = cur.ad_group_id\n    AND   prev.user_type = cur.user_type\n)'}, 'role': 'process', 'type': 'sql'}]"
231,s3://kcd-de-production/service/message/user_history/,process:::valid_filter:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'source', 'type': 'file'}, {'filename': 'user_message_history.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}, {'filename': 'user_message_history.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'transform_message.json', 'options': {'sql': 'SELECT    user_message_history.*\nFROM      (\n              SELECT * FROM target_group WHERE meta.exclude_sent_user = true\n) AS t\nJOIN      user_message_history\nON        t.meta.user_type = user_message_history.user_type\nAND       t.meta.ad_group_id = user_message_history.ad_group_id'}, 'role': 'process', 'type': 'sql'}]"
232,process:::target_group:::transform_and_rest_sink,process:::valid_filter:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""  SELECT\n          named_struct(\n              'campaign_id',      a.campaign_id,\n              'ad_group_id',      c.ad_group_id,\n              'creative_id',      c.id,\n              'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),\n              'user_type',        a.user_type,\n              'type',             a.type,\n              'target_type',      a.target_type,\n              'path',             a.path,\n              'frequency_cap',    a.frequency_cap,\n              'message_type',     c.message_type,\n              'template_code',    c.template_code,\n              'exclude_sent_user', a.exclude_sent_user,\n              'test_mode',        a.test_mode,\n              'limit',            a.limit,\n              'test_sequence',    a.test_sequence,\n              'template',         named_struct(\n                                      'title',        c.title,\n                                      'message',      c.template,\n                                      'attachment',   c.attachment\n                                  ),\n              'report_name',      a.report_name\n          ) AS meta,\n\n           named_struct(\n              'title',        CAST(null as STRING),\n              'message',      CAST(null as STRING),\n              'attachment',   named_struct('button', array(\n                                                          named_struct(\n                                                              'name',         CAST(null as STRING),\n                                                              'type',         CAST(null as STRING),\n                                                              'url_mobile',   CAST(null as STRING),\n                                                              'target',       CAST(null as STRING)\n                                                          )\n                                                       ),\n                                            'image', named_struct(\n                                                          'img_url', CAST(null AS STRING),\n                                                          'img_link', CAST(null AS STRING)\n                                                      )\n                                           )\n          ) AS result,\n          named_struct(\n              'valid', true,\n              'error', CAST(null as STRING)\n          ) AS status\n  FROM (\n          SELECT  *\n          FROM    ad_group\n          WHERE   status = 'TRANSFORM_AND_SENDING'\n  ) AS a\n  JOIN    (\n          SELECT *\n          FROM    creative\n          WHERE   creative.type = 'MESSAGE_TEMPLATE'\n          AND     enabled = true\n  ) AS c\n  ON      a.id = c.ad_group_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': 'SELECT    user_message_history.*\nFROM      (\n              SELECT * FROM target_group WHERE meta.exclude_sent_user = true\n) AS t\nJOIN      user_message_history\nON        t.meta.user_type = user_message_history.user_type\nAND       t.meta.ad_group_id = user_message_history.ad_group_id'}, 'role': 'process', 'type': 'sql'}]"
233,process:::target_group:::transform_and_rest_sink,process:::target_messages:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""  SELECT\n          named_struct(\n              'campaign_id',      a.campaign_id,\n              'ad_group_id',      c.ad_group_id,\n              'creative_id',      c.id,\n              'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),\n              'user_type',        a.user_type,\n              'type',             a.type,\n              'target_type',      a.target_type,\n              'path',             a.path,\n              'frequency_cap',    a.frequency_cap,\n              'message_type',     c.message_type,\n              'template_code',    c.template_code,\n              'exclude_sent_user', a.exclude_sent_user,\n              'test_mode',        a.test_mode,\n              'limit',            a.limit,\n              'test_sequence',    a.test_sequence,\n              'template',         named_struct(\n                                      'title',        c.title,\n                                      'message',      c.template,\n                                      'attachment',   c.attachment\n                                  ),\n              'report_name',      a.report_name\n          ) AS meta,\n\n           named_struct(\n              'title',        CAST(null as STRING),\n              'message',      CAST(null as STRING),\n              'attachment',   named_struct('button', array(\n                                                          named_struct(\n                                                              'name',         CAST(null as STRING),\n                                                              'type',         CAST(null as STRING),\n                                                              'url_mobile',   CAST(null as STRING),\n                                                              'target',       CAST(null as STRING)\n                                                          )\n                                                       ),\n                                            'image', named_struct(\n                                                          'img_url', CAST(null AS STRING),\n                                                          'img_link', CAST(null AS STRING)\n                                                      )\n                                           )\n          ) AS result,\n          named_struct(\n              'valid', true,\n              'error', CAST(null as STRING)\n          ) AS status\n  FROM (\n          SELECT  *\n          FROM    ad_group\n          WHERE   status = 'TRANSFORM_AND_SENDING'\n  ) AS a\n  JOIN    (\n          SELECT *\n          FROM    creative\n          WHERE   creative.type = 'MESSAGE_TEMPLATE'\n          AND     enabled = true\n  ) AS c\n  ON      a.id = c.ad_group_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetExtractProcess', 'reportDir': 's3://kcd-de-production/service/message/reports'}, 'role': 'process', 'type': 'custom'}]"
234,process:::target_group:::transform_and_rest_sink,process:::valid_ad_group:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""  SELECT\n          named_struct(\n              'campaign_id',      a.campaign_id,\n              'ad_group_id',      c.ad_group_id,\n              'creative_id',      c.id,\n              'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),\n              'user_type',        a.user_type,\n              'type',             a.type,\n              'target_type',      a.target_type,\n              'path',             a.path,\n              'frequency_cap',    a.frequency_cap,\n              'message_type',     c.message_type,\n              'template_code',    c.template_code,\n              'exclude_sent_user', a.exclude_sent_user,\n              'test_mode',        a.test_mode,\n              'limit',            a.limit,\n              'test_sequence',    a.test_sequence,\n              'template',         named_struct(\n                                      'title',        c.title,\n                                      'message',      c.template,\n                                      'attachment',   c.attachment\n                                  ),\n              'report_name',      a.report_name\n          ) AS meta,\n\n           named_struct(\n              'title',        CAST(null as STRING),\n              'message',      CAST(null as STRING),\n              'attachment',   named_struct('button', array(\n                                                          named_struct(\n                                                              'name',         CAST(null as STRING),\n                                                              'type',         CAST(null as STRING),\n                                                              'url_mobile',   CAST(null as STRING),\n                                                              'target',       CAST(null as STRING)\n                                                          )\n                                                       ),\n                                            'image', named_struct(\n                                                          'img_url', CAST(null AS STRING),\n                                                          'img_link', CAST(null AS STRING)\n                                                      )\n                                           )\n          ) AS result,\n          named_struct(\n              'valid', true,\n              'error', CAST(null as STRING)\n          ) AS status\n  FROM (\n          SELECT  *\n          FROM    ad_group\n          WHERE   status = 'TRANSFORM_AND_SENDING'\n  ) AS a\n  JOIN    (\n          SELECT *\n          FROM    creative\n          WHERE   creative.type = 'MESSAGE_TEMPLATE'\n          AND     enabled = true\n  ) AS c\n  ON      a.id = c.ad_group_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': 'SELECT  ad_group.*\nFROM (\n        SELECT DISTINCT meta.ad_group_id AS ad_group_id\n        FROM   target_group\n) AS t\nJOIN ad_group\nON t.ad_group_id = ad_group.id'}, 'role': 'process', 'type': 'sql'}]"
235,process:::target_group:::transform_and_rest_sink,s3://kcd-de-production/service/message/target_group/ts=01_54,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""  SELECT\n          named_struct(\n              'campaign_id',      a.campaign_id,\n              'ad_group_id',      c.ad_group_id,\n              'creative_id',      c.id,\n              'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),\n              'user_type',        a.user_type,\n              'type',             a.type,\n              'target_type',      a.target_type,\n              'path',             a.path,\n              'frequency_cap',    a.frequency_cap,\n              'message_type',     c.message_type,\n              'template_code',    c.template_code,\n              'exclude_sent_user', a.exclude_sent_user,\n              'test_mode',        a.test_mode,\n              'limit',            a.limit,\n              'test_sequence',    a.test_sequence,\n              'template',         named_struct(\n                                      'title',        c.title,\n                                      'message',      c.template,\n                                      'attachment',   c.attachment\n                                  ),\n              'report_name',      a.report_name\n          ) AS meta,\n\n           named_struct(\n              'title',        CAST(null as STRING),\n              'message',      CAST(null as STRING),\n              'attachment',   named_struct('button', array(\n                                                          named_struct(\n                                                              'name',         CAST(null as STRING),\n                                                              'type',         CAST(null as STRING),\n                                                              'url_mobile',   CAST(null as STRING),\n                                                              'target',       CAST(null as STRING)\n                                                          )\n                                                       ),\n                                            'image', named_struct(\n                                                          'img_url', CAST(null AS STRING),\n                                                          'img_link', CAST(null AS STRING)\n                                                      )\n                                           )\n          ) AS result,\n          named_struct(\n              'valid', true,\n              'error', CAST(null as STRING)\n          ) AS status\n  FROM (\n          SELECT  *\n          FROM    ad_group\n          WHERE   status = 'TRANSFORM_AND_SENDING'\n  ) AS a\n  JOIN    (\n          SELECT *\n          FROM    creative\n          WHERE   creative.type = 'MESSAGE_TEMPLATE'\n          AND     enabled = true\n  ) AS c\n  ON      a.id = c.ad_group_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/target_group/date_id=2021-01-29/ts=01_54', 'numPartitions': '1'}, 'role': 'sink', 'type': 'file'}]"
236,process:::valid_filter:::transform_and_rest_sink,process:::filtered_message:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': 'SELECT    user_message_history.*\nFROM      (\n              SELECT * FROM target_group WHERE meta.exclude_sent_user = true\n) AS t\nJOIN      user_message_history\nON        t.meta.user_type = user_message_history.user_type\nAND       t.meta.ad_group_id = user_message_history.ad_group_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': '  SELECT  t.target_id,\n          t.user_id,\n          t.business_id,\n          t.meta,\n          t.result,\n          CASE\n              WHEN    valid_filter.ad_group_id IS NOT NULL THEN named_struct(\'valid\', false, \'error\', \'EXCLUDED_SENT_USER\')\n              ELSE    t.status\n          END AS status\n  FROM    (\n              SELECT  target_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[0], target_id) AS user_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[1], null) AS business_id,\n                      targetGroup.meta,\n                      targetGroup.status,\n                      targetGroup.result\n              FROM    target_messages\n  ) AS t\n  LEFT OUTER JOIN     valid_filter\n  ON      t.meta.user_type = valid_filter.user_type\n  AND     t.meta.ad_group_id = valid_filter.ad_group_id\n  AND     t.user_id = valid_filter.user_id\n  AND     nvl(t.business_id, \'empty\') = nvl(valid_filter.business_id, \'empty\')'}, 'role': 'process', 'type': 'sql'}]"
237,process:::target_messages:::transform_and_rest_sink,process:::filtered_message:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetExtractProcess', 'reportDir': 's3://kcd-de-production/service/message/reports'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': '  SELECT  t.target_id,\n          t.user_id,\n          t.business_id,\n          t.meta,\n          t.result,\n          CASE\n              WHEN    valid_filter.ad_group_id IS NOT NULL THEN named_struct(\'valid\', false, \'error\', \'EXCLUDED_SENT_USER\')\n              ELSE    t.status\n          END AS status\n  FROM    (\n              SELECT  target_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[0], target_id) AS user_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[1], null) AS business_id,\n                      targetGroup.meta,\n                      targetGroup.status,\n                      targetGroup.result\n              FROM    target_messages\n  ) AS t\n  LEFT OUTER JOIN     valid_filter\n  ON      t.meta.user_type = valid_filter.user_type\n  AND     t.meta.ad_group_id = valid_filter.ad_group_id\n  AND     t.user_id = valid_filter.user_id\n  AND     nvl(t.business_id, \'empty\') = nvl(valid_filter.business_id, \'empty\')'}, 'role': 'process', 'type': 'sql'}]"
238,process:::filtered_message:::transform_and_rest_sink,process:::filtered_message_with_public_id:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': '  SELECT  t.target_id,\n          t.user_id,\n          t.business_id,\n          t.meta,\n          t.result,\n          CASE\n              WHEN    valid_filter.ad_group_id IS NOT NULL THEN named_struct(\'valid\', false, \'error\', \'EXCLUDED_SENT_USER\')\n              ELSE    t.status\n          END AS status\n  FROM    (\n              SELECT  target_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[0], target_id) AS user_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[1], null) AS business_id,\n                      targetGroup.meta,\n                      targetGroup.status,\n                      targetGroup.result\n              FROM    target_messages\n  ) AS t\n  LEFT OUTER JOIN     valid_filter\n  ON      t.meta.user_type = valid_filter.user_type\n  AND     t.meta.ad_group_id = valid_filter.ad_group_id\n  AND     t.user_id = valid_filter.user_id\n  AND     nvl(t.business_id, \'empty\') = nvl(valid_filter.business_id, \'empty\')'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""  SELECT  filtered_message.*,\n          id_mapping.public_business_id,\n          id_mapping.public_user_id\n  FROM    filtered_message\n  LEFT OUTER JOIN id_mapping\n  ON      filtered_message.user_id = id_mapping.user_id\n  AND     filtered_message.meta.user_type = id_mapping.user_type\n  AND     nvl(filtered_message.business_id, 'empty') = nvl(id_mapping.business_id, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
239,process:::id_mapping:::transform_and_rest_sink,process:::filtered_message_with_public_id:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n        b.id AS business_id,\n        b.public_id AS public_business_id,\n        u.id AS user_id,\n        u.uuid AS public_user_id,\n        'cashnote' AS user_type\nFROM cashnote_users AS u, cashnote_memberships AS m, cashnote_businesses AS b\nWHERE u.id = m.user_id\nAND m.business_id = b.id\n\nUNION ALL\n\nSELECT  null AS business_id,\n        null AS public_business_id,\n        id AS user_id,\n        uid AS public_user_id,\n        'paynote' AS user_type\nFROM paynote_users""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""  SELECT  filtered_message.*,\n          id_mapping.public_business_id,\n          id_mapping.public_user_id\n  FROM    filtered_message\n  LEFT OUTER JOIN id_mapping\n  ON      filtered_message.user_id = id_mapping.user_id\n  AND     filtered_message.meta.user_type = id_mapping.user_type\n  AND     nvl(filtered_message.business_id, 'empty') = nvl(id_mapping.business_id, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
240,process:::filtered_message_with_public_id:::transform_and_rest_sink,process:::formatted:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""  SELECT  filtered_message.*,\n          id_mapping.public_business_id,\n          id_mapping.public_user_id\n  FROM    filtered_message\n  LEFT OUTER JOIN id_mapping\n  ON      filtered_message.user_id = id_mapping.user_id\n  AND     filtered_message.meta.user_type = id_mapping.user_type\n  AND     nvl(filtered_message.business_id, 'empty') = nvl(id_mapping.business_id, 'empty')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n          to_timestamp('2021-01-29 01_54', 'yyyy-MM-dd HH_mm') AS sent_at,\n          CONCAT(\n              replace('2021-01-29', '-', ''), '-', '01_54',\n              '_',\n              meta.campaign_id, meta.ad_group_id, meta.creative_id,\n              '_',\n              target_id\n          ) AS id,\n          meta.ad_group_id AS ad_group_id,\n          named_struct(\n              'campaign_id',  CAST(meta.campaign_id AS STRING),\n              'ad_group_id',  CAST(meta.ad_group_id AS STRING),\n              'creative_id',  CAST(meta.creative_id AS STRING),\n              'user_id',      CAST(user_id AS STRING),\n              'business_id',  CAST(business_id AS STRING),\n              'public_user_id',       CAST(public_user_id AS STRING),\n              'public_business_id',   CAST(public_business_id AS STRING),\n              'type',         meta.`type`,\n              'user_type',    meta.user_type,\n              'test_mode',    meta.test_mode\n          ) AS meta,\n          status,\n          named_struct(\n              'message_type',     meta.message_type,\n              'template_code',    meta.template_code,\n              'title',            result.title,\n              'message',          result.message,\n              'ad_flag',          IF(array_contains(array('EXTERNAL_AD', 'INTERNAL_AD'), meta.`type`), 'Y', 'N'),\n              'attachment',       result.attachment\n          ) AS message\nFROM      filtered_message_with_public_id""}, 'role': 'process', 'type': 'sql'}]"
241,process:::formatted:::transform_and_rest_sink,process:::update_ad_group:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n          to_timestamp('2021-01-29 01_54', 'yyyy-MM-dd HH_mm') AS sent_at,\n          CONCAT(\n              replace('2021-01-29', '-', ''), '-', '01_54',\n              '_',\n              meta.campaign_id, meta.ad_group_id, meta.creative_id,\n              '_',\n              target_id\n          ) AS id,\n          meta.ad_group_id AS ad_group_id,\n          named_struct(\n              'campaign_id',  CAST(meta.campaign_id AS STRING),\n              'ad_group_id',  CAST(meta.ad_group_id AS STRING),\n              'creative_id',  CAST(meta.creative_id AS STRING),\n              'user_id',      CAST(user_id AS STRING),\n              'business_id',  CAST(business_id AS STRING),\n              'public_user_id',       CAST(public_user_id AS STRING),\n              'public_business_id',   CAST(public_business_id AS STRING),\n              'type',         meta.`type`,\n              'user_type',    meta.user_type,\n              'test_mode',    meta.test_mode\n          ) AS meta,\n          status,\n          named_struct(\n              'message_type',     meta.message_type,\n              'template_code',    meta.template_code,\n              'title',            result.title,\n              'message',          result.message,\n              'ad_flag',          IF(array_contains(array('EXTERNAL_AD', 'INTERNAL_AD'), meta.`type`), 'Y', 'N'),\n              'attachment',       result.attachment\n          ) AS message\nFROM      filtered_message_with_public_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n        valid_ad_group.id,\n        valid_ad_group.campaign_id,\n        valid_ad_group.name,\n        valid_ad_group.description,\n        valid_ad_group.type,\n        valid_ad_group.target,\n        valid_ad_group.target_type,\n        valid_ad_group.status,\n        valid_ad_group.path,\n        valid_ad_group.population,\n        valid_ad_group.frequency_cap,\n        valid_ad_group.enabled,\n        valid_ad_group.created_at,\n        current_timestamp() AS updated_at,\n        valid_ad_group.use_today_data,\n        valid_ad_group.report_name,\n        IF(valid_messages.cnt IS NULL, null,\n            CONCAT('s3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=01_54/ad_group_id=',  valid_ad_group.id)\n        ) AS extract_path,\n        IF(valid_messages.cnt IS NULL, 0, valid_messages.cnt) AS target_count\nFROM    valid_ad_group\nLEFT OUTER JOIN (\n    SELECT\n            meta.ad_group_id,\n            count(1) AS cnt\n    FROM  formatted\n    WHERE status.valid = true\n    GROUP BY meta.ad_group_id\n) AS valid_messages\nON valid_ad_group.id = valid_messages.ad_group_id""}, 'role': 'process', 'type': 'sql'}]"
242,process:::formatted:::transform_and_rest_sink,s3://kcd-de-production/service/message/target_messages/ts=01_54,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n          to_timestamp('2021-01-29 01_54', 'yyyy-MM-dd HH_mm') AS sent_at,\n          CONCAT(\n              replace('2021-01-29', '-', ''), '-', '01_54',\n              '_',\n              meta.campaign_id, meta.ad_group_id, meta.creative_id,\n              '_',\n              target_id\n          ) AS id,\n          meta.ad_group_id AS ad_group_id,\n          named_struct(\n              'campaign_id',  CAST(meta.campaign_id AS STRING),\n              'ad_group_id',  CAST(meta.ad_group_id AS STRING),\n              'creative_id',  CAST(meta.creative_id AS STRING),\n              'user_id',      CAST(user_id AS STRING),\n              'business_id',  CAST(business_id AS STRING),\n              'public_user_id',       CAST(public_user_id AS STRING),\n              'public_business_id',   CAST(public_business_id AS STRING),\n              'type',         meta.`type`,\n              'user_type',    meta.user_type,\n              'test_mode',    meta.test_mode\n          ) AS meta,\n          status,\n          named_struct(\n              'message_type',     meta.message_type,\n              'template_code',    meta.template_code,\n              'title',            result.title,\n              'message',          result.message,\n              'ad_flag',          IF(array_contains(array('EXTERNAL_AD', 'INTERNAL_AD'), meta.`type`), 'Y', 'N'),\n              'attachment',       result.attachment\n          ) AS message\nFROM      filtered_message_with_public_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=01_54', 'partitions': 'ad_group_id'}, 'role': 'sink', 'type': 'file'}]"
243,process:::formatted:::transform_and_rest_sink,rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n          to_timestamp('2021-01-29 01_54', 'yyyy-MM-dd HH_mm') AS sent_at,\n          CONCAT(\n              replace('2021-01-29', '-', ''), '-', '01_54',\n              '_',\n              meta.campaign_id, meta.ad_group_id, meta.creative_id,\n              '_',\n              target_id\n          ) AS id,\n          meta.ad_group_id AS ad_group_id,\n          named_struct(\n              'campaign_id',  CAST(meta.campaign_id AS STRING),\n              'ad_group_id',  CAST(meta.ad_group_id AS STRING),\n              'creative_id',  CAST(meta.creative_id AS STRING),\n              'user_id',      CAST(user_id AS STRING),\n              'business_id',  CAST(business_id AS STRING),\n              'public_user_id',       CAST(public_user_id AS STRING),\n              'public_business_id',   CAST(public_business_id AS STRING),\n              'type',         meta.`type`,\n              'user_type',    meta.user_type,\n              'test_mode',    meta.test_mode\n          ) AS meta,\n          status,\n          named_struct(\n              'message_type',     meta.message_type,\n              'template_code',    meta.template_code,\n              'title',            result.title,\n              'message',          result.message,\n              'ad_flag',          IF(array_contains(array('EXTERNAL_AD', 'INTERNAL_AD'), meta.`type`), 'Y', 'N'),\n              'attachment',       result.attachment\n          ) AS message\nFROM      filtered_message_with_public_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetMessageDirectRestSink', 'url': 'https://event.kcd.partners/api/publish/dmp_message', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTQyNjM4NTMsImV4cCI6MzY4NTI3MDAwMDAwMCwic2VydmljZV9uYW1lIjoiZG1wX21lc3NhZ2UifQ.tQ_j30oLXpykDiieEGAuVQZoBObgj7g3LAAzP_23wm8', 'proxyApi': 'https://event.kcd.partners/rdt/clk', 'changeUrl': 'true', 'batchSize': '15', 'delayTimeMillis': '1', 'outputPath': 's3://kcd-de-production/service/message/rest_sink/date_id=2021-01-29/ts=01_54', 'connectTimeout': '1000', 'readTimeout': '5000', 'partitionKey': 'meta.user_id', 'numPartitions': '2'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'prod_message_rest_sink.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetMessageRestSink', 'url': 'https://event.kcd.partners/api/publish/dmp_message', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTQyNjM4NTMsImV4cCI6MzY4NTI3MDAwMDAwMCwic2VydmljZV9uYW1lIjoiZG1wX21lc3NhZ2UifQ.tQ_j30oLXpykDiieEGAuVQZoBObgj7g3LAAzP_23wm8', 'proxyApi': 'https://event.kcd.partners/rdt/clk', 'changeUrl': 'true', 'batchSize': '1', 'delayTimeMillis': '18', 'outputPath': 's3://kcd-de-production/service/message/rest_sink/date_id=2021-01-11/ts=09_56', 'connectTimeout': '1000', 'readTimeout': '5000', 'partitionKey': 'meta.user_id'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'prod_target_rest_sink.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetMessageRestSink', 'url': 'https://event.kcd.partners/api/publish/dmp_message', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTQyNjM4NTMsImV4cCI6MzY4NTI3MDAwMDAwMCwic2VydmljZV9uYW1lIjoiZG1wX21lc3NhZ2UifQ.tQ_j30oLXpykDiieEGAuVQZoBObgj7g3LAAzP_23wm8', 'proxyApi': 'https://event.kcd.partners/rdt/clk', 'changeUrl': 'true', 'batchSize': '1', 'delayTimeMillis': '18', 'outputPath': 's3://kcd-de-production/service/message/rest_sink/date_id=2021-01-11/ts=06_48', 'connectTimeout': '1000', 'readTimeout': '5000', 'partitionKey': 'meta.user_id'}, 'role': 'sink', 'type': 'custom'}]"
244,process:::valid_ad_group:::transform_and_rest_sink,process:::update_ad_group:::transform_and_rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': 'SELECT  ad_group.*\nFROM (\n        SELECT DISTINCT meta.ad_group_id AS ad_group_id\n        FROM   target_group\n) AS t\nJOIN ad_group\nON t.ad_group_id = ad_group.id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n        valid_ad_group.id,\n        valid_ad_group.campaign_id,\n        valid_ad_group.name,\n        valid_ad_group.description,\n        valid_ad_group.type,\n        valid_ad_group.target,\n        valid_ad_group.target_type,\n        valid_ad_group.status,\n        valid_ad_group.path,\n        valid_ad_group.population,\n        valid_ad_group.frequency_cap,\n        valid_ad_group.enabled,\n        valid_ad_group.created_at,\n        current_timestamp() AS updated_at,\n        valid_ad_group.use_today_data,\n        valid_ad_group.report_name,\n        IF(valid_messages.cnt IS NULL, null,\n            CONCAT('s3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=01_54/ad_group_id=',  valid_ad_group.id)\n        ) AS extract_path,\n        IF(valid_messages.cnt IS NULL, 0, valid_messages.cnt) AS target_count\nFROM    valid_ad_group\nLEFT OUTER JOIN (\n    SELECT\n            meta.ad_group_id,\n            count(1) AS cnt\n    FROM  formatted\n    WHERE status.valid = true\n    GROUP BY meta.ad_group_id\n) AS valid_messages\nON valid_ad_group.id = valid_messages.ad_group_id""}, 'role': 'process', 'type': 'sql'}]"
245,process:::update_ad_group:::transform_and_rest_sink,update_ad_group_db_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_and_rest_sink.json', 'options': {'sql': ""SELECT\n        valid_ad_group.id,\n        valid_ad_group.campaign_id,\n        valid_ad_group.name,\n        valid_ad_group.description,\n        valid_ad_group.type,\n        valid_ad_group.target,\n        valid_ad_group.target_type,\n        valid_ad_group.status,\n        valid_ad_group.path,\n        valid_ad_group.population,\n        valid_ad_group.frequency_cap,\n        valid_ad_group.enabled,\n        valid_ad_group.created_at,\n        current_timestamp() AS updated_at,\n        valid_ad_group.use_today_data,\n        valid_ad_group.report_name,\n        IF(valid_messages.cnt IS NULL, null,\n            CONCAT('s3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=01_54/ad_group_id=',  valid_ad_group.id)\n        ) AS extract_path,\n        IF(valid_messages.cnt IS NULL, 0, valid_messages.cnt) AS target_count\nFROM    valid_ad_group\nLEFT OUTER JOIN (\n    SELECT\n            meta.ad_group_id,\n            count(1) AS cnt\n    FROM  formatted\n    WHERE status.valid = true\n    GROUP BY meta.ad_group_id\n) AS valid_messages\nON valid_ad_group.id = valid_messages.ad_group_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'id', 'updateColumns': 'extract_path,target_count,updated_at'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'id', 'updateColumns': 'status,path,population,updated_at'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'id', 'updateColumns': 'status,extract_path,target_count,updated_at'}, 'role': 'sink', 'type': 'jdbc'}]"
246,s3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments,process:::prev_baemin_payments_raw:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'delivery_app_payments_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_payments_src\nWHERE   app_name = 'baemin'\nAND     created_at_date >= '2020-10-03'\nAND     created_at_date < '2020-10-10'""}, 'role': 'process', 'type': 'sql'}]"
247,s3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments,process:::prev_yogiyo_payments_raw:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'delivery_app_payments_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_payments_src\nWHERE   app_name = 'yogiyo'\nAND     created_at_date >= '2020-10-03'\nAND     created_at_date < '2020-10-10'""}, 'role': 'process', 'type': 'sql'}]"
248,s3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments,process:::prev_baedaltong_payments_raw:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'delivery_app_payments_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_payments_src\nWHERE   app_name = 'baedaltong'\nAND     created_at_date >= '2020-10-03'\nAND     created_at_date < '2020-10-10'""}, 'role': 'process', 'type': 'sql'}]"
249,s3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments,process:::delivery_app_payments:::delivery_app_payments_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'delivery_app_payments_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': ""SELECT  *\nFROM    delivery_app_payments_src\nWHERE   created_at_date >= ''\nAND     created_at_date < ''""}, 'role': 'process', 'type': 'sql'}]"
250,s3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments,process:::daily_order_payments_stat:::delivery_app_payments_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'delivery_app_payments_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('day', deposited_at) AS time,\n          'day' AS time_unit,\n          SUM(received_amount) AS received_amount,\n          SUM(IF (app_name = 'baemin', received_amount, 0)) AS baemin_received_amount,\n          SUM(IF (app_name = 'baedaltong', received_amount, 0)) AS baedaltong_received_amount,\n          SUM(IF (app_name = 'yogiyo', received_amount, 0)) AS yogiyo_received_amount,\n          SUM(order_amount) AS order_amount,\n          SUM(IF (app_name = 'baemin', order_amount, 0)) AS baemin_order_amount,\n          SUM(IF (app_name = 'baedaltong', order_amount, 0)) AS baedaltong_order_amount,\n          SUM(IF (app_name = 'yogiyo', order_amount, 0)) AS yogiyo_order_amount,\n          MIN(period_started_at) AS period_started_at,\n          MAX(period_ended_at) AS period_ended_at\nFROM      delivery_app_payments_src\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]"
251,s3://kcd-de-production/raw/catalog_v3/raw/tb=owl_db_baemin_payments,process:::baemin_payments_src:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v3/raw/tb=owl_db_baemin_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  adjustment_amounts,\n        CAST(advertise_fee AS int) AS advertise_fee,\n        to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n        cycle,\n        CAST(deduction_amount AS int) AS deduction_amount,\n        CAST(delivery_tip AS int) AS delivery_tip,\n        CAST(delivery_tip_discount AS int) AS delivery_tip_discount,\n        to_timestamp(deposited_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS deposited_at,\n        CAST(fee_deduction AS int) AS fee_deduction,\n        CAST(order_amount AS int) AS order_amount,\n        to_date(period_ended_at) AS period_ended_at,\n        to_date(period_started_at) AS period_started_at,\n        CAST(rate_fee AS int) AS rate_fee,\n        CAST(received_amount AS int) AS received_amount,\n        CAST(reward_amount AS int) AS reward_amount,\n        service_fee_amounts,\n        settle_code,\n        shop_id,\n        status,\n        transaction_amounts,\n        to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n        CAST(vat AS int) AS vat\nFROM    baemin_payments_src_json\nWHERE   created_at_date >= '2020-10-10'\nAND     created_at_date < '2020-10-14'""}, 'role': 'process', 'type': 'sql'}]"
252,s3://kcd-de-production/raw/catalog_v3/raw/tb=owl_db_yogiyo_payments,process:::yogiyo_payments_src:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v3/raw/tb=owl_db_yogiyo_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""  SELECT  CAST(certification_fee AS int) AS certification_fee,\n          contract_type,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          CAST(delivery_tip AS int) AS delivery_tip,\n          to_date(deposited_at) AS deposited_at,\n          CAST(monthly_fee AS int) AS monthly_fee,\n          CAST(offline_amount AS int) AS offline_amount,\n          CAST(order_amount AS int) AS order_amount,\n          CAST(payment_number AS string) AS payment_number,\n          to_date(period_ended_at) AS period_ended_at,\n          to_date(period_started_at) AS period_started_at,\n          CAST(rate_fee AS int) AS rate_fee,\n          CAST(received_amount AS int) AS received_amount,\n          CAST(reserved_amount AS int) AS reserved_amount,\n          CAST(shop_discount AS int) AS shop_discount,\n          shop_id,\n          CAST(terminal_fee AS int) AS terminal_fee,\n          CAST(transaction_fee AS int) AS transaction_fee,\n          CAST(unpaid_amount AS int) AS unpaid_amount,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          CAST(vat AS int) AS vat\n  FROM    yogiyo_payments_src_json\n  WHERE   created_at_date >= '2020-10-10'\n  AND     created_at_date < '2020-10-14'""}, 'role': 'process', 'type': 'sql'}]"
253,s3://kcd-de-production/raw/catalog_v3/raw/tb=owl_db_baedaltong_payments,process:::baedaltong_payments_src:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v3/raw/tb=owl_db_baedaltong_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n        to_date(deposited_at) AS deposited_at,\n        CAST(offline_canceled_amount AS int) AS offline_canceled_amount,\n        CAST(offline_fee AS int) AS offline_fee,\n        CAST(offline_order_amount AS int) AS offline_order_amount,\n        CAST(offline_received_amount AS int) AS offline_received_amount,\n        CAST(offline_vat AS int) AS offline_vat,\n        CAST(online_canceled_amount AS int) AS online_canceled_amount,\n        CAST(online_fee AS int) AS online_fee,\n        CAST(online_order_amount AS int) AS online_order_amount,\n        CAST(online_received_amount AS int) AS online_received_amount,\n        CAST(online_vat AS int) AS online_vat,\n        to_date(period_ended_at) AS period_ended_at,\n        to_date(period_started_at) AS period_started_at,\n        CAST(previous_reserved_amount AS int) AS previous_reserved_amount,\n        CAST(received_amount AS int) AS received_amount,\n        CAST(reserved_amount AS int) AS reserved_amount,\n        shop_id,\n        to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\nFROM    baedaltong_payments_src_json\nWHERE   created_at_date >= '2020-10-10'\nAND     created_at_date < '2020-10-14'""}, 'role': 'process', 'type': 'sql'}]"
254,process:::baemin_payments_src:::build_delivery_app_payments,process:::baemin_payments_raw:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  adjustment_amounts,\n        CAST(advertise_fee AS int) AS advertise_fee,\n        to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n        cycle,\n        CAST(deduction_amount AS int) AS deduction_amount,\n        CAST(delivery_tip AS int) AS delivery_tip,\n        CAST(delivery_tip_discount AS int) AS delivery_tip_discount,\n        to_timestamp(deposited_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS deposited_at,\n        CAST(fee_deduction AS int) AS fee_deduction,\n        CAST(order_amount AS int) AS order_amount,\n        to_date(period_ended_at) AS period_ended_at,\n        to_date(period_started_at) AS period_started_at,\n        CAST(rate_fee AS int) AS rate_fee,\n        CAST(received_amount AS int) AS received_amount,\n        CAST(reward_amount AS int) AS reward_amount,\n        service_fee_amounts,\n        settle_code,\n        shop_id,\n        status,\n        transaction_amounts,\n        to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n        CAST(vat AS int) AS vat\nFROM    baemin_payments_src_json\nWHERE   created_at_date >= '2020-10-10'\nAND     created_at_date < '2020-10-14'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  shop_id,\n        deposited_at,\n        status,\n        period_started_at,\n        period_ended_at,\n        settle_code,\n        MAX(adjustment_amounts) AS adjustment_amounts,\n        MAX(advertise_fee) AS advertise_fee,\n        MAX(created_at) AS created_at,\n        MAX(cycle) AS cycle,\n        MAX(deduction_amount) AS deduction_amount,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(delivery_tip_discount) AS delivery_tip_discount,\n        MAX(fee_deduction) AS fee_deduction,\n        MAX(order_amount) AS order_amount,\n        MAX(rate_fee) AS rate_fee,\n        MAX(received_amount) AS received_amount,\n        MAX(reward_amount) AS reward_amount,\n        MAX(service_fee_amounts) AS service_fee_amounts,\n        MAX(transaction_amounts) AS transaction_amounts,\n        MAX(updated_at) AS updated_at,\n        MAX(vat) AS vat\nFROM    baemin_payments_src\nGROUP BY shop_id, deposited_at, status, period_started_at, period_ended_at, settle_code'}, 'role': 'process', 'type': 'sql'}]"
255,process:::yogiyo_payments_src:::build_delivery_app_payments,process:::yogiyo_payments_raw:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""  SELECT  CAST(certification_fee AS int) AS certification_fee,\n          contract_type,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          CAST(delivery_tip AS int) AS delivery_tip,\n          to_date(deposited_at) AS deposited_at,\n          CAST(monthly_fee AS int) AS monthly_fee,\n          CAST(offline_amount AS int) AS offline_amount,\n          CAST(order_amount AS int) AS order_amount,\n          CAST(payment_number AS string) AS payment_number,\n          to_date(period_ended_at) AS period_ended_at,\n          to_date(period_started_at) AS period_started_at,\n          CAST(rate_fee AS int) AS rate_fee,\n          CAST(received_amount AS int) AS received_amount,\n          CAST(reserved_amount AS int) AS reserved_amount,\n          CAST(shop_discount AS int) AS shop_discount,\n          shop_id,\n          CAST(terminal_fee AS int) AS terminal_fee,\n          CAST(transaction_fee AS int) AS transaction_fee,\n          CAST(unpaid_amount AS int) AS unpaid_amount,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          CAST(vat AS int) AS vat\n  FROM    yogiyo_payments_src_json\n  WHERE   created_at_date >= '2020-10-10'\n  AND     created_at_date < '2020-10-14'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  shop_id, deposited_at, period_started_at, period_ended_at, contract_type, payment_number,\n        MAX(certification_fee) AS certification_fee,\n        MAX(created_at) AS created_at,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(monthly_fee) AS monthly_fee,\n        MAX(offline_amount) AS offline_amount,\n        MAX(order_amount) AS order_amount,\n        MAX(rate_fee) AS rate_fee,\n        MAX(received_amount) AS received_amount,\n        MAX(reserved_amount) AS reserved_amount,\n        MAX(shop_discount) AS shop_discount,\n        MAX(terminal_fee) AS terminal_fee,\n        MAX(transaction_fee) AS transaction_fee,\n        MAX(unpaid_amount) AS unpaid_amount,\n        MAX(updated_at) AS updated_at,\n        MAX(vat) AS vat\nFROM    yogiyo_payments_src\nGROUP BY  shop_id, deposited_at, period_started_at, period_ended_at, contract_type, payment_number'}, 'role': 'process', 'type': 'sql'}]"
256,process:::baedaltong_payments_src:::build_delivery_app_payments,process:::baedaltong_payments_raw:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n        to_date(deposited_at) AS deposited_at,\n        CAST(offline_canceled_amount AS int) AS offline_canceled_amount,\n        CAST(offline_fee AS int) AS offline_fee,\n        CAST(offline_order_amount AS int) AS offline_order_amount,\n        CAST(offline_received_amount AS int) AS offline_received_amount,\n        CAST(offline_vat AS int) AS offline_vat,\n        CAST(online_canceled_amount AS int) AS online_canceled_amount,\n        CAST(online_fee AS int) AS online_fee,\n        CAST(online_order_amount AS int) AS online_order_amount,\n        CAST(online_received_amount AS int) AS online_received_amount,\n        CAST(online_vat AS int) AS online_vat,\n        to_date(period_ended_at) AS period_ended_at,\n        to_date(period_started_at) AS period_started_at,\n        CAST(previous_reserved_amount AS int) AS previous_reserved_amount,\n        CAST(received_amount AS int) AS received_amount,\n        CAST(reserved_amount AS int) AS reserved_amount,\n        shop_id,\n        to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\nFROM    baedaltong_payments_src_json\nWHERE   created_at_date >= '2020-10-10'\nAND     created_at_date < '2020-10-14'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  shop_id,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        MAX(created_at) AS created_at,\n        MAX(offline_canceled_amount) AS offline_canceled_amount,\n        MAX(offline_fee) AS offline_fee,\n        MAX(offline_order_amount) AS offline_order_amount,\n        MAX(offline_received_amount) AS offline_received_amount,\n        MAX(offline_vat) AS offline_vat,\n        MAX(online_canceled_amount) AS online_canceled_amount,\n        MAX(online_fee) AS online_fee,\n        MAX(online_order_amount) AS online_order_amount,\n        MAX(online_received_amount) AS online_received_amount,\n        MAX(online_vat) AS online_vat,\n        MAX(previous_reserved_amount) AS previous_reserved_amount,\n        MAX(received_amount) AS received_amount,\n        MAX(reserved_amount) AS reserved_amount,\n        MAX(updated_at) AS updated_at\nFROM    baedaltong_payments_src\nGROUP BY  shop_id, deposited_at, period_started_at, period_ended_at'}, 'role': 'process', 'type': 'sql'}]"
257,process:::baemin_payments_raw:::build_delivery_app_payments,process:::baemin_payments_unique:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  shop_id,\n        deposited_at,\n        status,\n        period_started_at,\n        period_ended_at,\n        settle_code,\n        MAX(adjustment_amounts) AS adjustment_amounts,\n        MAX(advertise_fee) AS advertise_fee,\n        MAX(created_at) AS created_at,\n        MAX(cycle) AS cycle,\n        MAX(deduction_amount) AS deduction_amount,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(delivery_tip_discount) AS delivery_tip_discount,\n        MAX(fee_deduction) AS fee_deduction,\n        MAX(order_amount) AS order_amount,\n        MAX(rate_fee) AS rate_fee,\n        MAX(received_amount) AS received_amount,\n        MAX(reward_amount) AS reward_amount,\n        MAX(service_fee_amounts) AS service_fee_amounts,\n        MAX(transaction_amounts) AS transaction_amounts,\n        MAX(updated_at) AS updated_at,\n        MAX(vat) AS vat\nFROM    baemin_payments_src\nGROUP BY shop_id, deposited_at, status, period_started_at, period_ended_at, settle_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baemin_payments_raw prev RIGHT OUTER JOIN baemin_payments_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.deposited_at = current.deposited_at AND\n  prev.status = current.status AND\n  prev.period_started_at = current.period_started_at AND\n  prev.period_ended_at = current.period_ended_at AND\n  prev.settle_code = current.settle_code\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
258,process:::prev_baemin_payments_raw:::build_delivery_app_payments,process:::baemin_payments_unique:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_payments_src\nWHERE   app_name = 'baemin'\nAND     created_at_date >= '2020-10-03'\nAND     created_at_date < '2020-10-10'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baemin_payments_raw prev RIGHT OUTER JOIN baemin_payments_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.deposited_at = current.deposited_at AND\n  prev.status = current.status AND\n  prev.period_started_at = current.period_started_at AND\n  prev.period_ended_at = current.period_ended_at AND\n  prev.settle_code = current.settle_code\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
259,process:::baemin_payments_unique:::build_delivery_app_payments,process:::merged_baemin_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baemin_payments_raw prev RIGHT OUTER JOIN baemin_payments_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.deposited_at = current.deposited_at AND\n  prev.status = current.status AND\n  prev.period_started_at = current.period_started_at AND\n  prev.period_ended_at = current.period_ended_at AND\n  prev.settle_code = current.settle_code\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baemin' AS app_name\nFROM    (\n    SELECT  *,\n            row_number() OVER (\n                PARTITION BY shop_id, deposited_at, period_started_at, period_ended_at, settle_code\n                ORDER BY status_seq DESC\n            ) AS status_rank\n    FROM    (\n        SELECT *,\n               CASE\n                WHEN status = 'COMPLETE' THEN 2\n                WHEN status = 'REQUEST' THEN 1\n                WHEN status = 'PLAN' THEN 0\n                ELSE 0\n               END AS status_seq\n        FROM   baemin_payments_unique\n        WHERE  received_amount > 0\n    )\n) s, delivery_apps a\nWHERE   status_rank = 1\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baemin' AS app_name\nFROM    (\n    SELECT  *,\n            row_number() OVER (\n                PARTITION BY shop_id, deposited_at, period_started_at, period_ended_at, settle_code\n                ORDER BY status_seq DESC\n            ) AS status_rank\n    FROM    (\n        SELECT *,\n               CASE\n                WHEN status = 'COMPLETE' THEN 2\n                WHEN status = 'REQUEST' THEN 1\n                WHEN status = 'PLAN' THEN 0\n                ELSE 0\n               END AS status_seq\n        FROM   baemin_payments\n        WHERE  received_amount > 0\n    )\n) s, delivery_apps a\nWHERE   status_rank = 1\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
260,process:::yogiyo_payments_raw:::build_delivery_app_payments,process:::yogiyo_payments_unique:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  shop_id, deposited_at, period_started_at, period_ended_at, contract_type, payment_number,\n        MAX(certification_fee) AS certification_fee,\n        MAX(created_at) AS created_at,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(monthly_fee) AS monthly_fee,\n        MAX(offline_amount) AS offline_amount,\n        MAX(order_amount) AS order_amount,\n        MAX(rate_fee) AS rate_fee,\n        MAX(received_amount) AS received_amount,\n        MAX(reserved_amount) AS reserved_amount,\n        MAX(shop_discount) AS shop_discount,\n        MAX(terminal_fee) AS terminal_fee,\n        MAX(transaction_fee) AS transaction_fee,\n        MAX(unpaid_amount) AS unpaid_amount,\n        MAX(updated_at) AS updated_at,\n        MAX(vat) AS vat\nFROM    yogiyo_payments_src\nGROUP BY  shop_id, deposited_at, period_started_at, period_ended_at, contract_type, payment_number'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_yogiyo_payments_raw prev RIGHT OUTER JOIN yogiyo_payments_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.deposited_at = current.deposited_at AND\n  prev.period_started_at = current.period_started_at AND\n  prev.period_ended_at = current.period_ended_at AND\n  prev.contract_type = current.contract_type AND\n  prev.payment_number = current.payment_number\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
261,process:::prev_yogiyo_payments_raw:::build_delivery_app_payments,process:::yogiyo_payments_unique:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_payments_src\nWHERE   app_name = 'yogiyo'\nAND     created_at_date >= '2020-10-03'\nAND     created_at_date < '2020-10-10'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_yogiyo_payments_raw prev RIGHT OUTER JOIN yogiyo_payments_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.deposited_at = current.deposited_at AND\n  prev.period_started_at = current.period_started_at AND\n  prev.period_ended_at = current.period_ended_at AND\n  prev.contract_type = current.contract_type AND\n  prev.payment_number = current.payment_number\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
262,process:::yogiyo_payments_unique:::build_delivery_app_payments,process:::merged_yogiyo_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_yogiyo_payments_raw prev RIGHT OUTER JOIN yogiyo_payments_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.deposited_at = current.deposited_at AND\n  prev.period_started_at = current.period_started_at AND\n  prev.period_ended_at = current.period_ended_at AND\n  prev.contract_type = current.contract_type AND\n  prev.payment_number = current.payment_number\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'yogiyo' AS app_name\nFROM    yogiyo_payments_unique s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'yogiyo' AS app_name\nFROM    yogiyo_payments s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
263,process:::baedaltong_payments_raw:::build_delivery_app_payments,process:::baedaltong_payments_unique:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  shop_id,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        MAX(created_at) AS created_at,\n        MAX(offline_canceled_amount) AS offline_canceled_amount,\n        MAX(offline_fee) AS offline_fee,\n        MAX(offline_order_amount) AS offline_order_amount,\n        MAX(offline_received_amount) AS offline_received_amount,\n        MAX(offline_vat) AS offline_vat,\n        MAX(online_canceled_amount) AS online_canceled_amount,\n        MAX(online_fee) AS online_fee,\n        MAX(online_order_amount) AS online_order_amount,\n        MAX(online_received_amount) AS online_received_amount,\n        MAX(online_vat) AS online_vat,\n        MAX(previous_reserved_amount) AS previous_reserved_amount,\n        MAX(received_amount) AS received_amount,\n        MAX(reserved_amount) AS reserved_amount,\n        MAX(updated_at) AS updated_at\nFROM    baedaltong_payments_src\nGROUP BY  shop_id, deposited_at, period_started_at, period_ended_at'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baedaltong_payments_raw prev RIGHT OUTER JOIN baedaltong_payments_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.deposited_at = current.deposited_at AND\n  prev.period_started_at = current.period_started_at AND\n  prev.period_ended_at = current.period_ended_at\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
264,process:::prev_baedaltong_payments_raw:::build_delivery_app_payments,process:::baedaltong_payments_unique:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_payments_src\nWHERE   app_name = 'baedaltong'\nAND     created_at_date >= '2020-10-03'\nAND     created_at_date < '2020-10-10'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baedaltong_payments_raw prev RIGHT OUTER JOIN baedaltong_payments_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.deposited_at = current.deposited_at AND\n  prev.period_started_at = current.period_started_at AND\n  prev.period_ended_at = current.period_ended_at\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
265,process:::baedaltong_payments_unique:::build_delivery_app_payments,process:::merged_baedaltong_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baedaltong_payments_raw prev RIGHT OUTER JOIN baedaltong_payments_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.deposited_at = current.deposited_at AND\n  prev.period_started_at = current.period_started_at AND\n  prev.period_ended_at = current.period_ended_at\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baedaltong' AS app_name\nFROM    baedaltong_payments_unique s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baedaltong' AS app_name\nFROM    baedaltong_payments s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
266,process:::merged_baemin_payments:::build_delivery_app_payments,process:::delivery_app_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baemin' AS app_name\nFROM    (\n    SELECT  *,\n            row_number() OVER (\n                PARTITION BY shop_id, deposited_at, period_started_at, period_ended_at, settle_code\n                ORDER BY status_seq DESC\n            ) AS status_rank\n    FROM    (\n        SELECT *,\n               CASE\n                WHEN status = 'COMPLETE' THEN 2\n                WHEN status = 'REQUEST' THEN 1\n                WHEN status = 'PLAN' THEN 0\n                ELSE 0\n               END AS status_seq\n        FROM   baemin_payments_unique\n        WHERE  received_amount > 0\n    )\n) s, delivery_apps a\nWHERE   status_rank = 1\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baemin' AS app_name\nFROM    (\n    SELECT  *,\n            row_number() OVER (\n                PARTITION BY shop_id, deposited_at, period_started_at, period_ended_at, settle_code\n                ORDER BY status_seq DESC\n            ) AS status_rank\n    FROM    (\n        SELECT *,\n               CASE\n                WHEN status = 'COMPLETE' THEN 2\n                WHEN status = 'REQUEST' THEN 1\n                WHEN status = 'PLAN' THEN 0\n                ELSE 0\n               END AS status_seq\n        FROM   baemin_payments\n        WHERE  received_amount > 0\n    )\n) s, delivery_apps a\nWHERE   status_rank = 1\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip AS online_order_amount,\n        received_amount,\n        status,\n        created_at_date\nFROM    merged_baemin_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        created_at_date\nFROM    merged_baedaltong_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip - offline_amount AS online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        created_at_date\nFROM    merged_yogiyo_payments'}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip AS online_order_amount,\n        received_amount,\n        status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_baemin_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_baedaltong_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip - offline_amount AS online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_yogiyo_payments""}, 'role': 'process', 'type': 'sql'}]"
267,process:::merged_baedaltong_payments:::build_delivery_app_payments,process:::delivery_app_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baedaltong' AS app_name\nFROM    baedaltong_payments_unique s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baedaltong' AS app_name\nFROM    baedaltong_payments s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip AS online_order_amount,\n        received_amount,\n        status,\n        created_at_date\nFROM    merged_baemin_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        created_at_date\nFROM    merged_baedaltong_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip - offline_amount AS online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        created_at_date\nFROM    merged_yogiyo_payments'}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip AS online_order_amount,\n        received_amount,\n        status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_baemin_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_baedaltong_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip - offline_amount AS online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_yogiyo_payments""}, 'role': 'process', 'type': 'sql'}]"
268,process:::merged_yogiyo_payments:::build_delivery_app_payments,process:::delivery_app_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'yogiyo' AS app_name\nFROM    yogiyo_payments_unique s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'yogiyo' AS app_name\nFROM    yogiyo_payments s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip AS online_order_amount,\n        received_amount,\n        status,\n        created_at_date\nFROM    merged_baemin_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        created_at_date\nFROM    merged_baedaltong_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip - offline_amount AS online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        created_at_date\nFROM    merged_yogiyo_payments'}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip AS online_order_amount,\n        received_amount,\n        status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_baemin_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_baedaltong_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip - offline_amount AS online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_yogiyo_payments""}, 'role': 'process', 'type': 'sql'}]"
269,process:::delivery_app_payments:::build_delivery_app_payments,s3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': 'SELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip AS online_order_amount,\n        received_amount,\n        status,\n        created_at_date\nFROM    merged_baemin_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        created_at_date\nFROM    merged_baedaltong_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip - offline_amount AS online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        created_at_date\nFROM    merged_yogiyo_payments'}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip AS online_order_amount,\n        received_amount,\n        status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_baemin_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_baedaltong_payments\n\nUNION ALL\n\nSELECT  business_id,\n        app_name,\n        deposited_at,\n        period_started_at,\n        period_ended_at,\n        order_amount + delivery_tip - offline_amount AS online_order_amount,\n        received_amount,\n        CAST(null AS string) AS status,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    merged_yogiyo_payments""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'delivery_app_payments_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app/delivery_app_payments'}, 'role': 'source', 'type': 'file'}]"
270,s3://kcd-de-production/raw/etl/pos/pos_menus_v2,process:::pos_menus_v2:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus_v2', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_menus_v2.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_menus_v2', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus_v2', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_menus_raw_v2\n    WHERE\n        created_at_date >= '2020-09-01'\n    AND uid IS NOT NULL\n    AND name IS NOT NULL\n    AND name != ''\n    AND name != 'null'""}, 'role': 'process', 'type': 'sql'}]"
271,s3://kcd-de-production/raw/etl/pos/pos_menus_v2,process:::pos_menus_v2:::pos_menus_tok_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus_v2', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_menus_v2.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_menus_v2', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus_v2', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_menus_raw_v2\n    WHERE\n        created_at_date >= '2020-09-01'\n    AND uid IS NOT NULL\n    AND name IS NOT NULL\n    AND name != ''""}, 'role': 'process', 'type': 'sql'}]"
272,s3://kcd-de-production/raw/etl/pos/pos_payments_with_visited_v2,process:::pos_payments_visited_v2:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_payments_with_visited_v2', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}, {'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_payments_with_visited_v2', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_payments_visited_raw_v2\n    WHERE\n        created_at_date >= '2020-09-01'\n    AND uid IS NOT NULL\n    AND card_number IS NOT NULL\n    AND card_number != '******'\n    AND card_number != ''""}, 'role': 'process', 'type': 'sql'}]"
273,process:::pos_menus_v2:::pos_preferred_menus_by_visit_type,process:::pos_menus_with_payment_v2:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_menus_raw_v2\n    WHERE\n        created_at_date >= '2020-09-01'\n    AND uid IS NOT NULL\n    AND name IS NOT NULL\n    AND name != ''\n    AND name != 'null'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': ""SELECT\n    *,\n    CASE\n        WHEN order_hour between 0 and 5 then '새벽'\n        WHEN order_hour between 6 and 10 then '아침'\n        WHEN order_hour between 11 and 13 then '점심'\n        WHEN order_hour between 14 and 16 then '오후'\n        ELSE '저녁'\n    END AS time_bucket,\n    CASE\n        WHEN visit_order is NOT NULL and visit_order > 1 then '재방문'\n        ELSE '신규'\n    END as visit_type\nFROM\n    (\n     SELECT\n         pos_menus_v2.*,\n         pos_payments_visited_v2.visit_order,\n         pos_payments_visited_v2.card_number,\n         pos_payments_visited_v2.issuer_name\n     FROM\n         pos_menus_v2\n     LEFT OUTER JOIN\n         pos_payments_visited_v2\n     ON\n         pos_payments_visited_v2.bill_key = pos_menus_v2.bill_key\n    )""}, 'role': 'process', 'type': 'sql'}]"
274,process:::pos_payments_visited_v2:::pos_preferred_menus_by_visit_type,process:::pos_menus_with_payment_v2:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_payments_visited_raw_v2\n    WHERE\n        created_at_date >= '2020-09-01'\n    AND uid IS NOT NULL\n    AND card_number IS NOT NULL\n    AND card_number != '******'\n    AND card_number != ''""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': ""SELECT\n    *,\n    CASE\n        WHEN order_hour between 0 and 5 then '새벽'\n        WHEN order_hour between 6 and 10 then '아침'\n        WHEN order_hour between 11 and 13 then '점심'\n        WHEN order_hour between 14 and 16 then '오후'\n        ELSE '저녁'\n    END AS time_bucket,\n    CASE\n        WHEN visit_order is NOT NULL and visit_order > 1 then '재방문'\n        ELSE '신규'\n    END as visit_type\nFROM\n    (\n     SELECT\n         pos_menus_v2.*,\n         pos_payments_visited_v2.visit_order,\n         pos_payments_visited_v2.card_number,\n         pos_payments_visited_v2.issuer_name\n     FROM\n         pos_menus_v2\n     LEFT OUTER JOIN\n         pos_payments_visited_v2\n     ON\n         pos_payments_visited_v2.bill_key = pos_menus_v2.bill_key\n    )""}, 'role': 'process', 'type': 'sql'}]"
275,process:::pos_menus_with_payment_v2:::pos_preferred_menus_by_visit_type,process:::pos_menu_with_payment_with_group_with_rank_times_v2:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': ""SELECT\n    *,\n    CASE\n        WHEN order_hour between 0 and 5 then '새벽'\n        WHEN order_hour between 6 and 10 then '아침'\n        WHEN order_hour between 11 and 13 then '점심'\n        WHEN order_hour between 14 and 16 then '오후'\n        ELSE '저녁'\n    END AS time_bucket,\n    CASE\n        WHEN visit_order is NOT NULL and visit_order > 1 then '재방문'\n        ELSE '신규'\n    END as visit_type\nFROM\n    (\n     SELECT\n         pos_menus_v2.*,\n         pos_payments_visited_v2.visit_order,\n         pos_payments_visited_v2.card_number,\n         pos_payments_visited_v2.issuer_name\n     FROM\n         pos_menus_v2\n     LEFT OUTER JOIN\n         pos_payments_visited_v2\n     ON\n         pos_payments_visited_v2.bill_key = pos_menus_v2.bill_key\n    )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': '   SELECT\n       uid,\n       uid_type,\n       order_month,\n       visit_type,\n       collect_list(struct(rank, time_bucket, total_count)) AS times\n   FROM\n       (\n       SELECT\n           *,\n           row_number() OVER (PARTITION BY uid, uid_type, order_month, visit_type ORDER BY total_count DESC) AS rank\n       FROM\n         (\n          SELECT\n              uid,\n              uid_type,\n              order_month,\n              visit_type,\n              time_bucket,\n              count(*) as total_count\n          FROM\n              pos_menus_with_payment_v2\n          GROUP BY\n              uid,\n              uid_type,\n              order_month,\n              visit_type,\n              time_bucket\n          )\n       )\n   GROUP BY\n       uid,\n       uid_type,\n       order_month,\n       visit_type'}, 'role': 'process', 'type': 'sql'}]"
276,process:::pos_menus_with_payment_v2:::pos_preferred_menus_by_visit_type,process:::pos_menu_with_payment_with_group_with_rank_v2:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': ""SELECT\n    *,\n    CASE\n        WHEN order_hour between 0 and 5 then '새벽'\n        WHEN order_hour between 6 and 10 then '아침'\n        WHEN order_hour between 11 and 13 then '점심'\n        WHEN order_hour between 14 and 16 then '오후'\n        ELSE '저녁'\n    END AS time_bucket,\n    CASE\n        WHEN visit_order is NOT NULL and visit_order > 1 then '재방문'\n        ELSE '신규'\n    END as visit_type\nFROM\n    (\n     SELECT\n         pos_menus_v2.*,\n         pos_payments_visited_v2.visit_order,\n         pos_payments_visited_v2.card_number,\n         pos_payments_visited_v2.issuer_name\n     FROM\n         pos_menus_v2\n     LEFT OUTER JOIN\n         pos_payments_visited_v2\n     ON\n         pos_payments_visited_v2.bill_key = pos_menus_v2.bill_key\n    )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': 'SELECT\n    uid,\n    uid_type,\n    order_month,\n    visit_type,\n    collect_list(struct(rank, name, total_amount, total_count)) AS menus\nFROM\n   (\n   SELECT\n       *,\n       row_number() OVER (PARTITION BY uid, uid_type, order_month, visit_type ORDER BY total_amount DESC) AS rank\n   FROM\n      (\n       SELECT\n           uid,\n           uid_type,\n           order_month,\n           name,\n           collect_list(order_time) as order_times,\n           visit_type,\n           sum(price * `count`) as total_amount,\n           sum(`count`) as total_count\n       FROM\n           pos_menus_with_payment_v2\n       GROUP BY\n           uid,\n           uid_type,\n           order_month,\n           visit_type,\n           name\n       )\n   )\nGROUP BY\n    uid,\n    uid_type,\n    order_month,\n    visit_type'}, 'role': 'process', 'type': 'sql'}]"
277,process:::pos_menu_with_payment_with_group_with_rank_times_v2:::pos_preferred_menus_by_visit_type,process:::pos_menu_with_payment_with_group_with_rank_joined_v2:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': '   SELECT\n       uid,\n       uid_type,\n       order_month,\n       visit_type,\n       collect_list(struct(rank, time_bucket, total_count)) AS times\n   FROM\n       (\n       SELECT\n           *,\n           row_number() OVER (PARTITION BY uid, uid_type, order_month, visit_type ORDER BY total_count DESC) AS rank\n       FROM\n         (\n          SELECT\n              uid,\n              uid_type,\n              order_month,\n              visit_type,\n              time_bucket,\n              count(*) as total_count\n          FROM\n              pos_menus_with_payment_v2\n          GROUP BY\n              uid,\n              uid_type,\n              order_month,\n              visit_type,\n              time_bucket\n          )\n       )\n   GROUP BY\n       uid,\n       uid_type,\n       order_month,\n       visit_type'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': '   SELECT\n       menus.*,\n       times.times\n   FROM\n       pos_menu_with_payment_with_group_with_rank_times_v2 times\n   INNER JOIN\n       pos_menu_with_payment_with_group_with_rank_v2 menus\n   ON  menus.uid = times.uid\n   AND menus.uid_type = times.uid_type\n   AND menus.order_month = times.order_month\n   AND menus.visit_type = times.visit_type'}, 'role': 'process', 'type': 'sql'}]"
278,process:::pos_menu_with_payment_with_group_with_rank_v2:::pos_preferred_menus_by_visit_type,process:::pos_menu_with_payment_with_group_with_rank_joined_v2:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': 'SELECT\n    uid,\n    uid_type,\n    order_month,\n    visit_type,\n    collect_list(struct(rank, name, total_amount, total_count)) AS menus\nFROM\n   (\n   SELECT\n       *,\n       row_number() OVER (PARTITION BY uid, uid_type, order_month, visit_type ORDER BY total_amount DESC) AS rank\n   FROM\n      (\n       SELECT\n           uid,\n           uid_type,\n           order_month,\n           name,\n           collect_list(order_time) as order_times,\n           visit_type,\n           sum(price * `count`) as total_amount,\n           sum(`count`) as total_count\n       FROM\n           pos_menus_with_payment_v2\n       GROUP BY\n           uid,\n           uid_type,\n           order_month,\n           visit_type,\n           name\n       )\n   )\nGROUP BY\n    uid,\n    uid_type,\n    order_month,\n    visit_type'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': '   SELECT\n       menus.*,\n       times.times\n   FROM\n       pos_menu_with_payment_with_group_with_rank_times_v2 times\n   INNER JOIN\n       pos_menu_with_payment_with_group_with_rank_v2 menus\n   ON  menus.uid = times.uid\n   AND menus.uid_type = times.uid_type\n   AND menus.order_month = times.order_month\n   AND menus.visit_type = times.visit_type'}, 'role': 'process', 'type': 'sql'}]"
279,process:::pos_menu_with_payment_with_group_with_rank_joined_v2:::pos_preferred_menus_by_visit_type,process:::pos_menu_with_payment_jdbc_v2:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': '   SELECT\n       menus.*,\n       times.times\n   FROM\n       pos_menu_with_payment_with_group_with_rank_times_v2 times\n   INNER JOIN\n       pos_menu_with_payment_with_group_with_rank_v2 menus\n   ON  menus.uid = times.uid\n   AND menus.uid_type = times.uid_type\n   AND menus.order_month = times.order_month\n   AND menus.visit_type = times.visit_type'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': '   SELECT\n       uid,\n       uid_type,\n       order_month,\n       visit_type,\n       to_json(times) AS times,\n       to_json(menus) AS menus\n   FROM\n       pos_menu_with_payment_with_group_with_rank_joined_v2'}, 'role': 'process', 'type': 'sql'}]"
280,process:::pos_menu_with_payment_jdbc_v2:::pos_preferred_menus_by_visit_type,s3://kcd-de-production/raw/etl/pos/pos_preferred_menus_v2,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': '   SELECT\n       uid,\n       uid_type,\n       order_month,\n       visit_type,\n       to_json(times) AS times,\n       to_json(menus) AS menus\n   FROM\n       pos_menu_with_payment_with_group_with_rank_joined_v2'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/pos/pos_preferred_menus_v2', 'format': 'parquet', 'partitions': 'order_month', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}]"
281,process:::pos_menu_with_payment_jdbc_v2:::pos_preferred_menus_by_visit_type,jdbc_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'sql': '   SELECT\n       uid,\n       uid_type,\n       order_month,\n       visit_type,\n       to_json(times) AS times,\n       to_json(menus) AS menus\n   FROM\n       pos_menu_with_payment_with_group_with_rank_joined_v2'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'uid_type:bills_id_type,menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats_v2', 'conflictColumns': 'uid,uid_type,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus', 'conflictColumns': 'business_id,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'daily_delivery_orders_stat.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'daily_delivery_orders_stat', 'conflictColumns': 'business_id,delivery_app,shop_number,date', 'updateColumns': 'closed_orders_amount,closed_orders_count,cancelled_orders_amount,cancelled_orders_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'hometax_business_label_upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'dbtable': 'hometax_businesses', 'conflictColumns': 'business_id', 'updateColumns': 'regular_employees_count,size_category,updated_at', 'typeCastColumns': 'size_category:hometax_business_size_category'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_sdk_event.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'sdk_name,event_type, user_type', 'updateColumns': 'sdk_name,event_type,user_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'delivery_receipt_stats.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-staging.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_staging', 'user': 'plover', 'password': 'welcome!', 'operation': 'upsert', 'dbtable': 'pos_receipt_stat', 'conflictColumns': 'public_id,target_date,date_type,h3_index,h3_resolution', 'updateColumns': 'metric', 'typeCastColumns': 'metric:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats', 'conflictColumns': 'business_id,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus', 'conflictColumns': 'business_id,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_menu_top_k.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_menu_top_k', 'conflictColumns': 'business_id,order_month,time_bucket,name', 'updateColumns': 'total_amount,total_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}]"
282,pos_menus_raw_v2,process:::pos_menus_distinct_v2:::dedup_menus,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_menus_v2.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=posetl_menus_v2/created_at_date=2021-01-28,s3://kcd-de-production/raw/catalog_v2/raw/tb=posetl_menus_v2/created_at_date=2021-01-27,s3://kcd-de-production/raw/catalog_v2/raw/tb=posetl_menus_v2/created_at_date=2021-01-26', 'partition_keys': 'created_at_date,created_at_hour', 'mergeSchema': 'true'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'dedup_menus_v2.json', 'options': {'sql': 'SELECT\n  _event_id,\n  bill_key,\n  uid,\n  uid_type,\n  CAST(count as integer) AS count,\n  idx,\n  label_name,\n  menu_key,\n  name,\n  order_time,\n  service_name,\n  timestamp,\n  CAST(total_price as integer) AS total_price,\n  CAST(created_at_date as string) AS created_at_date,\n  created_at_hour,\n  CAST(price as integer) AS price,\n  date_format(ordered_at_timestamp, ""yyyy-MM-dd"") AS order_date,\n  date_format(ordered_at_timestamp, ""yyyy-MM"") AS order_month,\n  CAST(date_format(ordered_at_timestamp, ""HH"") AS integer) AS order_hour\nFROM (\n  SELECT\n    *,\n    COALESCE(\n      to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""),\n      to_timestamp(order_time, ""yyyy-MM-dd\'T\'HH:mm:ss""),\n      to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss.SSS"")\n    ) AS ordered_at_timestamp,\n    row_number() OVER (PARTITION BY menu_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_menus_raw_v2\n  WHERE\n    created_at_date >= \'2020-07-30\' AND created_at_date < \'2021-01-29\'\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
283,process:::pos_menus_distinct_v2:::dedup_menus,s3://kcd-de-production/raw/etl/pos/pos_menus_v2,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_menus_v2.json', 'options': {'sql': 'SELECT\n  _event_id,\n  bill_key,\n  uid,\n  uid_type,\n  CAST(count as integer) AS count,\n  idx,\n  label_name,\n  menu_key,\n  name,\n  order_time,\n  service_name,\n  timestamp,\n  CAST(total_price as integer) AS total_price,\n  CAST(created_at_date as string) AS created_at_date,\n  created_at_hour,\n  CAST(price as integer) AS price,\n  date_format(ordered_at_timestamp, ""yyyy-MM-dd"") AS order_date,\n  date_format(ordered_at_timestamp, ""yyyy-MM"") AS order_month,\n  CAST(date_format(ordered_at_timestamp, ""HH"") AS integer) AS order_hour\nFROM (\n  SELECT\n    *,\n    COALESCE(\n      to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""),\n      to_timestamp(order_time, ""yyyy-MM-dd\'T\'HH:mm:ss""),\n      to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss.SSS"")\n    ) AS ordered_at_timestamp,\n    row_number() OVER (PARTITION BY menu_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_menus_raw_v2\n  WHERE\n    created_at_date >= \'2020-07-30\' AND created_at_date < \'2021-01-29\'\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus_v2', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_menus_v2.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_menus_v2', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus_v2', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}]"
284,s3://kcd-de-staging/work/ryan/pos_asp/items/,process:::merged_payments_with_items:::asp_pos_post_process,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_asp_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/pos_asp/items/created_at_date=2020-11-04', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'pos_asp_format_process.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/pos_asp/items/created_at_date=2021-01-28', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'pos_asp_transactions.json', 'options': {'sql': ""SELECT  CONCAT_WS('|',\n          p.store_pos_key,\n          p.receipt_key,\n          p.payment_key,\n          i.item_key\n        ) AS record_key,\n        current_timestamp() as ts,\n        p.ordered_at_date,\n        p.store_pos_key,\n        p.receipt_key,\n        p.payment_key,\n        p.pos_asp_agent,\n        p.brand_uid,\n        p.brand_name,\n        p.brand_registration_number,\n        p.francise_uid,\n        p.francise_name,\n        p.francise_registration_number,\n        p.store_uid,\n        p.store_name,\n        p.store_registration_number,\n        p.francise_address,\n        p.store_address,\n        p.store_area,\n        p.store_table_count,\n        p.pos_uid,\n        p.pos_name,\n        p.table_uid,\n        p.receipt_uid,\n        p.cancelled_receipt_uid,\n        p.receipt_status,\n        p.receipt_ordered_at,\n        p.receipt_paid_at,\n        p.receipt_amount,\n        p.receipt_discount,\n        p.receipt_vat,\n        p.payment_method,\n        p.payment_status,\n        p.payment_issuer,\n        p.payment_acquirer,\n        p.payment_card_number,\n        p.payment_authorization_number,\n        p.payment_cash_receipt_identification,\n        p.payment_approved_at,\n        p.payment_amount,\n        p.payment_price,\n        p.payment_vat,\n        p.payment_installment,\n        i.item_key,\n        i.menu_uid,\n        i.item_name,\n        i.item_ordered_at,\n        i.item_amount,\n        i.item_discount,\n        i.item_price,\n        i.item_quantity,\n        i.item_vat\nFROM payments p left outer join items i\nON p.pos_asp_agent = i.pos_asp_agent\nAND p.store_pos_key = i.store_pos_key\nAND p.receipt_key = i.receipt_key""}, 'role': 'process', 'type': 'sql'}]"
285,s3://kcd-de-staging/work/ryan/pos_asp/payments/,process:::merged_payments_with_items:::asp_pos_post_process,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_asp_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/pos_asp/payments/created_at_date=2020-11-04', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'pos_asp_format_process.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/pos_asp/payments/created_at_date=2021-01-28', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'pos_asp_transactions.json', 'options': {'sql': ""SELECT  CONCAT_WS('|',\n          p.store_pos_key,\n          p.receipt_key,\n          p.payment_key,\n          i.item_key\n        ) AS record_key,\n        current_timestamp() as ts,\n        p.ordered_at_date,\n        p.store_pos_key,\n        p.receipt_key,\n        p.payment_key,\n        p.pos_asp_agent,\n        p.brand_uid,\n        p.brand_name,\n        p.brand_registration_number,\n        p.francise_uid,\n        p.francise_name,\n        p.francise_registration_number,\n        p.store_uid,\n        p.store_name,\n        p.store_registration_number,\n        p.francise_address,\n        p.store_address,\n        p.store_area,\n        p.store_table_count,\n        p.pos_uid,\n        p.pos_name,\n        p.table_uid,\n        p.receipt_uid,\n        p.cancelled_receipt_uid,\n        p.receipt_status,\n        p.receipt_ordered_at,\n        p.receipt_paid_at,\n        p.receipt_amount,\n        p.receipt_discount,\n        p.receipt_vat,\n        p.payment_method,\n        p.payment_status,\n        p.payment_issuer,\n        p.payment_acquirer,\n        p.payment_card_number,\n        p.payment_authorization_number,\n        p.payment_cash_receipt_identification,\n        p.payment_approved_at,\n        p.payment_amount,\n        p.payment_price,\n        p.payment_vat,\n        p.payment_installment,\n        i.item_key,\n        i.menu_uid,\n        i.item_name,\n        i.item_ordered_at,\n        i.item_amount,\n        i.item_discount,\n        i.item_price,\n        i.item_quantity,\n        i.item_vat\nFROM payments p left outer join items i\nON p.pos_asp_agent = i.pos_asp_agent\nAND p.store_pos_key = i.store_pos_key\nAND p.receipt_key = i.receipt_key""}, 'role': 'process', 'type': 'sql'}]"
286,process:::merged_payments_with_items:::asp_pos_post_process,process:::pos_asp_transactions:::asp_pos_post_process,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_asp_transactions.json', 'options': {'sql': ""SELECT  CONCAT_WS('|',\n          p.store_pos_key,\n          p.receipt_key,\n          p.payment_key,\n          i.item_key\n        ) AS record_key,\n        current_timestamp() as ts,\n        p.ordered_at_date,\n        p.store_pos_key,\n        p.receipt_key,\n        p.payment_key,\n        p.pos_asp_agent,\n        p.brand_uid,\n        p.brand_name,\n        p.brand_registration_number,\n        p.francise_uid,\n        p.francise_name,\n        p.francise_registration_number,\n        p.store_uid,\n        p.store_name,\n        p.store_registration_number,\n        p.francise_address,\n        p.store_address,\n        p.store_area,\n        p.store_table_count,\n        p.pos_uid,\n        p.pos_name,\n        p.table_uid,\n        p.receipt_uid,\n        p.cancelled_receipt_uid,\n        p.receipt_status,\n        p.receipt_ordered_at,\n        p.receipt_paid_at,\n        p.receipt_amount,\n        p.receipt_discount,\n        p.receipt_vat,\n        p.payment_method,\n        p.payment_status,\n        p.payment_issuer,\n        p.payment_acquirer,\n        p.payment_card_number,\n        p.payment_authorization_number,\n        p.payment_cash_receipt_identification,\n        p.payment_approved_at,\n        p.payment_amount,\n        p.payment_price,\n        p.payment_vat,\n        p.payment_installment,\n        i.item_key,\n        i.menu_uid,\n        i.item_name,\n        i.item_ordered_at,\n        i.item_amount,\n        i.item_discount,\n        i.item_price,\n        i.item_quantity,\n        i.item_vat\nFROM payments p left outer join items i\nON p.pos_asp_agent = i.pos_asp_agent\nAND p.store_pos_key = i.store_pos_key\nAND p.receipt_key = i.receipt_key""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_asp_transactions.json', 'options': {'sql': 'SELECT    *\nFROM      merged_payments_with_items\nWHERE     record_key is not null'}, 'role': 'process', 'type': 'sql'}]"
287,process:::pos_asp_transactions:::asp_pos_post_process,s3://kcd-de-staging/work/ryan/pos_asp/transactions/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_asp_transactions.json', 'options': {'sql': 'SELECT    *\nFROM      merged_payments_with_items\nWHERE     record_key is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_asp_transactions.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/pos_asp/transactions/created_at_date=2020-11-04', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
288,s3://kcd-de-production/raw/etl/pos/pos_payments,process:::prev_pos_payments_approved:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src\nWHERE\n  created_at_date >= date_sub(to_date('2019-10-23'), 365) AND created_at_date < '2019-10-23' AND\n  (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT  *\nFROM    prev_pos_payments\nWHERE   (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}]"
289,s3://kcd-de-production/raw/etl/pos/pos_payments,process:::current_pos_payments_approved:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src\nWHERE\n  created_at_date >= '2019-10-23' AND created_at_date < '2020-10-23' AND\n  (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT *\nFROM   current_pos_payments\nWHERE  (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}]"
290,s3://kcd-de-production/raw/etl/pos/pos_payments,process:::current_pos_payments_canceled:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src\nWHERE\n  created_at_date >= '2019-10-23' AND created_at_date < '2020-10-23' AND\n  NOT (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT *\nFROM   current_pos_payments\nWHERE  NOT (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}]"
291,process:::prev_pos_payments_approved:::pos_add_visit_order,process:::current_visits_approved:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src\nWHERE\n  created_at_date >= date_sub(to_date('2019-10-23'), 365) AND created_at_date < '2019-10-23' AND\n  (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT  *\nFROM    prev_pos_payments\nWHERE   (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  business_id,\n  card_number,\n  client_id,\n  index,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  store_key,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM    (\n  SELECT  pos_tx.*\n  FROM    (\n    SELECT  explode(pos_add_visit_order(histories)) AS pos_tx\n    FROM    (\n      SELECT  business_id,\n              card_number,\n              collect_list(struct(*)) AS histories\n      FROM    (\n        SELECT * FROM prev_pos_payments_approved\n        UNION ALL\n        SELECT * FROM current_pos_payments_approved\n      )\n      GROUP BY business_id, issuer_name, card_number\n    )\n  )\n)\nWHERE   created_at_date >= '2019-10-23' -- leave current""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  business_id,\n  card_number,\n  client_id,\n  index,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  store_key,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM    (\n  SELECT  pos_tx.*\n  FROM    (\n    SELECT  explode(pos_add_visit_order(histories)) AS pos_tx\n    FROM    (\n      SELECT  business_id,\n              card_number,\n              collect_list(struct(*)) AS histories\n      FROM    (\n        SELECT * FROM prev_pos_payments_approved\n        UNION ALL\n        SELECT * FROM current_pos_payments_approved\n      )\n      GROUP BY business_id, issuer_name, card_number\n    )\n  )\n)\nWHERE   created_at_date >= '2019-09-23'""}, 'role': 'process', 'type': 'sql'}]"
292,process:::current_pos_payments_approved:::pos_add_visit_order,process:::current_visits_approved:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src\nWHERE\n  created_at_date >= '2019-10-23' AND created_at_date < '2020-10-23' AND\n  (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT *\nFROM   current_pos_payments\nWHERE  (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  business_id,\n  card_number,\n  client_id,\n  index,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  store_key,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM    (\n  SELECT  pos_tx.*\n  FROM    (\n    SELECT  explode(pos_add_visit_order(histories)) AS pos_tx\n    FROM    (\n      SELECT  business_id,\n              card_number,\n              collect_list(struct(*)) AS histories\n      FROM    (\n        SELECT * FROM prev_pos_payments_approved\n        UNION ALL\n        SELECT * FROM current_pos_payments_approved\n      )\n      GROUP BY business_id, issuer_name, card_number\n    )\n  )\n)\nWHERE   created_at_date >= '2019-10-23' -- leave current""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  business_id,\n  card_number,\n  client_id,\n  index,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  store_key,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM    (\n  SELECT  pos_tx.*\n  FROM    (\n    SELECT  explode(pos_add_visit_order(histories)) AS pos_tx\n    FROM    (\n      SELECT  business_id,\n              card_number,\n              collect_list(struct(*)) AS histories\n      FROM    (\n        SELECT * FROM prev_pos_payments_approved\n        UNION ALL\n        SELECT * FROM current_pos_payments_approved\n      )\n      GROUP BY business_id, issuer_name, card_number\n    )\n  )\n)\nWHERE   created_at_date >= '2019-09-23'""}, 'role': 'process', 'type': 'sql'}]"
293,process:::current_pos_payments_canceled:::pos_add_visit_order,process:::current_visits_canceled:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src\nWHERE\n  created_at_date >= '2019-10-23' AND created_at_date < '2020-10-23' AND\n  NOT (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT *\nFROM   current_pos_payments\nWHERE  NOT (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': 'SELECT\n        _event_id,\n        `type`,\n        amount,\n        authorization_number,\n        bill_key,\n        bill_no,\n        business_id,\n        card_number,\n        client_id,\n        index,\n        issuer_name,\n        label_name,\n        merchant_number,\n        order_status,\n        paid_at,\n        payment_key,\n        pos_no,\n        pos_type,\n        service_name,\n        shop_code,\n        store_key,\n        timestamp,\n        CAST(null AS int) AS visit_order,\n        created_at_date\nFROM\n    current_pos_payments_canceled'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT\n        _event_id,\n        `type`,\n        amount,\n        authorization_number,\n        bill_key,\n        bill_no,\n        business_id,\n        card_number,\n        client_id,\n        index,\n        issuer_name,\n        label_name,\n        merchant_number,\n        order_status,\n        paid_at,\n        payment_key,\n        pos_no,\n        pos_type,\n        service_name,\n        shop_code,\n        store_key,\n        timestamp,\n        CAST(null AS int) AS visit_order,\n        created_at_date\nFROM\n    current_pos_payments_canceled'}, 'role': 'process', 'type': 'sql'}]"
294,process:::current_visits_approved:::pos_add_visit_order,process:::visits:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  business_id,\n  card_number,\n  client_id,\n  index,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  store_key,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM    (\n  SELECT  pos_tx.*\n  FROM    (\n    SELECT  explode(pos_add_visit_order(histories)) AS pos_tx\n    FROM    (\n      SELECT  business_id,\n              card_number,\n              collect_list(struct(*)) AS histories\n      FROM    (\n        SELECT * FROM prev_pos_payments_approved\n        UNION ALL\n        SELECT * FROM current_pos_payments_approved\n      )\n      GROUP BY business_id, issuer_name, card_number\n    )\n  )\n)\nWHERE   created_at_date >= '2019-10-23' -- leave current""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  business_id,\n  card_number,\n  client_id,\n  index,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  store_key,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM    (\n  SELECT  pos_tx.*\n  FROM    (\n    SELECT  explode(pos_add_visit_order(histories)) AS pos_tx\n    FROM    (\n      SELECT  business_id,\n              card_number,\n              collect_list(struct(*)) AS histories\n      FROM    (\n        SELECT * FROM prev_pos_payments_approved\n        UNION ALL\n        SELECT * FROM current_pos_payments_approved\n      )\n      GROUP BY business_id, issuer_name, card_number\n    )\n  )\n)\nWHERE   created_at_date >= '2019-09-23'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved_v2\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled_v2'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}]"
295,process:::current_visits_canceled:::pos_add_visit_order,process:::visits:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': 'SELECT\n        _event_id,\n        `type`,\n        amount,\n        authorization_number,\n        bill_key,\n        bill_no,\n        business_id,\n        card_number,\n        client_id,\n        index,\n        issuer_name,\n        label_name,\n        merchant_number,\n        order_status,\n        paid_at,\n        payment_key,\n        pos_no,\n        pos_type,\n        service_name,\n        shop_code,\n        store_key,\n        timestamp,\n        CAST(null AS int) AS visit_order,\n        created_at_date\nFROM\n    current_pos_payments_canceled'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT\n        _event_id,\n        `type`,\n        amount,\n        authorization_number,\n        bill_key,\n        bill_no,\n        business_id,\n        card_number,\n        client_id,\n        index,\n        issuer_name,\n        label_name,\n        merchant_number,\n        order_status,\n        paid_at,\n        payment_key,\n        pos_no,\n        pos_type,\n        service_name,\n        shop_code,\n        store_key,\n        timestamp,\n        CAST(null AS int) AS visit_order,\n        created_at_date\nFROM\n    current_pos_payments_canceled'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved_v2\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled_v2'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}]"
296,process:::visits:::pos_add_visit_order,s3://kcd-de-production/raw/etl/pos/pos_payments_with_visited,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved_v2\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled_v2'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_payments_with_visited', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_payments_with_visited', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}]"
297,process:::visits:::pos_add_visit_order,s3://kcd-de-production/raw/etl/pos/pos_payments_with_visited_v2,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved_v2\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled_v2'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_payments_with_visited_v2', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}, {'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_payments_with_visited_v2', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
298,process:::visits:::pos_add_visit_order,s3://kcd-data/raw/pos/pos_payments_with_visited,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved_v2\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled_v2'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-data/raw/pos/pos_payments_with_visited', 'format': 'parquet', 'partitions': 'created_at_date', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}]"
299,s3://kcd-de-production/raw/etl/pos/pos_payments_with_visited,process:::pos_payments_visited:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_payments_with_visited', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_payments_with_visited', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_payments_visited_raw\n    WHERE\n        created_at_date >= '2020-06-01'\n    AND business_id IS NOT NULL\n    AND card_number IS NOT NULL\n    AND card_number != '******'\n    AND card_number != ''""}, 'role': 'process', 'type': 'sql'}]"
300,s3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/daily_transaction,process:::purchases_canceled_transactions:::purchases_canceled_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_canceled_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/daily_transaction'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/daily_transaction', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'purchases_canceled_transactions.json', 'options': {'sql': 'SELECT    business_id,\n          purchase_canceled_at,\n          purchased_at,\n          approval_canceled_at,\n          transacted_at,\n          paid_at,\n          payment\nFROM      transactions\nWHERE     purchase_canceled_at is not null'}, 'role': 'process', 'type': 'sql'}]"
301,process:::purchases_canceled_transactions:::purchases_canceled_transactions,s3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/purchases_canceled_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_canceled_transactions.json', 'options': {'sql': 'SELECT    business_id,\n          purchase_canceled_at,\n          purchased_at,\n          approval_canceled_at,\n          transacted_at,\n          paid_at,\n          payment\nFROM      transactions\nWHERE     purchase_canceled_at is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'purchases_canceled_transactions.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/purchases_canceled_transactions', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
302,process:::purchases_canceled_transactions:::purchases_canceled_transactions,s3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/results/purchases_canceled_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_canceled_transactions.json', 'options': {'sql': 'SELECT    business_id,\n          purchase_canceled_at,\n          purchased_at,\n          approval_canceled_at,\n          transacted_at,\n          paid_at,\n          payment\nFROM      transactions\nWHERE     purchase_canceled_at is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'purchases_canceled_transactions.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/results/purchases_canceled_transactions', 'header': 'true', 'numPartitions': '1', 'sep': '|'}, 'role': 'sink', 'type': 'custom'}]"
303,pos_bills_raw,process:::pos_bills_source:::dedup_bills,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_bills.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=posetl_bills/created_at_date=2020-10-21,s3://kcd-data/raw/catalog_v2/raw/tb=posetl_bills/created_at_date=2020-10-20,s3://kcd-data/raw/catalog_v2/raw/tb=posetl_bills/created_at_date=2020-10-19', 'partition_keys': 'created_at_date,created_at_hour', 'mergeSchema': 'true'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'dedup_bills.json', 'options': {'sql': 'SELECT\n  _event_id,\n  bill_key,\n  bill_no,\n  business_id,\n  business_public_id,\n  card_amount,\n  cash_amount,\n  client_id,\n  label_name,\n  mac_address,\n  order_no,\n  order_status,\n  paid_at,\n  paid_type,\n  pos_no,\n  pos_type,\n  public_ip,\n  service_name,\n  shop_code,\n  timestamp,\n  total_amount,\n  CAST(created_at_date as string) AS created_at_date,\n  paid_at_timestamp AS transacted_at,\n  CAST(to_date(paid_at_timestamp, \'yyyy-MM-dd\') AS string) AS transacted_at_date\nFROM (\n  SELECT\n    *,\n    COALESCE(\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd\'T\'HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"")\n    ) AS paid_at_timestamp,\n    row_number() OVER (PARTITION BY bill_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_bills_raw\n  WHERE\n    created_at_date >= \'2019-10-22\' AND created_at_date < \'2020-10-22\'\n  AND NOT((business_id = 633186 AND created_at_date < \'2020-10-15\')) -- POS_CS: DE-713\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
304,process:::pos_bills_source:::dedup_bills,s3://kcd-de-production/raw/etl/pos/pos_bills,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_bills.json', 'options': {'sql': 'SELECT\n  _event_id,\n  bill_key,\n  bill_no,\n  business_id,\n  business_public_id,\n  card_amount,\n  cash_amount,\n  client_id,\n  label_name,\n  mac_address,\n  order_no,\n  order_status,\n  paid_at,\n  paid_type,\n  pos_no,\n  pos_type,\n  public_ip,\n  service_name,\n  shop_code,\n  timestamp,\n  total_amount,\n  CAST(created_at_date as string) AS created_at_date,\n  paid_at_timestamp AS transacted_at,\n  CAST(to_date(paid_at_timestamp, \'yyyy-MM-dd\') AS string) AS transacted_at_date\nFROM (\n  SELECT\n    *,\n    COALESCE(\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd\'T\'HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"")\n    ) AS paid_at_timestamp,\n    row_number() OVER (PARTITION BY bill_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_bills_raw\n  WHERE\n    created_at_date >= \'2019-10-22\' AND created_at_date < \'2020-10-22\'\n  AND NOT((business_id = 633186 AND created_at_date < \'2020-10-15\')) -- POS_CS: DE-713\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dedup_bills.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_bills', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_bills', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}]"
305,s3://kcd-de-production/raw/etl/pos/pos_bills,process:::pos_sales_source:::pos_sales_amount_daily,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_bills.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_bills', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_bills', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_sales_amount_daily.json', 'options': {'sql': '    SELECT\n        *,\n        date_format(paid_at, ""yyyy-MM-dd"") AS date_id\n    FROM\n        pos_sales_source_raw\n    WHERE\n        created_at_date >= \'2020-10-19\''}, 'role': 'process', 'type': 'sql'}]"
306,pos_menus_raw,process:::pos_menus_distinct:::dedup_menus,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_menus.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=posetl_menus/created_at_date=2020-09-22,s3://kcd-data/raw/catalog_v2/raw/tb=posetl_menus/created_at_date=2020-09-21,s3://kcd-data/raw/catalog_v2/raw/tb=posetl_menus/created_at_date=2020-09-20', 'partition_keys': 'created_at_date,created_at_hour', 'mergeSchema': 'true'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'dedup_menus.json', 'options': {'sql': 'SELECT\n  _event_id,\n  bill_key,\n  business_id,\n  CAST(count as integer) AS count,\n  index,\n  label_name,\n  menu_key,\n  name,\n  order_time,\n  service_name,\n  timestamp,\n  CAST(total_price as integer) AS total_price,\n  CAST(created_at_date as string) AS created_at_date,\n  created_at_hour,\n  CAST(price as integer) AS price,\n  date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM-dd"") AS order_date,\n  date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM"") AS order_month,\n  CAST(date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""HH"") as integer) AS order_hour\nFROM (\n  SELECT\n    *,\n    row_number() OVER (PARTITION BY menu_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_menus_raw\n  WHERE\n    created_at_date >= \'2019-09-23\' AND created_at_date < \'2020-09-23\'\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
307,process:::pos_menus_distinct:::dedup_menus,s3://kcd-de-production/raw/etl/pos/pos_menus,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_menus.json', 'options': {'sql': 'SELECT\n  _event_id,\n  bill_key,\n  business_id,\n  CAST(count as integer) AS count,\n  index,\n  label_name,\n  menu_key,\n  name,\n  order_time,\n  service_name,\n  timestamp,\n  CAST(total_price as integer) AS total_price,\n  CAST(created_at_date as string) AS created_at_date,\n  created_at_hour,\n  CAST(price as integer) AS price,\n  date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM-dd"") AS order_date,\n  date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM"") AS order_month,\n  CAST(date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""HH"") as integer) AS order_hour\nFROM (\n  SELECT\n    *,\n    row_number() OVER (PARTITION BY menu_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_menus_raw\n  WHERE\n    created_at_date >= \'2019-09-23\' AND created_at_date < \'2020-09-23\'\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dedup_menus.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_menus', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}]"
308,s3://kcd-de-production/raw/etl/pos/pos_menus,process:::pos_menus:::pos_menus_tok_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_menus.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_menus', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_menus_raw\n    WHERE\n        created_at_date >= '2020-06-01'\n    AND business_id IS NOT NULL\n    AND name IS NOT NULL\n    AND name != ''""}, 'role': 'process', 'type': 'sql'}]"
309,s3://kcd-de-production/raw/etl/pos/pos_menus,process:::pos_menus:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_menus.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_menus', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_menus', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_menus_raw\n    WHERE\n        created_at_date >= '2020-06-01'\n    AND business_id IS NOT NULL\n    AND name IS NOT NULL\n    AND name != ''\n    AND name != 'null'""}, 'role': 'process', 'type': 'sql'}]"
310,s3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=paynote_user_stats,process:::add_join_field:::paynote_user_stats_es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=paynote_user_stats'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=paynote_user_stats', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'sql': ""  SELECT\n            named_struct(\n                'name', 'stat',\n                'parent', user_id\n            ) AS join_field,\n            *\n  FROM      paynote_user_stats\n  WHERE     user_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
311,process:::add_join_field:::paynote_user_stats_es_sink,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'sql': ""  SELECT\n            named_struct(\n                'name', 'stat',\n                'parent', user_id\n            ) AS join_field,\n            *\n  FROM      paynote_user_stats\n  WHERE     user_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
312,s3://kcd-de-staging/work/ryan/corona_weekly/37/weekly_txns,process:::weekly_txns:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/corona_weekly/37/weekly_txns'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/37/weekly_txns', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'week_of_year', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     week_of_year >= weekofyear(current_date()) - 3\nAND       year(transacted_at_week) in (2019, 2020)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     weekofyear(transacted_at_week) >= weekofyear(current_date()) - 2\nAND       year(transacted_at_week) in (2019, 2021)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}]"
313,process:::weekly_txns:::build_corona_weekly_stats_ratio,process:::address_weekly_transaction_type_ratio:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     week_of_year >= weekofyear(current_date()) - 3\nAND       year(transacted_at_week) in (2019, 2020)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     weekofyear(transacted_at_week) >= weekofyear(current_date()) - 2\nAND       year(transacted_at_week) in (2019, 2021)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT    *,\n          CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio,\n          CAST(a.2020_year_day_time AS double) / CAST(a.2019_year_day_time AS double) AS day_time_ratio,\n          CAST(a.2020_year_night_time AS double) / CAST(a.2019_year_night_time AS double) AS night_time_ratio,\n          CAST(a.2020_year_weekday AS double) / CAST(a.2019_year_weekday AS double) AS weekday_ratio,\n          CAST(a.2020_year_weekend AS double) / CAST(a.2019_year_weekend AS double) AS weekend_ratio,\n          CAST(a.2020_year_new AS double) / CAST(a.2019_year_new AS double) AS new_ratio,\n          CAST(a.2020_year_revisit AS double) / CAST(a.2019_year_revisit AS double) AS revisit_ratio\nFROM    (\n    SELECT  weekofyear(transacted_at_week) AS time,\n            lot_address_1_depth,\n            sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n            sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n\n            sum(IF (year(transacted_at_week) = 2020, day_time_amount_sum, 0)) as 2020_year_day_time,\n            sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as 2019_year_day_time,\n\n            sum(IF (year(transacted_at_week) = 2020, night_time_amount_sum, 0)) as 2020_year_night_time,\n            sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as 2019_year_night_time,\n\n            sum(IF (year(transacted_at_week) = 2020, weekend_amount_sum, 0)) as 2020_year_weekend,\n            sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as 2019_year_weekend,\n\n            sum(IF (year(transacted_at_week) = 2020, weekday_amount_sum, 0)) as 2020_year_weekday,\n            sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as 2019_year_weekday,\n\n            sum(IF (year(transacted_at_week) = 2020, new_amount_sum, 0)) as 2020_year_new,\n            sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as 2019_year_new,\n\n            sum(IF (year(transacted_at_week) = 2020, revisit_amount_sum, 0)) as 2020_year_revisit,\n            sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as 2019_year_revisit,\n\n            sum(IF (year(transacted_at_week) = 2020, tx_count, 0)) as 2020_year_tx_count,\n            sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as 2019_year_tx_count,\n\n            count(distinct business_id) as business_id_count\n    FROM    weekly_txns\n    GROUP BY 1, 2\n\n    UNION ALL\n\n    SELECT  weekofyear(transacted_at_week) AS time,\n            '전국' as lot_address_1_depth,\n            sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n            sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n\n            sum(IF (year(transacted_at_week) = 2020, day_time_amount_sum, 0)) as 2020_year_day_time,\n            sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as 2019_year_day_time,\n\n            sum(IF (year(transacted_at_week) = 2020, night_time_amount_sum, 0)) as 2020_year_night_time,\n            sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as 2019_year_night_time,\n\n            sum(IF (year(transacted_at_week) = 2020, weekend_amount_sum, 0)) as 2020_year_weekend,\n            sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as 2019_year_weekend,\n\n            sum(IF (year(transacted_at_week) = 2020, weekday_amount_sum, 0)) as 2020_year_weekday,\n            sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as 2019_year_weekday,\n\n            sum(IF (year(transacted_at_week) = 2020, new_amount_sum, 0)) as 2020_year_new,\n            sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as 2019_year_new,\n\n            sum(IF (year(transacted_at_week) = 2020, revisit_amount_sum, 0)) as 2020_year_revisit,\n            sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as 2019_year_revisit,\n\n            sum(IF (year(transacted_at_week) = 2020, tx_count, 0)) as 2020_year_tx_count,\n            sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as 2019_year_tx_count,\n            count(distinct business_id) as business_id_count\n    FROM    weekly_txns\n    GROUP BY 1, 2\n) a""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT    *,\n          CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio,\n          CAST(a.current_year_day_time AS double) / CAST(a.prev_year_day_time AS double) AS day_time_ratio,\n          CAST(a.current_year_night_time AS double) / CAST(a.prev_year_night_time AS double) AS night_time_ratio,\n          CAST(a.current_year_weekday AS double) / CAST(a.prev_year_weekday AS double) AS weekday_ratio,\n          CAST(a.current_year_weekend AS double) / CAST(a.prev_year_weekend AS double) AS weekend_ratio,\n          CAST(a.current_year_new AS double) / CAST(a.prev_year_new AS double) AS new_ratio,\n          CAST(a.current_year_revisit AS double) / CAST(a.prev_year_revisit AS double) AS revisit_ratio\nFROM    (\n    SELECT  weekofyear(transacted_at_week) % 52 AS time,\n            lot_address_1_depth,\n            sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n            sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n\n            sum(IF (year(transacted_at_week) = 2021, day_time_amount_sum, 0)) as current_year_day_time,\n            sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as prev_year_day_time,\n\n            sum(IF (year(transacted_at_week) = 2021, night_time_amount_sum, 0)) as current_year_night_time,\n            sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as prev_year_night_time,\n\n            sum(IF (year(transacted_at_week) = 2021, weekend_amount_sum, 0)) as current_year_weekend,\n            sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as prev_year_weekend,\n\n            sum(IF (year(transacted_at_week) = 2021, weekday_amount_sum, 0)) as current_year_weekday,\n            sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as prev_year_weekday,\n\n            sum(IF (year(transacted_at_week) = 2021, new_amount_sum, 0)) as current_year_new,\n            sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as prev_year_new,\n\n            sum(IF (year(transacted_at_week) = 2021, revisit_amount_sum, 0)) as current_year_revisit,\n            sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as prev_year_revisit,\n\n            sum(IF (year(transacted_at_week) = 2021, tx_count, 0)) as current_year_tx_count,\n            sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as prev_year_tx_count,\n\n            count(distinct business_id) as business_id_count\n    FROM    weekly_txns\n    GROUP BY 1, 2\n\n    UNION ALL\n\n    SELECT  weekofyear(transacted_at_week) % 52 AS time,\n            '전국' as lot_address_1_depth,\n            sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n            sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n\n            sum(IF (year(transacted_at_week) = 2021, day_time_amount_sum, 0)) as current_year_day_time,\n            sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as prev_year_day_time,\n\n            sum(IF (year(transacted_at_week) = 2021, night_time_amount_sum, 0)) as current_year_night_time,\n            sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as prev_year_night_time,\n\n            sum(IF (year(transacted_at_week) = 2021, weekend_amount_sum, 0)) as current_year_weekend,\n            sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as prev_year_weekend,\n\n            sum(IF (year(transacted_at_week) = 2021, weekday_amount_sum, 0)) as current_year_weekday,\n            sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as prev_year_weekday,\n\n            sum(IF (year(transacted_at_week) = 2021, new_amount_sum, 0)) as current_year_new,\n            sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as prev_year_new,\n\n            sum(IF (year(transacted_at_week) = 2021, revisit_amount_sum, 0)) as current_year_revisit,\n            sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as prev_year_revisit,\n\n            sum(IF (year(transacted_at_week) = 2021, tx_count, 0)) as current_year_tx_count,\n            sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as prev_year_tx_count,\n            count(distinct business_id) as business_id_count\n    FROM    weekly_txns\n    GROUP BY 1, 2\n) a""}, 'role': 'process', 'type': 'sql'}]"
314,process:::weekly_txns:::build_corona_weekly_stats_ratio,process:::classification_weekly_transaction_type_ratio:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     week_of_year >= weekofyear(current_date()) - 3\nAND       year(transacted_at_week) in (2019, 2020)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     weekofyear(transacted_at_week) >= weekofyear(current_date()) - 2\nAND       year(transacted_at_week) in (2019, 2021)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio,\n        CAST(a.2020_year_day_time AS double) / CAST(a.2019_year_day_time AS double) AS day_time_ratio,\n        CAST(a.2020_year_night_time AS double) / CAST(a.2019_year_night_time AS double) AS night_time_ratio,\n        CAST(a.2020_year_weekday AS double) / CAST(a.2019_year_weekday AS double) AS weekday_ratio,\n        CAST(a.2020_year_weekend AS double) / CAST(a.2019_year_weekend AS double) AS weekend_ratio,\n        CAST(a.2020_year_new AS double) / CAST(a.2019_year_new AS double) AS new_ratio,\n        CAST(a.2020_year_revisit AS double) / CAST(a.2019_year_revisit AS double) AS revisit_ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              sum(IF (year(transacted_at_week) = 2020, tx_count, 0)) as 2020_year_tx_count,\n              sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as 2019_year_tx_count,\n              sum(IF (year(transacted_at_week) = 2020, day_time_amount_sum, 0)) as 2020_year_day_time,\n              sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as 2019_year_day_time,\n\n              sum(IF (year(transacted_at_week) = 2020, night_time_amount_sum, 0)) as 2020_year_night_time,\n              sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as 2019_year_night_time,\n\n              sum(IF (year(transacted_at_week) = 2020, weekend_amount_sum, 0)) as 2020_year_weekend,\n              sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as 2019_year_weekend,\n\n              sum(IF (year(transacted_at_week) = 2020, weekday_amount_sum, 0)) as 2020_year_weekday,\n              sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as 2019_year_weekday,\n\n              sum(IF (year(transacted_at_week) = 2020, new_amount_sum, 0)) as 2020_year_new,\n              sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as 2019_year_new,\n\n              sum(IF (year(transacted_at_week) = 2020, revisit_amount_sum, 0)) as 2020_year_revisit,\n              sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as 2019_year_revisit,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a\nWHERE kcd_classification_1_depth != 'none'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio,\n        CAST(a.current_year_day_time AS double) / CAST(a.prev_year_day_time AS double) AS day_time_ratio,\n        CAST(a.current_year_night_time AS double) / CAST(a.prev_year_night_time AS double) AS night_time_ratio,\n        CAST(a.current_year_weekday AS double) / CAST(a.prev_year_weekday AS double) AS weekday_ratio,\n        CAST(a.current_year_weekend AS double) / CAST(a.prev_year_weekend AS double) AS weekend_ratio,\n        CAST(a.current_year_new AS double) / CAST(a.prev_year_new AS double) AS new_ratio,\n        CAST(a.current_year_revisit AS double) / CAST(a.prev_year_revisit AS double) AS revisit_ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              sum(IF (year(transacted_at_week) = 2021, tx_count, 0)) as current_year_tx_count,\n              sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as prev_year_tx_count,\n              sum(IF (year(transacted_at_week) = 2021, day_time_amount_sum, 0)) as current_year_day_time,\n              sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as prev_year_day_time,\n\n              sum(IF (year(transacted_at_week) = 2021, night_time_amount_sum, 0)) as current_year_night_time,\n              sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as prev_year_night_time,\n\n              sum(IF (year(transacted_at_week) = 2021, weekend_amount_sum, 0)) as current_year_weekend,\n              sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as prev_year_weekend,\n\n              sum(IF (year(transacted_at_week) = 2021, weekday_amount_sum, 0)) as current_year_weekday,\n              sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as prev_year_weekday,\n\n              sum(IF (year(transacted_at_week) = 2021, new_amount_sum, 0)) as current_year_new,\n              sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as prev_year_new,\n\n              sum(IF (year(transacted_at_week) = 2021, revisit_amount_sum, 0)) as current_year_revisit,\n              sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as prev_year_revisit,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a\nWHERE kcd_classification_1_depth != 'none'""}, 'role': 'process', 'type': 'sql'}]"
315,process:::weekly_txns:::build_corona_weekly_stats_ratio,process:::address_depth_1_weekly_ratio:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     week_of_year >= weekofyear(current_date()) - 3\nAND       year(transacted_at_week) in (2019, 2020)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     weekofyear(transacted_at_week) >= weekofyear(current_date()) - 2\nAND       year(transacted_at_week) in (2019, 2021)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_1_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '전국' as lot_address_1_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              lot_address_1_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              '전국' as lot_address_1_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a""}, 'role': 'process', 'type': 'sql'}]"
316,process:::weekly_txns:::build_corona_weekly_stats_ratio,process:::address_depth_2_weekly_ratio:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     week_of_year >= weekofyear(current_date()) - 3\nAND       year(transacted_at_week) in (2019, 2020)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     weekofyear(transacted_at_week) >= weekofyear(current_date()) - 2\nAND       year(transacted_at_week) in (2019, 2021)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_1_depth,\n              lot_address_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2, 3\n) a\nWHERE lot_address_1_depth != '세종특별자치시' AND business_id_count >= 30""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              lot_address_1_depth,\n              lot_address_2_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2, 3\n) a\nWHERE lot_address_1_depth != '세종특별자치시' AND business_id_count >= 30""}, 'role': 'process', 'type': 'sql'}]"
317,process:::weekly_txns:::build_corona_weekly_stats_ratio,process:::classification_depth_1_weekly_ratio:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     week_of_year >= weekofyear(current_date()) - 3\nAND       year(transacted_at_week) in (2019, 2020)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     weekofyear(transacted_at_week) >= weekofyear(current_date()) - 2\nAND       year(transacted_at_week) in (2019, 2021)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a\nWHERE kcd_classification_1_depth != 'none'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a\nWHERE kcd_classification_1_depth != 'none'""}, 'role': 'process', 'type': 'sql'}]"
318,process:::weekly_txns:::build_corona_weekly_stats_ratio,process:::classification_depth_2_weekly_ratio:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     week_of_year >= weekofyear(current_date()) - 3\nAND       year(transacted_at_week) in (2019, 2020)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     weekofyear(transacted_at_week) >= weekofyear(current_date()) - 2\nAND       year(transacted_at_week) in (2019, 2021)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              coalesce(kcd_classification_2_depth, 'none') as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2, 3\n) a\nWHERE kcd_classification_1_depth != 'none'\nAND   business_id_count >= 30""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              coalesce(kcd_classification_2_depth, 'none') as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2, 3\n) a\nWHERE kcd_classification_1_depth != 'none'\nAND   business_id_count >= 30""}, 'role': 'process', 'type': 'sql'}]"
319,process:::address_weekly_transaction_type_ratio:::build_corona_weekly_stats_ratio,process:::address_weekly_transaction_type_ratio_pivot:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT    *,\n          CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio,\n          CAST(a.2020_year_day_time AS double) / CAST(a.2019_year_day_time AS double) AS day_time_ratio,\n          CAST(a.2020_year_night_time AS double) / CAST(a.2019_year_night_time AS double) AS night_time_ratio,\n          CAST(a.2020_year_weekday AS double) / CAST(a.2019_year_weekday AS double) AS weekday_ratio,\n          CAST(a.2020_year_weekend AS double) / CAST(a.2019_year_weekend AS double) AS weekend_ratio,\n          CAST(a.2020_year_new AS double) / CAST(a.2019_year_new AS double) AS new_ratio,\n          CAST(a.2020_year_revisit AS double) / CAST(a.2019_year_revisit AS double) AS revisit_ratio\nFROM    (\n    SELECT  weekofyear(transacted_at_week) AS time,\n            lot_address_1_depth,\n            sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n            sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n\n            sum(IF (year(transacted_at_week) = 2020, day_time_amount_sum, 0)) as 2020_year_day_time,\n            sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as 2019_year_day_time,\n\n            sum(IF (year(transacted_at_week) = 2020, night_time_amount_sum, 0)) as 2020_year_night_time,\n            sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as 2019_year_night_time,\n\n            sum(IF (year(transacted_at_week) = 2020, weekend_amount_sum, 0)) as 2020_year_weekend,\n            sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as 2019_year_weekend,\n\n            sum(IF (year(transacted_at_week) = 2020, weekday_amount_sum, 0)) as 2020_year_weekday,\n            sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as 2019_year_weekday,\n\n            sum(IF (year(transacted_at_week) = 2020, new_amount_sum, 0)) as 2020_year_new,\n            sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as 2019_year_new,\n\n            sum(IF (year(transacted_at_week) = 2020, revisit_amount_sum, 0)) as 2020_year_revisit,\n            sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as 2019_year_revisit,\n\n            sum(IF (year(transacted_at_week) = 2020, tx_count, 0)) as 2020_year_tx_count,\n            sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as 2019_year_tx_count,\n\n            count(distinct business_id) as business_id_count\n    FROM    weekly_txns\n    GROUP BY 1, 2\n\n    UNION ALL\n\n    SELECT  weekofyear(transacted_at_week) AS time,\n            '전국' as lot_address_1_depth,\n            sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n            sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n\n            sum(IF (year(transacted_at_week) = 2020, day_time_amount_sum, 0)) as 2020_year_day_time,\n            sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as 2019_year_day_time,\n\n            sum(IF (year(transacted_at_week) = 2020, night_time_amount_sum, 0)) as 2020_year_night_time,\n            sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as 2019_year_night_time,\n\n            sum(IF (year(transacted_at_week) = 2020, weekend_amount_sum, 0)) as 2020_year_weekend,\n            sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as 2019_year_weekend,\n\n            sum(IF (year(transacted_at_week) = 2020, weekday_amount_sum, 0)) as 2020_year_weekday,\n            sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as 2019_year_weekday,\n\n            sum(IF (year(transacted_at_week) = 2020, new_amount_sum, 0)) as 2020_year_new,\n            sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as 2019_year_new,\n\n            sum(IF (year(transacted_at_week) = 2020, revisit_amount_sum, 0)) as 2020_year_revisit,\n            sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as 2019_year_revisit,\n\n            sum(IF (year(transacted_at_week) = 2020, tx_count, 0)) as 2020_year_tx_count,\n            sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as 2019_year_tx_count,\n            count(distinct business_id) as business_id_count\n    FROM    weekly_txns\n    GROUP BY 1, 2\n) a""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT    *,\n          CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio,\n          CAST(a.current_year_day_time AS double) / CAST(a.prev_year_day_time AS double) AS day_time_ratio,\n          CAST(a.current_year_night_time AS double) / CAST(a.prev_year_night_time AS double) AS night_time_ratio,\n          CAST(a.current_year_weekday AS double) / CAST(a.prev_year_weekday AS double) AS weekday_ratio,\n          CAST(a.current_year_weekend AS double) / CAST(a.prev_year_weekend AS double) AS weekend_ratio,\n          CAST(a.current_year_new AS double) / CAST(a.prev_year_new AS double) AS new_ratio,\n          CAST(a.current_year_revisit AS double) / CAST(a.prev_year_revisit AS double) AS revisit_ratio\nFROM    (\n    SELECT  weekofyear(transacted_at_week) % 52 AS time,\n            lot_address_1_depth,\n            sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n            sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n\n            sum(IF (year(transacted_at_week) = 2021, day_time_amount_sum, 0)) as current_year_day_time,\n            sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as prev_year_day_time,\n\n            sum(IF (year(transacted_at_week) = 2021, night_time_amount_sum, 0)) as current_year_night_time,\n            sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as prev_year_night_time,\n\n            sum(IF (year(transacted_at_week) = 2021, weekend_amount_sum, 0)) as current_year_weekend,\n            sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as prev_year_weekend,\n\n            sum(IF (year(transacted_at_week) = 2021, weekday_amount_sum, 0)) as current_year_weekday,\n            sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as prev_year_weekday,\n\n            sum(IF (year(transacted_at_week) = 2021, new_amount_sum, 0)) as current_year_new,\n            sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as prev_year_new,\n\n            sum(IF (year(transacted_at_week) = 2021, revisit_amount_sum, 0)) as current_year_revisit,\n            sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as prev_year_revisit,\n\n            sum(IF (year(transacted_at_week) = 2021, tx_count, 0)) as current_year_tx_count,\n            sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as prev_year_tx_count,\n\n            count(distinct business_id) as business_id_count\n    FROM    weekly_txns\n    GROUP BY 1, 2\n\n    UNION ALL\n\n    SELECT  weekofyear(transacted_at_week) % 52 AS time,\n            '전국' as lot_address_1_depth,\n            sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n            sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n\n            sum(IF (year(transacted_at_week) = 2021, day_time_amount_sum, 0)) as current_year_day_time,\n            sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as prev_year_day_time,\n\n            sum(IF (year(transacted_at_week) = 2021, night_time_amount_sum, 0)) as current_year_night_time,\n            sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as prev_year_night_time,\n\n            sum(IF (year(transacted_at_week) = 2021, weekend_amount_sum, 0)) as current_year_weekend,\n            sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as prev_year_weekend,\n\n            sum(IF (year(transacted_at_week) = 2021, weekday_amount_sum, 0)) as current_year_weekday,\n            sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as prev_year_weekday,\n\n            sum(IF (year(transacted_at_week) = 2021, new_amount_sum, 0)) as current_year_new,\n            sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as prev_year_new,\n\n            sum(IF (year(transacted_at_week) = 2021, revisit_amount_sum, 0)) as current_year_revisit,\n            sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as prev_year_revisit,\n\n            sum(IF (year(transacted_at_week) = 2021, tx_count, 0)) as current_year_tx_count,\n            sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as prev_year_tx_count,\n            count(distinct business_id) as business_id_count\n    FROM    weekly_txns\n    GROUP BY 1, 2\n) a""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]"
320,process:::address_weekly_transaction_type_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/37/address_weekly_transaction_type_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/37/address_weekly_transaction_type_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
321,process:::address_weekly_transaction_type_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/2021/5/address_weekly_transaction_type_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/2021/5/address_weekly_transaction_type_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
322,process:::classification_weekly_transaction_type_ratio:::build_corona_weekly_stats_ratio,process:::classification_weekly_transaction_type_ratio_pivot:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio,\n        CAST(a.2020_year_day_time AS double) / CAST(a.2019_year_day_time AS double) AS day_time_ratio,\n        CAST(a.2020_year_night_time AS double) / CAST(a.2019_year_night_time AS double) AS night_time_ratio,\n        CAST(a.2020_year_weekday AS double) / CAST(a.2019_year_weekday AS double) AS weekday_ratio,\n        CAST(a.2020_year_weekend AS double) / CAST(a.2019_year_weekend AS double) AS weekend_ratio,\n        CAST(a.2020_year_new AS double) / CAST(a.2019_year_new AS double) AS new_ratio,\n        CAST(a.2020_year_revisit AS double) / CAST(a.2019_year_revisit AS double) AS revisit_ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              sum(IF (year(transacted_at_week) = 2020, tx_count, 0)) as 2020_year_tx_count,\n              sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as 2019_year_tx_count,\n              sum(IF (year(transacted_at_week) = 2020, day_time_amount_sum, 0)) as 2020_year_day_time,\n              sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as 2019_year_day_time,\n\n              sum(IF (year(transacted_at_week) = 2020, night_time_amount_sum, 0)) as 2020_year_night_time,\n              sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as 2019_year_night_time,\n\n              sum(IF (year(transacted_at_week) = 2020, weekend_amount_sum, 0)) as 2020_year_weekend,\n              sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as 2019_year_weekend,\n\n              sum(IF (year(transacted_at_week) = 2020, weekday_amount_sum, 0)) as 2020_year_weekday,\n              sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as 2019_year_weekday,\n\n              sum(IF (year(transacted_at_week) = 2020, new_amount_sum, 0)) as 2020_year_new,\n              sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as 2019_year_new,\n\n              sum(IF (year(transacted_at_week) = 2020, revisit_amount_sum, 0)) as 2020_year_revisit,\n              sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as 2019_year_revisit,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a\nWHERE kcd_classification_1_depth != 'none'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio,\n        CAST(a.current_year_day_time AS double) / CAST(a.prev_year_day_time AS double) AS day_time_ratio,\n        CAST(a.current_year_night_time AS double) / CAST(a.prev_year_night_time AS double) AS night_time_ratio,\n        CAST(a.current_year_weekday AS double) / CAST(a.prev_year_weekday AS double) AS weekday_ratio,\n        CAST(a.current_year_weekend AS double) / CAST(a.prev_year_weekend AS double) AS weekend_ratio,\n        CAST(a.current_year_new AS double) / CAST(a.prev_year_new AS double) AS new_ratio,\n        CAST(a.current_year_revisit AS double) / CAST(a.prev_year_revisit AS double) AS revisit_ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              sum(IF (year(transacted_at_week) = 2021, tx_count, 0)) as current_year_tx_count,\n              sum(IF (year(transacted_at_week) = 2019, tx_count, 0)) as prev_year_tx_count,\n              sum(IF (year(transacted_at_week) = 2021, day_time_amount_sum, 0)) as current_year_day_time,\n              sum(IF (year(transacted_at_week) = 2019, day_time_amount_sum, 0)) as prev_year_day_time,\n\n              sum(IF (year(transacted_at_week) = 2021, night_time_amount_sum, 0)) as current_year_night_time,\n              sum(IF (year(transacted_at_week) = 2019, night_time_amount_sum, 0)) as prev_year_night_time,\n\n              sum(IF (year(transacted_at_week) = 2021, weekend_amount_sum, 0)) as current_year_weekend,\n              sum(IF (year(transacted_at_week) = 2019, weekend_amount_sum, 0)) as prev_year_weekend,\n\n              sum(IF (year(transacted_at_week) = 2021, weekday_amount_sum, 0)) as current_year_weekday,\n              sum(IF (year(transacted_at_week) = 2019, weekday_amount_sum, 0)) as prev_year_weekday,\n\n              sum(IF (year(transacted_at_week) = 2021, new_amount_sum, 0)) as current_year_new,\n              sum(IF (year(transacted_at_week) = 2019, new_amount_sum, 0)) as prev_year_new,\n\n              sum(IF (year(transacted_at_week) = 2021, revisit_amount_sum, 0)) as current_year_revisit,\n              sum(IF (year(transacted_at_week) = 2019, revisit_amount_sum, 0)) as prev_year_revisit,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a\nWHERE kcd_classification_1_depth != 'none'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]"
323,process:::classification_weekly_transaction_type_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/37/classification_weekly_transaction_type_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/37/classification_weekly_transaction_type_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
324,process:::classification_weekly_transaction_type_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/2021/5/classification_weekly_transaction_type_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(day_time_ratio) as day_time_ratio,first(night_time_ratio) as night_time_ratio,first(weekday_ratio) as weekday_ratio,first(weekend_ratio) as weekend_ratio,first(new_ratio) as new_ratio,first(revisit_ratio) as revisit_ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/2021/5/classification_weekly_transaction_type_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
325,process:::address_depth_1_weekly_ratio:::build_corona_weekly_stats_ratio,process:::address_depth_1_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_1_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '전국' as lot_address_1_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              lot_address_1_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              '전국' as lot_address_1_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]"
326,process:::address_depth_1_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/37/address_depth_1_weekly_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/37/address_depth_1_weekly_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
327,process:::address_depth_1_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/2021/5/address_depth_1_weekly_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/2021/5/address_depth_1_weekly_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
328,process:::address_depth_2_weekly_ratio:::build_corona_weekly_stats_ratio,process:::address_depth_2_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_1_depth,\n              lot_address_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2, 3\n) a\nWHERE lot_address_1_depth != '세종특별자치시' AND business_id_count >= 30""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              lot_address_1_depth,\n              lot_address_2_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2, 3\n) a\nWHERE lot_address_1_depth != '세종특별자치시' AND business_id_count >= 30""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth,lot_address_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth,lot_address_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]"
329,process:::address_depth_2_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/37/address_depth_2_weekly_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth,lot_address_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth,lot_address_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/37/address_depth_2_weekly_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
330,process:::address_depth_2_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/2021/5/address_depth_2_weekly_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth,lot_address_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_1_depth,lot_address_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/2021/5/address_depth_2_weekly_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
331,process:::classification_depth_1_weekly_ratio:::build_corona_weekly_stats_ratio,process:::classification_depth_1_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a\nWHERE kcd_classification_1_depth != 'none'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2\n) a\nWHERE kcd_classification_1_depth != 'none'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]"
332,process:::classification_depth_1_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/37/classification_depth_1_weekly_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/37/classification_depth_1_weekly_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
333,process:::classification_depth_1_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/2021/5/classification_depth_1_weekly_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/2021/5/classification_depth_1_weekly_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
334,process:::classification_depth_2_weekly_ratio:::build_corona_weekly_stats_ratio,process:::classification_depth_2_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              coalesce(kcd_classification_2_depth, 'none') as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2, 3\n) a\nWHERE kcd_classification_1_depth != 'none'\nAND   business_id_count >= 30""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.current_year_amount AS double) / CAST(a.prev_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) % 52 AS time,\n              coalesce(kcd_classification_1_depth, 'none') as kcd_classification_1_depth,\n              coalesce(kcd_classification_2_depth, 'none') as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2021, amount_sum, 0)) as current_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as prev_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    weekly_txns\n      GROUP BY 1, 2, 3\n) a\nWHERE kcd_classification_1_depth != 'none'\nAND   business_id_count >= 30""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth,kcd_classification_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth,kcd_classification_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]"
335,process:::classification_depth_2_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/37/classification_depth_2_weekly_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth,kcd_classification_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth,kcd_classification_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/37/classification_depth_2_weekly_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
336,process:::classification_depth_2_weekly_ratio_pivot:::build_corona_weekly_stats_ratio,s3://kcd-de-staging/work/ryan/corona_weekly/2021/5/classification_depth_2_weekly_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth,kcd_classification_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'kcd_classification_1_depth,kcd_classification_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/2021/5/classification_depth_2_weekly_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
337,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info,process:::shinhancard_business_classification:::merchant_classification_card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_card.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT\n                  nvl(snowdon.registration_number, goose.registration_number) AS registration_number,\n                  nvl(snowdon.merchant_number, goose.merchant_number) AS merchant_number,\n                  'shinhan' AS card_issuer,\n                  nvl(snowdon.classification_code, goose.classification_code) AS classification_code,\n                  nvl(snowdon.classification_name, goose.classification_name) AS classification_name\n        FROM (\n                SELECT\n                          card_classification.registration_number,\n                          card_classification.card_issuer,\n                          card_classification.merchant_number,\n                          card_classification.classification_code,\n                          shinhancard_classification.classification_name\n                FROM  (\n                          SELECT  *\n                          FROM    merchant_info\n                          WHERE   card_issuer = 'shinhan'\n                ) card_classification\n                LEFT OUTER JOIN   shinhancard_classification\n                ON    card_classification.classification_code = shinhancard_classification.classification_code\n        ) goose\n        FULL OUTER JOIN (\n          SELECT  *\n          FROM (\n                SELECT    registration_number, merchant_number,\n                          classification_code, classification_name,\n                          row_number() OVER (PARTITION BY registration_number, merchant_number ORDER BY updated_at DESC) AS rank\n                FROM      shinhancard_businesses\n          )\n          WHERE rank = 1\n        ) snowdon\n        ON    goose.registration_number = snowdon.registration_number\n        AND   goose.merchant_number = snowdon.merchant_number\n)\nWHERE     classification_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
338,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info,process:::bccard_business_classification:::merchant_classification_card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_card.json', 'options': {'sql': ""  SELECT  *\n  FROM (\n          SELECT  *\n          FROM (\n                  SELECT  registration_number, card_issuer, merchant_number,\n                          merchant_code_name AS classification_name\n                  FROM    merchant_info\n                  WHERE   card_issuer = 'bc'\n          ) card_classification\n          LEFT OUTER JOIN   bccard_classification\n          ON    card_classification.classification_name = bccard_classification.depth_3_name\n )\n WHERE    depth_1_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
339,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info,process:::hyundaicard_business_classification:::merchant_classification_card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_card.json', 'options': {'sql': ""SELECT\n        card_classification.registration_number,\n        card_classification.card_issuer,\n        card_classification.merchant_number,\n        card_classification.classification_name,\n        hyundaicard_classification.classification_code\nFROM (\n    SELECT  registration_number, card_issuer, merchant_number,\n            classification_code, merchant_code_name AS classification_name\n    FROM    merchant_info\n    WHERE   card_issuer = 'hyundai'\n) AS card_classification\nLEFT OUTER JOIN hyundaicard_classification\nON card_classification.classification_name = hyundaicard_classification.classification""}, 'role': 'process', 'type': 'sql'}]"
340,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info,process:::merchant_address:::merchant_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_location_sources.json', 'options': {'sql': ""SELECT\n        registration_number, card_issuer, merchant_number,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        CAST(null as STRING) AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n        SELECT  registration_number, card_issuer, merchant_number,\n                get_addr_key_sigungu(merchant_address) AS addr_key,\n                merchant_address AS address\n        FROM  merchant_info\n        WHERE merchant_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'sigungu'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
341,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_classification.tsv,process:::shinhancard_business_classification:::merchant_classification_card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_classification.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_classification.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_card.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT\n                  nvl(snowdon.registration_number, goose.registration_number) AS registration_number,\n                  nvl(snowdon.merchant_number, goose.merchant_number) AS merchant_number,\n                  'shinhan' AS card_issuer,\n                  nvl(snowdon.classification_code, goose.classification_code) AS classification_code,\n                  nvl(snowdon.classification_name, goose.classification_name) AS classification_name\n        FROM (\n                SELECT\n                          card_classification.registration_number,\n                          card_classification.card_issuer,\n                          card_classification.merchant_number,\n                          card_classification.classification_code,\n                          shinhancard_classification.classification_name\n                FROM  (\n                          SELECT  *\n                          FROM    merchant_info\n                          WHERE   card_issuer = 'shinhan'\n                ) card_classification\n                LEFT OUTER JOIN   shinhancard_classification\n                ON    card_classification.classification_code = shinhancard_classification.classification_code\n        ) goose\n        FULL OUTER JOIN (\n          SELECT  *\n          FROM (\n                SELECT    registration_number, merchant_number,\n                          classification_code, classification_name,\n                          row_number() OVER (PARTITION BY registration_number, merchant_number ORDER BY updated_at DESC) AS rank\n                FROM      shinhancard_businesses\n          )\n          WHERE rank = 1\n        ) snowdon\n        ON    goose.registration_number = snowdon.registration_number\n        AND   goose.merchant_number = snowdon.merchant_number\n)\nWHERE     classification_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
342,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_classification.tsv,process:::shinhancard_business_classification:::card_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_classification.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_classification.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'card_classification.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT\n                  nvl(snowdon.registration_number, goose.registration_number) AS registration_number,\n                  'shinhan' AS card_issuer,\n                  nvl(snowdon.classification_code, goose.classification_code) AS classification_code,\n                  nvl(snowdon.classification_name, goose.classification_name) AS classification_name\n        FROM (\n                SELECT\n                          card_classification.registration_number,\n                          card_classification.card_issuer,\n                          card_classification.classification_code,\n                          shinhancard_classification.classification_name\n                FROM  (\n                          SELECT  *\n                          FROM    card_payments_classification\n                          WHERE   card_issuer = 'shinhan'\n                ) card_classification\n                LEFT OUTER JOIN   shinhancard_classification\n                ON    card_classification.classification_code = shinhancard_classification.classification_code\n        ) goose\n        FULL OUTER JOIN (\n          SELECT  *\n          FROM (\n                SELECT    registration_number, classification_code, classification_name,\n                          row_number() OVER (PARTITION BY registration_number ORDER BY updated_at DESC) AS rank\n                FROM      shinhancard_businesses\n          )\n          WHERE rank = 1\n        ) snowdon\n        ON    goose.registration_number = snowdon.registration_number\n)\nWHERE  classification_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
343,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_classification.tsv,process:::bccard_business_classification:::merchant_classification_card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_classification.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_classification.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_card.json', 'options': {'sql': ""  SELECT  *\n  FROM (\n          SELECT  *\n          FROM (\n                  SELECT  registration_number, card_issuer, merchant_number,\n                          merchant_code_name AS classification_name\n                  FROM    merchant_info\n                  WHERE   card_issuer = 'bc'\n          ) card_classification\n          LEFT OUTER JOIN   bccard_classification\n          ON    card_classification.classification_name = bccard_classification.depth_3_name\n )\n WHERE    depth_1_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
344,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_classification.tsv,process:::bccard_business_classification:::card_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_classification.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_classification.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'card_classification.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    *\n        FROM  (\n                  SELECT  *\n                  FROM    card_payments_classification\n                  WHERE   card_issuer = 'bc'\n        ) card_classification\n        LEFT OUTER JOIN bccard_classification\n        ON card_classification.classification_name = bccard_classification.depth_3_name\n)\nWHERE depth_1_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
345,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_classification.tsv,process:::hyundaicard_business_classification:::merchant_classification_card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_classification.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_classification.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_card.json', 'options': {'sql': ""SELECT\n        card_classification.registration_number,\n        card_classification.card_issuer,\n        card_classification.merchant_number,\n        card_classification.classification_name,\n        hyundaicard_classification.classification_code\nFROM (\n    SELECT  registration_number, card_issuer, merchant_number,\n            classification_code, merchant_code_name AS classification_name\n    FROM    merchant_info\n    WHERE   card_issuer = 'hyundai'\n) AS card_classification\nLEFT OUTER JOIN hyundaicard_classification\nON card_classification.classification_name = hyundaicard_classification.classification""}, 'role': 'process', 'type': 'sql'}]"
346,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_classification.tsv,process:::hyundaicard_business_classification:::card_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_classification.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_classification.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'card_classification.json', 'options': {'sql': ""SELECT    card_classification.registration_number,\n          card_classification.card_issuer,\n          card_classification.classification_name,\n          hyundaicard_classification.classification_code\nFROM  (\n          SELECT  *\n          FROM    card_payments_classification\n          WHERE   card_issuer = 'hyundai'\n) card_classification\nLEFT OUTER JOIN hyundaicard_classification\nON card_classification.classification_name = hyundaicard_classification.classification""}, 'role': 'process', 'type': 'sql'}]"
347,process:::shinhancard_business_classification:::merchant_classification_card,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT\n                  nvl(snowdon.registration_number, goose.registration_number) AS registration_number,\n                  nvl(snowdon.merchant_number, goose.merchant_number) AS merchant_number,\n                  'shinhan' AS card_issuer,\n                  nvl(snowdon.classification_code, goose.classification_code) AS classification_code,\n                  nvl(snowdon.classification_name, goose.classification_name) AS classification_name\n        FROM (\n                SELECT\n                          card_classification.registration_number,\n                          card_classification.card_issuer,\n                          card_classification.merchant_number,\n                          card_classification.classification_code,\n                          shinhancard_classification.classification_name\n                FROM  (\n                          SELECT  *\n                          FROM    merchant_info\n                          WHERE   card_issuer = 'shinhan'\n                ) card_classification\n                LEFT OUTER JOIN   shinhancard_classification\n                ON    card_classification.classification_code = shinhancard_classification.classification_code\n        ) goose\n        FULL OUTER JOIN (\n          SELECT  *\n          FROM (\n                SELECT    registration_number, merchant_number,\n                          classification_code, classification_name,\n                          row_number() OVER (PARTITION BY registration_number, merchant_number ORDER BY updated_at DESC) AS rank\n                FROM      shinhancard_businesses\n          )\n          WHERE rank = 1\n        ) snowdon\n        ON    goose.registration_number = snowdon.registration_number\n        AND   goose.merchant_number = snowdon.merchant_number\n)\nWHERE     classification_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard'}, 'role': 'source', 'type': 'file'}, {'filename': 'payment_code_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard'}, 'role': 'source', 'type': 'file'}]"
348,process:::bccard_business_classification:::merchant_classification_card,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'sql': ""  SELECT  *\n  FROM (\n          SELECT  *\n          FROM (\n                  SELECT  registration_number, card_issuer, merchant_number,\n                          merchant_code_name AS classification_name\n                  FROM    merchant_info\n                  WHERE   card_issuer = 'bc'\n          ) card_classification\n          LEFT OUTER JOIN   bccard_classification\n          ON    card_classification.classification_name = bccard_classification.depth_3_name\n )\n WHERE    depth_1_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new'}, 'role': 'source', 'type': 'file'}, {'filename': 'payment_code_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new'}, 'role': 'source', 'type': 'file'}]"
349,process:::hyundaicard_business_classification:::merchant_classification_card,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'sql': ""SELECT\n        card_classification.registration_number,\n        card_classification.card_issuer,\n        card_classification.merchant_number,\n        card_classification.classification_name,\n        hyundaicard_classification.classification_code\nFROM (\n    SELECT  registration_number, card_issuer, merchant_number,\n            classification_code, merchant_code_name AS classification_name\n    FROM    merchant_info\n    WHERE   card_issuer = 'hyundai'\n) AS card_classification\nLEFT OUTER JOIN hyundaicard_classification\nON card_classification.classification_name = hyundaicard_classification.classification""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard'}, 'role': 'source', 'type': 'file'}, {'filename': 'payment_code_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard'}, 'role': 'source', 'type': 'file'}]"
350,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard,process:::shinhancard:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard'}, 'role': 'source', 'type': 'file'}, {'filename': 'payment_code_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number,\n          mapping.kcd_depth_1_code,\n          mapping.kcd_depth_2_code,\n          mapping.kcd_depth_3_code\nFROM shinhancard_classification\nJOIN kcd_shinhancard_mapping AS mapping\nON shinhancard_classification.classification_code = mapping.classification_code\nWHERE kcd_depth_1_code is not null'}, 'role': 'process', 'type': 'sql'}]"
351,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard,process:::shinhancard:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard'}, 'role': 'source', 'type': 'file'}, {'filename': 'payment_code_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=shinhancard'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'payment_code_classification.json', 'options': {'sql': '  SELECT\n          registration_number,\n          card_issuer,\n          merchant_number,\n          payment_code\n  FROM    shinhancard_business_classification AS b\n  JOIN    shinhancard_to_payment_code_mapping AS m\n  ON      b.classification_code = m.classification_code'}, 'role': 'process', 'type': 'sql'}]"
352,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new,process:::bccard:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new'}, 'role': 'source', 'type': 'file'}, {'filename': 'payment_code_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number,\n          mapping.kcd_depth_1_code,\n          mapping.kcd_depth_2_code,\n          mapping.kcd_depth_3_code\nFROM  bccard_classification\nJOIN  kcd_bccard_mapping AS mapping\nON bccard_classification.depth_3_code = mapping.classification_code\nWHERE kcd_depth_1_code is not null'}, 'role': 'process', 'type': 'sql'}]"
353,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new,process:::bccard:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new'}, 'role': 'source', 'type': 'file'}, {'filename': 'payment_code_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=bccard_new'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'payment_code_classification.json', 'options': {'sql': '  SELECT\n          registration_number,\n          card_issuer,\n          merchant_number,\n          payment_code\n  FROM    bccard_business_classification AS b\n  JOIN    bccard_to_payment_code_mapping AS m\n  ON      b.depth_3_code = m.classification_code'}, 'role': 'process', 'type': 'sql'}]"
354,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard,process:::hyundaicard:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard'}, 'role': 'source', 'type': 'file'}, {'filename': 'payment_code_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number,\n          mapping.kcd_depth_1_code,\n          mapping.kcd_depth_2_code,\n          mapping.kcd_depth_3_code\nFROM  hyundaicard_classification\nJOIN  hyundaicard_kcd_mapping AS mapping\nON    hyundaicard_classification.classification_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]"
355,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard,process:::hyundaicard:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard'}, 'role': 'source', 'type': 'file'}, {'filename': 'payment_code_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=hyundaicard'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'payment_code_classification.json', 'options': {'sql': '  SELECT\n          registration_number,\n          card_issuer,\n          merchant_number,\n          payment_code\n  FROM    hyundaicard_business_classification AS b\n  JOIN    hyundaicard_to_payment_code_mapping AS m\n  ON      b.classification_code = m.classification_code'}, 'role': 'process', 'type': 'sql'}]"
356,s3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts,process:::hometax_cash_receipts:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  *\nFROM    hometax_cash_receipts_src\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]"
357,s3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts,process:::prev_hometax_cash_receipts:::build_hometax_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': ""SELECT  *\nFROM    prev_hometax_cash_receipts_src\nWHERE   created_at_date >= '${PREV_MIN_DATE}'\nAND     created_at_date < '2021-01-21'""}, 'role': 'process', 'type': 'sql'}]"
358,s3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices,process:::hometax_invoices:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  *\nFROM    hometax_invoices_src\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]"
359,s3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices,process:::prev_hometax_invoices:::build_hometax_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'build_hometax_invoices.json', 'options': {'sql': ""SELECT  *\nFROM    prev_hometax_invoices_src\nWHERE   created_at_date >= '${PREV_MIN_DATE}'\nAND     created_at_date < '2020-10-06'""}, 'role': 'process', 'type': 'sql'}]"
360,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales,process:::hometax_card_sales:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  *\nFROM    hometax_card_sales_src\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]"
361,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales,process:::hometax_card_sales:::hometax_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_sales.json', 'options': {'sql': ""  SELECT\n          month AS timestamp,\n          business_id,\n          date_format(date_trunc('MONTH', month), 'yyyy-MM-dd') AS date_id,\n          amount AS amount_sum,\n          count AS tx_count\n  FROM    hometax_card_sales_src\n  WHERE   business_id IS NOT NULL\n  AND     month between '2017-01-01' AND '2021-01-24'""}, 'role': 'process', 'type': 'sql'}]"
362,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
363,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases,process:::hometax_card_purchases:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  *\nFROM    hometax_card_purchases_src\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]"
364,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases,process:::hometax_card_purchases:::hometax_purchase,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_purchase.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count,\n          collect_set(vendor_business_category) AS vendor_business_categories,\n          collect_set(vendor_business_classification_code) AS vendor_business_classification_codes,\n          collect_set(vendor_taxation_type) AS vendor_taxation_types\n  FROM (\n          SELECT\n                  business_id,\n                  date_trunc('MONTH', purchased_at) AS timestamp,\n                  amount,\n                  vendor_business_category,\n                  vendor_business_classification_code,\n                  vendor_taxation_type\n          FROM    hometax_card_purchases_src\n          WHERE   business_id IS NOT NULL\n          AND     purchased_at between '2017-01-01' AND '2021-01-24'\n  )\n  GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
365,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
366,process:::hometax_cash_receipts:::build_hometax_stat,process:::hometax_sales_stat:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  *\nFROM    hometax_cash_receipts_src\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  business_id,\n        date_trunc('month', written_at) AS time,\n        'month' AS time_unit,\n        'hometax_sales_invoices' AS type,\n        SUM(amount) AS amount\nFROM    hometax_invoices\nWHERE   is_sales = true\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', sold_at) AS time,\n        'month' AS time_unit,\n        'hometax_sales_cash_receipts' AS type,\n        SUM(approved_amount) - SUM(canceled_amount) AS amount\nFROM    (\n    SELECT  *,\n            IF (approved, amount, 0) AS approved_amount,\n            IF (canceled, amount, 0) AS canceled_amount\n    FROM    hometax_cash_receipts\n    WHERE   is_sales = true\n)\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        month AS time,\n        'month' AS time_unit,\n        'hometax_sales_card_transactions' AS type,\n        amount\nFROM    hometax_card_sales""}, 'role': 'process', 'type': 'sql'}]"
367,process:::hometax_cash_receipts:::build_hometax_stat,process:::hometax_purchases_stat:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  *\nFROM    hometax_cash_receipts_src\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  business_id,\n        date_trunc('month', written_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_invoices' AS type,\n        SUM(amount) AS amount\nFROM    hometax_invoices\nWHERE   is_purchases = true\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', purchased_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_cash_receipts' AS type,\n        SUM(approved_amount) - SUM(canceled_amount) AS amount\nFROM    (\n    SELECT  *,\n            IF (receipt_type = 0, amount, 0) AS approved_amount,\n            IF (receipt_type = 1, amount, 0) AS canceled_amount\n    FROM    hometax_cash_receipts\n    WHERE   is_purchases = true\n)\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', approved_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_card_transactions' AS type,\n        SUM(amount) AS amount\nFROM    hometax_card_purchases\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]"
368,process:::hometax_invoices:::build_hometax_stat,process:::hometax_sales_stat:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  *\nFROM    hometax_invoices_src\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  business_id,\n        date_trunc('month', written_at) AS time,\n        'month' AS time_unit,\n        'hometax_sales_invoices' AS type,\n        SUM(amount) AS amount\nFROM    hometax_invoices\nWHERE   is_sales = true\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', sold_at) AS time,\n        'month' AS time_unit,\n        'hometax_sales_cash_receipts' AS type,\n        SUM(approved_amount) - SUM(canceled_amount) AS amount\nFROM    (\n    SELECT  *,\n            IF (approved, amount, 0) AS approved_amount,\n            IF (canceled, amount, 0) AS canceled_amount\n    FROM    hometax_cash_receipts\n    WHERE   is_sales = true\n)\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        month AS time,\n        'month' AS time_unit,\n        'hometax_sales_card_transactions' AS type,\n        amount\nFROM    hometax_card_sales""}, 'role': 'process', 'type': 'sql'}]"
369,process:::hometax_invoices:::build_hometax_stat,process:::hometax_purchases_stat:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  *\nFROM    hometax_invoices_src\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  business_id,\n        date_trunc('month', written_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_invoices' AS type,\n        SUM(amount) AS amount\nFROM    hometax_invoices\nWHERE   is_purchases = true\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', purchased_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_cash_receipts' AS type,\n        SUM(approved_amount) - SUM(canceled_amount) AS amount\nFROM    (\n    SELECT  *,\n            IF (receipt_type = 0, amount, 0) AS approved_amount,\n            IF (receipt_type = 1, amount, 0) AS canceled_amount\n    FROM    hometax_cash_receipts\n    WHERE   is_purchases = true\n)\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', approved_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_card_transactions' AS type,\n        SUM(amount) AS amount\nFROM    hometax_card_purchases\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]"
370,process:::hometax_card_sales:::build_hometax_stat,process:::hometax_sales_stat:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  *\nFROM    hometax_card_sales_src\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  business_id,\n        date_trunc('month', written_at) AS time,\n        'month' AS time_unit,\n        'hometax_sales_invoices' AS type,\n        SUM(amount) AS amount\nFROM    hometax_invoices\nWHERE   is_sales = true\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', sold_at) AS time,\n        'month' AS time_unit,\n        'hometax_sales_cash_receipts' AS type,\n        SUM(approved_amount) - SUM(canceled_amount) AS amount\nFROM    (\n    SELECT  *,\n            IF (approved, amount, 0) AS approved_amount,\n            IF (canceled, amount, 0) AS canceled_amount\n    FROM    hometax_cash_receipts\n    WHERE   is_sales = true\n)\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        month AS time,\n        'month' AS time_unit,\n        'hometax_sales_card_transactions' AS type,\n        amount\nFROM    hometax_card_sales""}, 'role': 'process', 'type': 'sql'}]"
371,process:::hometax_card_purchases:::build_hometax_stat,process:::hometax_purchases_stat:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  *\nFROM    hometax_card_purchases_src\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  business_id,\n        date_trunc('month', written_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_invoices' AS type,\n        SUM(amount) AS amount\nFROM    hometax_invoices\nWHERE   is_purchases = true\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', purchased_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_cash_receipts' AS type,\n        SUM(approved_amount) - SUM(canceled_amount) AS amount\nFROM    (\n    SELECT  *,\n            IF (receipt_type = 0, amount, 0) AS approved_amount,\n            IF (receipt_type = 1, amount, 0) AS canceled_amount\n    FROM    hometax_cash_receipts\n    WHERE   is_purchases = true\n)\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', approved_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_card_transactions' AS type,\n        SUM(amount) AS amount\nFROM    hometax_card_purchases\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]"
372,process:::hometax_sales_stat:::build_hometax_stat,process:::hometax_stat:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  business_id,\n        date_trunc('month', written_at) AS time,\n        'month' AS time_unit,\n        'hometax_sales_invoices' AS type,\n        SUM(amount) AS amount\nFROM    hometax_invoices\nWHERE   is_sales = true\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', sold_at) AS time,\n        'month' AS time_unit,\n        'hometax_sales_cash_receipts' AS type,\n        SUM(approved_amount) - SUM(canceled_amount) AS amount\nFROM    (\n    SELECT  *,\n            IF (approved, amount, 0) AS approved_amount,\n            IF (canceled, amount, 0) AS canceled_amount\n    FROM    hometax_cash_receipts\n    WHERE   is_sales = true\n)\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        month AS time,\n        'month' AS time_unit,\n        'hometax_sales_card_transactions' AS type,\n        amount\nFROM    hometax_card_sales""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          time_unit,\n          SUM(IF (type = 'hometax_sales_invoices', amount, 0)) AS hometax_sales_invoices_amount,\n          SUM(IF (type = 'hometax_sales_cash_receipts', amount, 0)) AS hometax_sales_cash_receipts_amount,\n          SUM(IF (type = 'hometax_sales_card_transactions', amount, 0)) AS hometax_sales_card_transactions_amount,\n          SUM(IF (type = 'hometax_purchases_invoices', amount, 0)) AS hometax_purchases_invoices_amount,\n          SUM(IF (type = 'hometax_purchases_cash_receipts', amount, 0)) AS hometax_purchases_cash_receipts_amount,\n          SUM(IF (type = 'hometax_purchases_card_transactions', amount, 0)) AS hometax_purchases_card_transactions_amount\nFROM      (\n  SELECT  * FROM hometax_sales_stat\n  UNION ALL\n  SELECT  * FROM hometax_purchases_stat\n)\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]"
373,process:::hometax_purchases_stat:::build_hometax_stat,process:::hometax_stat:::build_hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT  business_id,\n        date_trunc('month', written_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_invoices' AS type,\n        SUM(amount) AS amount\nFROM    hometax_invoices\nWHERE   is_purchases = true\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', purchased_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_cash_receipts' AS type,\n        SUM(approved_amount) - SUM(canceled_amount) AS amount\nFROM    (\n    SELECT  *,\n            IF (receipt_type = 0, amount, 0) AS approved_amount,\n            IF (receipt_type = 1, amount, 0) AS canceled_amount\n    FROM    hometax_cash_receipts\n    WHERE   is_purchases = true\n)\nGROUP BY 1, 2\n\nUNION ALL\n\nSELECT  business_id,\n        date_trunc('month', approved_at) AS time,\n        'month' AS time_unit,\n        'hometax_purchases_card_transactions' AS type,\n        SUM(amount) AS amount\nFROM    hometax_card_purchases\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          time_unit,\n          SUM(IF (type = 'hometax_sales_invoices', amount, 0)) AS hometax_sales_invoices_amount,\n          SUM(IF (type = 'hometax_sales_cash_receipts', amount, 0)) AS hometax_sales_cash_receipts_amount,\n          SUM(IF (type = 'hometax_sales_card_transactions', amount, 0)) AS hometax_sales_card_transactions_amount,\n          SUM(IF (type = 'hometax_purchases_invoices', amount, 0)) AS hometax_purchases_invoices_amount,\n          SUM(IF (type = 'hometax_purchases_cash_receipts', amount, 0)) AS hometax_purchases_cash_receipts_amount,\n          SUM(IF (type = 'hometax_purchases_card_transactions', amount, 0)) AS hometax_purchases_card_transactions_amount\nFROM      (\n  SELECT  * FROM hometax_sales_stat\n  UNION ALL\n  SELECT  * FROM hometax_purchases_stat\n)\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]"
374,process:::hometax_stat:::build_hometax_stat,s3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          time_unit,\n          SUM(IF (type = 'hometax_sales_invoices', amount, 0)) AS hometax_sales_invoices_amount,\n          SUM(IF (type = 'hometax_sales_cash_receipts', amount, 0)) AS hometax_sales_cash_receipts_amount,\n          SUM(IF (type = 'hometax_sales_card_transactions', amount, 0)) AS hometax_sales_card_transactions_amount,\n          SUM(IF (type = 'hometax_purchases_invoices', amount, 0)) AS hometax_purchases_invoices_amount,\n          SUM(IF (type = 'hometax_purchases_cash_receipts', amount, 0)) AS hometax_purchases_cash_receipts_amount,\n          SUM(IF (type = 'hometax_purchases_card_transactions', amount, 0)) AS hometax_purchases_card_transactions_amount\nFROM      (\n  SELECT  * FROM hometax_sales_stat\n  UNION ALL\n  SELECT  * FROM hometax_purchases_stat\n)\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat'}, 'role': 'source', 'type': 'file'}]"
375,s3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat,process:::monthly_hometax:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS month,\n              hometax_sales_invoices_amount,\n              hometax_sales_cash_receipts_amount,\n              hometax_purchases_invoices_amount,\n              hometax_purchases_cash_receipts_amount\n  FROM      hometax_stat\n  WHERE     time_unit = 'month'\n  AND       time BETWEEN date_format(to_date('2021-01-28', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-28'), 'yyyy-MM-dd')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS month,\n              hometax_sales_invoices_amount,\n              hometax_sales_cash_receipts_amount,\n              hometax_purchases_invoices_amount,\n              hometax_purchases_cash_receipts_amount\n  FROM      hometax_stat\n  WHERE     time_unit = 'month'\n  AND       time BETWEEN date_format(to_date('2021-01-01', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-01'), 'yyyy-MM-dd')""}, 'role': 'process', 'type': 'sql'}]"
376,s3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat,process:::hometax_stat:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_stat.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/hometax/hometax_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      hometax_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
377,s3://thrush/test/shon/corona_jobs/weekly_region_sales_recaps,process:::weekly_region_sales_recaps:::upload,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'upload.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona_jobs/weekly_region_sales_recaps'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'upload.json', 'options': {'sql': 'SELECT  *,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    weekly_region_sales_recaps_src\nWHERE   weekofyear(week) < weekofyear(current_timestamp())\nAND     weekofyear(week) >= weekofyear(current_timestamp()) - 7'}, 'role': 'process', 'type': 'sql'}]"
378,s3://thrush/test/shon/corona_jobs/weekly_category_sales_recaps,process:::weekly_category_sales_recaps:::upload,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'upload.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona_jobs/weekly_category_sales_recaps'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'upload.json', 'options': {'sql': 'SELECT  *,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    weekly_category_sales_recaps_src\nWHERE   weekofyear(week) < weekofyear(current_timestamp())\nAND     weekofyear(week) >= weekofyear(current_timestamp()) - 7'}, 'role': 'process', 'type': 'sql'}]"
379,s3://thrush/test/shon/corona_jobs/weekly_region_search_interests,process:::weekly_region_search_interests:::upload,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'upload.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona_jobs/weekly_region_search_interests'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'upload.json', 'options': {'sql': 'SELECT  *,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    weekly_region_search_interests_src\nWHERE   weekofyear(week) < weekofyear(current_timestamp())\nAND     weekofyear(week) >= weekofyear(current_timestamp()) - 7'}, 'role': 'process', 'type': 'sql'}]"
380,process:::weekly_region_sales_recaps:::upload,weekly_region_sales_recaps_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'upload.json', 'options': {'sql': 'SELECT  *,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    weekly_region_sales_recaps_src\nWHERE   weekofyear(week) < weekofyear(current_timestamp())\nAND     weekofyear(week) >= weekofyear(current_timestamp()) - 7'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'weekly_region_sales_recaps', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'conflictColumns': 'sido,sigungu,week', 'updateColumns': 'sales_amount,visitors_count,businesses_count,updated_at'}, 'role': 'sink', 'type': 'jdbc'}]"
381,process:::weekly_category_sales_recaps:::upload,weekly_category_sales_recaps_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'upload.json', 'options': {'sql': 'SELECT  *,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    weekly_category_sales_recaps_src\nWHERE   weekofyear(week) < weekofyear(current_timestamp())\nAND     weekofyear(week) >= weekofyear(current_timestamp()) - 7'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'weekly_category_sales_recaps', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'conflictColumns': 'category,subcategory,week', 'updateColumns': 'sales_amount,visitors_count,businesses_count,updated_at'}, 'role': 'sink', 'type': 'jdbc'}]"
382,process:::weekly_region_search_interests:::upload,weekly_region_search_interests_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'upload.json', 'options': {'sql': 'SELECT  *,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    weekly_region_search_interests_src\nWHERE   weekofyear(week) < weekofyear(current_timestamp())\nAND     weekofyear(week) >= weekofyear(current_timestamp()) - 7'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'weekly_region_search_interests', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'conflictColumns': 'sido,sigungu,week', 'updateColumns': 'score,updated_at'}, 'role': 'sink', 'type': 'jdbc'}]"
383,s3://kcd-de-production/data_sources/lookup/subject=bccard/business_classifications,process:::merged_dedup:::bccard_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bccard_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=bccard/business_classifications'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'bccard_classification.json', 'options': {'sql': ""SELECT\n        *,\n        CONCAT(\n                    trim(depth_1_name),'-',\n                    trim(depth_2_name), '-',\n                    trim(depth_3_name)\n        ) AS full_category\nFROM (\n    SELECT    distinct *\n    FROM (\n            SELECT  `가맹점(광역시도)` AS sido,\n                    `가맹점(시군구)` AS sigungu,\n                    `가맹점(행정동)` AS h_dong,\n                    `가맹점(PNU)` AS pnu,\n                    `업종코드` AS classification_code,\n                    `업종대` AS depth_1_name,\n                    `업종중` AS depth_2_name,\n                    `업종소` AS depth_3_name,\n                    `사업자번호` AS registration_number,\n                    `가맹점명` AS business_name\n            FROM      business_classifications\n    )\n)""}, 'role': 'process', 'type': 'sql'}]"
384,s3://kcd-de-production/data_sources/lookup/subject=bccard/bccard_classifications.tsv,process:::bccard_business_classification:::bccard_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bccard_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=bccard/bccard_classifications.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'bccard_classification.json', 'options': {'sql': ""SELECT\n          grouped.registration_number,\n          grouped.business_name,\n          grouped.full_category,\n          grouped.merchant_size,\n          c.bc_depth_1_code AS depth_1_code,\n          c.bc_depth_1_name AS depth_1_name,\n          c.bc_depth_2_code AS depth_2_code,\n          c.bc_depth_2_name AS depth_2_name,\n          c.bc_depth_3_code AS depth_3_code,\n          c.bc_depth_3_name AS depth_3_name\nFROM  grouped\nLEFT OUTER JOIN (\n    SELECT    *,\n              CONCAT(\n                    trim(bc_depth_1_name),'-',\n                    trim(bc_depth_2_name), '-',\n                    trim(bc_depth_3_name)\n              ) AS full_category\n    FROM      bccard_classifications\n) AS c\nON grouped.full_category = c.full_category""}, 'role': 'process', 'type': 'sql'}]"
385,process:::merged_dedup:::bccard_classification,process:::grouped:::bccard_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bccard_classification.json', 'options': {'sql': ""SELECT\n        *,\n        CONCAT(\n                    trim(depth_1_name),'-',\n                    trim(depth_2_name), '-',\n                    trim(depth_3_name)\n        ) AS full_category\nFROM (\n    SELECT    distinct *\n    FROM (\n            SELECT  `가맹점(광역시도)` AS sido,\n                    `가맹점(시군구)` AS sigungu,\n                    `가맹점(행정동)` AS h_dong,\n                    `가맹점(PNU)` AS pnu,\n                    `업종코드` AS classification_code,\n                    `업종대` AS depth_1_name,\n                    `업종중` AS depth_2_name,\n                    `업종소` AS depth_3_name,\n                    `사업자번호` AS registration_number,\n                    `가맹점명` AS business_name\n            FROM      business_classifications\n    )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'bccard_classification.json', 'options': {'sql': 'SELECT    valid_info.*,\n          merchant_size\nFROM (\n    SELECT\n            SUM(cnt) AS merchant_size,\n            filter(collect_list(struct(*)), x -> x.rank == 1)[0] AS valid_info\n    FROM (\n        SELECT\n                registration_number, full_category, cnt, business_names[0] AS business_name,\n                rank() OVER (PARTITION BY registration_number ORDER BY cnt DESC) AS rank\n\n        FROM (\n            SELECT registration_number, full_category, count(1) AS cnt, collect_set(business_name) AS business_names\n            FROM  merged_dedup\n            GROUP BY registration_number, full_category\n        )\n    )\n    GROUP BY registration_number\n)'}, 'role': 'process', 'type': 'sql'}]"
386,process:::grouped:::bccard_classification,process:::bccard_business_classification:::bccard_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bccard_classification.json', 'options': {'sql': 'SELECT    valid_info.*,\n          merchant_size\nFROM (\n    SELECT\n            SUM(cnt) AS merchant_size,\n            filter(collect_list(struct(*)), x -> x.rank == 1)[0] AS valid_info\n    FROM (\n        SELECT\n                registration_number, full_category, cnt, business_names[0] AS business_name,\n                rank() OVER (PARTITION BY registration_number ORDER BY cnt DESC) AS rank\n\n        FROM (\n            SELECT registration_number, full_category, count(1) AS cnt, collect_set(business_name) AS business_names\n            FROM  merged_dedup\n            GROUP BY registration_number, full_category\n        )\n    )\n    GROUP BY registration_number\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'bccard_classification.json', 'options': {'sql': ""SELECT\n          grouped.registration_number,\n          grouped.business_name,\n          grouped.full_category,\n          grouped.merchant_size,\n          c.bc_depth_1_code AS depth_1_code,\n          c.bc_depth_1_name AS depth_1_name,\n          c.bc_depth_2_code AS depth_2_code,\n          c.bc_depth_2_name AS depth_2_name,\n          c.bc_depth_3_code AS depth_3_code,\n          c.bc_depth_3_name AS depth_3_name\nFROM  grouped\nLEFT OUTER JOIN (\n    SELECT    *,\n              CONCAT(\n                    trim(bc_depth_1_name),'-',\n                    trim(bc_depth_2_name), '-',\n                    trim(bc_depth_3_name)\n              ) AS full_category\n    FROM      bccard_classifications\n) AS c\nON grouped.full_category = c.full_category""}, 'role': 'process', 'type': 'sql'}]"
387,process:::bccard_business_classification:::bccard_classification,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard_new,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bccard_classification.json', 'options': {'sql': ""SELECT\n          grouped.registration_number,\n          grouped.business_name,\n          grouped.full_category,\n          grouped.merchant_size,\n          c.bc_depth_1_code AS depth_1_code,\n          c.bc_depth_1_name AS depth_1_name,\n          c.bc_depth_2_code AS depth_2_code,\n          c.bc_depth_2_name AS depth_2_name,\n          c.bc_depth_3_code AS depth_3_code,\n          c.bc_depth_3_name AS depth_3_name\nFROM  grouped\nLEFT OUTER JOIN (\n    SELECT    *,\n              CONCAT(\n                    trim(bc_depth_1_name),'-',\n                    trim(bc_depth_2_name), '-',\n                    trim(bc_depth_3_name)\n              ) AS full_category\n    FROM      bccard_classifications\n) AS c\nON grouped.full_category = c.full_category""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'bccard_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard_new'}, 'role': 'sink', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard_new'}, 'role': 'source', 'type': 'file'}]"
388,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard_new,process:::bccard_new:::card_classification_business_id,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bccard_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard_new'}, 'role': 'sink', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard_new'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id,\n          depth_1_code, depth_1_name,\n          depth_2_code, depth_2_name,\n          depth_3_code, depth_3_name\nFROM      bccard_business_classification_new AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]"
389,s3://kcd-de-production/table/card_sales_revisit/,process:::monthly_summary:::build_summary,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_summary.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/table/card_sales_revisit/created_at_date=2021-01-27/monthly'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_summary.json', 'options': {'path': 's3://kcd-de-production/table/card_sales_revisit/created_at_date=2021-01-27/monthly_summary', 'format': 'parquet', 'mode': 'overwrite'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'build_summary.json', 'options': {'sql': 'SELECT  business_id, time,\n        CAST(revisit_amount AS DOUBLE) / CAST(total_amount AS DOUBLE) AS amount_ratio\nFROM    (\n  SELECT  business_id, time,\n          SUM(total_amount) AS total_amount,\n          SUM(IF (visit_count > 1, total_amount, 0)) AS revisit_amount\n  FROM    monthly\n  GROUP BY 1, 2\n)'}, 'role': 'process', 'type': 'sql'}]"
390,s3://kcd-de-production/table/card_sales_revisit/weekly,process:::weekly_summary:::build_summary,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_summary.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/table/card_sales_revisit/created_at_date=2021-01-27/weekly'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_summary.json', 'options': {'sql': 'SELECT  business_id, time,\n        CAST(revisit_amount AS DOUBLE) / CAST(total_amount AS DOUBLE) AS amount_ratio\nFROM    (\n  SELECT  business_id, time,\n          SUM(total_amount) AS total_amount,\n          SUM(IF (visit_count > 1, total_amount, 0)) AS revisit_amount\n  FROM    weekly\n  GROUP BY 1, 2\n)'}, 'role': 'process', 'type': 'sql'}]"
391,process:::monthly_summary:::build_summary,s3://kcd-de-production/table/card_sales_revisit/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_summary.json', 'options': {'sql': 'SELECT  business_id, time,\n        CAST(revisit_amount AS DOUBLE) / CAST(total_amount AS DOUBLE) AS amount_ratio\nFROM    (\n  SELECT  business_id, time,\n          SUM(total_amount) AS total_amount,\n          SUM(IF (visit_count > 1, total_amount, 0)) AS revisit_amount\n  FROM    monthly\n  GROUP BY 1, 2\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_summary.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/table/card_sales_revisit/created_at_date=2021-01-27/monthly'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_summary.json', 'options': {'path': 's3://kcd-de-production/table/card_sales_revisit/created_at_date=2021-01-27/monthly_summary', 'format': 'parquet', 'mode': 'overwrite'}, 'role': 'sink', 'type': 'file'}]"
392,process:::weekly_summary:::build_summary,s3://kcd-de-production/table/card_sales_revisit/weekly_summary,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_summary.json', 'options': {'sql': 'SELECT  business_id, time,\n        CAST(revisit_amount AS DOUBLE) / CAST(total_amount AS DOUBLE) AS amount_ratio\nFROM    (\n  SELECT  business_id, time,\n          SUM(total_amount) AS total_amount,\n          SUM(IF (visit_count > 1, total_amount, 0)) AS revisit_amount\n  FROM    weekly\n  GROUP BY 1, 2\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_summary.json', 'options': {'path': 's3://kcd-de-production/table/card_sales_revisit/created_at_date=2021-01-27/weekly_summary', 'format': 'parquet', 'mode': 'overwrite'}, 'role': 'sink', 'type': 'file'}]"
393,s3://staging-card-sales/staging-card-sales-approvals/,s3://kcd-logs-raw/dev/card_sales/incremental/approvals/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_sales_firehose_compaction.json', 'options': {'paths': 's3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01', 'format': 'json'}, 'role': 'source', 'type': 'file'}, {'filename': 'firehose_compaction.json', 'options': {'paths': 's3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12', 'format': 'json'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'card_sales_firehose_compaction.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-logs-raw/dev/card_sales/incremental/approvals/year=2021/month=01', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'firehose_compaction.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-logs-raw/dev/card_sales/incremental/approvals/year=2019/month=12', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
394,s3://staging-card-sales/staging-card-sales-purchases/,s3://kcd-logs-raw/dev/card_sales/incremental/purchases/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_sales_firehose_compaction.json', 'options': {'paths': 's3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01', 'format': 'json'}, 'role': 'source', 'type': 'file'}, {'filename': 'firehose_compaction.json', 'options': {'paths': 's3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12', 'format': 'json'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'card_sales_firehose_compaction.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-logs-raw/dev/card_sales/incremental/purchases/year=2021/month=01', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'firehose_compaction.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-logs-raw/dev/card_sales/incremental/purchases/year=2019/month=12', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
395,s3://staging-card-sales/staging-card-sales-payments/,s3://kcd-logs-raw/dev/card_sales/incremental/payments/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_sales_firehose_compaction.json', 'options': {'paths': 's3://staging-card-sales/staging-card-sales-payments/year=2021/month=01', 'format': 'json'}, 'role': 'source', 'type': 'file'}, {'filename': 'firehose_compaction.json', 'options': {'paths': 's3://staging-card-sales/staging-card-sales-payments/year=2019/month=12', 'format': 'json'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'card_sales_firehose_compaction.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-logs-raw/dev/card_sales/incremental/payments/year=2021/month=01', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'firehose_compaction.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-logs-raw/dev/card_sales/incremental/payments/year=2019/month=12', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
396,s3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals,process:::current_approvals:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'join_approval_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_sales_all.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]"
397,s3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals,process:::prev_approvals:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'join_approval_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_sales_all.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-10-29'\nAND     created_at_date < '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-11-05'\nAND     created_at_date < '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]"
398,s3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals,process:::current_approvals:::join_approval_candidates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'join_approval_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_sales_all.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'join_approval_candidates.json', 'options': {'sql': ""SELECT    *\nFROM      approvals_raw\nWHERE     created_at_date >= '2011-01-28'\nAND       created_at_date < '2021-01-26'""}, 'role': 'process', 'type': 'sql'}]"
399,s3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals,process:::prev_approvals:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'join_approval_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_sales_all.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': "" SELECT   p.*\n FROM (\n          SELECT  DISTINCT business_id, credential_key, authorization_number\n          FROM    current_approvals_raw\n ) AS c\n JOIN (\n         SELECT   *\n         FROM     prev_approvals_raw\n         WHERE    created_at_date >= '2020-12-15'\n         AND      created_at_date < '2021-01-25'\n ) AS p\n ON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.authorization_number = c.authorization_number\n)""}, 'role': 'process', 'type': 'sql'}]"
400,s3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases,process:::current_purchases:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'join_purchase_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_sales_all.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]"
401,s3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases,process:::prev_purchases:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'join_purchase_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_sales_all.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-10-29'\nAND     created_at_date < '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-11-05'\nAND     created_at_date < '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]"
402,s3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases,process:::current_purchases:::join_purchase_candidates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'join_purchase_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_sales_all.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'join_purchase_candidates.json', 'options': {'sql': ""SELECT    *\nFROM      purchases_raw\nWHERE     created_at_date >= '2011-01-28'\nAND       created_at_date < '2021-01-26'""}, 'role': 'process', 'type': 'sql'}]"
403,s3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases,process:::prev_purchases:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'join_purchase_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_sales_all.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT   p.*\nFROM  (\n      SELECT  DISTINCT business_id, credential_key, masked_card_number\n      FROM    current_purchases_reformat\n) AS c\nJOIN (\n     SELECT   *\n     FROM     prev_purchases_raw\n     WHERE    created_at_date >= '2020-12-15'\n     AND      created_at_date < '2021-01-25'\n) AS p\nON        (\n  p.business_id = c.business_id AND\n  p.masked_card_number = c.masked_card_number AND\n  p.credential_key = c.credential_key\n)""}, 'role': 'process', 'type': 'sql'}]"
404,s3://kcd-de-production/raw/etl/snowdon/card_sales/transactions,process:::prev_transactions:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders_approved.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_visits.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '2020-10-29'\nAND     created_at_date < '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '2020-11-05'\nAND     created_at_date < '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]"
405,s3://kcd-de-production/raw/etl/snowdon/card_sales/transactions,process:::transactions_approved:::add_visit_orders_approved,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders_approved.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_visits.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'add_visit_orders_approved.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '1999-09-10'\nAND     transacted_at >= '1999-09-10'\nAND     (\n  (purchased_at is not null AND purchase_canceled_at is null) OR\n  (purchased_at is null AND approval_canceled_at is null)\n)""}, 'role': 'process', 'type': 'sql'}]"
406,s3://kcd-de-production/raw/etl/snowdon/card_sales/transactions,process:::transactions_stat:::card_sales_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders_approved.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_visits.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'sales_transactions.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount_sum) AS amount_sum,\n          SUM(tx_count) AS tx_count,\n          map_from_entries(collect_list(struct(issuer_name, amount_sum))) AS issuer_amount_sum,\n          map_from_entries(collect_list(struct(issuer_name, tx_count))) AS issuer_tx_count\n  FROM (\n          SELECT\n                  timestamp,\n                  business_id,\n                  issuer_name,\n                  SUM(amount) AS amount_sum,\n                  COUNT(1) AS tx_count\n          FROM (\n                  SELECT\n                          business_id,\n                          date_trunc('MONTH', transacted_at) AS timestamp,\n                          amount,\n                          issuer_name\n                  FROM    transactions\n                  WHERE   business_id IS NOT NULL\n                  AND     approval_canceled_at IS NULL AND purchase_canceled_at IS NULL\n                  AND     transacted_at between '2019-01-01' AND '2021-01-24'\n          )\n          GROUP BY business_id, issuer_name, timestamp\n ) GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
407,s3://kcd-de-production/raw/etl/snowdon/card_sales/transactions,process:::grouped:::build_visits,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders_approved.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_visits.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_visits.json', 'options': {'sql': ""SELECT  key,\n        business_id,\n        collect_list(struct(*)) AS histories\nFROM    (\n   SELECT *,\n          COALESCE(encrypted_card_number, CONCAT_WS('_', issuer_name, card_number)) AS key\n   FROM   card_sales_transaction_src\n   WHERE  transacted_at >= '2018-10-01'\n   AND    created_at_date >= '2018-10-01'\n)\nGROUP BY key, business_id""}, 'role': 'process', 'type': 'sql'}]"
408,s3://kcd-de-production/raw/etl/snowdon/card_sales/transactions,process:::current_txs_approved:::add_visit_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders_approved.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_visits.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'add_visit_orders.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '2020-12-29'\nAND     (\n          (purchased_at is not null AND purchase_canceled_at is null) OR\n          (purchased_at is null AND approval_canceled_at is null)\n        )""}, 'role': 'process', 'type': 'sql'}]"
409,s3://kcd-de-production/raw/etl/snowdon/card_sales/transactions,process:::current_txs_cancelled:::add_visit_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders_approved.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_visits.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'add_visit_orders.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '2020-12-29'\nAND     NOT (\n          (purchased_at is not null AND purchase_canceled_at is null) OR\n          (purchased_at is null AND approval_canceled_at is null)\n        )""}, 'role': 'process', 'type': 'sql'}]"
410,s3://kcd-de-production/raw/etl/snowdon/card_sales/transactions,process:::prev_approved_txs:::add_visit_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders_approved.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_visits.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'add_visit_orders.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '2019-12-30'\nAND     created_at_date < '2020-12-29'\nAND     transacted_at >= '2019-12-30'\nAND     transacted_at < '2020-12-29'\nAND     (\n          (purchased_at is not null AND purchase_canceled_at is null) OR\n          (purchased_at is null AND approval_canceled_at is null)\n        )""}, 'role': 'process', 'type': 'sql'}]"
411,s3://kcd-de-production/raw/etl/snowdon/card_sales/transactions,process:::transactions:::daily_transaction_type_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders_approved.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_visits.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'daily_transaction_type_stats.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n          t.transacted_at >= '2020-01-01' OR\n          t.purchased_at >= '2020-01-01' OR\n          t.paid_at >= '2020-01-01'\n)\nAND      (\n          t.transacted_at < '2021-12-01' OR\n          t.purchased_at < '2021-12-01' OR\n          t.paid_at < '2021-12-01'\n)""}, 'role': 'process', 'type': 'sql'}]"
412,s3://kcd-de-production/raw/etl/snowdon/card_sales/transactions,process:::pos_payments_distinct_v2:::dedup_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders_approved.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_visits.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'dedup_payments_v2.json', 'options': {'sql': 'SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  card_number,\n  client_id,\n  idx,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  timestamp,\n  CAST(null AS int) AS visit_order,\n  CAST(created_at_date as string) AS created_at_date,\n  paid_at_timestamp AS transacted_at,\n  CAST(to_date(paid_at_timestamp, \'yyyy-MM-dd\') AS string) AS transacted_at_date\nFROM    (\n  SELECT\n    *,\n    COALESCE(\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd\'T\'HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"")\n    ) AS paid_at_timestamp,\n    row_number() OVER (PARTITION BY payment_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_payments_raw_v2\n  WHERE\n    created_at_date >= \'2020-07-30\' AND created_at_date < \'2021-01-29\'\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
413,s3://kcd-de-production/raw/etl/snowdon/card_sales/transactions,process:::txs:::build_session,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders_approved.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_visits.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pre_process.json', 'options': {'sql': ""SELECT  encrypted_card_number,\n        collect_list(\n          struct(\n            business_id,\n            transacted_at\n          )\n        ) AS histories\nFROM    transactions\nWHERE   encrypted_card_number is not null\nAND     approval_canceled_at IS NULL AND purchase_canceled_at IS NULL\nAND     created_at_date >= '2020-01-25'\nAND     created_at_date < '2021-01-23'\nAND     transacted_at >= '2020-01-25'\nAND     transacted_at < '2021-01-23'\nAND     (\n          (purchased_at is not null AND purchase_canceled_at is null) OR\n          (purchased_at is null AND approval_canceled_at is null)\n        )\nGROUP BY encrypted_card_number""}, 'role': 'process', 'type': 'sql'}]"
414,process:::current_approvals:::build_matched_tables,process:::current_approval_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    struct(approved.*) AS approved,\n          struct(canceled.*) AS canceled,\n          COALESCE(\n            date_format(approved.created_at, 'yyyy-MM-dd'),\n            date_format(canceled.created_at, 'yyyy-MM-dd')\n          ) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 0\n) approved FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 1\n) canceled\nON (\n  approved.business_id = canceled.business_id AND\n  approved.credential_key = canceled.credential_key AND\n  approved.amount = -canceled.amount AND\n  approved.masked_card_number = canceled.masked_card_number AND\n  approved.authorization_number = canceled.authorization_number AND\n  CAST(approved.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n  approved.approval_seq = canceled.approval_seq\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    struct(approved.*) AS approved,\n          struct(canceled.*) AS canceled,\n          COALESCE(\n            date_format(approved.created_at, 'yyyy-MM-dd'),\n            date_format(canceled.created_at, 'yyyy-MM-dd')\n          ) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 0\n) approved FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 1\n) canceled\nON (\n  approved.business_id = canceled.business_id AND\n  approved.credential_key = canceled.credential_key AND\n  approved.amount = -canceled.amount AND\n  approved.masked_card_number = canceled.masked_card_number AND\n  approved.authorization_number = canceled.authorization_number AND\n  CAST(approved.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n  approved.approval_seq = canceled.approval_seq\n)""}, 'role': 'process', 'type': 'sql'}]"
415,process:::prev_approvals:::build_matched_tables,process:::prev_approval_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-10-29'\nAND     created_at_date < '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-11-05'\nAND     created_at_date < '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': '  SELECT    /*+ BROADCAST(canceled) */\n            struct(approved.*) AS approved,\n            struct(canceled.*) AS canceled,\n            COALESCE(approved.created_at_date, canceled.created_at_date) AS created_at_date\n  FROM      (\n    SELECT  *\n    FROM    prev_approvals\n    WHERE   status = 0\n\n    UNION ALL\n\n    SELECT  approved.*\n    FROM    current_approval_candidates\n    WHERE   canceled.business_id is null\n\n  ) approved INNER JOIN (\n    SELECT  canceled.*\n    FROM    current_approval_candidates\n    WHERE   approved.business_id is null\n  ) canceled\n  ON (\n    approved.business_id = canceled.business_id AND\n    approved.credential_key = canceled.credential_key AND\n    approved.amount = -canceled.amount AND\n    approved.masked_card_number = canceled.masked_card_number AND\n    approved.authorization_number = canceled.authorization_number\n  )'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': '  SELECT    /*+ BROADCAST(canceled) */\n            struct(approved.*) AS approved,\n            struct(canceled.*) AS canceled,\n            COALESCE(approved.created_at_date, canceled.created_at_date) AS created_at_date\n  FROM      (\n    SELECT  *\n    FROM    prev_approvals\n    WHERE   status = 0\n\n    UNION ALL\n\n    SELECT  approved.*\n    FROM    current_approval_candidates\n    WHERE   canceled.business_id is null\n\n  ) approved INNER JOIN (\n    SELECT  canceled.*\n    FROM    current_approval_candidates\n    WHERE   approved.business_id is null\n  ) canceled\n  ON (\n    approved.business_id = canceled.business_id AND\n    approved.credential_key = canceled.credential_key AND\n    approved.amount = -canceled.amount AND\n    approved.masked_card_number = canceled.masked_card_number AND\n    approved.authorization_number = canceled.authorization_number\n  )'}, 'role': 'process', 'type': 'sql'}]"
416,process:::current_purchases:::build_matched_tables,process:::current_purchase_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount > 0\n) purchased FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount < 0\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount > 0\n) purchased FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount < 0\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.paid_at = canceled.paid_at AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]"
417,process:::prev_purchases:::build_matched_tables,process:::prev_purchase_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-10-29'\nAND     created_at_date < '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-11-05'\nAND     created_at_date < '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    /*+ BROADCAST(canceled) */\n          struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    prev_purchases\n  WHERE   amount > 0\n) purchased INNER JOIN (\n  SELECT  canceled.*\n  FROM    current_purchase_candidates\n  WHERE   purchased.business_id is null\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    /*+ BROADCAST(canceled) */\n          struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    prev_purchases\n  WHERE   amount > 0\n) purchased INNER JOIN (\n  SELECT  canceled.*\n  FROM    current_purchase_candidates\n  WHERE   purchased.business_id is null\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.paid_at = canceled.paid_at AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]"
418,process:::prev_transactions:::build_matched_tables,process:::merged_transactions:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '2020-10-29'\nAND     created_at_date < '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '2020-11-05'\nAND     created_at_date < '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    struct(prev.*) AS prev,\n          struct(current.*) AS current\nFROM      prev_transactions prev FULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq) AND\n        CAST(COALESCE(prev.purchased_at, prev.transacted_at) AS DATE) = CAST(COALESCE(current.purchased_at, current.transacted_at) AS DATE)\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    struct(prev.*) AS prev,\n          struct(current.*) AS current\nFROM      prev_transactions prev FULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq)\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
419,process:::current_approval_candidates:::build_matched_tables,process:::prev_approval_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    struct(approved.*) AS approved,\n          struct(canceled.*) AS canceled,\n          COALESCE(\n            date_format(approved.created_at, 'yyyy-MM-dd'),\n            date_format(canceled.created_at, 'yyyy-MM-dd')\n          ) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 0\n) approved FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 1\n) canceled\nON (\n  approved.business_id = canceled.business_id AND\n  approved.credential_key = canceled.credential_key AND\n  approved.amount = -canceled.amount AND\n  approved.masked_card_number = canceled.masked_card_number AND\n  approved.authorization_number = canceled.authorization_number AND\n  CAST(approved.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n  approved.approval_seq = canceled.approval_seq\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    struct(approved.*) AS approved,\n          struct(canceled.*) AS canceled,\n          COALESCE(\n            date_format(approved.created_at, 'yyyy-MM-dd'),\n            date_format(canceled.created_at, 'yyyy-MM-dd')\n          ) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 0\n) approved FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 1\n) canceled\nON (\n  approved.business_id = canceled.business_id AND\n  approved.credential_key = canceled.credential_key AND\n  approved.amount = -canceled.amount AND\n  approved.masked_card_number = canceled.masked_card_number AND\n  approved.authorization_number = canceled.authorization_number AND\n  CAST(approved.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n  approved.approval_seq = canceled.approval_seq\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': '  SELECT    /*+ BROADCAST(canceled) */\n            struct(approved.*) AS approved,\n            struct(canceled.*) AS canceled,\n            COALESCE(approved.created_at_date, canceled.created_at_date) AS created_at_date\n  FROM      (\n    SELECT  *\n    FROM    prev_approvals\n    WHERE   status = 0\n\n    UNION ALL\n\n    SELECT  approved.*\n    FROM    current_approval_candidates\n    WHERE   canceled.business_id is null\n\n  ) approved INNER JOIN (\n    SELECT  canceled.*\n    FROM    current_approval_candidates\n    WHERE   approved.business_id is null\n  ) canceled\n  ON (\n    approved.business_id = canceled.business_id AND\n    approved.credential_key = canceled.credential_key AND\n    approved.amount = -canceled.amount AND\n    approved.masked_card_number = canceled.masked_card_number AND\n    approved.authorization_number = canceled.authorization_number\n  )'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': '  SELECT    /*+ BROADCAST(canceled) */\n            struct(approved.*) AS approved,\n            struct(canceled.*) AS canceled,\n            COALESCE(approved.created_at_date, canceled.created_at_date) AS created_at_date\n  FROM      (\n    SELECT  *\n    FROM    prev_approvals\n    WHERE   status = 0\n\n    UNION ALL\n\n    SELECT  approved.*\n    FROM    current_approval_candidates\n    WHERE   canceled.business_id is null\n\n  ) approved INNER JOIN (\n    SELECT  canceled.*\n    FROM    current_approval_candidates\n    WHERE   approved.business_id is null\n  ) canceled\n  ON (\n    approved.business_id = canceled.business_id AND\n    approved.credential_key = canceled.credential_key AND\n    approved.amount = -canceled.amount AND\n    approved.masked_card_number = canceled.masked_card_number AND\n    approved.authorization_number = canceled.authorization_number\n  )'}, 'role': 'process', 'type': 'sql'}]"
420,process:::current_approval_candidates:::build_matched_tables,process:::approval_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    struct(approved.*) AS approved,\n          struct(canceled.*) AS canceled,\n          COALESCE(\n            date_format(approved.created_at, 'yyyy-MM-dd'),\n            date_format(canceled.created_at, 'yyyy-MM-dd')\n          ) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 0\n) approved FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 1\n) canceled\nON (\n  approved.business_id = canceled.business_id AND\n  approved.credential_key = canceled.credential_key AND\n  approved.amount = -canceled.amount AND\n  approved.masked_card_number = canceled.masked_card_number AND\n  approved.authorization_number = canceled.authorization_number AND\n  CAST(approved.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n  approved.approval_seq = canceled.approval_seq\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    struct(approved.*) AS approved,\n          struct(canceled.*) AS canceled,\n          COALESCE(\n            date_format(approved.created_at, 'yyyy-MM-dd'),\n            date_format(canceled.created_at, 'yyyy-MM-dd')\n          ) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 0\n) approved FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 1\n) canceled\nON (\n  approved.business_id = canceled.business_id AND\n  approved.credential_key = canceled.credential_key AND\n  approved.amount = -canceled.amount AND\n  approved.masked_card_number = canceled.masked_card_number AND\n  approved.authorization_number = canceled.authorization_number AND\n  CAST(approved.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n  approved.approval_seq = canceled.approval_seq\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    cur.*\nFROM      current_approval_candidates AS cur\nLEFT OUTER JOIN prev_approval_candidates AS prev\nON (\n  cur.approved.business_id = prev.approved.business_id AND\n  cur.approved.credential_key = prev.approved.credential_key AND\n  cur.approved.amount = prev.approved.amount AND\n  cur.approved.masked_card_number = prev.approved.masked_card_number AND\n  cur.approved.authorization_number = prev.approved.authorization_number AND\n  cur.approved.approval_seq = prev.approved.approval_seq\n)\nWHERE prev.approved.business_id is null\n\nUNION ALL\n\nSELECT * FROM prev_approval_candidates'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    cur.*\nFROM      current_approval_candidates AS cur\nLEFT OUTER JOIN prev_approval_candidates AS prev\nON (\n  cur.approved.business_id = prev.approved.business_id AND\n  cur.approved.credential_key = prev.approved.credential_key AND\n  cur.approved.amount = prev.approved.amount AND\n  cur.approved.masked_card_number = prev.approved.masked_card_number AND\n  cur.approved.authorization_number = prev.approved.authorization_number AND\n  cur.approved.approval_seq = prev.approved.approval_seq\n)\nWHERE prev.approved.business_id is null\n\nUNION ALL\n\nSELECT * FROM prev_approval_candidates'}, 'role': 'process', 'type': 'sql'}]"
421,process:::prev_approval_candidates:::build_matched_tables,process:::approval_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': '  SELECT    /*+ BROADCAST(canceled) */\n            struct(approved.*) AS approved,\n            struct(canceled.*) AS canceled,\n            COALESCE(approved.created_at_date, canceled.created_at_date) AS created_at_date\n  FROM      (\n    SELECT  *\n    FROM    prev_approvals\n    WHERE   status = 0\n\n    UNION ALL\n\n    SELECT  approved.*\n    FROM    current_approval_candidates\n    WHERE   canceled.business_id is null\n\n  ) approved INNER JOIN (\n    SELECT  canceled.*\n    FROM    current_approval_candidates\n    WHERE   approved.business_id is null\n  ) canceled\n  ON (\n    approved.business_id = canceled.business_id AND\n    approved.credential_key = canceled.credential_key AND\n    approved.amount = -canceled.amount AND\n    approved.masked_card_number = canceled.masked_card_number AND\n    approved.authorization_number = canceled.authorization_number\n  )'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': '  SELECT    /*+ BROADCAST(canceled) */\n            struct(approved.*) AS approved,\n            struct(canceled.*) AS canceled,\n            COALESCE(approved.created_at_date, canceled.created_at_date) AS created_at_date\n  FROM      (\n    SELECT  *\n    FROM    prev_approvals\n    WHERE   status = 0\n\n    UNION ALL\n\n    SELECT  approved.*\n    FROM    current_approval_candidates\n    WHERE   canceled.business_id is null\n\n  ) approved INNER JOIN (\n    SELECT  canceled.*\n    FROM    current_approval_candidates\n    WHERE   approved.business_id is null\n  ) canceled\n  ON (\n    approved.business_id = canceled.business_id AND\n    approved.credential_key = canceled.credential_key AND\n    approved.amount = -canceled.amount AND\n    approved.masked_card_number = canceled.masked_card_number AND\n    approved.authorization_number = canceled.authorization_number\n  )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    cur.*\nFROM      current_approval_candidates AS cur\nLEFT OUTER JOIN prev_approval_candidates AS prev\nON (\n  cur.approved.business_id = prev.approved.business_id AND\n  cur.approved.credential_key = prev.approved.credential_key AND\n  cur.approved.amount = prev.approved.amount AND\n  cur.approved.masked_card_number = prev.approved.masked_card_number AND\n  cur.approved.authorization_number = prev.approved.authorization_number AND\n  cur.approved.approval_seq = prev.approved.approval_seq\n)\nWHERE prev.approved.business_id is null\n\nUNION ALL\n\nSELECT * FROM prev_approval_candidates'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    cur.*\nFROM      current_approval_candidates AS cur\nLEFT OUTER JOIN prev_approval_candidates AS prev\nON (\n  cur.approved.business_id = prev.approved.business_id AND\n  cur.approved.credential_key = prev.approved.credential_key AND\n  cur.approved.amount = prev.approved.amount AND\n  cur.approved.masked_card_number = prev.approved.masked_card_number AND\n  cur.approved.authorization_number = prev.approved.authorization_number AND\n  cur.approved.approval_seq = prev.approved.approval_seq\n)\nWHERE prev.approved.business_id is null\n\nUNION ALL\n\nSELECT * FROM prev_approval_candidates'}, 'role': 'process', 'type': 'sql'}]"
422,process:::approval_candidates:::build_matched_tables,process:::merged_approvals:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    cur.*\nFROM      current_approval_candidates AS cur\nLEFT OUTER JOIN prev_approval_candidates AS prev\nON (\n  cur.approved.business_id = prev.approved.business_id AND\n  cur.approved.credential_key = prev.approved.credential_key AND\n  cur.approved.amount = prev.approved.amount AND\n  cur.approved.masked_card_number = prev.approved.masked_card_number AND\n  cur.approved.authorization_number = prev.approved.authorization_number AND\n  cur.approved.approval_seq = prev.approved.approval_seq\n)\nWHERE prev.approved.business_id is null\n\nUNION ALL\n\nSELECT * FROM prev_approval_candidates'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    cur.*\nFROM      current_approval_candidates AS cur\nLEFT OUTER JOIN prev_approval_candidates AS prev\nON (\n  cur.approved.business_id = prev.approved.business_id AND\n  cur.approved.credential_key = prev.approved.credential_key AND\n  cur.approved.amount = prev.approved.amount AND\n  cur.approved.masked_card_number = prev.approved.masked_card_number AND\n  cur.approved.authorization_number = prev.approved.authorization_number AND\n  cur.approved.approval_seq = prev.approved.approval_seq\n)\nWHERE prev.approved.business_id is null\n\nUNION ALL\n\nSELECT * FROM prev_approval_candidates'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    approved.*,\n          CAST(null AS TIMESTAMP) AS approval_canceled_at,\n          'approved' AS type\nFROM      approval_candidates\nWHERE     canceled.business_id is null\n\nUNION ALL\n\nSELECT    approved.*,\n          canceled.transacted_at AS approval_canceled_at,\n          'cancel' AS type\nFROM      approval_candidates\nWHERE     approved.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    approved.*,\n          CAST(null AS TIMESTAMP) AS approval_canceled_at,\n          'approved' AS type\nFROM      approval_candidates\nWHERE     canceled.business_id is null\n\nUNION ALL\n\nSELECT    approved.*,\n          canceled.transacted_at AS approval_canceled_at,\n          'cancel' AS type\nFROM      approval_candidates\nWHERE     approved.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}]"
423,process:::merged_approvals:::build_matched_tables,process:::transaction_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    approved.*,\n          CAST(null AS TIMESTAMP) AS approval_canceled_at,\n          'approved' AS type\nFROM      approval_candidates\nWHERE     canceled.business_id is null\n\nUNION ALL\n\nSELECT    approved.*,\n          canceled.transacted_at AS approval_canceled_at,\n          'cancel' AS type\nFROM      approval_candidates\nWHERE     approved.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    approved.*,\n          CAST(null AS TIMESTAMP) AS approval_canceled_at,\n          'approved' AS type\nFROM      approval_candidates\nWHERE     canceled.business_id is null\n\nUNION ALL\n\nSELECT    approved.*,\n          canceled.transacted_at AS approval_canceled_at,\n          'cancel' AS type\nFROM      approval_candidates\nWHERE     approved.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      merged_approvals a FULL OUTER JOIN merged_purchases p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        a.masked_card_number = p.masked_card_number AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      merged_approvals a FULL OUTER JOIN merged_purchases p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        a.masked_card_number = p.masked_card_number AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
424,process:::current_purchase_candidates:::build_matched_tables,process:::prev_purchase_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount > 0\n) purchased FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount < 0\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount > 0\n) purchased FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount < 0\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.paid_at = canceled.paid_at AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    /*+ BROADCAST(canceled) */\n          struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    prev_purchases\n  WHERE   amount > 0\n) purchased INNER JOIN (\n  SELECT  canceled.*\n  FROM    current_purchase_candidates\n  WHERE   purchased.business_id is null\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    /*+ BROADCAST(canceled) */\n          struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    prev_purchases\n  WHERE   amount > 0\n) purchased INNER JOIN (\n  SELECT  canceled.*\n  FROM    current_purchase_candidates\n  WHERE   purchased.business_id is null\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.paid_at = canceled.paid_at AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]"
425,process:::current_purchase_candidates:::build_matched_tables,process:::purchase_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount > 0\n) purchased FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount < 0\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount > 0\n) purchased FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount < 0\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.paid_at = canceled.paid_at AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT * FROM current_purchase_candidates\nUNION ALL\nSELECT * FROM prev_purchase_candidates'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT * FROM current_purchase_candidates\nUNION ALL\nSELECT * FROM prev_purchase_candidates'}, 'role': 'process', 'type': 'sql'}]"
426,process:::prev_purchase_candidates:::build_matched_tables,process:::purchase_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    /*+ BROADCAST(canceled) */\n          struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    prev_purchases\n  WHERE   amount > 0\n) purchased INNER JOIN (\n  SELECT  canceled.*\n  FROM    current_purchase_candidates\n  WHERE   purchased.business_id is null\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    /*+ BROADCAST(canceled) */\n          struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    prev_purchases\n  WHERE   amount > 0\n) purchased INNER JOIN (\n  SELECT  canceled.*\n  FROM    current_purchase_candidates\n  WHERE   purchased.business_id is null\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.paid_at = canceled.paid_at AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT * FROM current_purchase_candidates\nUNION ALL\nSELECT * FROM prev_purchase_candidates'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT * FROM current_purchase_candidates\nUNION ALL\nSELECT * FROM prev_purchase_candidates'}, 'role': 'process', 'type': 'sql'}]"
427,process:::purchase_candidates:::build_matched_tables,process:::merged_purchases:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT * FROM current_purchase_candidates\nUNION ALL\nSELECT * FROM prev_purchase_candidates'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT * FROM current_purchase_candidates\nUNION ALL\nSELECT * FROM prev_purchase_candidates'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    purchased.*,\n          CAST(null AS TIMESTAMP) AS purchase_canceled_at,\n          'purchased' AS type\nFROM      purchase_candidates\nWHERE     canceled.business_id is null\n\nUNION ALL\n\nSELECT    purchased.*,\n          canceled.purchased_at AS purchase_canceled_at,\n          'purchase_cancel' AS type\nFROM      purchase_candidates\nWHERE     purchased.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    purchased.*,\n          CAST(null AS TIMESTAMP) AS purchase_canceled_at,\n          'purchased' AS type\nFROM      purchase_candidates\nWHERE     canceled.business_id is null\n\nUNION ALL\n\nSELECT    purchased.*,\n          canceled.purchased_at AS purchase_canceled_at,\n          'purchase_cancel' AS type\nFROM      purchase_candidates\nWHERE     purchased.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}]"
428,process:::merged_purchases:::build_matched_tables,process:::transaction_candidates:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    purchased.*,\n          CAST(null AS TIMESTAMP) AS purchase_canceled_at,\n          'purchased' AS type\nFROM      purchase_candidates\nWHERE     canceled.business_id is null\n\nUNION ALL\n\nSELECT    purchased.*,\n          canceled.purchased_at AS purchase_canceled_at,\n          'purchase_cancel' AS type\nFROM      purchase_candidates\nWHERE     purchased.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    purchased.*,\n          CAST(null AS TIMESTAMP) AS purchase_canceled_at,\n          'purchased' AS type\nFROM      purchase_candidates\nWHERE     canceled.business_id is null\n\nUNION ALL\n\nSELECT    purchased.*,\n          canceled.purchased_at AS purchase_canceled_at,\n          'purchase_cancel' AS type\nFROM      purchase_candidates\nWHERE     purchased.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      merged_approvals a FULL OUTER JOIN merged_purchases p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        a.masked_card_number = p.masked_card_number AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      merged_approvals a FULL OUTER JOIN merged_purchases p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        a.masked_card_number = p.masked_card_number AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
429,process:::transaction_candidates:::build_matched_tables,process:::current_transactions:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      merged_approvals a FULL OUTER JOIN merged_purchases p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        a.masked_card_number = p.masked_card_number AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      merged_approvals a FULL OUTER JOIN merged_purchases p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        a.masked_card_number = p.masked_card_number AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    DISTINCT\n            acquirer_name,\n            amount,\n            approval_canceled_at,\n            approval_seq,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            encrypted_card_number,\n            estimated_paid_at,\n            etc_fee,\n            fee,\n            installment,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_cancel_seq,\n            purchase_canceled_at,\n            purchase_delayed,\n            purchase_seq,\n            purchased_at,\n            scraping_type,\n            status,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\nFROM        (\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            CAST(null AS integer) AS base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            CAST(null AS integer) AS etc_fee,\n            approval.fee AS fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            CAST(null AS timestamp) AS paid_at,\n            approval.payment AS payment,\n            CAST(null AS integer) AS point_fee,\n            CAST(null AS integer) AS purchase_cancel_seq,\n            CAST(null AS timestamp) AS purchase_canceled_at,\n            CAST(null AS boolean) AS purchase_delayed,\n            CAST(null AS integer) AS purchase_seq,\n            CAST(null AS timestamp) AS purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            approval.vat_fee AS vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     purchase.business_id is null\n\n  UNION ALL\n\n  SELECT    purchase.acquirer_name,\n            purchase.amount,\n            CAST(null AS integer) AS approval_seq,\n            purchase.authorization_number,\n            purchase.base_fee,\n            purchase.business_id,\n            purchase.card_number,\n            purchase.card_type,\n            purchase.credential_key,\n            CAST(null AS string) AS encrypted_card_number,\n            CAST(null AS timestamp) AS estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            CAST(null AS integer) AS installment,\n            purchase.issuer_name,\n            purchase.masked_card_number,\n            purchase.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            purchase.scraping_type,\n            CAST(null AS integer) AS status,\n            purchase.transacted_at,\n            CAST(null AS timestamp) AS approval_canceled_at,\n            purchase.vat_fee,\n            purchase.created_at,\n            purchase.updated_at,\n            date_format(purchase.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is null\n\n  UNION ALL\n\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            purchase.base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            purchase.vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is not null AND purchase.business_id is not null\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    DISTINCT\n            acquirer_name,\n            amount,\n            approval_canceled_at,\n            approval_seq,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            encrypted_card_number,\n            estimated_paid_at,\n            etc_fee,\n            fee,\n            installment,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_cancel_seq,\n            purchase_canceled_at,\n            purchase_delayed,\n            purchase_seq,\n            purchased_at,\n            scraping_type,\n            status,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\nFROM        (\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            CAST(null AS integer) AS base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            CAST(null AS integer) AS etc_fee,\n            approval.fee AS fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            CAST(null AS timestamp) AS paid_at,\n            approval.payment AS payment,\n            CAST(null AS integer) AS point_fee,\n            CAST(null AS integer) AS purchase_cancel_seq,\n            CAST(null AS timestamp) AS purchase_canceled_at,\n            CAST(null AS boolean) AS purchase_delayed,\n            CAST(null AS integer) AS purchase_seq,\n            CAST(null AS timestamp) AS purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            approval.vat_fee AS vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     purchase.business_id is null\n\n  UNION ALL\n\n  SELECT    purchase.acquirer_name,\n            purchase.amount,\n            CAST(null AS integer) AS approval_seq,\n            purchase.authorization_number,\n            purchase.base_fee,\n            purchase.business_id,\n            purchase.card_number,\n            purchase.card_type,\n            purchase.credential_key,\n            CAST(null AS string) AS encrypted_card_number,\n            CAST(null AS timestamp) AS estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            CAST(null AS integer) AS installment,\n            purchase.issuer_name,\n            purchase.masked_card_number,\n            purchase.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            purchase.scraping_type,\n            CAST(null AS integer) AS status,\n            purchase.transacted_at,\n            CAST(null AS timestamp) AS approval_canceled_at,\n            purchase.vat_fee,\n            purchase.created_at,\n            purchase.updated_at,\n            date_format(purchase.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is null\n\n  UNION ALL\n\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            purchase.base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            purchase.vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is not null AND purchase.business_id is not null\n)""}, 'role': 'process', 'type': 'sql'}]"
430,process:::current_transactions:::build_matched_tables,process:::merged_transactions:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    DISTINCT\n            acquirer_name,\n            amount,\n            approval_canceled_at,\n            approval_seq,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            encrypted_card_number,\n            estimated_paid_at,\n            etc_fee,\n            fee,\n            installment,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_cancel_seq,\n            purchase_canceled_at,\n            purchase_delayed,\n            purchase_seq,\n            purchased_at,\n            scraping_type,\n            status,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\nFROM        (\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            CAST(null AS integer) AS base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            CAST(null AS integer) AS etc_fee,\n            approval.fee AS fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            CAST(null AS timestamp) AS paid_at,\n            approval.payment AS payment,\n            CAST(null AS integer) AS point_fee,\n            CAST(null AS integer) AS purchase_cancel_seq,\n            CAST(null AS timestamp) AS purchase_canceled_at,\n            CAST(null AS boolean) AS purchase_delayed,\n            CAST(null AS integer) AS purchase_seq,\n            CAST(null AS timestamp) AS purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            approval.vat_fee AS vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     purchase.business_id is null\n\n  UNION ALL\n\n  SELECT    purchase.acquirer_name,\n            purchase.amount,\n            CAST(null AS integer) AS approval_seq,\n            purchase.authorization_number,\n            purchase.base_fee,\n            purchase.business_id,\n            purchase.card_number,\n            purchase.card_type,\n            purchase.credential_key,\n            CAST(null AS string) AS encrypted_card_number,\n            CAST(null AS timestamp) AS estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            CAST(null AS integer) AS installment,\n            purchase.issuer_name,\n            purchase.masked_card_number,\n            purchase.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            purchase.scraping_type,\n            CAST(null AS integer) AS status,\n            purchase.transacted_at,\n            CAST(null AS timestamp) AS approval_canceled_at,\n            purchase.vat_fee,\n            purchase.created_at,\n            purchase.updated_at,\n            date_format(purchase.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is null\n\n  UNION ALL\n\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            purchase.base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            purchase.vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is not null AND purchase.business_id is not null\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    DISTINCT\n            acquirer_name,\n            amount,\n            approval_canceled_at,\n            approval_seq,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            encrypted_card_number,\n            estimated_paid_at,\n            etc_fee,\n            fee,\n            installment,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_cancel_seq,\n            purchase_canceled_at,\n            purchase_delayed,\n            purchase_seq,\n            purchased_at,\n            scraping_type,\n            status,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\nFROM        (\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            CAST(null AS integer) AS base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            CAST(null AS integer) AS etc_fee,\n            approval.fee AS fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            CAST(null AS timestamp) AS paid_at,\n            approval.payment AS payment,\n            CAST(null AS integer) AS point_fee,\n            CAST(null AS integer) AS purchase_cancel_seq,\n            CAST(null AS timestamp) AS purchase_canceled_at,\n            CAST(null AS boolean) AS purchase_delayed,\n            CAST(null AS integer) AS purchase_seq,\n            CAST(null AS timestamp) AS purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            approval.vat_fee AS vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     purchase.business_id is null\n\n  UNION ALL\n\n  SELECT    purchase.acquirer_name,\n            purchase.amount,\n            CAST(null AS integer) AS approval_seq,\n            purchase.authorization_number,\n            purchase.base_fee,\n            purchase.business_id,\n            purchase.card_number,\n            purchase.card_type,\n            purchase.credential_key,\n            CAST(null AS string) AS encrypted_card_number,\n            CAST(null AS timestamp) AS estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            CAST(null AS integer) AS installment,\n            purchase.issuer_name,\n            purchase.masked_card_number,\n            purchase.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            purchase.scraping_type,\n            CAST(null AS integer) AS status,\n            purchase.transacted_at,\n            CAST(null AS timestamp) AS approval_canceled_at,\n            purchase.vat_fee,\n            purchase.created_at,\n            purchase.updated_at,\n            date_format(purchase.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is null\n\n  UNION ALL\n\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            purchase.base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            purchase.vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is not null AND purchase.business_id is not null\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    struct(prev.*) AS prev,\n          struct(current.*) AS current\nFROM      prev_transactions prev FULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq) AND\n        CAST(COALESCE(prev.purchased_at, prev.transacted_at) AS DATE) = CAST(COALESCE(current.purchased_at, current.transacted_at) AS DATE)\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    struct(prev.*) AS prev,\n          struct(current.*) AS current\nFROM      prev_transactions prev FULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq)\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
431,process:::merged_transactions:::build_matched_tables,process:::transactions_updated:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    struct(prev.*) AS prev,\n          struct(current.*) AS current\nFROM      prev_transactions prev FULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq) AND\n        CAST(COALESCE(prev.purchased_at, prev.transacted_at) AS DATE) = CAST(COALESCE(current.purchased_at, current.transacted_at) AS DATE)\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    struct(prev.*) AS prev,\n          struct(current.*) AS current\nFROM      prev_transactions prev FULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq)\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    current.acquirer_name AS acquirer_name,\n          current.amount AS amount,\n          current.authorization_number AS authorization_number,\n          CAST(current.approval_seq AS integer) AS approval_seq,\n          current.base_fee AS base_fee,\n          current.business_id AS business_id,\n          current.card_number AS card_number,\n          current.card_type AS card_type,\n          current.credential_key AS credential_key,\n          current.encrypted_card_number AS encrypted_card_number,\n          current.estimated_paid_at AS estimated_paid_at,\n          current.etc_fee AS etc_fee,\n          current.fee AS fee,\n          current.installment AS installment,\n          current.issuer_name AS issuer_name,\n          current.masked_card_number AS masked_card_number,\n          current.merchant_number AS merchant_number,\n          current.paid_at AS paid_at,\n          current.payment AS payment,\n          current.point_fee AS point_fee,\n          CAST(current.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n          current.purchase_canceled_at AS purchase_canceled_at,\n          current.purchase_delayed AS purchase_delayed,\n          CAST(current.purchase_seq AS integer) AS purchase_seq,\n          current.purchased_at AS purchased_at,\n          current.scraping_type AS scraping_type,\n          current.status AS status,\n          current.transacted_at AS transacted_at,\n          current.approval_canceled_at AS approval_canceled_at,\n          current.vat_fee AS vat_fee,\n          current.created_at AS created_at,\n          current.updated_at AS updated_at,\n          current.created_at_date AS created_at_date\nFROM      merged_transactions\nWHERE     prev.business_id is null\n\nUNION ALL\n\nSELECT    current.acquirer_name,\n          current.amount,\n          current.authorization_number,\n          CAST(COALESCE(current.approval_seq, prev.approval_seq) AS integer) AS approval_seq,\n          COALESCE(current.base_fee, prev.base_fee) AS base_fee,\n          current.business_id,\n          current.card_number,\n          COALESCE(current.card_type, prev.card_type) AS card_type,\n          COALESCE(current.credential_key, prev.credential_key) AS credential_key,\n          COALESCE(current.encrypted_card_number, prev.encrypted_card_number) AS encrypted_card_number,\n          COALESCE(current.estimated_paid_at, prev.estimated_paid_at) AS estimated_paid_at,\n          COALESCE(current.etc_fee, prev.etc_fee) AS etc_fee,\n          COALESCE(current.fee, prev.fee) AS fee,\n          COALESCE(current.installment, prev.installment) AS installment,\n          COALESCE(current.issuer_name, prev.issuer_name) AS issuer_name,\n          COALESCE(current.masked_card_number, prev.masked_card_number) AS masked_card_number,\n          COALESCE(current.merchant_number, prev.merchant_number) AS merchant_number,\n          COALESCE(current.paid_at, prev.paid_at) AS paid_at,\n          COALESCE(current.payment, prev.payment) AS payment,\n          COALESCE(current.point_fee, prev.point_fee) AS point_fee,\n          CAST(COALESCE(current.purchase_cancel_seq, prev.purchase_cancel_seq) AS integer) AS purchase_cancel_seq,\n          COALESCE(current.purchase_canceled_at, prev.purchase_canceled_at) AS purchase_canceled_at,\n          COALESCE(current.purchase_delayed, prev.purchase_delayed) AS purchase_delayed,\n          CAST(COALESCE(current.purchase_seq, prev.purchase_seq) AS integer) AS purchase_seq,\n          COALESCE(current.purchased_at, prev.purchased_at) AS purchased_at,\n          COALESCE(current.scraping_type, prev.scraping_type) AS scraping_type,\n          COALESCE(current.status, prev.status) AS status,\n          IF (current.transacted_at > prev.transacted_at, current.transacted_at, prev.transacted_at) AS transacted_at,\n          COALESCE(current.approval_canceled_at, prev.approval_canceled_at) AS approval_canceled_at,\n          COALESCE(current.vat_fee, prev.vat_fee) AS vat_fee,\n          IF (current.created_at < prev.created_at, current.created_at, prev.created_at) AS created_at,\n          IF (current.updated_at > prev.updated_at, current.updated_at, prev.updated_at) AS updated_at,\n          IF (current.created_at_date < prev.created_at_date, current.created_at_date, prev.created_at_date) AS created_at_date\nFROM      merged_transactions\nWHERE     prev.business_id is not null AND current.business_id is not null'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    current.acquirer_name AS acquirer_name,\n          current.amount AS amount,\n          current.authorization_number AS authorization_number,\n          CAST(current.approval_seq AS integer) AS approval_seq,\n          current.base_fee AS base_fee,\n          current.business_id AS business_id,\n          current.card_number AS card_number,\n          current.card_type AS card_type,\n          current.credential_key AS credential_key,\n          current.encrypted_card_number AS encrypted_card_number,\n          current.estimated_paid_at AS estimated_paid_at,\n          current.etc_fee AS etc_fee,\n          current.fee AS fee,\n          current.installment AS installment,\n          current.issuer_name AS issuer_name,\n          current.masked_card_number AS masked_card_number,\n          current.merchant_number AS merchant_number,\n          current.paid_at AS paid_at,\n          current.payment AS payment,\n          current.point_fee AS point_fee,\n          CAST(current.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n          current.purchase_canceled_at AS purchase_canceled_at,\n          current.purchase_delayed AS purchase_delayed,\n          CAST(current.purchase_seq AS integer) AS purchase_seq,\n          current.purchased_at AS purchased_at,\n          current.scraping_type AS scraping_type,\n          current.status AS status,\n          current.transacted_at AS transacted_at,\n          current.approval_canceled_at AS approval_canceled_at,\n          current.vat_fee AS vat_fee,\n          current.created_at AS created_at,\n          current.updated_at AS updated_at,\n          current.created_at_date AS created_at_date\nFROM      merged_transactions\nWHERE     prev.business_id is null\n\nUNION ALL\n\nSELECT    current.acquirer_name,\n          current.amount,\n          current.authorization_number,\n          CAST(COALESCE(current.approval_seq, prev.approval_seq) AS integer) AS approval_seq,\n          COALESCE(current.base_fee, prev.base_fee) AS base_fee,\n          current.business_id,\n          current.card_number,\n          COALESCE(current.card_type, prev.card_type) AS card_type,\n          COALESCE(current.credential_key, prev.credential_key) AS credential_key,\n          COALESCE(current.encrypted_card_number, prev.encrypted_card_number) AS encrypted_card_number,\n          COALESCE(current.estimated_paid_at, prev.estimated_paid_at) AS estimated_paid_at,\n          COALESCE(current.etc_fee, prev.etc_fee) AS etc_fee,\n          COALESCE(current.fee, prev.fee) AS fee,\n          COALESCE(current.installment, prev.installment) AS installment,\n          COALESCE(current.issuer_name, prev.issuer_name) AS issuer_name,\n          COALESCE(current.masked_card_number, prev.masked_card_number) AS masked_card_number,\n          COALESCE(current.merchant_number, prev.merchant_number) AS merchant_number,\n          COALESCE(current.paid_at, prev.paid_at) AS paid_at,\n          COALESCE(current.payment, prev.payment) AS payment,\n          COALESCE(current.point_fee, prev.point_fee) AS point_fee,\n          CAST(COALESCE(current.purchase_cancel_seq, prev.purchase_cancel_seq) AS integer) AS purchase_cancel_seq,\n          COALESCE(current.purchase_canceled_at, prev.purchase_canceled_at) AS purchase_canceled_at,\n          COALESCE(current.purchase_delayed, prev.purchase_delayed) AS purchase_delayed,\n          CAST(COALESCE(current.purchase_seq, prev.purchase_seq) AS integer) AS purchase_seq,\n          COALESCE(current.purchased_at, prev.purchased_at) AS purchased_at,\n          COALESCE(current.scraping_type, prev.scraping_type) AS scraping_type,\n          COALESCE(current.status, prev.status) AS status,\n          IF (current.transacted_at > prev.transacted_at, current.transacted_at, prev.transacted_at) AS transacted_at,\n          COALESCE(current.approval_canceled_at, prev.approval_canceled_at) AS approval_canceled_at,\n          COALESCE(current.vat_fee, prev.vat_fee) AS vat_fee,\n          IF (current.created_at < prev.created_at, current.created_at, prev.created_at) AS created_at,\n          IF (current.updated_at > prev.updated_at, current.updated_at, prev.updated_at) AS updated_at,\n          IF (current.created_at_date < prev.created_at_date, current.created_at_date, prev.created_at_date) AS created_at_date\nFROM      merged_transactions\nWHERE     prev.business_id is not null AND current.business_id is not null'}, 'role': 'process', 'type': 'sql'}]"
432,process:::merged_transactions:::build_matched_tables,process:::transactions_not_updated:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT    struct(prev.*) AS prev,\n          struct(current.*) AS current\nFROM      prev_transactions prev FULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq) AND\n        CAST(COALESCE(prev.purchased_at, prev.transacted_at) AS DATE) = CAST(COALESCE(current.purchased_at, current.transacted_at) AS DATE)\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT    struct(prev.*) AS prev,\n          struct(current.*) AS current\nFROM      prev_transactions prev FULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq)\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    prev.acquirer_name AS acquirer_name,\n          prev.amount AS amount,\n          prev.authorization_number AS authorization_number,\n          CAST(prev.approval_seq AS integer) AS approval_seq,\n          prev.base_fee AS base_fee,\n          prev.business_id AS business_id,\n          prev.card_number AS card_number,\n          prev.card_type AS card_type,\n          prev.credential_key AS credential_key,\n          prev.encrypted_card_number AS encrypted_card_number,\n          prev.estimated_paid_at AS estimated_paid_at,\n          prev.etc_fee AS etc_fee,\n          prev.fee AS fee,\n          prev.installment AS installment,\n          prev.issuer_name AS issuer_name,\n          prev.masked_card_number AS masked_card_number,\n          prev.merchant_number AS merchant_number,\n          prev.paid_at AS paid_at,\n          prev.payment AS payment,\n          prev.point_fee AS point_fee,\n          CAST(prev.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n          prev.purchase_canceled_at AS purchase_canceled_at,\n          prev.purchase_delayed AS purchase_delayed,\n          CAST(prev.purchase_seq AS integer) AS purchase_seq,\n          prev.purchased_at AS purchased_at,\n          prev.scraping_type AS scraping_type,\n          prev.status AS status,\n          prev.transacted_at AS transacted_at,\n          prev.approval_canceled_at AS approval_canceled_at,\n          prev.vat_fee AS vat_fee,\n          prev.created_at AS created_at,\n          prev.updated_at AS updated_at,\n          prev.created_at_date AS created_at_date\nFROM      merged_transactions\nWHERE     current.business_id is null'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    prev.acquirer_name AS acquirer_name,\n          prev.amount AS amount,\n          prev.authorization_number AS authorization_number,\n          CAST(prev.approval_seq AS integer) AS approval_seq,\n          prev.base_fee AS base_fee,\n          prev.business_id AS business_id,\n          prev.card_number AS card_number,\n          prev.card_type AS card_type,\n          prev.credential_key AS credential_key,\n          prev.encrypted_card_number AS encrypted_card_number,\n          prev.estimated_paid_at AS estimated_paid_at,\n          prev.etc_fee AS etc_fee,\n          prev.fee AS fee,\n          prev.installment AS installment,\n          prev.issuer_name AS issuer_name,\n          prev.masked_card_number AS masked_card_number,\n          prev.merchant_number AS merchant_number,\n          prev.paid_at AS paid_at,\n          prev.payment AS payment,\n          prev.point_fee AS point_fee,\n          CAST(prev.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n          prev.purchase_canceled_at AS purchase_canceled_at,\n          prev.purchase_delayed AS purchase_delayed,\n          CAST(prev.purchase_seq AS integer) AS purchase_seq,\n          prev.purchased_at AS purchased_at,\n          prev.scraping_type AS scraping_type,\n          prev.status AS status,\n          prev.transacted_at AS transacted_at,\n          prev.approval_canceled_at AS approval_canceled_at,\n          prev.vat_fee AS vat_fee,\n          prev.created_at AS created_at,\n          prev.updated_at AS updated_at,\n          prev.created_at_date AS created_at_date\nFROM      merged_transactions\nWHERE     current.business_id is null'}, 'role': 'process', 'type': 'sql'}]"
433,process:::transactions_updated:::build_matched_tables,process:::transactions_table:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    current.acquirer_name AS acquirer_name,\n          current.amount AS amount,\n          current.authorization_number AS authorization_number,\n          CAST(current.approval_seq AS integer) AS approval_seq,\n          current.base_fee AS base_fee,\n          current.business_id AS business_id,\n          current.card_number AS card_number,\n          current.card_type AS card_type,\n          current.credential_key AS credential_key,\n          current.encrypted_card_number AS encrypted_card_number,\n          current.estimated_paid_at AS estimated_paid_at,\n          current.etc_fee AS etc_fee,\n          current.fee AS fee,\n          current.installment AS installment,\n          current.issuer_name AS issuer_name,\n          current.masked_card_number AS masked_card_number,\n          current.merchant_number AS merchant_number,\n          current.paid_at AS paid_at,\n          current.payment AS payment,\n          current.point_fee AS point_fee,\n          CAST(current.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n          current.purchase_canceled_at AS purchase_canceled_at,\n          current.purchase_delayed AS purchase_delayed,\n          CAST(current.purchase_seq AS integer) AS purchase_seq,\n          current.purchased_at AS purchased_at,\n          current.scraping_type AS scraping_type,\n          current.status AS status,\n          current.transacted_at AS transacted_at,\n          current.approval_canceled_at AS approval_canceled_at,\n          current.vat_fee AS vat_fee,\n          current.created_at AS created_at,\n          current.updated_at AS updated_at,\n          current.created_at_date AS created_at_date\nFROM      merged_transactions\nWHERE     prev.business_id is null\n\nUNION ALL\n\nSELECT    current.acquirer_name,\n          current.amount,\n          current.authorization_number,\n          CAST(COALESCE(current.approval_seq, prev.approval_seq) AS integer) AS approval_seq,\n          COALESCE(current.base_fee, prev.base_fee) AS base_fee,\n          current.business_id,\n          current.card_number,\n          COALESCE(current.card_type, prev.card_type) AS card_type,\n          COALESCE(current.credential_key, prev.credential_key) AS credential_key,\n          COALESCE(current.encrypted_card_number, prev.encrypted_card_number) AS encrypted_card_number,\n          COALESCE(current.estimated_paid_at, prev.estimated_paid_at) AS estimated_paid_at,\n          COALESCE(current.etc_fee, prev.etc_fee) AS etc_fee,\n          COALESCE(current.fee, prev.fee) AS fee,\n          COALESCE(current.installment, prev.installment) AS installment,\n          COALESCE(current.issuer_name, prev.issuer_name) AS issuer_name,\n          COALESCE(current.masked_card_number, prev.masked_card_number) AS masked_card_number,\n          COALESCE(current.merchant_number, prev.merchant_number) AS merchant_number,\n          COALESCE(current.paid_at, prev.paid_at) AS paid_at,\n          COALESCE(current.payment, prev.payment) AS payment,\n          COALESCE(current.point_fee, prev.point_fee) AS point_fee,\n          CAST(COALESCE(current.purchase_cancel_seq, prev.purchase_cancel_seq) AS integer) AS purchase_cancel_seq,\n          COALESCE(current.purchase_canceled_at, prev.purchase_canceled_at) AS purchase_canceled_at,\n          COALESCE(current.purchase_delayed, prev.purchase_delayed) AS purchase_delayed,\n          CAST(COALESCE(current.purchase_seq, prev.purchase_seq) AS integer) AS purchase_seq,\n          COALESCE(current.purchased_at, prev.purchased_at) AS purchased_at,\n          COALESCE(current.scraping_type, prev.scraping_type) AS scraping_type,\n          COALESCE(current.status, prev.status) AS status,\n          IF (current.transacted_at > prev.transacted_at, current.transacted_at, prev.transacted_at) AS transacted_at,\n          COALESCE(current.approval_canceled_at, prev.approval_canceled_at) AS approval_canceled_at,\n          COALESCE(current.vat_fee, prev.vat_fee) AS vat_fee,\n          IF (current.created_at < prev.created_at, current.created_at, prev.created_at) AS created_at,\n          IF (current.updated_at > prev.updated_at, current.updated_at, prev.updated_at) AS updated_at,\n          IF (current.created_at_date < prev.created_at_date, current.created_at_date, prev.created_at_date) AS created_at_date\nFROM      merged_transactions\nWHERE     prev.business_id is not null AND current.business_id is not null'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    current.acquirer_name AS acquirer_name,\n          current.amount AS amount,\n          current.authorization_number AS authorization_number,\n          CAST(current.approval_seq AS integer) AS approval_seq,\n          current.base_fee AS base_fee,\n          current.business_id AS business_id,\n          current.card_number AS card_number,\n          current.card_type AS card_type,\n          current.credential_key AS credential_key,\n          current.encrypted_card_number AS encrypted_card_number,\n          current.estimated_paid_at AS estimated_paid_at,\n          current.etc_fee AS etc_fee,\n          current.fee AS fee,\n          current.installment AS installment,\n          current.issuer_name AS issuer_name,\n          current.masked_card_number AS masked_card_number,\n          current.merchant_number AS merchant_number,\n          current.paid_at AS paid_at,\n          current.payment AS payment,\n          current.point_fee AS point_fee,\n          CAST(current.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n          current.purchase_canceled_at AS purchase_canceled_at,\n          current.purchase_delayed AS purchase_delayed,\n          CAST(current.purchase_seq AS integer) AS purchase_seq,\n          current.purchased_at AS purchased_at,\n          current.scraping_type AS scraping_type,\n          current.status AS status,\n          current.transacted_at AS transacted_at,\n          current.approval_canceled_at AS approval_canceled_at,\n          current.vat_fee AS vat_fee,\n          current.created_at AS created_at,\n          current.updated_at AS updated_at,\n          current.created_at_date AS created_at_date\nFROM      merged_transactions\nWHERE     prev.business_id is null\n\nUNION ALL\n\nSELECT    current.acquirer_name,\n          current.amount,\n          current.authorization_number,\n          CAST(COALESCE(current.approval_seq, prev.approval_seq) AS integer) AS approval_seq,\n          COALESCE(current.base_fee, prev.base_fee) AS base_fee,\n          current.business_id,\n          current.card_number,\n          COALESCE(current.card_type, prev.card_type) AS card_type,\n          COALESCE(current.credential_key, prev.credential_key) AS credential_key,\n          COALESCE(current.encrypted_card_number, prev.encrypted_card_number) AS encrypted_card_number,\n          COALESCE(current.estimated_paid_at, prev.estimated_paid_at) AS estimated_paid_at,\n          COALESCE(current.etc_fee, prev.etc_fee) AS etc_fee,\n          COALESCE(current.fee, prev.fee) AS fee,\n          COALESCE(current.installment, prev.installment) AS installment,\n          COALESCE(current.issuer_name, prev.issuer_name) AS issuer_name,\n          COALESCE(current.masked_card_number, prev.masked_card_number) AS masked_card_number,\n          COALESCE(current.merchant_number, prev.merchant_number) AS merchant_number,\n          COALESCE(current.paid_at, prev.paid_at) AS paid_at,\n          COALESCE(current.payment, prev.payment) AS payment,\n          COALESCE(current.point_fee, prev.point_fee) AS point_fee,\n          CAST(COALESCE(current.purchase_cancel_seq, prev.purchase_cancel_seq) AS integer) AS purchase_cancel_seq,\n          COALESCE(current.purchase_canceled_at, prev.purchase_canceled_at) AS purchase_canceled_at,\n          COALESCE(current.purchase_delayed, prev.purchase_delayed) AS purchase_delayed,\n          CAST(COALESCE(current.purchase_seq, prev.purchase_seq) AS integer) AS purchase_seq,\n          COALESCE(current.purchased_at, prev.purchased_at) AS purchased_at,\n          COALESCE(current.scraping_type, prev.scraping_type) AS scraping_type,\n          COALESCE(current.status, prev.status) AS status,\n          IF (current.transacted_at > prev.transacted_at, current.transacted_at, prev.transacted_at) AS transacted_at,\n          COALESCE(current.approval_canceled_at, prev.approval_canceled_at) AS approval_canceled_at,\n          COALESCE(current.vat_fee, prev.vat_fee) AS vat_fee,\n          IF (current.created_at < prev.created_at, current.created_at, prev.created_at) AS created_at,\n          IF (current.updated_at > prev.updated_at, current.updated_at, prev.updated_at) AS updated_at,\n          IF (current.created_at_date < prev.created_at_date, current.created_at_date, prev.created_at_date) AS created_at_date\nFROM      merged_transactions\nWHERE     prev.business_id is not null AND current.business_id is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT  DISTINCT\n         acquirer_name,\n         amount,\n         approval_canceled_at,\n         approval_seq,\n         authorization_number,\n         base_fee,\n         business_id,\n         card_number,\n         card_type,\n         credential_key,\n         encrypted_card_number,\n         estimated_paid_at,\n         etc_fee,\n         fee,\n         installment,\n         issuer_name,\n         masked_card_number,\n         merchant_number,\n         paid_at,\n         payment,\n         point_fee,\n         purchase_cancel_seq,\n         purchase_canceled_at,\n         purchase_delayed,\n         purchase_seq,\n         purchased_at,\n         scraping_type,\n         status,\n         transacted_at,\n         vat_fee,\n         created_at,\n         updated_at,\n         created_at_date\nFROM     (\n  SELECT *\n  FROM   transactions_updated\n\n  UNION ALL\n\n  SELECT *\n  FROM   transactions_not_updated\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT  DISTINCT\n         acquirer_name,\n         amount,\n         approval_canceled_at,\n         approval_seq,\n         authorization_number,\n         base_fee,\n         business_id,\n         card_number,\n         card_type,\n         credential_key,\n         encrypted_card_number,\n         estimated_paid_at,\n         etc_fee,\n         fee,\n         installment,\n         issuer_name,\n         masked_card_number,\n         merchant_number,\n         paid_at,\n         payment,\n         point_fee,\n         purchase_cancel_seq,\n         purchase_canceled_at,\n         purchase_delayed,\n         purchase_seq,\n         purchased_at,\n         scraping_type,\n         status,\n         transacted_at,\n         vat_fee,\n         created_at,\n         updated_at,\n         created_at_date\nFROM     (\n  SELECT *\n  FROM   transactions_updated\n\n  UNION ALL\n\n  SELECT *\n  FROM   transactions_not_updated\n)'}, 'role': 'process', 'type': 'sql'}]"
434,process:::transactions_not_updated:::build_matched_tables,process:::transactions_table:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT    prev.acquirer_name AS acquirer_name,\n          prev.amount AS amount,\n          prev.authorization_number AS authorization_number,\n          CAST(prev.approval_seq AS integer) AS approval_seq,\n          prev.base_fee AS base_fee,\n          prev.business_id AS business_id,\n          prev.card_number AS card_number,\n          prev.card_type AS card_type,\n          prev.credential_key AS credential_key,\n          prev.encrypted_card_number AS encrypted_card_number,\n          prev.estimated_paid_at AS estimated_paid_at,\n          prev.etc_fee AS etc_fee,\n          prev.fee AS fee,\n          prev.installment AS installment,\n          prev.issuer_name AS issuer_name,\n          prev.masked_card_number AS masked_card_number,\n          prev.merchant_number AS merchant_number,\n          prev.paid_at AS paid_at,\n          prev.payment AS payment,\n          prev.point_fee AS point_fee,\n          CAST(prev.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n          prev.purchase_canceled_at AS purchase_canceled_at,\n          prev.purchase_delayed AS purchase_delayed,\n          CAST(prev.purchase_seq AS integer) AS purchase_seq,\n          prev.purchased_at AS purchased_at,\n          prev.scraping_type AS scraping_type,\n          prev.status AS status,\n          prev.transacted_at AS transacted_at,\n          prev.approval_canceled_at AS approval_canceled_at,\n          prev.vat_fee AS vat_fee,\n          prev.created_at AS created_at,\n          prev.updated_at AS updated_at,\n          prev.created_at_date AS created_at_date\nFROM      merged_transactions\nWHERE     current.business_id is null'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT    prev.acquirer_name AS acquirer_name,\n          prev.amount AS amount,\n          prev.authorization_number AS authorization_number,\n          CAST(prev.approval_seq AS integer) AS approval_seq,\n          prev.base_fee AS base_fee,\n          prev.business_id AS business_id,\n          prev.card_number AS card_number,\n          prev.card_type AS card_type,\n          prev.credential_key AS credential_key,\n          prev.encrypted_card_number AS encrypted_card_number,\n          prev.estimated_paid_at AS estimated_paid_at,\n          prev.etc_fee AS etc_fee,\n          prev.fee AS fee,\n          prev.installment AS installment,\n          prev.issuer_name AS issuer_name,\n          prev.masked_card_number AS masked_card_number,\n          prev.merchant_number AS merchant_number,\n          prev.paid_at AS paid_at,\n          prev.payment AS payment,\n          prev.point_fee AS point_fee,\n          CAST(prev.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n          prev.purchase_canceled_at AS purchase_canceled_at,\n          prev.purchase_delayed AS purchase_delayed,\n          CAST(prev.purchase_seq AS integer) AS purchase_seq,\n          prev.purchased_at AS purchased_at,\n          prev.scraping_type AS scraping_type,\n          prev.status AS status,\n          prev.transacted_at AS transacted_at,\n          prev.approval_canceled_at AS approval_canceled_at,\n          prev.vat_fee AS vat_fee,\n          prev.created_at AS created_at,\n          prev.updated_at AS updated_at,\n          prev.created_at_date AS created_at_date\nFROM      merged_transactions\nWHERE     current.business_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT  DISTINCT\n         acquirer_name,\n         amount,\n         approval_canceled_at,\n         approval_seq,\n         authorization_number,\n         base_fee,\n         business_id,\n         card_number,\n         card_type,\n         credential_key,\n         encrypted_card_number,\n         estimated_paid_at,\n         etc_fee,\n         fee,\n         installment,\n         issuer_name,\n         masked_card_number,\n         merchant_number,\n         paid_at,\n         payment,\n         point_fee,\n         purchase_cancel_seq,\n         purchase_canceled_at,\n         purchase_delayed,\n         purchase_seq,\n         purchased_at,\n         scraping_type,\n         status,\n         transacted_at,\n         vat_fee,\n         created_at,\n         updated_at,\n         created_at_date\nFROM     (\n  SELECT *\n  FROM   transactions_updated\n\n  UNION ALL\n\n  SELECT *\n  FROM   transactions_not_updated\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT  DISTINCT\n         acquirer_name,\n         amount,\n         approval_canceled_at,\n         approval_seq,\n         authorization_number,\n         base_fee,\n         business_id,\n         card_number,\n         card_type,\n         credential_key,\n         encrypted_card_number,\n         estimated_paid_at,\n         etc_fee,\n         fee,\n         installment,\n         issuer_name,\n         masked_card_number,\n         merchant_number,\n         paid_at,\n         payment,\n         point_fee,\n         purchase_cancel_seq,\n         purchase_canceled_at,\n         purchase_delayed,\n         purchase_seq,\n         purchased_at,\n         scraping_type,\n         status,\n         transacted_at,\n         vat_fee,\n         created_at,\n         updated_at,\n         created_at_date\nFROM     (\n  SELECT *\n  FROM   transactions_updated\n\n  UNION ALL\n\n  SELECT *\n  FROM   transactions_not_updated\n)'}, 'role': 'process', 'type': 'sql'}]"
435,process:::transactions_table:::build_matched_tables,s3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'sql': 'SELECT  DISTINCT\n         acquirer_name,\n         amount,\n         approval_canceled_at,\n         approval_seq,\n         authorization_number,\n         base_fee,\n         business_id,\n         card_number,\n         card_type,\n         credential_key,\n         encrypted_card_number,\n         estimated_paid_at,\n         etc_fee,\n         fee,\n         installment,\n         issuer_name,\n         masked_card_number,\n         merchant_number,\n         paid_at,\n         payment,\n         point_fee,\n         purchase_cancel_seq,\n         purchase_canceled_at,\n         purchase_delayed,\n         purchase_seq,\n         purchased_at,\n         scraping_type,\n         status,\n         transacted_at,\n         vat_fee,\n         created_at,\n         updated_at,\n         created_at_date\nFROM     (\n  SELECT *\n  FROM   transactions_updated\n\n  UNION ALL\n\n  SELECT *\n  FROM   transactions_not_updated\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': 'SELECT  DISTINCT\n         acquirer_name,\n         amount,\n         approval_canceled_at,\n         approval_seq,\n         authorization_number,\n         base_fee,\n         business_id,\n         card_number,\n         card_type,\n         credential_key,\n         encrypted_card_number,\n         estimated_paid_at,\n         etc_fee,\n         fee,\n         installment,\n         issuer_name,\n         masked_card_number,\n         merchant_number,\n         paid_at,\n         payment,\n         point_fee,\n         purchase_cancel_seq,\n         purchase_canceled_at,\n         purchase_delayed,\n         purchase_seq,\n         purchased_at,\n         scraping_type,\n         status,\n         transacted_at,\n         vat_fee,\n         created_at,\n         updated_at,\n         created_at_date\nFROM     (\n  SELECT *\n  FROM   transactions_updated\n\n  UNION ALL\n\n  SELECT *\n  FROM   transactions_not_updated\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'staging_build_matched_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'match_to_transactions.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]"
436,s3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions,process:::transactions:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_matched_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'staging_build_matched_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'match_to_transactions.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-28', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-28', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-01', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-01', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}]"
437,s3://kcd-de-production/raw/etl/pos/pos_bills_v2,process:::pos_sales_source_v2:::pos_sales_amount_daily,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_sales_amount_daily_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_bills_v2', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_bills_v2.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_bills_v2', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'pos_sales_amount_daily_v2.json', 'options': {'sql': '    SELECT\n        *,\n        date_format(paid_at, ""yyyy-MM-dd"") AS date_id\n    FROM\n        pos_sales_source_raw_v2\n    WHERE\n        created_at_date >= \'2021-01-25\''}, 'role': 'process', 'type': 'sql'}]"
438,process:::pos_sales_source_v2:::pos_sales_amount_daily,process:::pos_sales_daily_process_v2:::pos_sales_amount_daily,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_sales_amount_daily_v2.json', 'options': {'sql': '    SELECT\n        *,\n        date_format(paid_at, ""yyyy-MM-dd"") AS date_id\n    FROM\n        pos_sales_source_raw_v2\n    WHERE\n        created_at_date >= \'2021-01-25\''}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_sales_amount_daily_v2.json', 'options': {'sql': ""   SELECT * FROM\n     (SELECT\n         uid,\n         uid_type,\n         date_id,\n         sum(card_amount) AS total_amount,\n         sum(case when card_amount > 0 then 1 else -1 end) AS total_count,\n         '카드' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source_v2\n         WHERE\n             card_amount != 0\n         )\n     GROUP BY\n         uid,\n         uid_type,\n         date_id\n\n     UNION ALL\n\n     SELECT\n         uid,\n         uid_type,\n         date_id,\n         sum(cash_amount) AS total_amount,\n         sum(case when cash_amount > 0 then 1 else -1 end) AS total_count,\n         '현금' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source_v2\n         WHERE\n             cash_amount != 0\n         )\n     GROUP BY\n         uid,\n         uid_type,\n         date_id\n\n     UNION ALL\n\n     SELECT\n         uid,\n         uid_type,\n         date_id,\n         sum(total_amount) - (sum(cash_amount) + sum(card_amount)) AS total_amount,\n         sum(count_src) AS total_count,\n         '기타' as paid_type\n     FROM\n         (\n         SELECT\n             *,\n             CASE WHEN total_amount - (cash_amount + card_amount) > 0 THEN 1 ELSE -1 END AS count_src\n         FROM\n             pos_sales_source_v2\n         WHERE\n             total_amount != (cash_amount + card_amount) AND total_amount != 0\n         )\n     GROUP BY\n         uid,\n         uid_type,\n         date_id\n     )""}, 'role': 'process', 'type': 'sql'}]"
439,process:::pos_sales_daily_process_v2:::pos_sales_amount_daily,process:::pos_sales_daily_process_jdbc_v2:::pos_sales_amount_daily,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_sales_amount_daily_v2.json', 'options': {'sql': ""   SELECT * FROM\n     (SELECT\n         uid,\n         uid_type,\n         date_id,\n         sum(card_amount) AS total_amount,\n         sum(case when card_amount > 0 then 1 else -1 end) AS total_count,\n         '카드' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source_v2\n         WHERE\n             card_amount != 0\n         )\n     GROUP BY\n         uid,\n         uid_type,\n         date_id\n\n     UNION ALL\n\n     SELECT\n         uid,\n         uid_type,\n         date_id,\n         sum(cash_amount) AS total_amount,\n         sum(case when cash_amount > 0 then 1 else -1 end) AS total_count,\n         '현금' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source_v2\n         WHERE\n             cash_amount != 0\n         )\n     GROUP BY\n         uid,\n         uid_type,\n         date_id\n\n     UNION ALL\n\n     SELECT\n         uid,\n         uid_type,\n         date_id,\n         sum(total_amount) - (sum(cash_amount) + sum(card_amount)) AS total_amount,\n         sum(count_src) AS total_count,\n         '기타' as paid_type\n     FROM\n         (\n         SELECT\n             *,\n             CASE WHEN total_amount - (cash_amount + card_amount) > 0 THEN 1 ELSE -1 END AS count_src\n         FROM\n             pos_sales_source_v2\n         WHERE\n             total_amount != (cash_amount + card_amount) AND total_amount != 0\n         )\n     GROUP BY\n         uid,\n         uid_type,\n         date_id\n     )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_sales_amount_daily_v2.json', 'options': {'sql': ""   SELECT\n     uid,\n     uid_type,\n     to_date(date_id, 'yyyy-MM-dd') as date_id,\n     to_date(date_id, 'yyyy-MM-dd') as sale_date,\n     total_amount,\n     total_count,\n     paid_type\n   FROM\n     pos_sales_daily_process_v2""}, 'role': 'process', 'type': 'sql'}]"
440,process:::pos_sales_daily_process_v2:::pos_sales_amount_daily,s3://kcd-de-production/raw/etl/pos/pos_bills_stats_v2,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_sales_amount_daily_v2.json', 'options': {'sql': ""   SELECT * FROM\n     (SELECT\n         uid,\n         uid_type,\n         date_id,\n         sum(card_amount) AS total_amount,\n         sum(case when card_amount > 0 then 1 else -1 end) AS total_count,\n         '카드' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source_v2\n         WHERE\n             card_amount != 0\n         )\n     GROUP BY\n         uid,\n         uid_type,\n         date_id\n\n     UNION ALL\n\n     SELECT\n         uid,\n         uid_type,\n         date_id,\n         sum(cash_amount) AS total_amount,\n         sum(case when cash_amount > 0 then 1 else -1 end) AS total_count,\n         '현금' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source_v2\n         WHERE\n             cash_amount != 0\n         )\n     GROUP BY\n         uid,\n         uid_type,\n         date_id\n\n     UNION ALL\n\n     SELECT\n         uid,\n         uid_type,\n         date_id,\n         sum(total_amount) - (sum(cash_amount) + sum(card_amount)) AS total_amount,\n         sum(count_src) AS total_count,\n         '기타' as paid_type\n     FROM\n         (\n         SELECT\n             *,\n             CASE WHEN total_amount - (cash_amount + card_amount) > 0 THEN 1 ELSE -1 END AS count_src\n         FROM\n             pos_sales_source_v2\n         WHERE\n             total_amount != (cash_amount + card_amount) AND total_amount != 0\n         )\n     GROUP BY\n         uid,\n         uid_type,\n         date_id\n     )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_sales_amount_daily_v2.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/pos/pos_bills_stats_v2', 'format': 'parquet', 'partitions': 'date_id', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}]"
441,process:::pos_sales_daily_process_jdbc_v2:::pos_sales_amount_daily,jdbc_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_sales_amount_daily_v2.json', 'options': {'sql': ""   SELECT\n     uid,\n     uid_type,\n     to_date(date_id, 'yyyy-MM-dd') as date_id,\n     to_date(date_id, 'yyyy-MM-dd') as sale_date,\n     total_amount,\n     total_count,\n     paid_type\n   FROM\n     pos_sales_daily_process_v2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'uid_type:bills_id_type,menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats_v2', 'conflictColumns': 'uid,uid_type,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus', 'conflictColumns': 'business_id,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'daily_delivery_orders_stat.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'daily_delivery_orders_stat', 'conflictColumns': 'business_id,delivery_app,shop_number,date', 'updateColumns': 'closed_orders_amount,closed_orders_count,cancelled_orders_amount,cancelled_orders_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'hometax_business_label_upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'dbtable': 'hometax_businesses', 'conflictColumns': 'business_id', 'updateColumns': 'regular_employees_count,size_category,updated_at', 'typeCastColumns': 'size_category:hometax_business_size_category'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_sdk_event.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'sdk_name,event_type, user_type', 'updateColumns': 'sdk_name,event_type,user_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'delivery_receipt_stats.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-staging.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_staging', 'user': 'plover', 'password': 'welcome!', 'operation': 'upsert', 'dbtable': 'pos_receipt_stat', 'conflictColumns': 'public_id,target_date,date_type,h3_index,h3_resolution', 'updateColumns': 'metric', 'typeCastColumns': 'metric:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats', 'conflictColumns': 'business_id,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus', 'conflictColumns': 'business_id,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_menu_top_k.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_menu_top_k', 'conflictColumns': 'business_id,order_month,time_bucket,name', 'updateColumns': 'total_amount,total_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}]"
442,process:::current_approvals:::join_approval_candidates,process:::current_approval_candidates:::join_approval_candidates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'join_approval_candidates.json', 'options': {'sql': ""SELECT    *\nFROM      approvals_raw\nWHERE     created_at_date >= '2011-01-28'\nAND       created_at_date < '2021-01-26'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'join_approval_candidates.json', 'options': {'sql': ""SELECT    struct(approved.*) AS approved,\n          struct(canceled.*) AS canceled,\n          COALESCE(\n            date_format(approved.created_at, 'yyyy-MM-dd'),\n            date_format(canceled.created_at, 'yyyy-MM-dd')\n          ) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 0\n) approved FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 1\n) canceled\nON (\n  approved.business_id = canceled.business_id AND\n  approved.credential_key = canceled.credential_key AND\n  approved.amount = -canceled.amount AND\n  mask_card_number(approved.card_number) = mask_card_number(canceled.card_number) AND\n  approved.authorization_number = canceled.authorization_number AND\n  CAST(approved.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n  approved.approval_seq = canceled.approval_seq\n)""}, 'role': 'process', 'type': 'sql'}]"
443,process:::current_approval_candidates:::join_approval_candidates,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'join_approval_candidates.json', 'options': {'sql': ""SELECT    struct(approved.*) AS approved,\n          struct(canceled.*) AS canceled,\n          COALESCE(\n            date_format(approved.created_at, 'yyyy-MM-dd'),\n            date_format(canceled.created_at, 'yyyy-MM-dd')\n          ) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 0\n) approved FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 1\n) canceled\nON (\n  approved.business_id = canceled.business_id AND\n  approved.credential_key = canceled.credential_key AND\n  approved.amount = -canceled.amount AND\n  mask_card_number(approved.card_number) = mask_card_number(canceled.card_number) AND\n  approved.authorization_number = canceled.authorization_number AND\n  CAST(approved.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n  approved.approval_seq = canceled.approval_seq\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'join_approval_candidates.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'match_to_approvals.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]"
444,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current,process:::approvals_with_cancel:::match_to_approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'join_approval_candidates.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'match_to_approvals.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'match_to_approvals.json', 'options': {'sql': ""SELECT    approved.*,\n          canceled.transacted_at AS approval_canceled_at,\n          'cancel' AS type\nFROM      approval_candidates\nWHERE     approved.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}]"
445,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current,process:::approvals_with_late_cancel:::match_to_approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'join_approval_candidates.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'match_to_approvals.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'match_to_approvals.json', 'options': {'sql': ""SELECT    p.*,\n          c.transacted_at AS approval_canceled_at,\n          'late_cancel' AS type\nFROM      (\n    SELECT    approved.*\n    FROM      approval_candidates\n    WHERE     canceled.business_id is null\n) p, (\n    SELECT    canceled.*\n    FROM      approval_candidates\n    WHERE     approved.business_id is null\n) c\nWHERE     p.business_id = c.business_id\nAND       p.credential_key = c.credential_key\nAND       p.amount = -c.amount\nAND       p.card_number = c.card_number\nAND       p.authorization_number = c.authorization_number""}, 'role': 'process', 'type': 'sql'}]"
446,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current,process:::approvals_without_cancel:::match_to_approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'join_approval_candidates.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'match_to_approvals.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/approvals_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'match_to_approvals.json', 'options': {'sql': ""SELECT    /*+ BROADCAST(c) */\n          p.approved.*,\n          CAST(null AS TIMESTAMP) AS approval_canceled_at,\n          'approved' AS type\nFROM      approval_candidates p LEFT ANTI JOIN approvals_with_late_cancel c\nON (\n  p.approved.business_id = c.business_id AND\n  p.approved.credential_key = c.credential_key AND\n  abs(p.approved.amount) = abs(c.amount) AND\n  p.approved.card_number = c.card_number AND\n  p.approved.authorization_number = c.authorization_number AND\n  c.approval_canceled_at is not null\n)\nWHERE     p.canceled.business_id is null""}, 'role': 'process', 'type': 'sql'}]"
447,s3://kcd-de-production/service/market_area/analysis/user_tags_aggr,process:::store_tag_status:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/user_tags_aggr'}, 'role': 'source', 'type': 'file'}, {'filename': 'aggregate_user_tags.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/user_tags_aggr', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'store_info.json', 'options': {'sql': ""SELECT  business_id, collect_list(struct(tag, visitors_count)) AS tag_status\nFROM (\n    SELECT  business_id,\n            IF(tag = 'C_AVG', 'C', tag) AS tag,\n            IF(visitors_count is null, 0, visitors_count) AS visitors_count\n    FROM    user_tags_aggr\n    WHERE   type = '12_month'\n    AND     tag != 'C'\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]"
448,s3://kcd-de-production/service/market_area/analysis/user_tags_aggr,process:::store_tag_trend:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/user_tags_aggr'}, 'role': 'source', 'type': 'file'}, {'filename': 'aggregate_user_tags.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/user_tags_aggr', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'store_info.json', 'options': {'sql': ""SELECT\n      business_id, collect_list(struct(tag, monthly_visitor_count)) AS tag_trend\nFROM (\n  SELECT business_id, tag, collect_list(\n                                  struct(\n                                       date_format(month, 'yyyy-MM') AS date_month,\n                                       visitors_count\n                          )) AS monthly_visitor_count\n  FROM (\n          SELECT    business_id,\n                    month,\n                    IF(tag = 'C_AVG', 'C', tag) AS tag,\n                    IF(visitors_count is null, 0, visitors_count) AS visitors_count\n          FROM      user_tags_aggr\n          WHERE     type = 'month'\n          AND       tag != 'C'\n  )\n  GROUP BY business_id, tag\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]"
449,s3://kcd-de-production/service/market_area/analysis/snapshot_business_stat,process:::visit_user_status:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/snapshot_business_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'snapshot_business_stat.json', 'options': {'path': 's3://kcd-de-production/service/market_area/analysis/snapshot_business_stat', 'format': 'parquet', 'mode': 'overwrite', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'store_info.json', 'options': {'sql': ""SELECT\n        business_id,\n        collect_list(named_struct('user_type', user_type, 'value', sales_amount)) AS visit_user_sales_amount_status,\n        collect_list(named_struct('user_type', user_type, 'value', user_count)) AS visit_user_user_count_status,\n        collect_list(named_struct('user_type', user_type, 'value', unit_price)) AS visit_user_unit_price_status\nFROM (\n        SELECT  business_id,\n                CASE\n                    WHEN visit_count = '1회' THEN 'new'\n                    WHEN visit_count = '2회' THEN 'visit_2'\n                    WHEN visit_count = '3~9회' THEN 'visit_3_9'\n                    WHEN visit_count = '10회이상' THEN 'visit_10_more'\n                    ELSE 'etc'\n                END AS user_type,\n                total_amount AS sales_amount,\n                total_card_numbers AS user_count,\n                (total_amount / total_transaction_count) AS unit_price\n        FROM  snapshot_business_stat\n        WHERE type = '12_month'\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]"
450,s3://kcd-de-production/service/market_area/analysis/snapshot_business_stat,process:::visit_user_trend:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/snapshot_business_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'snapshot_business_stat.json', 'options': {'path': 's3://kcd-de-production/service/market_area/analysis/snapshot_business_stat', 'format': 'parquet', 'mode': 'overwrite', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'store_info.json', 'options': {'sql': ""SELECT\n        business_id,\n        collect_list(named_struct('user_type', user_type, 'monthly_trend', sales_amount_trend)) AS visit_user_sales_amount_trend,\n        collect_list(named_struct('user_type', user_type, 'monthly_trend', user_count_trend)) AS visit_user_user_count_trend,\n        collect_list(named_struct('user_type', user_type, 'monthly_trend', unit_price_tend)) AS visit_user_unit_price_trend\nFROM (\n        SELECT\n                business_id,\n                user_type,\n                collect_list(named_struct('date_month', date_month, 'value', sales_amount)) AS sales_amount_trend,\n                collect_list(named_struct('date_month', date_month, 'value', user_count)) AS user_count_trend,\n                collect_list(named_struct('date_month', date_month, 'value', unit_price)) AS unit_price_tend\n        FROM (\n                SELECT  business_id,\n                        CASE\n                            WHEN visit_count = '1회' THEN 'new'\n                            WHEN visit_count = '2회' THEN 'visit_2'\n                            WHEN visit_count = '3~9회' THEN 'visit_3_9'\n                            WHEN visit_count = '10회이상' THEN 'visit_10_more'\n                            ELSE 'etc'\n                        END AS user_type,\n                        date_format(month, 'yyyy-MM') AS date_month,\n                        total_amount AS sales_amount,\n                        total_card_numbers AS user_count,\n                        (total_amount / total_transaction_count) AS unit_price\n                FROM  snapshot_business_stat\n                WHERE type = 'month'\n\n        )\n        GROUP BY business_id, user_type\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]"
451,s3://kcd-de-production/service/market_area/analysis/cohort,process:::store_cohort_trend:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/cohort'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_cohort.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/cohort'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'store_info.json', 'options': {'sql': ""SELECT business_id, collect_list(cohort) AS cohorts\nFROM (\n        SELECT\n                business_id,\n                struct(\n                    date_format(start_date, 'yyyy-MM-dd') AS start_date,\n                    date_format(end_date, 'yyyy-MM-dd') AS end_date,\n                    user_count,\n                    user_type\n                ) AS cohort\n        FROM cohort\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]"
452,s3://kcd-de-production/data_cubes/dimension/name=business_meta,process:::merge:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'crefia_business_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'store_info.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
453,s3://kcd-de-production/data_cubes/dimension/name=business_meta,process:::business_meta_with_status:::build_nice_monthly_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'crefia_business_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': ""SELECT  DISTINCT\n        business_id,\n        registration_number,\n        registration_code,\n        status_code\nFROM\n(\n      SELECT  COALESCE(b.business_id, l.business_id) AS business_id,\n              COALESCE(b.registration_number, l.registration_number) AS registration_number,\n              COALESCE(b.registration_code, '7') AS registration_code,\n              CASE\n                WHEN b.crefia_registered AND b.hometax_registered THEN '00'\n                WHEN b.crefia_registered AND NOT b.hometax_registered THEN '01'\n                WHEN NOT b.crefia_registered AND b.hometax_registered THEN '02'\n                ELSE '03'\n              END AS status_code\n      FROM    (\n              SELECT  business_id,\n                      businesses.businesses.registration_number,\n                      IF(businesses.businesses.created_at >= '2020-12-01', '1', '3') AS registration_code,\n                      (\n                        array_contains(businesses.credentials.types, 'Crefia')\n                        OR array_contains(businesses.credentials.types, 'CrefiaBusiness')\n                      ) AS crefia_registered,\n                      (\n                        array_contains(businesses.credentials.types, 'HometaxLogin')\n                        OR array_contains(businesses.credentials.types, 'HometaxCertificate')\n                      ) AS hometax_registered\n              FROM    business_meta\n      ) b FULL OUTER JOIN (\n              SELECT   business_id,\n                       registration_number\n              FROM     last_sent_businesses\n              WHERE    registration_code != '7'\n      ) l ON b.registration_number = l.registration_number\n) t\nWHERE   t.business_id IS NOT NULL\nAND     t.registration_number IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
454,s3://kcd-de-production/data_cubes/dimension/name=business_meta,process:::user_with_business:::cashnote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'crefia_business_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_user_meta.json', 'options': {'sql': 'SELECT    u.users.*,\n          u.*,\n          business_meta.*\nFROM      business_meta\nJOIN  (\n        SELECT  *, explode(users.memberships.memberships) AS membership\n        FROM  merged_users\n) u\nON    business_meta.business_id = u.membership.business_id'}, 'role': 'process', 'type': 'sql'}]"
455,s3://kcd-de-production/data_cubes/dimension/name=business_meta,process:::stat_union_meta:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'crefia_business_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT    stat.*,\n          meta.location AS location,\n          meta.classification AS classification,\n          struct(place.*) AS place\nFROM      stat_union stat LEFT OUTER JOIN (\n  SELECT  business_id,\n          location.common AS location,\n          classification.kcd AS classification\n  FROM    business_meta\n) meta\nON (stat.business_id = meta.business_id) LEFT OUTER JOIN (\n  SELECT  business_id,\n          lot_address_1_depth,\n          lot_address_2_depth,\n          lot_address_3_depth,\n          kcd_classification_1_depth,\n          kcd_classification_2_depth,\n          kcd_classification_3_depth\n  FROM    kcd_places\n) place\nON (stat.business_id = place.business_id)'}, 'role': 'process', 'type': 'sql'}]"
456,s3://kcd-de-production/data_cubes/dimension/name=business_meta,process:::business_meta_with_amount:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'crefia_business_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'market_info.json', 'options': {'sql': '    SELECT\n            business_meta.business_id,\n            business_meta.businesses.businesses.business_name AS name,\n            business_meta.classification.market_area AS kcd_classification,\n            sales_amount_with_rate.duration,\n            sales_amount_with_rate.metrics,\n            sales_amount_with_rate.prev_metrics,\n            business_location.geo_point AS location,\n            struct(\n                business_location.b_code,\n                business_location.sido,\n                business_location.sido_code,\n                business_location.sigungu,\n                business_location.sigungu_code,\n                business_location.dong,\n                business_location.h_codes,\n                business_location.full_address\n            ) AS address\n    FROM business_meta\n    LEFT OUTER JOIN sales_amount_with_rate\n    ON business_meta.business_id = sales_amount_with_rate.business_id\n    LEFT OUTER JOIN  business_location\n    ON business_meta.business_id = business_location.business_id'}, 'role': 'process', 'type': 'sql'}]"
457,s3://kcd-de-production/data_cubes/dimension/name=business_meta,process:::add_join_field:::business_meta_es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'crefia_business_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_meta_es_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-29', 'yyyy-MM-dd') AS timestamp,\n            named_struct(\n                'name', 'meta'\n            ) AS join_field,\n            *\n  FROM      business_meta""}, 'role': 'process', 'type': 'sql'}]"
458,s3://kcd-de-production/data_cubes/dimension/name=business_meta,process:::crefia_business_meta:::crefia_business_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'crefia_business_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'crefia_business_meta.json', 'options': {'sql': ""SELECT    business_id,\n          businesses.businesses.registration_number,\n          businesses.businesses.business_name,\n          businesses.businesses.card_merchant_signed_up_at,\n          businesses.businesses.opened_at,\n          businesses.businesses.closed_at,\n          businesses.businesses.taxation_type,\n          businesses.businesses.crefia_size_code,\n          businesses.businesses.crefia_owner_birthday as owner_birthday,\n          classification.kcd.depth_1_name as kcd_classification_depth_1_name,\n          classification.kcd.depth_2_name as kcd_classification_depth_2_name,\n          classification.kcd.depth_3_name as kcd_classification_depth_3_name,\n          location.common.full_address as address\nFROM      business_meta\nWHERE     array_contains(businesses.credentials.types, 'Crefia')\nOR        array_contains(businesses.credentials.types, 'CrefiaBusiness')""}, 'role': 'process', 'type': 'sql'}]"
459,s3://kcd-de-production/data_cubes/dimension/name=business_meta,process:::result:::sales_amount_by_region,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'crefia_business_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'sales_amount_by_region.json', 'options': {'sql': ""  SELECT\n          place_metric.*,\n          to_json(region.geometry) AS geometry\n  FROM (\n  SELECT\n          address.sido, address.sigungu, address.sigungu_code,\n          place_classification.depth_1_name AS kcd_classification_1_depth,\n          COUNT(distinct(business_id)) AS business_cnt,\n          SUM(amount_sum) AS amount_sum,\n          cast(AVG(amount_sum) as bigint) AS amount_avg,\n          SUM(tx_count) AS payment_cnt_sum,\n          cast(AVG(tx_count) as bigint) AS payment_cnt_avg,\n          cast(AVG(unit_price) as bigint) AS unit_price\n  FROM (\n      SELECT  meta.business_id,\n              address,\n              place_classification,\n              amount_sum,\n              tx_count,\n              (amount_sum / tx_count) AS unit_price\n      FROM (\n              SELECT  business_id,\n                      location.common AS address,\n                      classification.place AS place_classification\n              FROM business_meta\n              WHERE classification.place is not null\n              AND  location.common is not null\n      ) AS meta\n      JOIN card_sales_transactions\n      ON meta.business_id = card_sales_transactions.business_id\n  )\n  GROUP BY address.sido, address.sigungu, address.sigungu_code, place_classification.depth_1_name\n  HAVING business_cnt > 10\n  ) AS place_metric\n  LEFT OUTER JOIN (SELECT * FROM total_region WHERE region_type = 'sigungu') AS region\n  ON place_metric.sigungu_code = region.code\n  ORDER BY sigungu, business_cnt DESC""}, 'role': 'process', 'type': 'sql'}]"
460,process:::store_tag_status:::store_info_sink,process:::merge:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'sql': ""SELECT  business_id, collect_list(struct(tag, visitors_count)) AS tag_status\nFROM (\n    SELECT  business_id,\n            IF(tag = 'C_AVG', 'C', tag) AS tag,\n            IF(visitors_count is null, 0, visitors_count) AS visitors_count\n    FROM    user_tags_aggr\n    WHERE   type = '12_month'\n    AND     tag != 'C'\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'store_info.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
461,process:::store_tag_trend:::store_info_sink,process:::merge:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'sql': ""SELECT\n      business_id, collect_list(struct(tag, monthly_visitor_count)) AS tag_trend\nFROM (\n  SELECT business_id, tag, collect_list(\n                                  struct(\n                                       date_format(month, 'yyyy-MM') AS date_month,\n                                       visitors_count\n                          )) AS monthly_visitor_count\n  FROM (\n          SELECT    business_id,\n                    month,\n                    IF(tag = 'C_AVG', 'C', tag) AS tag,\n                    IF(visitors_count is null, 0, visitors_count) AS visitors_count\n          FROM      user_tags_aggr\n          WHERE     type = 'month'\n          AND       tag != 'C'\n  )\n  GROUP BY business_id, tag\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'store_info.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
462,process:::store_cohort_trend:::store_info_sink,process:::merge:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'sql': ""SELECT business_id, collect_list(cohort) AS cohorts\nFROM (\n        SELECT\n                business_id,\n                struct(\n                    date_format(start_date, 'yyyy-MM-dd') AS start_date,\n                    date_format(end_date, 'yyyy-MM-dd') AS end_date,\n                    user_count,\n                    user_type\n                ) AS cohort\n        FROM cohort\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'store_info.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
463,process:::visit_user_status:::store_info_sink,process:::merge:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'sql': ""SELECT\n        business_id,\n        collect_list(named_struct('user_type', user_type, 'value', sales_amount)) AS visit_user_sales_amount_status,\n        collect_list(named_struct('user_type', user_type, 'value', user_count)) AS visit_user_user_count_status,\n        collect_list(named_struct('user_type', user_type, 'value', unit_price)) AS visit_user_unit_price_status\nFROM (\n        SELECT  business_id,\n                CASE\n                    WHEN visit_count = '1회' THEN 'new'\n                    WHEN visit_count = '2회' THEN 'visit_2'\n                    WHEN visit_count = '3~9회' THEN 'visit_3_9'\n                    WHEN visit_count = '10회이상' THEN 'visit_10_more'\n                    ELSE 'etc'\n                END AS user_type,\n                total_amount AS sales_amount,\n                total_card_numbers AS user_count,\n                (total_amount / total_transaction_count) AS unit_price\n        FROM  snapshot_business_stat\n        WHERE type = '12_month'\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'store_info.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
464,process:::visit_user_trend:::store_info_sink,process:::merge:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'sql': ""SELECT\n        business_id,\n        collect_list(named_struct('user_type', user_type, 'monthly_trend', sales_amount_trend)) AS visit_user_sales_amount_trend,\n        collect_list(named_struct('user_type', user_type, 'monthly_trend', user_count_trend)) AS visit_user_user_count_trend,\n        collect_list(named_struct('user_type', user_type, 'monthly_trend', unit_price_tend)) AS visit_user_unit_price_trend\nFROM (\n        SELECT\n                business_id,\n                user_type,\n                collect_list(named_struct('date_month', date_month, 'value', sales_amount)) AS sales_amount_trend,\n                collect_list(named_struct('date_month', date_month, 'value', user_count)) AS user_count_trend,\n                collect_list(named_struct('date_month', date_month, 'value', unit_price)) AS unit_price_tend\n        FROM (\n                SELECT  business_id,\n                        CASE\n                            WHEN visit_count = '1회' THEN 'new'\n                            WHEN visit_count = '2회' THEN 'visit_2'\n                            WHEN visit_count = '3~9회' THEN 'visit_3_9'\n                            WHEN visit_count = '10회이상' THEN 'visit_10_more'\n                            ELSE 'etc'\n                        END AS user_type,\n                        date_format(month, 'yyyy-MM') AS date_month,\n                        total_amount AS sales_amount,\n                        total_card_numbers AS user_count,\n                        (total_amount / total_transaction_count) AS unit_price\n                FROM  snapshot_business_stat\n                WHERE type = 'month'\n\n        )\n        GROUP BY business_id, user_type\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'store_info.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
465,process:::merge:::store_info_sink,process:::store_info:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'store_info.json', 'options': {'sql': 'SELECT\n        business_id,\n        business_meta.businesses.businesses.public_id,\n        business_meta.businesses.businesses.business_name AS name,\n        business_meta.classification.market_area AS classification,\n        business_meta.location.common AS address,\n        store_tag_status.tag_status,\n        store_tag_trend.tag_trend,\n        store_cohort_trend.cohorts,\n        visit_user_status.visit_user_sales_amount_status,\n        visit_user_status.visit_user_user_count_status,\n        visit_user_status.visit_user_unit_price_status,\n        visit_user_trend.visit_user_sales_amount_trend,\n        visit_user_trend.visit_user_user_count_trend,\n        visit_user_trend.visit_user_unit_price_trend\nFROM    merge'}, 'role': 'process', 'type': 'sql'}]"
466,process:::store_info:::store_info_sink,s3://kcd-de-production/service/market_area/store_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'sql': 'SELECT\n        business_id,\n        business_meta.businesses.businesses.public_id,\n        business_meta.businesses.businesses.business_name AS name,\n        business_meta.classification.market_area AS classification,\n        business_meta.location.common AS address,\n        store_tag_status.tag_status,\n        store_tag_trend.tag_trend,\n        store_cohort_trend.cohorts,\n        visit_user_status.visit_user_sales_amount_status,\n        visit_user_status.visit_user_user_count_status,\n        visit_user_status.visit_user_unit_price_status,\n        visit_user_trend.visit_user_sales_amount_trend,\n        visit_user_trend.visit_user_user_count_trend,\n        visit_user_trend.visit_user_unit_price_trend\nFROM    merge'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/store_info'}, 'role': 'sink', 'type': 'file'}, {'filename': 'store_info_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/store_info'}, 'role': 'source', 'type': 'file'}]"
467,s3://kcd-de-production/service/market_area/store_info,process:::store_info_with_ts:::store_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/store_info'}, 'role': 'sink', 'type': 'file'}, {'filename': 'store_info_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/store_info'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'store_info_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-24', 'yyyy-MM-dd') AS timestamp,\n            *\n  FROM      store_info""}, 'role': 'process', 'type': 'sql'}]"
468,jdbc:issuer_histories,process:::issuer_purchase_period:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'issuer_histories', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': 'SELECT\n        business_id,\n        issuer_name,\n        merchant_number,\n        date_sub(purchased_up_to, purchase_period) AS limit_date\nFROM (\n    SELECT\n            business_id,\n            issuer_name,\n            merchant_number,\n            COALESCE(calculated_purchase_period, 1) AS purchase_period,\n            purchased_up_to\n    FROM card_merchants\n    JOIN (\n            SELECT  issuer AS name,\n                    max(date) AS purchased_up_to\n            FROM issuer_histories\n            WHERE purchases = true AND purchases_checked = true\n            GROUP BY issuer\n    ) AS issuers\n    ON card_merchants.issuer_name = issuers.name\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': 'SELECT\n        business_id,\n        issuer_name,\n        merchant_number,\n        date_sub(purchased_up_to, purchase_period) AS limit_date\nFROM (\n    SELECT\n            business_id,\n            issuer_name,\n            merchant_number,\n            COALESCE(calculated_purchase_period, 1) AS purchase_period,\n            purchased_up_to\n    FROM card_merchants\n    JOIN (\n            SELECT  issuer AS name,\n                    max(date) AS purchased_up_to\n            FROM issuer_histories\n            WHERE purchases = true AND purchases_checked = true\n            GROUP BY issuer\n    ) AS issuers\n    ON card_merchants.issuer_name = issuers.name\n)'}, 'role': 'process', 'type': 'sql'}]"
469,s3://kcd-de-production/raw/etl/snowdon/card_sales/visits,process:::transactions:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'visit_with_duration.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_visit_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-28', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-28', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-01', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-01', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}]"
470,s3://kcd-de-production/raw/etl/snowdon/card_sales/visits,process:::visits_filtered:::visit_with_duration,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'visit_with_duration.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_visit_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'visit_with_duration.json', 'options': {'sql': ""SELECT    *\nFROM      visits\nWHERE     encrypted_card_number is not null\nAND       purchase_canceled_at is null\nAND       created_at_date >= '2020-01-01'\nAND       transacted_at >= '2020-01-01'\nAND       transacted_at < '2021-01-01'""}, 'role': 'process', 'type': 'sql'}]"
471,s3://kcd-de-production/raw/etl/snowdon/card_sales/visits,process:::transactions:::build_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'visit_with_duration.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_visit_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'build_stats.json', 'options': {'sql': 'SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )'}, 'role': 'process', 'type': 'sql'}]"
472,s3://kcd-de-production/raw/etl/snowdon/card_sales/visits,process:::visit_pairs:::build_user_visit_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'visit_with_duration.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_visit_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'build_user_visit_info.json', 'options': {'sql': ""  SELECT  encrypted_card_number,\n          business_id,\n          pair._1 as start_date,\n          pair._2 as end_date\n  FROM    (\n          SELECT  encrypted_card_number,\n                  business_id,\n                  explode(cohort(visits)) as pair\n          FROM    (\n                  SELECT  encrypted_card_number,\n                          business_id,\n                          collect_list(transacted_at) as visits\n                  FROM    visits\n                  WHERE   encrypted_card_number IS NOT NULL\n                  AND     business_id IS NOT NULL\n                  AND     transacted_at >= '2020-01-01'\n                  AND     transacted_at < '2021-01-24'\n                  GROUP BY encrypted_card_number, business_id\n          )\n  )""}, 'role': 'process', 'type': 'sql'}]"
473,s3://kcd-de-production/raw/etl/snowdon/card_sales/visits,process:::visit_user_type:::build_user_visit_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'visit_with_duration.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_visit_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'build_user_visit_info.json', 'options': {'sql': ""SELECT\n        *,\n        IF(visit_count > 1, 'revisit', 'new') AS user_type\nFROM (\n        SELECT\n                business_id, encrypted_card_number, date, min(prev_visit_count) AS visit_count\n        FROM (\n            SELECT  business_id,\n                    encrypted_card_number,\n                    date_trunc('WEEK', transacted_at) AS date,\n                    (visit_order - 1) AS prev_visit_count\n            FROM visits\n        )\n        GROUP BY business_id, encrypted_card_number, date\n)""}, 'role': 'process', 'type': 'sql'}]"
474,s3://kcd-de-production/raw/etl/snowdon/card_sales/payments,process:::card_payments:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS date,\n              date_trunc('month', time) AS month,\n              collect_set(\n                  struct(\n                      issuer_name,\n                      reserved,\n                      received\n                  )\n              ) as payments\n  FROM (\n          SELECT  business_id,\n                credential_key,\n                to_timestamp('2021-01-28', 'yyyy-MM-dd') AS time,\n                issuer_name,\n                'day' AS time_unit,\n                SUM(reserved_amount) AS reserved,\n                SUM(received_amount) AS received\n          FROM    payments\n          WHERE   created_at_date >= '2021-01-28'\n          AND     received_at = date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\n          GROUP BY 1, 2, 3, 4\n  )\n  GROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS date,\n              date_trunc('month', time) AS month,\n              collect_set(\n                  struct(\n                      issuer_name,\n                      reserved,\n                      received\n                  )\n              ) as payments\n  FROM (\n          SELECT  business_id,\n                credential_key,\n                to_timestamp('2021-01-01', 'yyyy-MM-dd') AS time,\n                issuer_name,\n                'day' AS time_unit,\n                SUM(reserved_amount) AS reserved,\n                SUM(received_amount) AS received\n          FROM    payments\n          WHERE   created_at_date >= '2021-01-01'\n          AND     received_at = date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\n          GROUP BY 1, 2, 3, 4\n  )\n  GROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]"
475,s3://kcd-de-production/raw/etl/snowdon/card_sales/payments,process:::prev_payments:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_payments_raw\n WHERE    created_at_date >= '2020-11-23'\n AND      created_at_date < '2020-11-30'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_payments_raw\n WHERE    created_at_date >= '2019-12-15'\n AND      created_at_date < '2019-12-22'""}, 'role': 'process', 'type': 'sql'}]"
476,s3://kcd-de-production/raw/etl/snowdon/card_sales/payments,process:::payments_stat:::build_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT  business_id,\n        credential_key,\n        received_at AS time,\n        issuer_name,\n        'day' AS time_unit,\n        SUM(reserved_amount) AS reserved,\n        SUM(received_amount) AS received\nFROM    payments\nGROUP BY 1, 2, 3, 4""}, 'role': 'process', 'type': 'sql'}]"
477,s3://kcd-de-production/raw/etl/snowdon/card_sales/payments,process:::payments_stat:::card_sales_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'sales_payments.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(sales_amount_sum) AS sales_amount_sum,\n          SUM(sales_count) AS sales_count,\n          map_from_entries(collect_list(struct(issuer_name, sales_amount_sum))) AS issuer_amount_sum,\n          map_from_entries(collect_list(struct(issuer_name, sales_count))) AS issuer_tx_count\n  FROM (\n          SELECT\n                  timestamp,\n                  business_id,\n                  issuer_name,\n                  SUM(sales_amount) AS sales_amount_sum,\n                  SUM(sales_count) AS sales_count\n          FROM (\n                  SELECT\n                          business_id,\n                          date_trunc('MONTH', received_at) AS timestamp,\n                          sales_amount,\n                          sales_count,\n                          issuer_name\n                  FROM    payments\n                  WHERE   business_id IS NOT NULL\n                  AND     received_at between '2019-01-01' AND '2020-09-05'\n          )\n          GROUP BY business_id, issuer_name, timestamp\n ) GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
478,s3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat,process:::monthly_card_purchases:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_purchases_stat.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS month,\n              SUM(amount) AS amount\n  FROM      card_purchases_stat\n  WHERE     time_unit = 'month'\n  AND       time BETWEEN date_format(to_date('2021-01-28', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-28'), 'yyyy-MM-dd')\n  GROUP BY  business_id, time""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS month,\n              SUM(amount) AS amount\n  FROM      card_purchases_stat\n  WHERE     time_unit = 'month'\n  AND       time BETWEEN date_format(to_date('2021-01-01', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-01'), 'yyyy-MM-dd')\n  GROUP BY  business_id, time""}, 'role': 'process', 'type': 'sql'}]"
479,s3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat,process:::card_purchases_stat:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_purchases_stat.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      card_purchases_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
480,s3://kcd-de-production/raw/stat/snowdon/delivery_app_v2/delivery_app_orders_stat,process:::delivery_app_orders_stat:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/delivery_app_v2/delivery_app_orders_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/delivery_app_v2/delivery_app_orders_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_stat_raw\nWHERE\n  (\n    time_unit = 'month' AND\n    time BETWEEN date_format(to_date('2021-01-28', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-28'), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day' AND\n    time BETWEEN '2021-01-28' AND date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day_hour' AND\n    time BETWEEN '2021-01-28' AND date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\n  )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_stat_raw\nWHERE\n  (\n    time_unit = 'month' AND\n    time BETWEEN date_format(to_date('2021-01-01', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-01'), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day' AND\n    time BETWEEN '2021-01-01' AND date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day_hour' AND\n    time BETWEEN '2021-01-01' AND date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\n  )""}, 'role': 'process', 'type': 'sql'}]"
481,process:::issuer_purchase_period:::build_daily_report,process:::monthly_card_sales:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': 'SELECT\n        business_id,\n        issuer_name,\n        merchant_number,\n        date_sub(purchased_up_to, purchase_period) AS limit_date\nFROM (\n    SELECT\n            business_id,\n            issuer_name,\n            merchant_number,\n            COALESCE(calculated_purchase_period, 1) AS purchase_period,\n            purchased_up_to\n    FROM card_merchants\n    JOIN (\n            SELECT  issuer AS name,\n                    max(date) AS purchased_up_to\n            FROM issuer_histories\n            WHERE purchases = true AND purchases_checked = true\n            GROUP BY issuer\n    ) AS issuers\n    ON card_merchants.issuer_name = issuers.name\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': 'SELECT\n        business_id,\n        issuer_name,\n        merchant_number,\n        date_sub(purchased_up_to, purchase_period) AS limit_date\nFROM (\n    SELECT\n            business_id,\n            issuer_name,\n            merchant_number,\n            COALESCE(calculated_purchase_period, 1) AS purchase_period,\n            purchased_up_to\n    FROM card_merchants\n    JOIN (\n            SELECT  issuer AS name,\n                    max(date) AS purchased_up_to\n            FROM issuer_histories\n            WHERE purchases = true AND purchases_checked = true\n            GROUP BY issuer\n    ) AS issuers\n    ON card_merchants.issuer_name = issuers.name\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM (\n        SELECT    t.business_id,\n                  t.credential_key,\n                  date_trunc('month', t.transacted_at) AS time,\n                  'month' AS time_unit,\n                  COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n                  COUNT(*) AS card_sales_count,\n                  COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n                  COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n                  COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n                  SUM(IF (t.visit_order > 1, t.amount, 0)) AS returning_amount,\n                  SUM(IF (t.visit_order > 1, 1, 0)) AS returning_count\n        FROM      transactions t, issuer_purchase_period i\n        WHERE     t.business_id = i.business_id\n        AND       t.issuer_name = i.issuer_name\n        AND       t.merchant_number = i.merchant_number\n        AND       (\n                      (date_trunc('day', t.transacted_at) > i.limit_date) OR\n                      (purchased_at is not null AND purchase_canceled_at is null) OR\n                      (approval_canceled_at is not null)\n        )\n        GROUP BY 1, 2, 3\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM (\n        SELECT    t.business_id,\n                  t.credential_key,\n                  date_trunc('month', t.transacted_at) AS time,\n                  'month' AS time_unit,\n                  COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n                  COUNT(*) AS card_sales_count,\n                  COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n                  COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n                  COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n                  SUM(t.amount) AS returning_amount,\n                  1 AS returning_count\n        FROM      transactions t, issuer_purchase_period i\n        WHERE     t.business_id = i.business_id\n        AND       t.issuer_name = i.issuer_name\n        AND       t.merchant_number = i.merchant_number\n        AND       (\n                      (date_trunc('day', t.transacted_at) > i.limit_date) OR\n                      (purchased_at is not null AND purchase_canceled_at is null) OR\n                      (approval_canceled_at is not null)\n        )\n        GROUP BY 1, 2, 3\n)""}, 'role': 'process', 'type': 'sql'}]"
482,process:::transactions:::build_daily_report,process:::daily_hour_transactions_stat:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-28', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-28', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-01', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-01', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('hour', t.transacted_at) AS time,\n          'day_hour' AS time_unit,\n          COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n          COUNT(*) AS card_sales_count,\n          COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n          COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n          COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n          SUM(IF (t.visit_order > 1, t.amount, 0)) AS returning_amount,\n          SUM(IF (t.visit_order > 1, 1, 0)) AS returning_count\nFROM      transactions t\nWHERE     transacted_at BETWEEN '2021-01-28' AND date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('hour', t.transacted_at) AS time,\n          'day_hour' AS time_unit,\n          COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n          COUNT(*) AS card_sales_count,\n          COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n          COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n          COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n          SUM(t.amount) AS returning_amount,\n          1 AS returning_count\nFROM      transactions t\nWHERE     transacted_at BETWEEN '2021-01-01' AND date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]"
483,process:::transactions:::build_daily_report,process:::daily_card_sales:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-28', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-28', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-01', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-01', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM (\n        SELECT    t.business_id,\n                  t.credential_key,\n                  date_trunc('day', t.transacted_at) AS time,\n                  'day' AS time_unit,\n                  COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n                  COUNT(*) AS card_sales_count,\n                  COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n                  COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n                  COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n                  SUM(IF (t.visit_order > 1, t.amount, 0)) AS returning_amount,\n                  SUM(IF (t.visit_order > 1, 1, 0)) AS returning_count\n        FROM      transactions t\n        WHERE     transacted_at BETWEEN '2021-01-28' AND date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\n        GROUP BY 1, 2, 3\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM (\n        SELECT    t.business_id,\n                  t.credential_key,\n                  date_trunc('day', t.transacted_at) AS time,\n                  'day' AS time_unit,\n                  COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n                  COUNT(*) AS card_sales_count,\n                  COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n                  COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n                  COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n                  SUM(t.amount) AS returning_amount,\n                  1 AS returning_count\n        FROM      transactions t\n        WHERE     transacted_at BETWEEN '2021-01-01' AND date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\n        GROUP BY 1, 2, 3\n)""}, 'role': 'process', 'type': 'sql'}]"
484,process:::transactions:::build_daily_report,process:::monthly_card_sales:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-28', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-28', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.created_at_date >= date_format(add_months(to_date('2021-01-01', 'yyyy-MM-dd'), -1), 'yyyy-MM-01')\nAND       date_trunc('month', transacted_at) =  date_trunc('month', to_date('2021-01-01', 'yyyy-MM-dd'))\nAND       t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM (\n        SELECT    t.business_id,\n                  t.credential_key,\n                  date_trunc('month', t.transacted_at) AS time,\n                  'month' AS time_unit,\n                  COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n                  COUNT(*) AS card_sales_count,\n                  COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n                  COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n                  COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n                  SUM(IF (t.visit_order > 1, t.amount, 0)) AS returning_amount,\n                  SUM(IF (t.visit_order > 1, 1, 0)) AS returning_count\n        FROM      transactions t, issuer_purchase_period i\n        WHERE     t.business_id = i.business_id\n        AND       t.issuer_name = i.issuer_name\n        AND       t.merchant_number = i.merchant_number\n        AND       (\n                      (date_trunc('day', t.transacted_at) > i.limit_date) OR\n                      (purchased_at is not null AND purchase_canceled_at is null) OR\n                      (approval_canceled_at is not null)\n        )\n        GROUP BY 1, 2, 3\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM (\n        SELECT    t.business_id,\n                  t.credential_key,\n                  date_trunc('month', t.transacted_at) AS time,\n                  'month' AS time_unit,\n                  COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n                  COUNT(*) AS card_sales_count,\n                  COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n                  COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n                  COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n                  SUM(t.amount) AS returning_amount,\n                  1 AS returning_count\n        FROM      transactions t, issuer_purchase_period i\n        WHERE     t.business_id = i.business_id\n        AND       t.issuer_name = i.issuer_name\n        AND       t.merchant_number = i.merchant_number\n        AND       (\n                      (date_trunc('day', t.transacted_at) > i.limit_date) OR\n                      (purchased_at is not null AND purchase_canceled_at is null) OR\n                      (approval_canceled_at is not null)\n        )\n        GROUP BY 1, 2, 3\n)""}, 'role': 'process', 'type': 'sql'}]"
485,process:::daily_hour_transactions_stat:::build_daily_report,process:::hourly_sales:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('hour', t.transacted_at) AS time,\n          'day_hour' AS time_unit,\n          COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n          COUNT(*) AS card_sales_count,\n          COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n          COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n          COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n          SUM(IF (t.visit_order > 1, t.amount, 0)) AS returning_amount,\n          SUM(IF (t.visit_order > 1, 1, 0)) AS returning_count\nFROM      transactions t\nWHERE     transacted_at BETWEEN '2021-01-28' AND date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('hour', t.transacted_at) AS time,\n          'day_hour' AS time_unit,\n          COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n          COUNT(*) AS card_sales_count,\n          COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n          COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n          COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n          SUM(t.amount) AS returning_amount,\n          1 AS returning_count\nFROM      transactions t\nWHERE     transacted_at BETWEEN '2021-01-01' AND date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    *,\n          date_trunc('month', date) AS month\nFROM      (\n  SELECT    business_id,\n            time AS date,\n            SUM(IF (hour >= 0 AND hour < 6, amount, 0)) AS 0_6_sales_amount,\n            SUM(IF (hour >= 6 AND hour < 11, amount, 0)) AS 6_11_sales_amount,\n            SUM(IF (hour >= 11 AND hour < 14, amount, 0)) AS 11_14_sales_amount,\n            SUM(IF (hour >= 14 AND hour < 17, amount, 0)) AS 14_17_sales_amount,\n            SUM(IF (hour >= 17 AND hour < 24, amount, 0)) AS 17_24_sales_amount\n  FROM      (\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              card_sales_amount AS amount\n    FROM      daily_hour_transactions_stat\n\n    UNION ALL\n\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              (baemin_online_amount_sum + yogiyo_online_amount_sum + baedaltong_online_amount_sum) AS amount\n    FROM      delivery_app_orders_stat\n    WHERE     time_unit = 'day_hour'\n  )\n  GROUP BY  1, 2\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    *,\n          date_trunc('month', date) AS month\nFROM      (\n  SELECT    business_id,\n            time AS date,\n            SUM(IF (hour >= 0 AND hour < 6, amount, 0)) AS 0_6_sales_amount,\n            SUM(IF (hour >= 6 AND hour < 11, amount, 0)) AS 6_11_sales_amount,\n            SUM(IF (hour >= 11 AND hour < 14, amount, 0)) AS 11_14_sales_amount,\n            SUM(IF (hour >= 14 AND hour < 17, amount, 0)) AS 14_17_sales_amount,\n            SUM(IF (hour >= 17 AND hour < 24, amount, 0)) AS 17_24_sales_amount\n  FROM      (\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              card_sales_amount AS amount\n    FROM      daily_hour_transactions_stat\n\n    UNION ALL\n\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              (baemin_online_amount_sum + yogiyo_online_amount_sum + baedaltong_online_amount_sum) AS amount\n    FROM      delivery_app_orders_stat\n    WHERE     time_unit = 'day_hour'\n  )\n  GROUP BY  1, 2\n)""}, 'role': 'process', 'type': 'sql'}]"
486,process:::daily_card_sales:::build_daily_report,process:::card_sales:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM (\n        SELECT    t.business_id,\n                  t.credential_key,\n                  date_trunc('day', t.transacted_at) AS time,\n                  'day' AS time_unit,\n                  COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n                  COUNT(*) AS card_sales_count,\n                  COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n                  COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n                  COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n                  SUM(IF (t.visit_order > 1, t.amount, 0)) AS returning_amount,\n                  SUM(IF (t.visit_order > 1, 1, 0)) AS returning_count\n        FROM      transactions t\n        WHERE     transacted_at BETWEEN '2021-01-28' AND date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\n        GROUP BY 1, 2, 3\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM (\n        SELECT    t.business_id,\n                  t.credential_key,\n                  date_trunc('day', t.transacted_at) AS time,\n                  'day' AS time_unit,\n                  COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n                  COUNT(*) AS card_sales_count,\n                  COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n                  COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n                  COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n                  SUM(t.amount) AS returning_amount,\n                  1 AS returning_count\n        FROM      transactions t\n        WHERE     transacted_at BETWEEN '2021-01-01' AND date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\n        GROUP BY 1, 2, 3\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2021-01-28', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.card_sales_amount,\n          d.card_sales_count,\n          d.card_sales_fee,\n          d.card_sales_vat_fee,\n          d.card_sales_payment,\n          d.returning_amount,\n          d.new_amount,\n          m.card_sales_amount AS monthly_card_sales_amount\nFROM      daily_card_sales d\nFULL OUTER JOIN monthly_card_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2021-01-01', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.card_sales_amount,\n          d.card_sales_count,\n          d.card_sales_fee,\n          d.card_sales_vat_fee,\n          d.card_sales_payment,\n          d.returning_amount,\n          d.new_amount,\n          m.card_sales_amount AS monthly_card_sales_amount\nFROM      daily_card_sales d\nFULL OUTER JOIN monthly_card_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}]"
487,process:::monthly_card_sales:::build_daily_report,process:::card_sales:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM (\n        SELECT    t.business_id,\n                  t.credential_key,\n                  date_trunc('month', t.transacted_at) AS time,\n                  'month' AS time_unit,\n                  COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n                  COUNT(*) AS card_sales_count,\n                  COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n                  COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n                  COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n                  SUM(IF (t.visit_order > 1, t.amount, 0)) AS returning_amount,\n                  SUM(IF (t.visit_order > 1, 1, 0)) AS returning_count\n        FROM      transactions t, issuer_purchase_period i\n        WHERE     t.business_id = i.business_id\n        AND       t.issuer_name = i.issuer_name\n        AND       t.merchant_number = i.merchant_number\n        AND       (\n                      (date_trunc('day', t.transacted_at) > i.limit_date) OR\n                      (purchased_at is not null AND purchase_canceled_at is null) OR\n                      (approval_canceled_at is not null)\n        )\n        GROUP BY 1, 2, 3\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM (\n        SELECT    t.business_id,\n                  t.credential_key,\n                  date_trunc('month', t.transacted_at) AS time,\n                  'month' AS time_unit,\n                  COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n                  COUNT(*) AS card_sales_count,\n                  COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n                  COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n                  COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n                  SUM(t.amount) AS returning_amount,\n                  1 AS returning_count\n        FROM      transactions t, issuer_purchase_period i\n        WHERE     t.business_id = i.business_id\n        AND       t.issuer_name = i.issuer_name\n        AND       t.merchant_number = i.merchant_number\n        AND       (\n                      (date_trunc('day', t.transacted_at) > i.limit_date) OR\n                      (purchased_at is not null AND purchase_canceled_at is null) OR\n                      (approval_canceled_at is not null)\n        )\n        GROUP BY 1, 2, 3\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2021-01-28', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.card_sales_amount,\n          d.card_sales_count,\n          d.card_sales_fee,\n          d.card_sales_vat_fee,\n          d.card_sales_payment,\n          d.returning_amount,\n          d.new_amount,\n          m.card_sales_amount AS monthly_card_sales_amount\nFROM      daily_card_sales d\nFULL OUTER JOIN monthly_card_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2021-01-01', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.card_sales_amount,\n          d.card_sales_count,\n          d.card_sales_fee,\n          d.card_sales_vat_fee,\n          d.card_sales_payment,\n          d.returning_amount,\n          d.new_amount,\n          m.card_sales_amount AS monthly_card_sales_amount\nFROM      daily_card_sales d\nFULL OUTER JOIN monthly_card_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}]"
488,process:::card_sales:::build_daily_report,process:::daily_stat_joined:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2021-01-28', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.card_sales_amount,\n          d.card_sales_count,\n          d.card_sales_fee,\n          d.card_sales_vat_fee,\n          d.card_sales_payment,\n          d.returning_amount,\n          d.new_amount,\n          m.card_sales_amount AS monthly_card_sales_amount\nFROM      daily_card_sales d\nFULL OUTER JOIN monthly_card_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2021-01-01', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.card_sales_amount,\n          d.card_sales_count,\n          d.card_sales_fee,\n          d.card_sales_vat_fee,\n          d.card_sales_payment,\n          d.returning_amount,\n          d.new_amount,\n          m.card_sales_amount AS monthly_card_sales_amount\nFROM      daily_card_sales d\nFULL OUTER JOIN monthly_card_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
489,process:::card_payments:::build_daily_report,process:::daily_stat_joined:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS date,\n              date_trunc('month', time) AS month,\n              collect_set(\n                  struct(\n                      issuer_name,\n                      reserved,\n                      received\n                  )\n              ) as payments\n  FROM (\n          SELECT  business_id,\n                credential_key,\n                to_timestamp('2021-01-28', 'yyyy-MM-dd') AS time,\n                issuer_name,\n                'day' AS time_unit,\n                SUM(reserved_amount) AS reserved,\n                SUM(received_amount) AS received\n          FROM    payments\n          WHERE   created_at_date >= '2021-01-28'\n          AND     received_at = date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\n          GROUP BY 1, 2, 3, 4\n  )\n  GROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS date,\n              date_trunc('month', time) AS month,\n              collect_set(\n                  struct(\n                      issuer_name,\n                      reserved,\n                      received\n                  )\n              ) as payments\n  FROM (\n          SELECT  business_id,\n                credential_key,\n                to_timestamp('2021-01-01', 'yyyy-MM-dd') AS time,\n                issuer_name,\n                'day' AS time_unit,\n                SUM(reserved_amount) AS reserved,\n                SUM(received_amount) AS received\n          FROM    payments\n          WHERE   created_at_date >= '2021-01-01'\n          AND     received_at = date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\n          GROUP BY 1, 2, 3, 4\n  )\n  GROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
490,process:::delivery_app_orders_stat:::build_daily_report,process:::delivery_app_sales:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_stat_raw\nWHERE\n  (\n    time_unit = 'month' AND\n    time BETWEEN date_format(to_date('2021-01-28', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-28'), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day' AND\n    time BETWEEN '2021-01-28' AND date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day_hour' AND\n    time BETWEEN '2021-01-28' AND date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\n  )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_stat_raw\nWHERE\n  (\n    time_unit = 'month' AND\n    time BETWEEN date_format(to_date('2021-01-01', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-01'), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day' AND\n    time BETWEEN '2021-01-01' AND date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day_hour' AND\n    time BETWEEN '2021-01-01' AND date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\n  )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2021-01-28', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.amount_sum,\n          d.baemin_online_amount_sum,\n          d.yogiyo_online_amount_sum,\n          d.baedaltong_online_amount_sum,\n          m.baemin_online_amount_sum + m.baedaltong_online_amount_sum + m.yogiyo_online_amount_sum AS monthly_delivery_app_sales_amount\nFROM\n(\n            SELECT    business_id,\n                      time,\n                      amount_sum,\n                      baemin_online_amount_sum,\n                      yogiyo_online_amount_sum,\n                      baedaltong_online_amount_sum\n            FROM      delivery_app_orders_stat\n            WHERE     time_unit = 'day'\n) AS d\nFULL OUTER JOIN   (\n            SELECT    business_id,\n                      time,\n                      amount_sum,\n                      baemin_online_amount_sum,\n                      yogiyo_online_amount_sum,\n                      baedaltong_online_amount_sum\n            FROM      delivery_app_orders_stat\n            WHERE     time_unit = 'month'\n) AS m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2021-01-01', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.amount_sum,\n          d.baemin_online_amount_sum,\n          d.yogiyo_online_amount_sum,\n          d.baedaltong_online_amount_sum,\n          m.baemin_online_amount_sum + m.baedaltong_online_amount_sum + m.yogiyo_online_amount_sum AS monthly_delivery_app_sales_amount\nFROM\n(\n            SELECT    business_id,\n                      time,\n                      amount_sum,\n                      baemin_online_amount_sum,\n                      yogiyo_online_amount_sum,\n                      baedaltong_online_amount_sum\n            FROM      delivery_app_orders_stat\n            WHERE     time_unit = 'day'\n) AS d\nFULL OUTER JOIN   (\n            SELECT    business_id,\n                      time,\n                      amount_sum,\n                      baemin_online_amount_sum,\n                      yogiyo_online_amount_sum,\n                      baedaltong_online_amount_sum\n            FROM      delivery_app_orders_stat\n            WHERE     time_unit = 'month'\n) AS m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}]"
491,process:::delivery_app_orders_stat:::build_daily_report,process:::hourly_sales:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_stat_raw\nWHERE\n  (\n    time_unit = 'month' AND\n    time BETWEEN date_format(to_date('2021-01-28', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-28'), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day' AND\n    time BETWEEN '2021-01-28' AND date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day_hour' AND\n    time BETWEEN '2021-01-28' AND date_format(date_add('2021-01-28', 1), 'yyyy-MM-dd')\n  )""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_stat_raw\nWHERE\n  (\n    time_unit = 'month' AND\n    time BETWEEN date_format(to_date('2021-01-01', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-01'), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day' AND\n    time BETWEEN '2021-01-01' AND date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\n  )\n  OR\n  (\n    time_unit = 'day_hour' AND\n    time BETWEEN '2021-01-01' AND date_format(date_add('2021-01-01', 1), 'yyyy-MM-dd')\n  )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    *,\n          date_trunc('month', date) AS month\nFROM      (\n  SELECT    business_id,\n            time AS date,\n            SUM(IF (hour >= 0 AND hour < 6, amount, 0)) AS 0_6_sales_amount,\n            SUM(IF (hour >= 6 AND hour < 11, amount, 0)) AS 6_11_sales_amount,\n            SUM(IF (hour >= 11 AND hour < 14, amount, 0)) AS 11_14_sales_amount,\n            SUM(IF (hour >= 14 AND hour < 17, amount, 0)) AS 14_17_sales_amount,\n            SUM(IF (hour >= 17 AND hour < 24, amount, 0)) AS 17_24_sales_amount\n  FROM      (\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              card_sales_amount AS amount\n    FROM      daily_hour_transactions_stat\n\n    UNION ALL\n\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              (baemin_online_amount_sum + yogiyo_online_amount_sum + baedaltong_online_amount_sum) AS amount\n    FROM      delivery_app_orders_stat\n    WHERE     time_unit = 'day_hour'\n  )\n  GROUP BY  1, 2\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    *,\n          date_trunc('month', date) AS month\nFROM      (\n  SELECT    business_id,\n            time AS date,\n            SUM(IF (hour >= 0 AND hour < 6, amount, 0)) AS 0_6_sales_amount,\n            SUM(IF (hour >= 6 AND hour < 11, amount, 0)) AS 6_11_sales_amount,\n            SUM(IF (hour >= 11 AND hour < 14, amount, 0)) AS 11_14_sales_amount,\n            SUM(IF (hour >= 14 AND hour < 17, amount, 0)) AS 14_17_sales_amount,\n            SUM(IF (hour >= 17 AND hour < 24, amount, 0)) AS 17_24_sales_amount\n  FROM      (\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              card_sales_amount AS amount\n    FROM      daily_hour_transactions_stat\n\n    UNION ALL\n\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              (baemin_online_amount_sum + yogiyo_online_amount_sum + baedaltong_online_amount_sum) AS amount\n    FROM      delivery_app_orders_stat\n    WHERE     time_unit = 'day_hour'\n  )\n  GROUP BY  1, 2\n)""}, 'role': 'process', 'type': 'sql'}]"
492,process:::delivery_app_sales:::build_daily_report,process:::daily_stat_joined:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2021-01-28', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.amount_sum,\n          d.baemin_online_amount_sum,\n          d.yogiyo_online_amount_sum,\n          d.baedaltong_online_amount_sum,\n          m.baemin_online_amount_sum + m.baedaltong_online_amount_sum + m.yogiyo_online_amount_sum AS monthly_delivery_app_sales_amount\nFROM\n(\n            SELECT    business_id,\n                      time,\n                      amount_sum,\n                      baemin_online_amount_sum,\n                      yogiyo_online_amount_sum,\n                      baedaltong_online_amount_sum\n            FROM      delivery_app_orders_stat\n            WHERE     time_unit = 'day'\n) AS d\nFULL OUTER JOIN   (\n            SELECT    business_id,\n                      time,\n                      amount_sum,\n                      baemin_online_amount_sum,\n                      yogiyo_online_amount_sum,\n                      baedaltong_online_amount_sum\n            FROM      delivery_app_orders_stat\n            WHERE     time_unit = 'month'\n) AS m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2021-01-01', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.amount_sum,\n          d.baemin_online_amount_sum,\n          d.yogiyo_online_amount_sum,\n          d.baedaltong_online_amount_sum,\n          m.baemin_online_amount_sum + m.baedaltong_online_amount_sum + m.yogiyo_online_amount_sum AS monthly_delivery_app_sales_amount\nFROM\n(\n            SELECT    business_id,\n                      time,\n                      amount_sum,\n                      baemin_online_amount_sum,\n                      yogiyo_online_amount_sum,\n                      baedaltong_online_amount_sum\n            FROM      delivery_app_orders_stat\n            WHERE     time_unit = 'day'\n) AS d\nFULL OUTER JOIN   (\n            SELECT    business_id,\n                      time,\n                      amount_sum,\n                      baemin_online_amount_sum,\n                      yogiyo_online_amount_sum,\n                      baedaltong_online_amount_sum\n            FROM      delivery_app_orders_stat\n            WHERE     time_unit = 'month'\n) AS m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
493,process:::hourly_sales:::build_daily_report,process:::daily_stat_joined:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    *,\n          date_trunc('month', date) AS month\nFROM      (\n  SELECT    business_id,\n            time AS date,\n            SUM(IF (hour >= 0 AND hour < 6, amount, 0)) AS 0_6_sales_amount,\n            SUM(IF (hour >= 6 AND hour < 11, amount, 0)) AS 6_11_sales_amount,\n            SUM(IF (hour >= 11 AND hour < 14, amount, 0)) AS 11_14_sales_amount,\n            SUM(IF (hour >= 14 AND hour < 17, amount, 0)) AS 14_17_sales_amount,\n            SUM(IF (hour >= 17 AND hour < 24, amount, 0)) AS 17_24_sales_amount\n  FROM      (\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              card_sales_amount AS amount\n    FROM      daily_hour_transactions_stat\n\n    UNION ALL\n\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              (baemin_online_amount_sum + yogiyo_online_amount_sum + baedaltong_online_amount_sum) AS amount\n    FROM      delivery_app_orders_stat\n    WHERE     time_unit = 'day_hour'\n  )\n  GROUP BY  1, 2\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    *,\n          date_trunc('month', date) AS month\nFROM      (\n  SELECT    business_id,\n            time AS date,\n            SUM(IF (hour >= 0 AND hour < 6, amount, 0)) AS 0_6_sales_amount,\n            SUM(IF (hour >= 6 AND hour < 11, amount, 0)) AS 6_11_sales_amount,\n            SUM(IF (hour >= 11 AND hour < 14, amount, 0)) AS 11_14_sales_amount,\n            SUM(IF (hour >= 14 AND hour < 17, amount, 0)) AS 14_17_sales_amount,\n            SUM(IF (hour >= 17 AND hour < 24, amount, 0)) AS 17_24_sales_amount\n  FROM      (\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              card_sales_amount AS amount\n    FROM      daily_hour_transactions_stat\n\n    UNION ALL\n\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              (baemin_online_amount_sum + yogiyo_online_amount_sum + baedaltong_online_amount_sum) AS amount\n    FROM      delivery_app_orders_stat\n    WHERE     time_unit = 'day_hour'\n  )\n  GROUP BY  1, 2\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
494,process:::daily_stat_joined:::build_daily_report,process:::daily_stat:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    *, date_format(date, 'yyyy-MM-dd') AS date_str\nFROM      daily_stat_joined""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    *, date_format(date, 'yyyy-MM-dd') AS date_str\nFROM      daily_stat_joined""}, 'role': 'process', 'type': 'sql'}]"
495,process:::daily_stat:::build_daily_report,process:::merged_stat:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT    *, date_format(date, 'yyyy-MM-dd') AS date_str\nFROM      daily_stat_joined""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT    *, date_format(date, 'yyyy-MM-dd') AS date_str\nFROM      daily_stat_joined""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
496,process:::monthly_card_purchases:::build_daily_report,process:::merged_stat:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS month,\n              SUM(amount) AS amount\n  FROM      card_purchases_stat\n  WHERE     time_unit = 'month'\n  AND       time BETWEEN date_format(to_date('2021-01-28', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-28'), 'yyyy-MM-dd')\n  GROUP BY  business_id, time""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS month,\n              SUM(amount) AS amount\n  FROM      card_purchases_stat\n  WHERE     time_unit = 'month'\n  AND       time BETWEEN date_format(to_date('2021-01-01', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-01'), 'yyyy-MM-dd')\n  GROUP BY  business_id, time""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
497,process:::monthly_hometax:::build_daily_report,process:::merged_stat:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS month,\n              hometax_sales_invoices_amount,\n              hometax_sales_cash_receipts_amount,\n              hometax_purchases_invoices_amount,\n              hometax_purchases_cash_receipts_amount\n  FROM      hometax_stat\n  WHERE     time_unit = 'month'\n  AND       time BETWEEN date_format(to_date('2021-01-28', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-28'), 'yyyy-MM-dd')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""  SELECT      business_id,\n              time AS month,\n              hometax_sales_invoices_amount,\n              hometax_sales_cash_receipts_amount,\n              hometax_purchases_invoices_amount,\n              hometax_purchases_cash_receipts_amount\n  FROM      hometax_stat\n  WHERE     time_unit = 'month'\n  AND       time BETWEEN date_format(to_date('2021-01-01', 'yyyy-MM-dd'), 'yyyy-MM-01') AND date_format(last_day('2021-01-01'), 'yyyy-MM-dd')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
498,process:::merged_stat:::build_daily_report,process:::formatted:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT\n      business_id,\n      card_sales_amount,\n      card_sales_count,\n      card_sales_fee,\n      card_sales_vat_fee,\n      card_sales_payment,\n      card_sales_new_amount,\n      card_sales_returning_amount,\n      card_sales_monthly_amount,\n      hourly_sales_0_6_amount,\n      hourly_sales_6_11_amount,\n      hourly_sales_11_14_amount,\n      hourly_sales_14_17_amount,\n      hourly_sales_17_24_amount,\n      delivery_app_sales_baemin_amount,\n      delivery_app_sales_yogiyo_amount,\n      delivery_app_sales_baedaltong_amount,\n      delivery_app_sales_monthly_amount,\n      card_purchases_monthly_amount,\n      hometax_sales_monthly_invoice_amount,\n      hometax_sales_monthly_cash_amount,\n      hometax_purchases_monthly_cash_amount,\n      hometax_purchases_monthly_invoice_amount,\n\n      card_payments_map.`KB` AS today_payments_kb,\n      card_payments_map.`농협NH` AS today_payments_nh,\n      card_payments_map.`롯데` AS today_payments_lotte,\n      card_payments_map.`배달의민족` AS today_payments_baemin,\n      card_payments_map.`비씨` AS today_payments_bc,\n      card_payments_map.`삼성` AS today_payments_samsung,\n      card_payments_map.`신한` AS today_payments_shinhan,\n      card_payments_map.`하나` AS today_payments_hana,\n      card_payments_map.`현대` AS today_payments_hyundai,\n      card_payments_map.`요기요` AS today_payments_yogiyo,\n      card_payments_map.`배달통` AS today_payments_baedaltong\nFROM (\n   SELECT\n           CAST(business_id AS LONG) AS business_id,\n           daily_stat.card_sales.card_sales_amount AS card_sales_amount,\n           daily_stat.card_sales.card_sales_count AS card_sales_count,\n           daily_stat.card_sales.card_sales_fee AS card_sales_fee,\n           daily_stat.card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n           daily_stat.card_sales.card_sales_payment AS card_sales_payment,\n           daily_stat.card_sales.returning_amount AS card_sales_returning_amount,\n           daily_stat.card_sales.new_amount AS card_sales_new_amount,\n           daily_stat.card_sales.monthly_card_sales_amount AS card_sales_monthly_amount,\n           daily_stat.hourly_sales.0_6_sales_amount AS hourly_sales_0_6_amount,\n           daily_stat.hourly_sales.6_11_sales_amount AS hourly_sales_6_11_amount,\n           daily_stat.hourly_sales.11_14_sales_amount AS hourly_sales_11_14_amount,\n           daily_stat.hourly_sales.14_17_sales_amount AS hourly_sales_14_17_amount,\n           daily_stat.hourly_sales.17_24_sales_amount AS hourly_sales_17_24_amount,\n           daily_stat.delivery_app_sales.baemin_online_amount_sum AS delivery_app_sales_baemin_amount,\n           daily_stat.delivery_app_sales.yogiyo_online_amount_sum AS delivery_app_sales_yogiyo_amount,\n           daily_stat.delivery_app_sales.baedaltong_online_amount_sum AS delivery_app_sales_baedaltong_amount,\n           daily_stat.delivery_app_sales.monthly_delivery_app_sales_amount AS delivery_app_sales_monthly_amount,\n\n           monthly_card_purchases.amount AS card_purchases_monthly_amount,\n\n           monthly_hometax.hometax_sales_invoices_amount AS hometax_sales_monthly_invoice_amount,\n           monthly_hometax.hometax_sales_cash_receipts_amount AS hometax_sales_monthly_cash_amount,\n           monthly_hometax.hometax_purchases_invoices_amount AS hometax_purchases_monthly_invoice_amount,\n           monthly_hometax.hometax_purchases_cash_receipts_amount AS hometax_purchases_monthly_cash_amount,\n\n           map_from_entries(transform(daily_stat.card_payments.payments, m -> named_struct('issuer', m.issuer_name, 'amount', nvl(m.received, 0)))) AS card_payments_map\n\n    FROM    merged_stat\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT\n      business_id,\n      card_sales_amount,\n      card_sales_count,\n      card_sales_fee,\n      card_sales_vat_fee,\n      card_sales_payment,\n      card_sales_new_amount,\n      card_sales_returning_amount,\n      card_sales_monthly_amount,\n      hourly_sales_0_6_amount,\n      hourly_sales_6_11_amount,\n      hourly_sales_11_14_amount,\n      hourly_sales_14_17_amount,\n      hourly_sales_17_24_amount,\n      delivery_app_sales_baemin_amount,\n      delivery_app_sales_yogiyo_amount,\n      delivery_app_sales_baedaltong_amount,\n      delivery_app_sales_monthly_amount,\n      card_purchases_monthly_amount,\n      hometax_sales_monthly_invoice_amount,\n      hometax_sales_monthly_cash_amount,\n      hometax_purchases_monthly_cash_amount,\n      hometax_purchases_monthly_invoice_amount,\n\n      card_payments_map.`KB` AS today_payments_kb,\n      card_payments_map.`농협NH` AS today_payments_nh,\n      card_payments_map.`롯데` AS today_payments_lotte,\n      card_payments_map.`배달의민족` AS today_payments_baemin,\n      card_payments_map.`비씨` AS today_payments_bc,\n      card_payments_map.`삼성` AS today_payments_samsung,\n      card_payments_map.`신한` AS today_payments_shinhan,\n      card_payments_map.`하나` AS today_payments_hana,\n      card_payments_map.`현대` AS today_payments_hyundai,\n      card_payments_map.`요기요` AS today_payments_yogiyo,\n      card_payments_map.`배달통` AS today_payments_baedaltong\nFROM (\n   SELECT\n           CAST(business_id AS LONG) AS business_id,\n           daily_stat.card_sales.card_sales_amount AS card_sales_amount,\n           daily_stat.card_sales.card_sales_count AS card_sales_count,\n           daily_stat.card_sales.card_sales_fee AS card_sales_fee,\n           daily_stat.card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n           daily_stat.card_sales.card_sales_payment AS card_sales_payment,\n           daily_stat.card_sales.returning_amount AS card_sales_returning_amount,\n           daily_stat.card_sales.new_amount AS card_sales_new_amount,\n           daily_stat.card_sales.monthly_card_sales_amount AS card_sales_monthly_amount,\n           daily_stat.hourly_sales.0_6_sales_amount AS hourly_sales_0_6_amount,\n           daily_stat.hourly_sales.6_11_sales_amount AS hourly_sales_6_11_amount,\n           daily_stat.hourly_sales.11_14_sales_amount AS hourly_sales_11_14_amount,\n           daily_stat.hourly_sales.14_17_sales_amount AS hourly_sales_14_17_amount,\n           daily_stat.hourly_sales.17_24_sales_amount AS hourly_sales_17_24_amount,\n           daily_stat.delivery_app_sales.baemin_online_amount_sum AS delivery_app_sales_baemin_amount,\n           daily_stat.delivery_app_sales.yogiyo_online_amount_sum AS delivery_app_sales_yogiyo_amount,\n           daily_stat.delivery_app_sales.baedaltong_online_amount_sum AS delivery_app_sales_baedaltong_amount,\n           daily_stat.delivery_app_sales.monthly_delivery_app_sales_amount AS delivery_app_sales_monthly_amount,\n\n           monthly_card_purchases.amount AS card_purchases_monthly_amount,\n\n           monthly_hometax.hometax_sales_invoices_amount AS hometax_sales_monthly_invoice_amount,\n           monthly_hometax.hometax_sales_cash_receipts_amount AS hometax_sales_monthly_cash_amount,\n           monthly_hometax.hometax_purchases_invoices_amount AS hometax_purchases_monthly_invoice_amount,\n           monthly_hometax.hometax_purchases_cash_receipts_amount AS hometax_purchases_monthly_cash_amount,\n\n           map_from_entries(transform(daily_stat.card_payments.payments, m -> named_struct('issuer', m.issuer_name, 'amount', nvl(m.received, 0)))) AS card_payments_map\n\n    FROM    merged_stat\n)""}, 'role': 'process', 'type': 'sql'}]"
499,process:::formatted:::build_daily_report,s3://kcd-de-production/raw/report/snowdon/daily_report/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT\n      business_id,\n      card_sales_amount,\n      card_sales_count,\n      card_sales_fee,\n      card_sales_vat_fee,\n      card_sales_payment,\n      card_sales_new_amount,\n      card_sales_returning_amount,\n      card_sales_monthly_amount,\n      hourly_sales_0_6_amount,\n      hourly_sales_6_11_amount,\n      hourly_sales_11_14_amount,\n      hourly_sales_14_17_amount,\n      hourly_sales_17_24_amount,\n      delivery_app_sales_baemin_amount,\n      delivery_app_sales_yogiyo_amount,\n      delivery_app_sales_baedaltong_amount,\n      delivery_app_sales_monthly_amount,\n      card_purchases_monthly_amount,\n      hometax_sales_monthly_invoice_amount,\n      hometax_sales_monthly_cash_amount,\n      hometax_purchases_monthly_cash_amount,\n      hometax_purchases_monthly_invoice_amount,\n\n      card_payments_map.`KB` AS today_payments_kb,\n      card_payments_map.`농협NH` AS today_payments_nh,\n      card_payments_map.`롯데` AS today_payments_lotte,\n      card_payments_map.`배달의민족` AS today_payments_baemin,\n      card_payments_map.`비씨` AS today_payments_bc,\n      card_payments_map.`삼성` AS today_payments_samsung,\n      card_payments_map.`신한` AS today_payments_shinhan,\n      card_payments_map.`하나` AS today_payments_hana,\n      card_payments_map.`현대` AS today_payments_hyundai,\n      card_payments_map.`요기요` AS today_payments_yogiyo,\n      card_payments_map.`배달통` AS today_payments_baedaltong\nFROM (\n   SELECT\n           CAST(business_id AS LONG) AS business_id,\n           daily_stat.card_sales.card_sales_amount AS card_sales_amount,\n           daily_stat.card_sales.card_sales_count AS card_sales_count,\n           daily_stat.card_sales.card_sales_fee AS card_sales_fee,\n           daily_stat.card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n           daily_stat.card_sales.card_sales_payment AS card_sales_payment,\n           daily_stat.card_sales.returning_amount AS card_sales_returning_amount,\n           daily_stat.card_sales.new_amount AS card_sales_new_amount,\n           daily_stat.card_sales.monthly_card_sales_amount AS card_sales_monthly_amount,\n           daily_stat.hourly_sales.0_6_sales_amount AS hourly_sales_0_6_amount,\n           daily_stat.hourly_sales.6_11_sales_amount AS hourly_sales_6_11_amount,\n           daily_stat.hourly_sales.11_14_sales_amount AS hourly_sales_11_14_amount,\n           daily_stat.hourly_sales.14_17_sales_amount AS hourly_sales_14_17_amount,\n           daily_stat.hourly_sales.17_24_sales_amount AS hourly_sales_17_24_amount,\n           daily_stat.delivery_app_sales.baemin_online_amount_sum AS delivery_app_sales_baemin_amount,\n           daily_stat.delivery_app_sales.yogiyo_online_amount_sum AS delivery_app_sales_yogiyo_amount,\n           daily_stat.delivery_app_sales.baedaltong_online_amount_sum AS delivery_app_sales_baedaltong_amount,\n           daily_stat.delivery_app_sales.monthly_delivery_app_sales_amount AS delivery_app_sales_monthly_amount,\n\n           monthly_card_purchases.amount AS card_purchases_monthly_amount,\n\n           monthly_hometax.hometax_sales_invoices_amount AS hometax_sales_monthly_invoice_amount,\n           monthly_hometax.hometax_sales_cash_receipts_amount AS hometax_sales_monthly_cash_amount,\n           monthly_hometax.hometax_purchases_invoices_amount AS hometax_purchases_monthly_invoice_amount,\n           monthly_hometax.hometax_purchases_cash_receipts_amount AS hometax_purchases_monthly_cash_amount,\n\n           map_from_entries(transform(daily_stat.card_payments.payments, m -> named_struct('issuer', m.issuer_name, 'amount', nvl(m.received, 0)))) AS card_payments_map\n\n    FROM    merged_stat\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT\n      business_id,\n      card_sales_amount,\n      card_sales_count,\n      card_sales_fee,\n      card_sales_vat_fee,\n      card_sales_payment,\n      card_sales_new_amount,\n      card_sales_returning_amount,\n      card_sales_monthly_amount,\n      hourly_sales_0_6_amount,\n      hourly_sales_6_11_amount,\n      hourly_sales_11_14_amount,\n      hourly_sales_14_17_amount,\n      hourly_sales_17_24_amount,\n      delivery_app_sales_baemin_amount,\n      delivery_app_sales_yogiyo_amount,\n      delivery_app_sales_baedaltong_amount,\n      delivery_app_sales_monthly_amount,\n      card_purchases_monthly_amount,\n      hometax_sales_monthly_invoice_amount,\n      hometax_sales_monthly_cash_amount,\n      hometax_purchases_monthly_cash_amount,\n      hometax_purchases_monthly_invoice_amount,\n\n      card_payments_map.`KB` AS today_payments_kb,\n      card_payments_map.`농협NH` AS today_payments_nh,\n      card_payments_map.`롯데` AS today_payments_lotte,\n      card_payments_map.`배달의민족` AS today_payments_baemin,\n      card_payments_map.`비씨` AS today_payments_bc,\n      card_payments_map.`삼성` AS today_payments_samsung,\n      card_payments_map.`신한` AS today_payments_shinhan,\n      card_payments_map.`하나` AS today_payments_hana,\n      card_payments_map.`현대` AS today_payments_hyundai,\n      card_payments_map.`요기요` AS today_payments_yogiyo,\n      card_payments_map.`배달통` AS today_payments_baedaltong\nFROM (\n   SELECT\n           CAST(business_id AS LONG) AS business_id,\n           daily_stat.card_sales.card_sales_amount AS card_sales_amount,\n           daily_stat.card_sales.card_sales_count AS card_sales_count,\n           daily_stat.card_sales.card_sales_fee AS card_sales_fee,\n           daily_stat.card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n           daily_stat.card_sales.card_sales_payment AS card_sales_payment,\n           daily_stat.card_sales.returning_amount AS card_sales_returning_amount,\n           daily_stat.card_sales.new_amount AS card_sales_new_amount,\n           daily_stat.card_sales.monthly_card_sales_amount AS card_sales_monthly_amount,\n           daily_stat.hourly_sales.0_6_sales_amount AS hourly_sales_0_6_amount,\n           daily_stat.hourly_sales.6_11_sales_amount AS hourly_sales_6_11_amount,\n           daily_stat.hourly_sales.11_14_sales_amount AS hourly_sales_11_14_amount,\n           daily_stat.hourly_sales.14_17_sales_amount AS hourly_sales_14_17_amount,\n           daily_stat.hourly_sales.17_24_sales_amount AS hourly_sales_17_24_amount,\n           daily_stat.delivery_app_sales.baemin_online_amount_sum AS delivery_app_sales_baemin_amount,\n           daily_stat.delivery_app_sales.yogiyo_online_amount_sum AS delivery_app_sales_yogiyo_amount,\n           daily_stat.delivery_app_sales.baedaltong_online_amount_sum AS delivery_app_sales_baedaltong_amount,\n           daily_stat.delivery_app_sales.monthly_delivery_app_sales_amount AS delivery_app_sales_monthly_amount,\n\n           monthly_card_purchases.amount AS card_purchases_monthly_amount,\n\n           monthly_hometax.hometax_sales_invoices_amount AS hometax_sales_monthly_invoice_amount,\n           monthly_hometax.hometax_sales_cash_receipts_amount AS hometax_sales_monthly_cash_amount,\n           monthly_hometax.hometax_purchases_invoices_amount AS hometax_purchases_monthly_invoice_amount,\n           monthly_hometax.hometax_purchases_cash_receipts_amount AS hometax_purchases_monthly_cash_amount,\n\n           map_from_entries(transform(daily_stat.card_payments.payments, m -> named_struct('issuer', m.issuer_name, 'amount', nvl(m.received, 0)))) AS card_payments_map\n\n    FROM    merged_stat\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/report/snowdon/daily_report/date_id=2021-01-28', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/report/snowdon/daily_report/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}, {'filename': 'check_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/report/snowdon/daily_report/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}]"
500,process:::formatted:::build_daily_report,s3://kcd-de-staging/raw/report/snowdon/daily_report/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'sql': ""SELECT\n      business_id,\n      card_sales_amount,\n      card_sales_count,\n      card_sales_fee,\n      card_sales_vat_fee,\n      card_sales_payment,\n      card_sales_new_amount,\n      card_sales_returning_amount,\n      card_sales_monthly_amount,\n      hourly_sales_0_6_amount,\n      hourly_sales_6_11_amount,\n      hourly_sales_11_14_amount,\n      hourly_sales_14_17_amount,\n      hourly_sales_17_24_amount,\n      delivery_app_sales_baemin_amount,\n      delivery_app_sales_yogiyo_amount,\n      delivery_app_sales_baedaltong_amount,\n      delivery_app_sales_monthly_amount,\n      card_purchases_monthly_amount,\n      hometax_sales_monthly_invoice_amount,\n      hometax_sales_monthly_cash_amount,\n      hometax_purchases_monthly_cash_amount,\n      hometax_purchases_monthly_invoice_amount,\n\n      card_payments_map.`KB` AS today_payments_kb,\n      card_payments_map.`농협NH` AS today_payments_nh,\n      card_payments_map.`롯데` AS today_payments_lotte,\n      card_payments_map.`배달의민족` AS today_payments_baemin,\n      card_payments_map.`비씨` AS today_payments_bc,\n      card_payments_map.`삼성` AS today_payments_samsung,\n      card_payments_map.`신한` AS today_payments_shinhan,\n      card_payments_map.`하나` AS today_payments_hana,\n      card_payments_map.`현대` AS today_payments_hyundai,\n      card_payments_map.`요기요` AS today_payments_yogiyo,\n      card_payments_map.`배달통` AS today_payments_baedaltong\nFROM (\n   SELECT\n           CAST(business_id AS LONG) AS business_id,\n           daily_stat.card_sales.card_sales_amount AS card_sales_amount,\n           daily_stat.card_sales.card_sales_count AS card_sales_count,\n           daily_stat.card_sales.card_sales_fee AS card_sales_fee,\n           daily_stat.card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n           daily_stat.card_sales.card_sales_payment AS card_sales_payment,\n           daily_stat.card_sales.returning_amount AS card_sales_returning_amount,\n           daily_stat.card_sales.new_amount AS card_sales_new_amount,\n           daily_stat.card_sales.monthly_card_sales_amount AS card_sales_monthly_amount,\n           daily_stat.hourly_sales.0_6_sales_amount AS hourly_sales_0_6_amount,\n           daily_stat.hourly_sales.6_11_sales_amount AS hourly_sales_6_11_amount,\n           daily_stat.hourly_sales.11_14_sales_amount AS hourly_sales_11_14_amount,\n           daily_stat.hourly_sales.14_17_sales_amount AS hourly_sales_14_17_amount,\n           daily_stat.hourly_sales.17_24_sales_amount AS hourly_sales_17_24_amount,\n           daily_stat.delivery_app_sales.baemin_online_amount_sum AS delivery_app_sales_baemin_amount,\n           daily_stat.delivery_app_sales.yogiyo_online_amount_sum AS delivery_app_sales_yogiyo_amount,\n           daily_stat.delivery_app_sales.baedaltong_online_amount_sum AS delivery_app_sales_baedaltong_amount,\n           daily_stat.delivery_app_sales.monthly_delivery_app_sales_amount AS delivery_app_sales_monthly_amount,\n\n           monthly_card_purchases.amount AS card_purchases_monthly_amount,\n\n           monthly_hometax.hometax_sales_invoices_amount AS hometax_sales_monthly_invoice_amount,\n           monthly_hometax.hometax_sales_cash_receipts_amount AS hometax_sales_monthly_cash_amount,\n           monthly_hometax.hometax_purchases_invoices_amount AS hometax_purchases_monthly_invoice_amount,\n           monthly_hometax.hometax_purchases_cash_receipts_amount AS hometax_purchases_monthly_cash_amount,\n\n           map_from_entries(transform(daily_stat.card_payments.payments, m -> named_struct('issuer', m.issuer_name, 'amount', nvl(m.received, 0)))) AS card_payments_map\n\n    FROM    merged_stat\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': ""SELECT\n      business_id,\n      card_sales_amount,\n      card_sales_count,\n      card_sales_fee,\n      card_sales_vat_fee,\n      card_sales_payment,\n      card_sales_new_amount,\n      card_sales_returning_amount,\n      card_sales_monthly_amount,\n      hourly_sales_0_6_amount,\n      hourly_sales_6_11_amount,\n      hourly_sales_11_14_amount,\n      hourly_sales_14_17_amount,\n      hourly_sales_17_24_amount,\n      delivery_app_sales_baemin_amount,\n      delivery_app_sales_yogiyo_amount,\n      delivery_app_sales_baedaltong_amount,\n      delivery_app_sales_monthly_amount,\n      card_purchases_monthly_amount,\n      hometax_sales_monthly_invoice_amount,\n      hometax_sales_monthly_cash_amount,\n      hometax_purchases_monthly_cash_amount,\n      hometax_purchases_monthly_invoice_amount,\n\n      card_payments_map.`KB` AS today_payments_kb,\n      card_payments_map.`농협NH` AS today_payments_nh,\n      card_payments_map.`롯데` AS today_payments_lotte,\n      card_payments_map.`배달의민족` AS today_payments_baemin,\n      card_payments_map.`비씨` AS today_payments_bc,\n      card_payments_map.`삼성` AS today_payments_samsung,\n      card_payments_map.`신한` AS today_payments_shinhan,\n      card_payments_map.`하나` AS today_payments_hana,\n      card_payments_map.`현대` AS today_payments_hyundai,\n      card_payments_map.`요기요` AS today_payments_yogiyo,\n      card_payments_map.`배달통` AS today_payments_baedaltong\nFROM (\n   SELECT\n           CAST(business_id AS LONG) AS business_id,\n           daily_stat.card_sales.card_sales_amount AS card_sales_amount,\n           daily_stat.card_sales.card_sales_count AS card_sales_count,\n           daily_stat.card_sales.card_sales_fee AS card_sales_fee,\n           daily_stat.card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n           daily_stat.card_sales.card_sales_payment AS card_sales_payment,\n           daily_stat.card_sales.returning_amount AS card_sales_returning_amount,\n           daily_stat.card_sales.new_amount AS card_sales_new_amount,\n           daily_stat.card_sales.monthly_card_sales_amount AS card_sales_monthly_amount,\n           daily_stat.hourly_sales.0_6_sales_amount AS hourly_sales_0_6_amount,\n           daily_stat.hourly_sales.6_11_sales_amount AS hourly_sales_6_11_amount,\n           daily_stat.hourly_sales.11_14_sales_amount AS hourly_sales_11_14_amount,\n           daily_stat.hourly_sales.14_17_sales_amount AS hourly_sales_14_17_amount,\n           daily_stat.hourly_sales.17_24_sales_amount AS hourly_sales_17_24_amount,\n           daily_stat.delivery_app_sales.baemin_online_amount_sum AS delivery_app_sales_baemin_amount,\n           daily_stat.delivery_app_sales.yogiyo_online_amount_sum AS delivery_app_sales_yogiyo_amount,\n           daily_stat.delivery_app_sales.baedaltong_online_amount_sum AS delivery_app_sales_baedaltong_amount,\n           daily_stat.delivery_app_sales.monthly_delivery_app_sales_amount AS delivery_app_sales_monthly_amount,\n\n           monthly_card_purchases.amount AS card_purchases_monthly_amount,\n\n           monthly_hometax.hometax_sales_invoices_amount AS hometax_sales_monthly_invoice_amount,\n           monthly_hometax.hometax_sales_cash_receipts_amount AS hometax_sales_monthly_cash_amount,\n           monthly_hometax.hometax_purchases_invoices_amount AS hometax_purchases_monthly_invoice_amount,\n           monthly_hometax.hometax_purchases_cash_receipts_amount AS hometax_purchases_monthly_cash_amount,\n\n           map_from_entries(transform(daily_stat.card_payments.payments, m -> named_struct('issuer', m.issuer_name, 'amount', nvl(m.received, 0)))) AS card_payments_map\n\n    FROM    merged_stat\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/raw/report/snowdon/daily_report/date_id=2021-01-01'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/report/snowdon/daily_report/date_id=2021-01-01', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
501,s3://kcd-de-production/raw/report/snowdon/daily_report/,process:::merged:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/report/snowdon/daily_report/date_id=2021-01-28', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/report/snowdon/daily_report/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}, {'filename': 'check_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/report/snowdon/daily_report/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT    *,\n          (hourly_sales_0_6_amount + hourly_sales_6_11_amount + hourly_sales_11_14_amount + hourly_sales_14_17_amount + hourly_sales_17_24_amount + hourly_sales_etc_amount) AS hourly_sales_amount_sum\nFROM (\nSELECT    target_id, business_id, user_id, title, template_code, url_mobile,\n          NVL(card_sales_amount, 0) AS card_sales_amount,\n          NVL(card_sales_count, 0) AS card_sales_count,\n          NVL(card_sales_fee, 0) AS card_sales_fee,\n          NVL(card_sales_vat_fee, 0) AS card_sales_vat_fee,\n          NVL(card_sales_payment, 0) AS card_sales_payment,\n          NVL(card_sales_new_amount, 0) AS card_sales_new_amount,\n          NVL(card_sales_returning_amount, 0) AS card_sales_returning_amount,\n          NVL(card_sales_monthly_amount, 0) AS card_sales_monthly_amount,\n          NVL(hourly_sales_0_6_amount, 0) AS hourly_sales_0_6_amount,\n          NVL(hourly_sales_6_11_amount, 0) AS hourly_sales_6_11_amount,\n          NVL(hourly_sales_11_14_amount, 0) AS hourly_sales_11_14_amount,\n          NVL(hourly_sales_14_17_amount, 0) AS hourly_sales_14_17_amount,\n          NVL(hourly_sales_17_24_amount, 0) AS hourly_sales_17_24_amount,\n          NVL(hourly_sales_etc_amount, 0) AS hourly_sales_etc_amount,\n          NVL(delivery_app_sales_monthly_amount, 0) AS delivery_app_sales_monthly_amount,\n          NVL(card_purchases_monthly_amount, 0) AS card_purchases_monthly_amount,\n          NVL(hometax_sales_monthly_invoice_amount, 0) AS hometax_sales_monthly_invoice_amount,\n          NVL(hometax_sales_monthly_cash_amount, 0) AS hometax_sales_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_cash_amount, 0) AS hometax_purchases_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_invoice_amount, 0) AS hometax_purchases_monthly_invoice_amount,\n          NVL(delivery_app_sales_baemin_amount, 0) AS delivery_app_sales_baemin_amount,\n          NVL(delivery_app_sales_yogiyo_amount, 0) AS delivery_app_sales_yogiyo_amount,\n          NVL(delivery_app_sales_baedaltong_amount, 0) AS delivery_app_sales_baedaltong_amount,\n          array(\n              named_struct('issuer_name', 'KB', 'amount', nvl(today_payments_kb, 0L)),\n              named_struct('issuer_name', '농협NH', 'amount', nvl(today_payments_nh, 0L)),\n              named_struct('issuer_name', '롯데', 'amount', nvl(today_payments_lotte, 0L)),\n              named_struct('issuer_name', '비씨', 'amount', nvl(today_payments_bc, 0L)),\n              named_struct('issuer_name', '삼성', 'amount', nvl(today_payments_samsung, 0L)),\n              named_struct('issuer_name', '신한', 'amount', nvl(today_payments_shinhan, 0L)),\n              named_struct('issuer_name', '하나', 'amount', nvl(today_payments_hana, 0L)),\n              named_struct('issuer_name', '현대', 'amount', nvl(today_payments_hyundai, 0L)),\n              named_struct('issuer_name', '배달의민족', 'amount', nvl(today_payments_baemin, 0L)),\n              named_struct('issuer_name', '요기요', 'amount', nvl(today_payments_yogiyo, 0L)),\n              named_struct('issuer_name', '배달통', 'amount', nvl(today_payments_baedaltong, 0L))\n          ) AS today_payments_arr,\n          array(\n              named_struct('app_name', '배달의민족', 'amount', delivery_app_sales_baemin_amount),\n              named_struct('app_name', '요기요', 'amount', delivery_app_sales_yogiyo_amount),\n              named_struct('app_name', '배달통', 'amount', delivery_app_sales_baedaltong_amount)\n          ) AS delivery_app_sales_arr,\n          future_payments_arr,\n          bank_accounts_arr,\n          today_card_purchases_arr\nFROM (\n        SELECT\n                  o.target_id, o.business_id, o.user_id, o.title, o.template_code, o.url_mobile,\n\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_amount'),           n.card_sales_amount, o.card_sales_amount) AS card_sales_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_count'),            n.card_sales_count, o.card_sales_count) AS card_sales_count,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_fee'),              n.card_sales_fee, o.card_sales_fee) AS card_sales_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_vat_fee'),          n.card_sales_vat_fee, o.card_sales_vat_fee) AS card_sales_vat_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_payment'),          n.card_sales_payment, o.card_sales_payment) AS card_sales_payment,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_new_amount'),       n.card_sales_new_amount, o.card_sales_new_amount) AS card_sales_new_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_returning_amount'), n.card_sales_returning_amount, o.card_sales_returning_amount) AS card_sales_returning_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_monthly_amount'),   n.card_sales_monthly_amount, o.card_sales_monthly_amount) AS card_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_0_6_amount'),     n.hourly_sales_0_6_amount, o.hourly_sales_0_6_amount) AS hourly_sales_0_6_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_6_11_amount'),    n.hourly_sales_6_11_amount, o.hourly_sales_6_11_amount) AS hourly_sales_6_11_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_11_14_amount'),   n.hourly_sales_11_14_amount, o.hourly_sales_11_14_amount) AS hourly_sales_11_14_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_14_17_amount'),   n.hourly_sales_14_17_amount, o.hourly_sales_14_17_amount) AS hourly_sales_14_17_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_17_24_amount'),   n.hourly_sales_17_24_amount, o.hourly_sales_17_24_amount) AS hourly_sales_17_24_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_kb'),           n.today_payments_kb, o.today_payments_kb) AS today_payments_kb,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_nh'),           n.today_payments_nh, o.today_payments_nh) AS today_payments_nh,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_lotte'),        n.today_payments_lotte, o.today_payments_lotte) AS today_payments_lotte,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baemin'),       n.today_payments_baemin, o.today_payments_baemin) AS today_payments_baemin,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_bc'),           n.today_payments_bc, o.today_payments_bc) AS today_payments_bc,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_samsung'),      n.today_payments_samsung, o.today_payments_samsung) AS today_payments_samsung,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_shinhan'),      n.today_payments_shinhan, o.today_payments_shinhan) AS today_payments_shinhan,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hana'),         n.today_payments_hana, o.today_payments_hana) AS today_payments_hana,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hyundai'),      n.today_payments_hyundai, o.today_payments_hyundai) AS today_payments_hyundai,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_yogiyo'),       n.today_payments_yogiyo, o.today_payments_yogiyo) AS today_payments_yogiyo,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baedaltong'),   n.today_payments_baedaltong, o.today_payments_baedaltong) AS today_payments_baedaltong,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baemin_amount'),        n.delivery_app_sales_baemin_amount, o.delivery_app_sales_baemin_amount) AS delivery_app_sales_baemin_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_yogiyo_amount'),        n.delivery_app_sales_yogiyo_amount, o.delivery_app_sales_yogiyo_amount) AS delivery_app_sales_yogiyo_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baedaltong_amount'),    n.delivery_app_sales_baedaltong_amount, o.delivery_app_sales_baedaltong_amount) AS delivery_app_sales_baedaltong_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_monthly_amount'),       n.delivery_app_sales_monthly_amount, o.delivery_app_sales_monthly_amount) AS delivery_app_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_purchases_monthly_amount'),           n.card_purchases_monthly_amount, o.card_purchases_monthly_amount) AS card_purchases_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_invoice_amount'),    n.hometax_sales_monthly_invoice_amount, o.hometax_sales_monthly_invoice_amount) AS hometax_sales_monthly_invoice_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_cash_amount'),       n.hometax_sales_monthly_cash_amount, o.hometax_sales_monthly_cash_amount) AS hometax_sales_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_cash_amount'),   n.hometax_purchases_monthly_cash_amount, o.hometax_purchases_monthly_cash_amount) AS hometax_purchases_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_invoice_amount'),n.hometax_purchases_monthly_invoice_amount, o.hometax_purchases_monthly_invoice_amount) AS hometax_purchases_monthly_invoice_amount,\n                  o.hourly_sales_etc_amount,\n                  o.future_payments_arr,\n                  o.bank_accounts_arr,\n                  o.today_card_purchases_arr\n        FROM      formatted_report_logs AS o\n        LEFT OUTER JOIN   formatted_daily_report AS n\n        ON        o.business_id = n.business_id\n)\n)""}, 'role': 'process', 'type': 'sql'}]"
502,s3://kcd-de-production/raw/report/snowdon/daily_report/,process:::formatted_new_report_logs:::check_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_report.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/report/snowdon/daily_report/date_id=2021-01-28', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/report/snowdon/daily_report/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}, {'filename': 'check_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/report/snowdon/daily_report/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'check_daily_reports.json', 'options': {'sql': 'SELECT\n        business_id,\n        struct(\n            card_sales_amount,\n            card_sales_count,\n            card_sales_fee,\n            card_sales_vat_fee,\n            card_sales_payment,\n            card_sales_new_amount,\n            card_sales_returning_amount,\n            card_sales_monthly_amount,\n            hourly_sales_0_6_amount,\n            hourly_sales_6_11_amount,\n            hourly_sales_11_14_amount,\n            hourly_sales_14_17_amount,\n            hourly_sales_17_24_amount,\n            today_payments_kb,\n            today_payments_nh,\n            today_payments_lotte,\n            today_payments_baemin,\n            today_payments_bc,\n            today_payments_samsung,\n            today_payments_shinhan,\n            today_payments_hana,\n            today_payments_hyundai,\n            delivery_app_sales_baemin_amount,\n            delivery_app_sales_yogiyo_amount,\n            delivery_app_sales_baedaltong_amount,\n            delivery_app_sales_monthly_amount,\n            card_purchases_monthly_amount,\n            hometax_sales_monthly_invoice_amount,\n            hometax_sales_monthly_cash_amount,\n            hometax_purchases_monthly_cash_amount,\n            hometax_purchases_monthly_invoice_amount\n        ) AS data\nFROM new_report_logs'}, 'role': 'process', 'type': 'sql'}]"
503,s3://kcd-de-production/data_sources/lookup/subject=paynote/paynote_location_mapping.tsv,process:::filtered_business_with_paynote_location:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=paynote/paynote_location_mapping.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': 'SELECT meta.*,\n       paynote_location_mapping.depth_1_code AS paynote_location_depth_1_code,\n       paynote_location_mapping.depth_2_code AS paynote_location_depth_2_code\nFROM (\n        SELECT\n                *,\n                array(b_code, sigungu_code, sido_code) AS location_codes\n        FROM   filtered_business\n) AS meta\nJOIN paynote_location_mapping\nON array_contains(meta.location_codes, paynote_location_mapping.location_code)'}, 'role': 'process', 'type': 'sql'}]"
504,s3://kcd-de-production/data_cubes/dimension/name=registration_number_meta,process:::filtered_business:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        registration_number,\n        places.name,\n\n        location.full_address,\n        location.b_code,\n        location.sigungu_code,\n        location.sido_code,\n\n        CONCAT(classification.depth_1_name, '>', classification.depth_2_name, '>', classification.depth_3_name) AS classification_full_name,\n\n        places.reviews.total_review_cnt AS place_review_cnt,\n        places.reviews.total_avg_rating AS place_avg_rating,\n\n        cardsales.cashnote.amount_sum AS cashnote_amount_sum,\n        cardsales.cashnote.tx_count AS cashnote_tx_count,\n        cardsales.paynote_age_band_gender.total_amount_sum AS paynote_amount_sum,\n        cardsales.paynote_age_band_gender.total_tx_count AS paynote_tx_count,\n        cardsales.paynote_age_band_gender.stats AS age_band_gender_stats,\n        cardsales.paynote_age_band.stats AS age_band_stats,\n        cardsales.paynote_gender.stats AS gender_stats\nFROM   registration_number_meta\nWHERE  businesses.merchant_size <= 8\nAND    businesses.is_paynote_business = true\nAND    classification.depth_1_code = 'D'\nAND    classification.depth_2_code != 'D13'""}, 'role': 'process', 'type': 'sql'}]"
505,s3://kcd-de-production/data_cubes/dimension/name=registration_number_meta,process:::payments:::build_user_categories,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'build_user_categories.json', 'options': {'sql': ""SELECT a.*,\n       u.client_user_id,\n       u.gender,\n       year(current_date()) - year(u.birthday) + 1 AS age,\n       u.birthday,\n       u.plus_friends\nFROM   (\n    SELECT p.*,\n           m.location.sido,\n           m.location.sigungu,\n           m.location.dong,\n           m.location.geo_point,\n           m.classification.depth_1_name,\n           m.classification.depth_2_name,\n           m.classification.depth_3_name\n    FROM   card_payments p LEFT OUTER JOIN registration_number_meta m\n    ON     (p.registration_number = m.registration_number)\n) a, (\n  SELECT  m.client_user_id,\n          m.created,\n          u.id,\n          u.gender,\n          u.birthday,\n          u.plus_friends\n  FROM    users u, client_user_mapping m\n  WHERE   u.ci = m.ci\n  AND     m.realm_id = 'paynote'\n  AND     m.client_id = 'gsshop'\n) u\nWHERE  a.user_id = u.id""}, 'role': 'process', 'type': 'sql'}]"
506,s3://kcd-de-production/data_cubes/dimension/name=registration_number_meta,process:::add_timestamp:::registration_number_meta_es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'registration_number_meta_es_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-29', 'yyyy-MM-dd') AS timestamp,\n            *\n  FROM      registration_number_meta\n  WHERE     registration_number IS NOT NULL AND registration_number != ''""}, 'role': 'process', 'type': 'sql'}]"
507,process:::filtered_business:::paynote_place_topk,process:::filtered_business_with_paynote_location:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        registration_number,\n        places.name,\n\n        location.full_address,\n        location.b_code,\n        location.sigungu_code,\n        location.sido_code,\n\n        CONCAT(classification.depth_1_name, '>', classification.depth_2_name, '>', classification.depth_3_name) AS classification_full_name,\n\n        places.reviews.total_review_cnt AS place_review_cnt,\n        places.reviews.total_avg_rating AS place_avg_rating,\n\n        cardsales.cashnote.amount_sum AS cashnote_amount_sum,\n        cardsales.cashnote.tx_count AS cashnote_tx_count,\n        cardsales.paynote_age_band_gender.total_amount_sum AS paynote_amount_sum,\n        cardsales.paynote_age_band_gender.total_tx_count AS paynote_tx_count,\n        cardsales.paynote_age_band_gender.stats AS age_band_gender_stats,\n        cardsales.paynote_age_band.stats AS age_band_stats,\n        cardsales.paynote_gender.stats AS gender_stats\nFROM   registration_number_meta\nWHERE  businesses.merchant_size <= 8\nAND    businesses.is_paynote_business = true\nAND    classification.depth_1_code = 'D'\nAND    classification.depth_2_code != 'D13'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': 'SELECT meta.*,\n       paynote_location_mapping.depth_1_code AS paynote_location_depth_1_code,\n       paynote_location_mapping.depth_2_code AS paynote_location_depth_2_code\nFROM (\n        SELECT\n                *,\n                array(b_code, sigungu_code, sido_code) AS location_codes\n        FROM   filtered_business\n) AS meta\nJOIN paynote_location_mapping\nON array_contains(meta.location_codes, paynote_location_mapping.location_code)'}, 'role': 'process', 'type': 'sql'}]"
508,process:::filtered_business_with_paynote_location:::paynote_place_topk,process:::location_topk:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': 'SELECT meta.*,\n       paynote_location_mapping.depth_1_code AS paynote_location_depth_1_code,\n       paynote_location_mapping.depth_2_code AS paynote_location_depth_2_code\nFROM (\n        SELECT\n                *,\n                array(b_code, sigungu_code, sido_code) AS location_codes\n        FROM   filtered_business\n) AS meta\nJOIN paynote_location_mapping\nON array_contains(meta.location_codes, paynote_location_mapping.location_code)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score,\n        c_tx_score,\n        c_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location', 'key', paynote_location_depth_1_code),\n                            named_struct('type', 'location', 'key', paynote_location_depth_2_code)\n                        ) AS partitions,\n                        *,\n                        format_number((paynote_tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((paynote_amount_sum / max_p_am_score) * 10000, 4) AS p_am_score,\n                        format_number((cashnote_tx_count / max_c_tx_score) * 10000, 4) AS c_tx_score,\n                        format_number((cashnote_amount_sum / max_c_am_score) * 10000, 4) AS c_am_score\n                FROM   filtered_business_with_paynote_location\n                CROSS JOIN (\n                        SELECT\n                                max(paynote_tx_count) AS max_p_tx_score,\n                                max(paynote_amount_sum) AS max_p_am_score,\n                                max(cashnote_tx_count) AS max_c_tx_score,\n                                max(cashnote_amount_sum) AS max_c_am_score\n                        FROM   filtered_business_with_paynote_location\n                ) AS max_values\n                ON 1 = 1\n        )\n)""}, 'role': 'process', 'type': 'sql'}]"
509,process:::filtered_business_with_paynote_location:::paynote_place_topk,process:::location_gender_topk:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': 'SELECT meta.*,\n       paynote_location_mapping.depth_1_code AS paynote_location_depth_1_code,\n       paynote_location_mapping.depth_2_code AS paynote_location_depth_2_code\nFROM (\n        SELECT\n                *,\n                array(b_code, sigungu_code, sido_code) AS location_codes\n        FROM   filtered_business\n) AS meta\nJOIN paynote_location_mapping\nON array_contains(meta.location_codes, paynote_location_mapping.location_code)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location_gender', 'key', CONCAT(paynote_location_depth_1_code, '_', b.key)),\n                            named_struct('type', 'location_gender', 'key', CONCAT(paynote_location_depth_2_code, '_', b.key))\n                        ) AS partitions,\n                        *,\n                        format_number((b.values.tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((b.values.amount_sum / max_p_am_score) * 10000, 4) AS p_am_score\n                FROM  (\n                    SELECT\n                            stats.*, *\n                    FROM (\n                        SELECT explode(gender_stats) AS stats, *\n                        FROM   filtered_business_with_paynote_location\n                    )\n                ) AS b\n                JOIN (\n                    SELECT\n                            stats.key,\n                            max(stats.values.tx_count) AS max_p_tx_score,\n                            max(stats.values.amount_sum) AS max_p_am_score\n                    FROM (\n                            SELECT explode(gender_stats) AS stats\n                            FROM   filtered_business_with_paynote_location\n                    )\n                    WHERE stats.key is not null\n                    GROUP BY stats.key\n                ) AS max_values\n                ON b.key = max_values.key\n        )\n)""}, 'role': 'process', 'type': 'sql'}]"
510,process:::filtered_business_with_paynote_location:::paynote_place_topk,process:::location_age_band_topk:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': 'SELECT meta.*,\n       paynote_location_mapping.depth_1_code AS paynote_location_depth_1_code,\n       paynote_location_mapping.depth_2_code AS paynote_location_depth_2_code\nFROM (\n        SELECT\n                *,\n                array(b_code, sigungu_code, sido_code) AS location_codes\n        FROM   filtered_business\n) AS meta\nJOIN paynote_location_mapping\nON array_contains(meta.location_codes, paynote_location_mapping.location_code)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location_age_band', 'key', CONCAT(paynote_location_depth_1_code, '_', b.key)),\n                            named_struct('type', 'location_age_band', 'key', CONCAT(paynote_location_depth_2_code, '_', b.key))\n                        ) AS partitions,\n                        *,\n                        format_number((b.values.tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((b.values.amount_sum / max_p_am_score) * 10000, 4) AS p_am_score\n                FROM  (\n                    SELECT\n                            stats.*, *\n                    FROM (\n                        SELECT explode(age_band_stats) AS stats, *\n                        FROM   filtered_business_with_paynote_location\n                    )\n                ) AS b\n                JOIN (\n                    SELECT\n                            stats.key,\n                            max(stats.values.tx_count) AS max_p_tx_score,\n                            max(stats.values.amount_sum) AS max_p_am_score\n                    FROM (\n                            SELECT explode(age_band_stats) AS stats\n                            FROM   filtered_business_with_paynote_location\n                    )\n                    WHERE stats.key is not null\n                    AND stats.key != 'none'\n                    GROUP BY stats.key\n                ) AS max_values\n                ON b.key = max_values.key\n        )\n)""}, 'role': 'process', 'type': 'sql'}]"
511,process:::filtered_business_with_paynote_location:::paynote_place_topk,process:::location_age_band_gender_topk:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': 'SELECT meta.*,\n       paynote_location_mapping.depth_1_code AS paynote_location_depth_1_code,\n       paynote_location_mapping.depth_2_code AS paynote_location_depth_2_code\nFROM (\n        SELECT\n                *,\n                array(b_code, sigungu_code, sido_code) AS location_codes\n        FROM   filtered_business\n) AS meta\nJOIN paynote_location_mapping\nON array_contains(meta.location_codes, paynote_location_mapping.location_code)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location_age_band_gender', 'key', CONCAT(paynote_location_depth_1_code, '_', b.key)),\n                            named_struct('type', 'location_age_band_gender', 'key', CONCAT(paynote_location_depth_2_code, '_', b.key))\n                        ) AS partitions,\n                        *,\n                        format_number((b.values.tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((b.values.amount_sum / max_p_am_score) * 10000, 4) AS p_am_score\n                FROM  (\n                    SELECT\n                            stats.*, *\n                    FROM (\n                        SELECT explode(age_band_gender_stats) AS stats, *\n                        FROM   filtered_business_with_paynote_location\n                    )\n                ) AS b\n                JOIN (\n                    SELECT\n                            stats.key,\n                            max(stats.values.tx_count) AS max_p_tx_score,\n                            max(stats.values.amount_sum) AS max_p_am_score\n                    FROM (\n                            SELECT explode(age_band_gender_stats) AS stats\n                            FROM   filtered_business_with_paynote_location\n                    )\n                    WHERE stats.key is not null\n                    GROUP BY stats.key\n                ) AS max_values\n                ON b.key = max_values.key\n        )\n)""}, 'role': 'process', 'type': 'sql'}]"
512,process:::filtered_business_with_paynote_location:::paynote_place_topk,process:::location_review_topk:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': 'SELECT meta.*,\n       paynote_location_mapping.depth_1_code AS paynote_location_depth_1_code,\n       paynote_location_mapping.depth_2_code AS paynote_location_depth_2_code\nFROM (\n        SELECT\n                *,\n                array(b_code, sigungu_code, sido_code) AS location_codes\n        FROM   filtered_business\n) AS meta\nJOIN paynote_location_mapping\nON array_contains(meta.location_codes, paynote_location_mapping.location_code)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        review_score\nFROM (\n        SELECT explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                              named_struct('type', 'location_review', 'key', paynote_location_depth_1_code),\n                              named_struct('type', 'location_review', 'key', paynote_location_depth_2_code)\n                        ) AS partitions,\n                        *,\n                        CAST(\n                            format_number((place_review_cnt / max_review_cnt) * 100 * nvl(place_avg_rating, 2.5), 4)\n                            AS DOUBLE\n                        ) AS review_score\n                FROM (\n                        SELECT *\n                        FROM filtered_business_with_paynote_location\n                        WHERE place_review_cnt is not null\n                        AND place_review_cnt > 5\n                ) AS b\n                CROSS JOIN (\n                        SELECT\n                                max(place_review_cnt) AS max_review_cnt\n                        FROM  filtered_business_with_paynote_location\n                        WHERE place_review_cnt is not null\n                        AND place_review_cnt > 5\n                ) AS max_values\n                ON 1 = 1\n        )\n)""}, 'role': 'process', 'type': 'sql'}]"
513,process:::location_topk:::paynote_place_topk,process:::merged_topk:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score,\n        c_tx_score,\n        c_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location', 'key', paynote_location_depth_1_code),\n                            named_struct('type', 'location', 'key', paynote_location_depth_2_code)\n                        ) AS partitions,\n                        *,\n                        format_number((paynote_tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((paynote_amount_sum / max_p_am_score) * 10000, 4) AS p_am_score,\n                        format_number((cashnote_tx_count / max_c_tx_score) * 10000, 4) AS c_tx_score,\n                        format_number((cashnote_amount_sum / max_c_am_score) * 10000, 4) AS c_am_score\n                FROM   filtered_business_with_paynote_location\n                CROSS JOIN (\n                        SELECT\n                                max(paynote_tx_count) AS max_p_tx_score,\n                                max(paynote_amount_sum) AS max_p_am_score,\n                                max(cashnote_tx_count) AS max_c_tx_score,\n                                max(cashnote_amount_sum) AS max_c_am_score\n                        FROM   filtered_business_with_paynote_location\n                ) AS max_values\n                ON 1 = 1\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        unix_timestamp() * 1000 AS timestamp,\n        key AS `from`,\n        registration_number AS to,\n        'paynote_place_topk' AS label,\n        to_json(named_struct(\n            'type', type,\n            'name', name,\n            'address', full_address,\n            'classification_name', classification_full_name,\n            'p_tx_score', CAST(p_tx_score AS DOUBLE),\n            'p_am_score', CAST(p_am_score AS DOUBLE),\n            'c_tx_score', CAST(c_tx_score AS DOUBLE),\n            'c_am_score', CAST(c_am_score AS DOUBLE),\n            'review_score', CAST(review_score AS DOUBLE)\n        )) AS props\nFROM (\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              c_tx_score,\n              c_am_score,\n              null AS review_score\n    FROM      location_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM  location_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              null AS p_tx_score,\n              null AS p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              review_score\n    FROM      location_review_topk\n)\nWHERE key is not null""}, 'role': 'process', 'type': 'sql'}]"
514,process:::location_gender_topk:::paynote_place_topk,process:::merged_topk:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location_gender', 'key', CONCAT(paynote_location_depth_1_code, '_', b.key)),\n                            named_struct('type', 'location_gender', 'key', CONCAT(paynote_location_depth_2_code, '_', b.key))\n                        ) AS partitions,\n                        *,\n                        format_number((b.values.tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((b.values.amount_sum / max_p_am_score) * 10000, 4) AS p_am_score\n                FROM  (\n                    SELECT\n                            stats.*, *\n                    FROM (\n                        SELECT explode(gender_stats) AS stats, *\n                        FROM   filtered_business_with_paynote_location\n                    )\n                ) AS b\n                JOIN (\n                    SELECT\n                            stats.key,\n                            max(stats.values.tx_count) AS max_p_tx_score,\n                            max(stats.values.amount_sum) AS max_p_am_score\n                    FROM (\n                            SELECT explode(gender_stats) AS stats\n                            FROM   filtered_business_with_paynote_location\n                    )\n                    WHERE stats.key is not null\n                    GROUP BY stats.key\n                ) AS max_values\n                ON b.key = max_values.key\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        unix_timestamp() * 1000 AS timestamp,\n        key AS `from`,\n        registration_number AS to,\n        'paynote_place_topk' AS label,\n        to_json(named_struct(\n            'type', type,\n            'name', name,\n            'address', full_address,\n            'classification_name', classification_full_name,\n            'p_tx_score', CAST(p_tx_score AS DOUBLE),\n            'p_am_score', CAST(p_am_score AS DOUBLE),\n            'c_tx_score', CAST(c_tx_score AS DOUBLE),\n            'c_am_score', CAST(c_am_score AS DOUBLE),\n            'review_score', CAST(review_score AS DOUBLE)\n        )) AS props\nFROM (\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              c_tx_score,\n              c_am_score,\n              null AS review_score\n    FROM      location_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM  location_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              null AS p_tx_score,\n              null AS p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              review_score\n    FROM      location_review_topk\n)\nWHERE key is not null""}, 'role': 'process', 'type': 'sql'}]"
515,process:::location_age_band_topk:::paynote_place_topk,process:::merged_topk:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location_age_band', 'key', CONCAT(paynote_location_depth_1_code, '_', b.key)),\n                            named_struct('type', 'location_age_band', 'key', CONCAT(paynote_location_depth_2_code, '_', b.key))\n                        ) AS partitions,\n                        *,\n                        format_number((b.values.tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((b.values.amount_sum / max_p_am_score) * 10000, 4) AS p_am_score\n                FROM  (\n                    SELECT\n                            stats.*, *\n                    FROM (\n                        SELECT explode(age_band_stats) AS stats, *\n                        FROM   filtered_business_with_paynote_location\n                    )\n                ) AS b\n                JOIN (\n                    SELECT\n                            stats.key,\n                            max(stats.values.tx_count) AS max_p_tx_score,\n                            max(stats.values.amount_sum) AS max_p_am_score\n                    FROM (\n                            SELECT explode(age_band_stats) AS stats\n                            FROM   filtered_business_with_paynote_location\n                    )\n                    WHERE stats.key is not null\n                    AND stats.key != 'none'\n                    GROUP BY stats.key\n                ) AS max_values\n                ON b.key = max_values.key\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        unix_timestamp() * 1000 AS timestamp,\n        key AS `from`,\n        registration_number AS to,\n        'paynote_place_topk' AS label,\n        to_json(named_struct(\n            'type', type,\n            'name', name,\n            'address', full_address,\n            'classification_name', classification_full_name,\n            'p_tx_score', CAST(p_tx_score AS DOUBLE),\n            'p_am_score', CAST(p_am_score AS DOUBLE),\n            'c_tx_score', CAST(c_tx_score AS DOUBLE),\n            'c_am_score', CAST(c_am_score AS DOUBLE),\n            'review_score', CAST(review_score AS DOUBLE)\n        )) AS props\nFROM (\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              c_tx_score,\n              c_am_score,\n              null AS review_score\n    FROM      location_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM  location_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              null AS p_tx_score,\n              null AS p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              review_score\n    FROM      location_review_topk\n)\nWHERE key is not null""}, 'role': 'process', 'type': 'sql'}]"
516,process:::location_age_band_gender_topk:::paynote_place_topk,process:::merged_topk:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        p_tx_score,\n        p_am_score\nFROM (\n        SELECT\n                explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                            named_struct('type', 'location_age_band_gender', 'key', CONCAT(paynote_location_depth_1_code, '_', b.key)),\n                            named_struct('type', 'location_age_band_gender', 'key', CONCAT(paynote_location_depth_2_code, '_', b.key))\n                        ) AS partitions,\n                        *,\n                        format_number((b.values.tx_count / max_p_tx_score) * 10000, 4) AS p_tx_score,\n                        format_number((b.values.amount_sum / max_p_am_score) * 10000, 4) AS p_am_score\n                FROM  (\n                    SELECT\n                            stats.*, *\n                    FROM (\n                        SELECT explode(age_band_gender_stats) AS stats, *\n                        FROM   filtered_business_with_paynote_location\n                    )\n                ) AS b\n                JOIN (\n                    SELECT\n                            stats.key,\n                            max(stats.values.tx_count) AS max_p_tx_score,\n                            max(stats.values.amount_sum) AS max_p_am_score\n                    FROM (\n                            SELECT explode(age_band_gender_stats) AS stats\n                            FROM   filtered_business_with_paynote_location\n                    )\n                    WHERE stats.key is not null\n                    GROUP BY stats.key\n                ) AS max_values\n                ON b.key = max_values.key\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        unix_timestamp() * 1000 AS timestamp,\n        key AS `from`,\n        registration_number AS to,\n        'paynote_place_topk' AS label,\n        to_json(named_struct(\n            'type', type,\n            'name', name,\n            'address', full_address,\n            'classification_name', classification_full_name,\n            'p_tx_score', CAST(p_tx_score AS DOUBLE),\n            'p_am_score', CAST(p_am_score AS DOUBLE),\n            'c_tx_score', CAST(c_tx_score AS DOUBLE),\n            'c_am_score', CAST(c_am_score AS DOUBLE),\n            'review_score', CAST(review_score AS DOUBLE)\n        )) AS props\nFROM (\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              c_tx_score,\n              c_am_score,\n              null AS review_score\n    FROM      location_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM  location_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              null AS p_tx_score,\n              null AS p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              review_score\n    FROM      location_review_topk\n)\nWHERE key is not null""}, 'role': 'process', 'type': 'sql'}]"
517,process:::location_review_topk:::paynote_place_topk,process:::merged_topk:::paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        partition.*,\n        registration_number,\n        name,\n        full_address,\n        classification_full_name,\n        review_score\nFROM (\n        SELECT explode(partitions) AS partition, *\n        FROM (\n                SELECT\n                        array(\n                              named_struct('type', 'location_review', 'key', paynote_location_depth_1_code),\n                              named_struct('type', 'location_review', 'key', paynote_location_depth_2_code)\n                        ) AS partitions,\n                        *,\n                        CAST(\n                            format_number((place_review_cnt / max_review_cnt) * 100 * nvl(place_avg_rating, 2.5), 4)\n                            AS DOUBLE\n                        ) AS review_score\n                FROM (\n                        SELECT *\n                        FROM filtered_business_with_paynote_location\n                        WHERE place_review_cnt is not null\n                        AND place_review_cnt > 5\n                ) AS b\n                CROSS JOIN (\n                        SELECT\n                                max(place_review_cnt) AS max_review_cnt\n                        FROM  filtered_business_with_paynote_location\n                        WHERE place_review_cnt is not null\n                        AND place_review_cnt > 5\n                ) AS max_values\n                ON 1 = 1\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        unix_timestamp() * 1000 AS timestamp,\n        key AS `from`,\n        registration_number AS to,\n        'paynote_place_topk' AS label,\n        to_json(named_struct(\n            'type', type,\n            'name', name,\n            'address', full_address,\n            'classification_name', classification_full_name,\n            'p_tx_score', CAST(p_tx_score AS DOUBLE),\n            'p_am_score', CAST(p_am_score AS DOUBLE),\n            'c_tx_score', CAST(c_tx_score AS DOUBLE),\n            'c_am_score', CAST(c_am_score AS DOUBLE),\n            'review_score', CAST(review_score AS DOUBLE)\n        )) AS props\nFROM (\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              c_tx_score,\n              c_am_score,\n              null AS review_score\n    FROM      location_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM  location_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              null AS p_tx_score,\n              null AS p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              review_score\n    FROM      location_review_topk\n)\nWHERE key is not null""}, 'role': 'process', 'type': 'sql'}]"
518,process:::merged_topk:::paynote_place_topk,s3://kcd-de-production/raw/etl/bulkload/paynote_place_topk,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'sql': ""SELECT\n        unix_timestamp() * 1000 AS timestamp,\n        key AS `from`,\n        registration_number AS to,\n        'paynote_place_topk' AS label,\n        to_json(named_struct(\n            'type', type,\n            'name', name,\n            'address', full_address,\n            'classification_name', classification_full_name,\n            'p_tx_score', CAST(p_tx_score AS DOUBLE),\n            'p_am_score', CAST(p_am_score AS DOUBLE),\n            'c_tx_score', CAST(c_tx_score AS DOUBLE),\n            'c_am_score', CAST(c_am_score AS DOUBLE),\n            'review_score', CAST(review_score AS DOUBLE)\n        )) AS props\nFROM (\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              c_tx_score,\n              c_am_score,\n              null AS review_score\n    FROM      location_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM  location_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              p_tx_score,\n              p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              null AS review_score\n    FROM      location_age_band_gender_topk\n\n    UNION ALL\n\n    SELECT    key, registration_number, type, name, full_address,  classification_full_name,\n              null AS p_tx_score,\n              null AS p_am_score,\n              null AS c_tx_score,\n              null AS c_am_score,\n              review_score\n    FROM      location_review_topk\n)\nWHERE key is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/bulkload/paynote_place_topk'}, 'role': 'sink', 'type': 'file'}, {'filename': 'bulkload_paynote_place_topk.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/bulkload/paynote_place_topk'}, 'role': 'source', 'type': 'file'}]"
519,s3://kcd-de-production/raw/etl/bulkload/paynote_place_topk,s2graph_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'generate_paynote_place_topk.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/bulkload/paynote_place_topk'}, 'role': 'sink', 'type': 'file'}, {'filename': 'bulkload_paynote_place_topk.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/bulkload/paynote_place_topk'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'bulkload_paynote_place_topk.json', 'options': {'s2.spark.sql.streaming.sink.writeMethod': 'bulk', 's2.spark.sql.bulkload.sink.label.mapping': 'paynote_place_topk:paynote_place_topk-2021-01-24_09-24-37', 's2.spark.sql.bulkload.sink.build.degree': 'false', 's2.spark.sql.bulkload.sink.auto.edge.create': 'false', 's2.spark.sql.streaming.sink.skip.error': 'true', 's2.spark.sql.bulkload.sink.hbase.table.name': 'paynote_place_topk-2021-01-24_09-24-37', 's2.spark.sql.bulkload.sink.hbase.table.num.regions': '10', 's2.spark.sql.bulkload.sink.hbase.temp.dir': '/tmp/bulkload/paynote_place_topk-2021-01-24_09-24-37', 's2.spark.sql.bulkload.sink.hbase.incrementalLoad': 'false', 's2.spark.sql.bulkload.sink.hbase.compression': 'LZ4', 'runLoadIncrementalHFiles': 'false', 'hbase.zookeeper.quorum': 'ec2-13-125-222-89.ap-northeast-2.compute.amazonaws.com:2181', 'cache.max.size': '10000', 'cache.ttl.seconds': '6000', 'db.default.driver': 'com.mysql.jdbc.Driver', 'db.default.url': 'jdbc:mysql://s2graph-meta-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com/graph_production', 'db.default.user': 'graph', 'db.default.password': '90f5b058-0151-4dcc-b0cb-c8346ebba924'}, 'role': 'sink', 'type': 's2graph'}, {'filename': 'bulkload_cashnote_user_meta_common.json', 'options': {'s2.spark.sql.streaming.sink.writeMethod': 'bulk', 's2.spark.sql.bulkload.sink.label.mapping': 'cashnote_user_meta_common:cashnote_user_meta_common-2020-08-27_10-03-58', 's2.spark.sql.bulkload.sink.build.degree': 'false', 's2.spark.sql.bulkload.sink.auto.edge.create': 'false', 's2.spark.sql.streaming.sink.skip.error': 'true', 's2.spark.sql.bulkload.sink.hbase.table.name': 'cashnote_user_meta_common-2020-08-27_10-03-58', 's2.spark.sql.bulkload.sink.hbase.table.num.regions': '5', 's2.spark.sql.bulkload.sink.hbase.temp.dir': '/tmp/bulkload/cashnote_user_meta_common-2020-08-27_10-03-58', 's2.spark.sql.bulkload.sink.hbase.incrementalLoad': 'false', 's2.spark.sql.bulkload.sink.hbase.compression': 'LZ4', 'runLoadIncrementalHFiles': 'false', 'hbase.zookeeper.quorum': 'ec2-13-125-222-89.ap-northeast-2.compute.amazonaws.com:2181', 'cache.max.size': '10000', 'cache.ttl.seconds': '6000', 'db.default.driver': 'com.mysql.jdbc.Driver', 'db.default.url': 'jdbc:mysql://s2graph-meta-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com/graph_production', 'db.default.user': 'graph', 'db.default.password': '90f5b058-0151-4dcc-b0cb-c8346ebba924'}, 'role': 'sink', 'type': 's2graph'}, {'filename': 'bulkload_cashnote_business_meta_common.json', 'options': {'s2.spark.sql.streaming.sink.writeMethod': 'bulk', 's2.spark.sql.bulkload.sink.label.mapping': 'cashnote_business_meta_common:cashnote_business_meta_common-2021-01-29_00-49-51', 's2.spark.sql.bulkload.sink.build.degree': 'false', 's2.spark.sql.bulkload.sink.auto.edge.create': 'false', 's2.spark.sql.streaming.sink.skip.error': 'true', 's2.spark.sql.bulkload.sink.hbase.table.name': 'cashnote_business_meta_common-2021-01-29_00-49-51', 's2.spark.sql.bulkload.sink.hbase.table.num.regions': '5', 's2.spark.sql.bulkload.sink.hbase.temp.dir': '/tmp/bulkload/cashnote_business_meta_common-2021-01-29_00-49-51', 's2.spark.sql.bulkload.sink.hbase.incrementalLoad': 'false', 's2.spark.sql.bulkload.sink.hbase.compression': 'LZ4', 'runLoadIncrementalHFiles': 'false', 'hbase.zookeeper.quorum': 'ec2-13-125-222-89.ap-northeast-2.compute.amazonaws.com:2181', 'cache.max.size': '10000', 'cache.ttl.seconds': '6000', 'db.default.driver': 'com.mysql.jdbc.Driver', 'db.default.url': 'jdbc:mysql://s2graph-meta-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com/graph_production', 'db.default.user': 'graph', 'db.default.password': '90f5b058-0151-4dcc-b0cb-c8346ebba924'}, 'role': 'sink', 'type': 's2graph'}]"
520,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao,process:::kakao_classification:::merchant_classification_place,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_place.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_place.json', 'options': {'sql': ""SELECT\n          registration_number, card_issuer, merchant_number,\n          arr[0] AS depth_1_name,\n          arr[1] AS depth_2_name,\n          arr[2] AS depth_3_name,\n          arr[3] AS depth_4_name,\n          arr[4] AS depth_5_name\nFROM (\n        SELECT  registration_number, card_issuer, merchant_number,\n                split(classification, ' > ') AS arr\n        FROM    kakao\n)""}, 'role': 'process', 'type': 'sql'}]"
521,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao,process:::kakao_address:::merchant_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_place.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_location_sources.json', 'options': {'sql': ""SELECT\n        registration_number, card_issuer, merchant_number,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        registration_number, card_issuer, merchant_number,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n              latitude > 100,\n              CONCAT(longitude, ',', latitude),\n              CONCAT(latitude, ',', longitude)\n          ) AS location\n    FROM  kakao\n    WHERE lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
522,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver,process:::naver_classification:::merchant_classification_place,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_place.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_place.json', 'options': {'sql': ""SELECT\n          registration_number, card_issuer, merchant_number,\n          arr[0] AS depth_1_name,\n          arr[1] AS depth_2_name,\n          arr[2] AS depth_3_name,\n          arr[3] AS depth_4_name,\n          arr[4] AS depth_5_name\nFROM (\n        SELECT  registration_number, card_issuer, merchant_number,\n                split(classification, ' > ') AS arr\n        FROM    naver\n)""}, 'role': 'process', 'type': 'sql'}]"
523,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver,process:::naver_address:::merchant_location_sources,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_place.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_location_sources.json', 'options': {'sql': ""SELECT\n        registration_number, card_issuer, merchant_number,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        registration_number, card_issuer, merchant_number,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n            latitude > 100,\n            CONCAT(longitude, ',', latitude),\n            CONCAT(latitude, ',', longitude)\n        ) AS location\n    FROM  naver\n    WHERE lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]"
524,process:::naver_classification:::merchant_classification_place,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=naver,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_place.json', 'options': {'sql': ""SELECT\n          registration_number, card_issuer, merchant_number,\n          arr[0] AS depth_1_name,\n          arr[1] AS depth_2_name,\n          arr[2] AS depth_3_name,\n          arr[3] AS depth_4_name,\n          arr[4] AS depth_5_name\nFROM (\n        SELECT  registration_number, card_issuer, merchant_number,\n                split(classification, ' > ') AS arr\n        FROM    naver\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_place.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=naver'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=naver'}, 'role': 'source', 'type': 'file'}]"
525,process:::kakao_classification:::merchant_classification_place,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=kakao,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_place.json', 'options': {'sql': ""SELECT\n          registration_number, card_issuer, merchant_number,\n          arr[0] AS depth_1_name,\n          arr[1] AS depth_2_name,\n          arr[2] AS depth_3_name,\n          arr[3] AS depth_4_name,\n          arr[4] AS depth_5_name\nFROM (\n        SELECT  registration_number, card_issuer, merchant_number,\n                split(classification, ' > ') AS arr\n        FROM    kakao\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_place.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=kakao'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=kakao'}, 'role': 'source', 'type': 'file'}]"
526,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=kakao,process:::kakao:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_place.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=kakao'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=kakao'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': ""SELECT\n      registration_number, card_issuer, merchant_number,\n      kcd_kakao_mapping.kcd_depth_1_code,\n      kcd_kakao_mapping.kcd_depth_2_code,\n      kcd_kakao_mapping.kcd_depth_3_code\nFROM  kakao_classification\nJOIN  kcd_kakao_mapping\nON    kakao_classification.depth_1_name = kcd_kakao_mapping.depth_1_name\nAND   kakao_classification.depth_2_name = kcd_kakao_mapping.depth_2_name\nAND   nvl(kakao_classification.depth_3_name, 'empty') = nvl(kcd_kakao_mapping.depth_3_name, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
527,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=naver,process:::naver:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_place.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=naver'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=naver'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT\n      registration_number, card_issuer, merchant_number,\n      kcd_naver_mapping.kcd_depth_1_code,\n      kcd_naver_mapping.kcd_depth_2_code,\n      kcd_naver_mapping.kcd_depth_3_code\nFROM  naver_classification\nJOIN  kcd_naver_mapping\nON    naver_classification.depth_1_name = kcd_naver_mapping.naver_depth_1_name\nAND   naver_classification.depth_2_name = kcd_naver_mapping.naver_depth_2_name'}, 'role': 'process', 'type': 'sql'}]"
528,process:::current_purchases:::join_purchase_candidates,process:::current_purchase_candidates:::join_purchase_candidates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'join_purchase_candidates.json', 'options': {'sql': ""SELECT    *\nFROM      purchases_raw\nWHERE     created_at_date >= '2011-01-28'\nAND       created_at_date < '2021-01-26'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'join_purchase_candidates.json', 'options': {'sql': 'SELECT    struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount > 0\n) purchased FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount < 0\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]"
529,process:::current_purchase_candidates:::join_purchase_candidates,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/purchases_current,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'join_purchase_candidates.json', 'options': {'sql': 'SELECT    struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount > 0\n) purchased FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount < 0\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'join_purchase_candidates.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/purchases_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'match_to_purchases.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/purchases_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]"
530,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/purchases_current,process:::purchases_without_cancel:::match_to_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'join_purchase_candidates.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/purchases_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'match_to_purchases.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/purchases_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'match_to_purchases.json', 'options': {'sql': ""SELECT    purchased.*,\n          CAST(null AS TIMESTAMP) AS purchase_canceled_at,\n          'purchased' AS type\nFROM      purchase_candidates\nWHERE     canceled.business_id is null""}, 'role': 'process', 'type': 'sql'}]"
531,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/purchases_current,process:::purchases_with_cancel:::match_to_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'join_purchase_candidates.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/purchases_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'match_to_purchases.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/candidates/purchases_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'match_to_purchases.json', 'options': {'sql': ""SELECT    purchased.*,\n          canceled.purchased_at AS purchase_canceled_at,\n          'purchase_cancel' AS type\nFROM      purchase_candidates\nWHERE     purchased.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}]"
532,process:::pos_menus:::pos_menus_tok_k,process:::pos_menus_with_time_bucket:::pos_menus_tok_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_menus_raw\n    WHERE\n        created_at_date >= '2020-06-01'\n    AND business_id IS NOT NULL\n    AND name IS NOT NULL\n    AND name != ''""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'sql': '   SELECT\n       *,\n       CASE\n           WHEN order_hour = -1 then \'전체\'\n           WHEN order_hour between 0 and 5 then \'새벽\'\n           WHEN order_hour between 6 and 10 then \'아침\'\n           WHEN order_hour between 11 and 13 then \'점심\'\n           WHEN order_hour between 14 and 16 then \'오후\'\n           ELSE \'저녁\'\n       END AS time_bucket\n   FROM\n       (SELECT\n           business_id,\n           name,\n           price,\n           order_time,\n           order_month,\n           count,\n           CAST(date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""HH"") as integer) as order_hour\n       FROM\n           pos_menus\n\n       UNION ALL\n\n       SELECT\n           business_id,\n           name,\n           price,\n           order_time,\n           order_month,\n           count,\n           -1 as order_hour\n       FROM\n           pos_menus\n       )'}, 'role': 'process', 'type': 'sql'}]"
533,process:::pos_menus_with_time_bucket:::pos_menus_tok_k,process:::pos_menus_top_k:::pos_menus_tok_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'sql': '   SELECT\n       *,\n       CASE\n           WHEN order_hour = -1 then \'전체\'\n           WHEN order_hour between 0 and 5 then \'새벽\'\n           WHEN order_hour between 6 and 10 then \'아침\'\n           WHEN order_hour between 11 and 13 then \'점심\'\n           WHEN order_hour between 14 and 16 then \'오후\'\n           ELSE \'저녁\'\n       END AS time_bucket\n   FROM\n       (SELECT\n           business_id,\n           name,\n           price,\n           order_time,\n           order_month,\n           count,\n           CAST(date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""HH"") as integer) as order_hour\n       FROM\n           pos_menus\n\n       UNION ALL\n\n       SELECT\n           business_id,\n           name,\n           price,\n           order_time,\n           order_month,\n           count,\n           -1 as order_hour\n       FROM\n           pos_menus\n       )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'sql': '   SELECT\n       *,\n       row_number() OVER (PARTITION BY business_id, order_month, time_bucket ORDER BY total_amount DESC) AS rank\n   FROM\n      (\n       SELECT\n           business_id,\n           order_month,\n           time_bucket,\n           name,\n           sum(price * count) as total_amount,\n           sum(`count`) as total_count\n       FROM\n           pos_menus_with_time_bucket\n       GROUP BY\n           business_id,\n           order_month,\n           time_bucket,\n           name\n      )'}, 'role': 'process', 'type': 'sql'}]"
534,process:::pos_menus_top_k:::pos_menus_tok_k,process:::pos_menus_top_k_jdbc:::pos_menus_tok_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'sql': '   SELECT\n       *,\n       row_number() OVER (PARTITION BY business_id, order_month, time_bucket ORDER BY total_amount DESC) AS rank\n   FROM\n      (\n       SELECT\n           business_id,\n           order_month,\n           time_bucket,\n           name,\n           sum(price * count) as total_amount,\n           sum(`count`) as total_count\n       FROM\n           pos_menus_with_time_bucket\n       GROUP BY\n           business_id,\n           order_month,\n           time_bucket,\n           name\n      )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'sql': '   SELECT\n       business_id,\n       order_month,\n       time_bucket,\n       sum(total_amount) as total_amount,\n       sum(total_count) as total_count,\n       to_json(collect_list(struct(rank, name, total_amount, total_count))) as rows\n   FROM\n       pos_menus_top_k\n   GROUP BY\n       business_id,\n       order_month,\n       time_bucket'}, 'role': 'process', 'type': 'sql'}]"
535,process:::pos_menus_top_k:::pos_menus_tok_k,s3://kcd-de-production/raw/etl/pos/pos_topk_menus,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'sql': '   SELECT\n       *,\n       row_number() OVER (PARTITION BY business_id, order_month, time_bucket ORDER BY total_amount DESC) AS rank\n   FROM\n      (\n       SELECT\n           business_id,\n           order_month,\n           time_bucket,\n           name,\n           sum(price * count) as total_amount,\n           sum(`count`) as total_count\n       FROM\n           pos_menus_with_time_bucket\n       GROUP BY\n           business_id,\n           order_month,\n           time_bucket,\n           name\n      )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/pos/pos_topk_menus', 'format': 'parquet', 'partitions': 'order_month', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}]"
536,process:::pos_menus_top_k_jdbc:::pos_menus_tok_k,jdbc_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'sql': '   SELECT\n       business_id,\n       order_month,\n       time_bucket,\n       sum(total_amount) as total_amount,\n       sum(total_count) as total_count,\n       to_json(collect_list(struct(rank, name, total_amount, total_count))) as rows\n   FROM\n       pos_menus_top_k\n   GROUP BY\n       business_id,\n       order_month,\n       time_bucket'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'uid_type:bills_id_type,menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats_v2', 'conflictColumns': 'uid,uid_type,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus', 'conflictColumns': 'business_id,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'daily_delivery_orders_stat.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'daily_delivery_orders_stat', 'conflictColumns': 'business_id,delivery_app,shop_number,date', 'updateColumns': 'closed_orders_amount,closed_orders_count,cancelled_orders_amount,cancelled_orders_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'hometax_business_label_upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'dbtable': 'hometax_businesses', 'conflictColumns': 'business_id', 'updateColumns': 'regular_employees_count,size_category,updated_at', 'typeCastColumns': 'size_category:hometax_business_size_category'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_sdk_event.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'sdk_name,event_type, user_type', 'updateColumns': 'sdk_name,event_type,user_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'delivery_receipt_stats.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-staging.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_staging', 'user': 'plover', 'password': 'welcome!', 'operation': 'upsert', 'dbtable': 'pos_receipt_stat', 'conflictColumns': 'public_id,target_date,date_type,h3_index,h3_resolution', 'updateColumns': 'metric', 'typeCastColumns': 'metric:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats', 'conflictColumns': 'business_id,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus', 'conflictColumns': 'business_id,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_menu_top_k.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_menu_top_k', 'conflictColumns': 'business_id,order_month,time_bucket,name', 'updateColumns': 'total_amount,total_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}]"
537,jdbc:report_logs,process:::formatted_report_logs:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'report_logs', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '398030145', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'report_logs', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '328893704', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT\n          id, group_id, target_id, business_id, user_id, title, template_code, url_mobile,\n\n          card_sales.card_sales_amount AS card_sales_amount,\n          card_sales.card_sales_count AS card_sales_count,\n          card_sales.card_sales_fee AS card_sales_fee,\n          card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n          card_sales.card_sales_payment AS card_sales_payment,\n          card_sales.new_amount AS card_sales_new_amount,\n          card_sales.returning_amount AS card_sales_returning_amount,\n          card_sales.monthly_card_sales AS card_sales_monthly_amount,\n\n          hourly_sales.`새벽` AS `hourly_sales_0_6_amount`,\n          hourly_sales.`아침` AS `hourly_sales_6_11_amount`,\n          hourly_sales.`점심` AS `hourly_sales_11_14_amount`,\n          hourly_sales.`오후` AS `hourly_sales_14_17_amount`,\n          hourly_sales.`저녁` AS `hourly_sales_17_24_amount`,\n          hourly_sales.`미분류` AS `hourly_sales_etc_amount`,\n\n          today_payments.`KB` AS today_payments_kb,\n          today_payments.`농협NH` AS today_payments_nh,\n          today_payments.`롯데` AS today_payments_lotte,\n          today_payments.`비씨` AS today_payments_bc,\n          today_payments.`삼성` AS today_payments_samsung,\n          today_payments.`신한` AS today_payments_shinhan,\n          today_payments.`하나` AS today_payments_hana,\n          today_payments.`현대` AS today_payments_hyundai,\n          today_payments.`배달의민족` AS today_payments_baemin,\n          today_payments.`요기요` AS today_payments_yogiyo,\n          today_payments.`배달통` AS today_payments_baedaltong,\n\n          delivery_app_sales.baemin_sales_amount AS delivery_app_sales_baemin_amount,\n          delivery_app_sales.yogiyo_sales_amount AS delivery_app_sales_yogiyo_amount,\n          delivery_app_sales.baedaltong_sales_amount AS delivery_app_sales_baedaltong_amount,\n          delivery_app_sales.monthly_delivery_app_sales AS delivery_app_sales_monthly_amount,\n\n          card_purchases.monthly_card_purchases AS card_purchases_monthly_amount,\n          CAST(hometax_sales.monthly_invoice_sales_amount AS LONG) AS hometax_sales_monthly_invoice_amount,\n          CAST(hometax_sales.monthly_cash_sales_amount AS LONG) AS hometax_sales_monthly_cash_amount,\n          CAST(hometax_purchases.monthly_cash_purchases AS LONG) AS hometax_purchases_monthly_cash_amount,\n          CAST(hometax_purchases.monthly_invoice_purchases AS LONG) AS hometax_purchases_monthly_invoice_amount,\n\n          transform(future_payments, m -> named_struct('amount', m.amount, 'date', CONCAT(date_format(m.date, 'd일'), '(', dayofweek_kor(m.date), ')')))\n          AS future_payments_arr,\n          transform(bank_accounts, m -> named_struct('bank_name', m.bank_name, 'account_number', CONCAT('*', SUBSTRING(m.account_number, -5)), 'balance', nvl(m.balance, 0), 'unused', IF(m.balance IS null, true, false)))\n          AS bank_accounts_arr,\n          transform(card_purchases.today_purchases, m -> named_struct('amount', nvl(m.amount, 0), 'count', m.count, 'issuer', m.card.issuer, 'number', CONCAT('*', SUBSTRING(m.card.number, -4))   ))\n          AS today_card_purchases_arr\nFROM (\n        SELECT    id, group_id, target_id, business_id, user_id,\n                  nvl(payload.title, '') AS title,\n                  payload.attachment, payload.template_code,\n                  payload.attachment.button[0].url_mobile AS url_mobile,\n                  payload.raw_data.*\n        FROM (\n              SELECT  id, group_id, CONCAT(user_id, '_', business_id) AS target_id,\n                      business_id, user_id,\n                      from_json(bzm_payload, 'STRUCT<`attachment`: STRUCT<`button`: ARRAY<STRUCT<`name`: STRING, `type`: STRING, `url_mobile`: STRING>>>, `raw_data`: STRUCT<`bank_accounts`: ARRAY<STRUCT<`account_number`: STRING, `balance`: BIGINT, `bank_name`: STRING>>, `card_purchases`: STRUCT<`monthly_card_purchases`: BIGINT, `today_purchases`: ARRAY<STRUCT<`amount`: BIGINT, `card`: STRUCT<`business_id`: BIGINT, `card_type`: STRING, `created_at`: STRING, `credential_id`: BIGINT, `id`: BIGINT, `issuer`: STRING, `name`: STRING, `number`: STRING, `updated_at`: STRING, `uuid`: STRING>, `count`: BIGINT>>>, `card_sales`: STRUCT<`card_sales_amount`: BIGINT, `card_sales_count`: BIGINT, `card_sales_fee`: BIGINT, `card_sales_payment`: BIGINT, `card_sales_vat_fee`: BIGINT, `monthly_card_sales`: BIGINT, `new_amount`: BIGINT, `returning_amount`: BIGINT>, `delivery_app_sales`: STRUCT<`baedaltong_sales_amount`: BIGINT, `baemin_sales_amount`: BIGINT, `monthly_delivery_app_sales`: BIGINT, `yogiyo_sales_amount`: BIGINT>, `future_payments`: ARRAY<STRUCT<`amount`: BIGINT, `date`: STRING>>, `hometax_purchases`: STRUCT<`monthly_cash_purchases`: STRING, `monthly_invoice_purchases`: STRING>, `hometax_sales`: STRUCT<`monthly_cash_sales_amount`: STRING, `monthly_invoice_sales_amount`: STRING>, `hourly_sales`: STRUCT<`미분류`: BIGINT, `새벽`: BIGINT, `아침`: BIGINT, `오후`: BIGINT, `저녁`: BIGINT, `점심`: BIGINT>, `today_payments`: STRUCT<`KB`: BIGINT, `농협NH`: BIGINT, `롯데`: BIGINT, `배달의민족`: BIGINT, `요기요`: BIGINT, `배달통`: BIGINT, `비씨`: BIGINT, `삼성`: BIGINT, `신한`: BIGINT, `하나`: BIGINT, `현대`: BIGINT>>, `template_code`: STRING, `title`: STRING>', map())\n                      AS payload\n              FROM    report_logs\n              WHERE   id > 398030145\n              AND     group_id in ('0aedb1b7-7b73-4f94-9361-c49e3480efe3','e365a43e-c321-4f54-a6f5-dbc1245228a6')\n              AND     report_type = 'daily'\n              AND     business_id IS NOT NULL\n              AND     user_id IS NOT NULL\n        )\n)""}, 'role': 'process', 'type': 'sql'}]"
538,jdbc:report_logs,process:::report_logs_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'report_logs', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '398030145', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'report_logs', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '328893704', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    report_logs\nWHERE   id > 328893704\n          ""}, 'role': 'process', 'type': 'sql'}]"
539,jdbc:issuers,process:::outdated_issuers:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'issuers', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'autoPartition': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'daily_reports.json', 'options': {'sql': ""  SELECT\n          IF(cnt > 0, true, false) AS crefia_delayed,\n          IF(cnt = 8, true, false) AS all_crefia_delayed\n  FROM (\n          SELECT COUNT(DISTINCT(name)) AS cnt\n          FROM issuers\n          WHERE approvals_up_to <  '2021-01-28'\n  )""}, 'role': 'process', 'type': 'sql'}]"
540,process:::outdated_issuers:::daily_reports,process:::with_businesses:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'sql': ""  SELECT\n          IF(cnt > 0, true, false) AS crefia_delayed,\n          IF(cnt = 8, true, false) AS all_crefia_delayed\n  FROM (\n          SELECT COUNT(DISTINCT(name)) AS cnt\n          FROM issuers\n          WHERE approvals_up_to <  '2021-01-28'\n  )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    calc_additional_columns.*,\n                  b.*,\n                  IF(c.confirmed, 'daily_reports', 'daily_reports_wo_crefia') AS report_name\n        FROM      calc_additional_columns\n        LEFT OUTER JOIN   businesses_info AS b\n        ON        calc_additional_columns.business_id = b.id\n        LEFT OUTER JOIN   crefia_credential AS c\n        ON        calc_additional_columns.business_id = c.business_id\n) r\nCROSS JOIN outdated_issuers""}, 'role': 'process', 'type': 'sql'}]"
541,process:::crefia_credential:::daily_reports,process:::with_businesses:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT business_id, collect_set(c)[0] AS confirmed\nFROM (\n    SELECT  business_id, IF(status = 1, true, false) AS c\n    FROM credentials\n    WHERE type in ('Credentials::CrefiaBusiness', 'Credentials::Crefia')\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    calc_additional_columns.*,\n                  b.*,\n                  IF(c.confirmed, 'daily_reports', 'daily_reports_wo_crefia') AS report_name\n        FROM      calc_additional_columns\n        LEFT OUTER JOIN   businesses_info AS b\n        ON        calc_additional_columns.business_id = b.id\n        LEFT OUTER JOIN   crefia_credential AS c\n        ON        calc_additional_columns.business_id = c.business_id\n) r\nCROSS JOIN outdated_issuers""}, 'role': 'process', 'type': 'sql'}]"
542,process:::businesses_info:::daily_reports,process:::with_businesses:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'sql': 'SELECT    businesses.id,\n          businesses.name AS report_business_name,\n          NVL(c.has_delivery_app_credentials, false) AS has_delivery_app_credentials,\n          NVL(c.has_baemin_credential, false) AS has_baemin_credential,\n          NVL(c.has_yogiyo_credential, false) AS has_yogiyo_credential,\n          NVL(c.has_baedaltong_credential, false) AS has_baedaltong_credential,\n          NVL(c.has_hometax_credentials, false) AS has_hometax_credentials\nFROM businesses\nLEFT OUTER JOIN (\n    SELECT\n            business_id,\n            IF(size(delivery_app_credentials) > 0, true, false) AS has_delivery_app_credentials,\n            IF(array_contains(delivery_app_credentials, \'baemin\'), true, false) AS has_baemin_credential,\n            IF(array_contains(delivery_app_credentials, \'yogiyo\'), true, false) AS has_yogiyo_credential,\n            IF(array_contains(delivery_app_credentials, \'baedaltong\'), true, false) AS has_baedaltong_credential,\n            IF(size(hometax_credentials) > 0, true, false) AS has_hometax_credentials\n\n    FROM (\n        SELECT  business_id,\n                collect_list(hometax_credential) AS hometax_credentials,\n                collect_list(delivery_app_credential) AS delivery_app_credentials\n        FROM (\n            SELECT  credentials.business_id,\n                    IF(\n                        credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS hometax_credential,\n                    IF(\n                        credentials.type not in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS delivery_app_credential\n            FROM credentials\n            JOIN scrapings\n            ON scrapings.credential_id = credentials.id\n            where credentials.status = 1\n            AND scrapings.status = 1\n            AND (\n                scrapings.tag in (\'BaeminShop\', \'YogiyoShop\', \'BaedaltongShop\') OR\n                credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\')\n            )\n        )\n        GROUP BY business_id\n    )\n) AS c\nON businesses.id = c.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    calc_additional_columns.*,\n                  b.*,\n                  IF(c.confirmed, 'daily_reports', 'daily_reports_wo_crefia') AS report_name\n        FROM      calc_additional_columns\n        LEFT OUTER JOIN   businesses_info AS b\n        ON        calc_additional_columns.business_id = b.id\n        LEFT OUTER JOIN   crefia_credential AS c\n        ON        calc_additional_columns.business_id = c.business_id\n) r\nCROSS JOIN outdated_issuers""}, 'role': 'process', 'type': 'sql'}]"
543,process:::formatted_report_logs:::daily_reports,process:::latest_id:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT\n          id, group_id, target_id, business_id, user_id, title, template_code, url_mobile,\n\n          card_sales.card_sales_amount AS card_sales_amount,\n          card_sales.card_sales_count AS card_sales_count,\n          card_sales.card_sales_fee AS card_sales_fee,\n          card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n          card_sales.card_sales_payment AS card_sales_payment,\n          card_sales.new_amount AS card_sales_new_amount,\n          card_sales.returning_amount AS card_sales_returning_amount,\n          card_sales.monthly_card_sales AS card_sales_monthly_amount,\n\n          hourly_sales.`새벽` AS `hourly_sales_0_6_amount`,\n          hourly_sales.`아침` AS `hourly_sales_6_11_amount`,\n          hourly_sales.`점심` AS `hourly_sales_11_14_amount`,\n          hourly_sales.`오후` AS `hourly_sales_14_17_amount`,\n          hourly_sales.`저녁` AS `hourly_sales_17_24_amount`,\n          hourly_sales.`미분류` AS `hourly_sales_etc_amount`,\n\n          today_payments.`KB` AS today_payments_kb,\n          today_payments.`농협NH` AS today_payments_nh,\n          today_payments.`롯데` AS today_payments_lotte,\n          today_payments.`비씨` AS today_payments_bc,\n          today_payments.`삼성` AS today_payments_samsung,\n          today_payments.`신한` AS today_payments_shinhan,\n          today_payments.`하나` AS today_payments_hana,\n          today_payments.`현대` AS today_payments_hyundai,\n          today_payments.`배달의민족` AS today_payments_baemin,\n          today_payments.`요기요` AS today_payments_yogiyo,\n          today_payments.`배달통` AS today_payments_baedaltong,\n\n          delivery_app_sales.baemin_sales_amount AS delivery_app_sales_baemin_amount,\n          delivery_app_sales.yogiyo_sales_amount AS delivery_app_sales_yogiyo_amount,\n          delivery_app_sales.baedaltong_sales_amount AS delivery_app_sales_baedaltong_amount,\n          delivery_app_sales.monthly_delivery_app_sales AS delivery_app_sales_monthly_amount,\n\n          card_purchases.monthly_card_purchases AS card_purchases_monthly_amount,\n          CAST(hometax_sales.monthly_invoice_sales_amount AS LONG) AS hometax_sales_monthly_invoice_amount,\n          CAST(hometax_sales.monthly_cash_sales_amount AS LONG) AS hometax_sales_monthly_cash_amount,\n          CAST(hometax_purchases.monthly_cash_purchases AS LONG) AS hometax_purchases_monthly_cash_amount,\n          CAST(hometax_purchases.monthly_invoice_purchases AS LONG) AS hometax_purchases_monthly_invoice_amount,\n\n          transform(future_payments, m -> named_struct('amount', m.amount, 'date', CONCAT(date_format(m.date, 'd일'), '(', dayofweek_kor(m.date), ')')))\n          AS future_payments_arr,\n          transform(bank_accounts, m -> named_struct('bank_name', m.bank_name, 'account_number', CONCAT('*', SUBSTRING(m.account_number, -5)), 'balance', nvl(m.balance, 0), 'unused', IF(m.balance IS null, true, false)))\n          AS bank_accounts_arr,\n          transform(card_purchases.today_purchases, m -> named_struct('amount', nvl(m.amount, 0), 'count', m.count, 'issuer', m.card.issuer, 'number', CONCAT('*', SUBSTRING(m.card.number, -4))   ))\n          AS today_card_purchases_arr\nFROM (\n        SELECT    id, group_id, target_id, business_id, user_id,\n                  nvl(payload.title, '') AS title,\n                  payload.attachment, payload.template_code,\n                  payload.attachment.button[0].url_mobile AS url_mobile,\n                  payload.raw_data.*\n        FROM (\n              SELECT  id, group_id, CONCAT(user_id, '_', business_id) AS target_id,\n                      business_id, user_id,\n                      from_json(bzm_payload, 'STRUCT<`attachment`: STRUCT<`button`: ARRAY<STRUCT<`name`: STRING, `type`: STRING, `url_mobile`: STRING>>>, `raw_data`: STRUCT<`bank_accounts`: ARRAY<STRUCT<`account_number`: STRING, `balance`: BIGINT, `bank_name`: STRING>>, `card_purchases`: STRUCT<`monthly_card_purchases`: BIGINT, `today_purchases`: ARRAY<STRUCT<`amount`: BIGINT, `card`: STRUCT<`business_id`: BIGINT, `card_type`: STRING, `created_at`: STRING, `credential_id`: BIGINT, `id`: BIGINT, `issuer`: STRING, `name`: STRING, `number`: STRING, `updated_at`: STRING, `uuid`: STRING>, `count`: BIGINT>>>, `card_sales`: STRUCT<`card_sales_amount`: BIGINT, `card_sales_count`: BIGINT, `card_sales_fee`: BIGINT, `card_sales_payment`: BIGINT, `card_sales_vat_fee`: BIGINT, `monthly_card_sales`: BIGINT, `new_amount`: BIGINT, `returning_amount`: BIGINT>, `delivery_app_sales`: STRUCT<`baedaltong_sales_amount`: BIGINT, `baemin_sales_amount`: BIGINT, `monthly_delivery_app_sales`: BIGINT, `yogiyo_sales_amount`: BIGINT>, `future_payments`: ARRAY<STRUCT<`amount`: BIGINT, `date`: STRING>>, `hometax_purchases`: STRUCT<`monthly_cash_purchases`: STRING, `monthly_invoice_purchases`: STRING>, `hometax_sales`: STRUCT<`monthly_cash_sales_amount`: STRING, `monthly_invoice_sales_amount`: STRING>, `hourly_sales`: STRUCT<`미분류`: BIGINT, `새벽`: BIGINT, `아침`: BIGINT, `오후`: BIGINT, `저녁`: BIGINT, `점심`: BIGINT>, `today_payments`: STRUCT<`KB`: BIGINT, `농협NH`: BIGINT, `롯데`: BIGINT, `배달의민족`: BIGINT, `요기요`: BIGINT, `배달통`: BIGINT, `비씨`: BIGINT, `삼성`: BIGINT, `신한`: BIGINT, `하나`: BIGINT, `현대`: BIGINT>>, `template_code`: STRING, `title`: STRING>', map())\n                      AS payload\n              FROM    report_logs\n              WHERE   id > 398030145\n              AND     group_id in ('0aedb1b7-7b73-4f94-9361-c49e3480efe3','e365a43e-c321-4f54-a6f5-dbc1245228a6')\n              AND     report_type = 'daily'\n              AND     business_id IS NOT NULL\n              AND     user_id IS NOT NULL\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_reports.json', 'options': {'sql': 'SELECT CAST(max(id) AS STRING) AS value FROM formatted_report_logs'}, 'role': 'process', 'type': 'sql'}]"
544,process:::formatted_report_logs:::daily_reports,process:::merged:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT\n          id, group_id, target_id, business_id, user_id, title, template_code, url_mobile,\n\n          card_sales.card_sales_amount AS card_sales_amount,\n          card_sales.card_sales_count AS card_sales_count,\n          card_sales.card_sales_fee AS card_sales_fee,\n          card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n          card_sales.card_sales_payment AS card_sales_payment,\n          card_sales.new_amount AS card_sales_new_amount,\n          card_sales.returning_amount AS card_sales_returning_amount,\n          card_sales.monthly_card_sales AS card_sales_monthly_amount,\n\n          hourly_sales.`새벽` AS `hourly_sales_0_6_amount`,\n          hourly_sales.`아침` AS `hourly_sales_6_11_amount`,\n          hourly_sales.`점심` AS `hourly_sales_11_14_amount`,\n          hourly_sales.`오후` AS `hourly_sales_14_17_amount`,\n          hourly_sales.`저녁` AS `hourly_sales_17_24_amount`,\n          hourly_sales.`미분류` AS `hourly_sales_etc_amount`,\n\n          today_payments.`KB` AS today_payments_kb,\n          today_payments.`농협NH` AS today_payments_nh,\n          today_payments.`롯데` AS today_payments_lotte,\n          today_payments.`비씨` AS today_payments_bc,\n          today_payments.`삼성` AS today_payments_samsung,\n          today_payments.`신한` AS today_payments_shinhan,\n          today_payments.`하나` AS today_payments_hana,\n          today_payments.`현대` AS today_payments_hyundai,\n          today_payments.`배달의민족` AS today_payments_baemin,\n          today_payments.`요기요` AS today_payments_yogiyo,\n          today_payments.`배달통` AS today_payments_baedaltong,\n\n          delivery_app_sales.baemin_sales_amount AS delivery_app_sales_baemin_amount,\n          delivery_app_sales.yogiyo_sales_amount AS delivery_app_sales_yogiyo_amount,\n          delivery_app_sales.baedaltong_sales_amount AS delivery_app_sales_baedaltong_amount,\n          delivery_app_sales.monthly_delivery_app_sales AS delivery_app_sales_monthly_amount,\n\n          card_purchases.monthly_card_purchases AS card_purchases_monthly_amount,\n          CAST(hometax_sales.monthly_invoice_sales_amount AS LONG) AS hometax_sales_monthly_invoice_amount,\n          CAST(hometax_sales.monthly_cash_sales_amount AS LONG) AS hometax_sales_monthly_cash_amount,\n          CAST(hometax_purchases.monthly_cash_purchases AS LONG) AS hometax_purchases_monthly_cash_amount,\n          CAST(hometax_purchases.monthly_invoice_purchases AS LONG) AS hometax_purchases_monthly_invoice_amount,\n\n          transform(future_payments, m -> named_struct('amount', m.amount, 'date', CONCAT(date_format(m.date, 'd일'), '(', dayofweek_kor(m.date), ')')))\n          AS future_payments_arr,\n          transform(bank_accounts, m -> named_struct('bank_name', m.bank_name, 'account_number', CONCAT('*', SUBSTRING(m.account_number, -5)), 'balance', nvl(m.balance, 0), 'unused', IF(m.balance IS null, true, false)))\n          AS bank_accounts_arr,\n          transform(card_purchases.today_purchases, m -> named_struct('amount', nvl(m.amount, 0), 'count', m.count, 'issuer', m.card.issuer, 'number', CONCAT('*', SUBSTRING(m.card.number, -4))   ))\n          AS today_card_purchases_arr\nFROM (\n        SELECT    id, group_id, target_id, business_id, user_id,\n                  nvl(payload.title, '') AS title,\n                  payload.attachment, payload.template_code,\n                  payload.attachment.button[0].url_mobile AS url_mobile,\n                  payload.raw_data.*\n        FROM (\n              SELECT  id, group_id, CONCAT(user_id, '_', business_id) AS target_id,\n                      business_id, user_id,\n                      from_json(bzm_payload, 'STRUCT<`attachment`: STRUCT<`button`: ARRAY<STRUCT<`name`: STRING, `type`: STRING, `url_mobile`: STRING>>>, `raw_data`: STRUCT<`bank_accounts`: ARRAY<STRUCT<`account_number`: STRING, `balance`: BIGINT, `bank_name`: STRING>>, `card_purchases`: STRUCT<`monthly_card_purchases`: BIGINT, `today_purchases`: ARRAY<STRUCT<`amount`: BIGINT, `card`: STRUCT<`business_id`: BIGINT, `card_type`: STRING, `created_at`: STRING, `credential_id`: BIGINT, `id`: BIGINT, `issuer`: STRING, `name`: STRING, `number`: STRING, `updated_at`: STRING, `uuid`: STRING>, `count`: BIGINT>>>, `card_sales`: STRUCT<`card_sales_amount`: BIGINT, `card_sales_count`: BIGINT, `card_sales_fee`: BIGINT, `card_sales_payment`: BIGINT, `card_sales_vat_fee`: BIGINT, `monthly_card_sales`: BIGINT, `new_amount`: BIGINT, `returning_amount`: BIGINT>, `delivery_app_sales`: STRUCT<`baedaltong_sales_amount`: BIGINT, `baemin_sales_amount`: BIGINT, `monthly_delivery_app_sales`: BIGINT, `yogiyo_sales_amount`: BIGINT>, `future_payments`: ARRAY<STRUCT<`amount`: BIGINT, `date`: STRING>>, `hometax_purchases`: STRUCT<`monthly_cash_purchases`: STRING, `monthly_invoice_purchases`: STRING>, `hometax_sales`: STRUCT<`monthly_cash_sales_amount`: STRING, `monthly_invoice_sales_amount`: STRING>, `hourly_sales`: STRUCT<`미분류`: BIGINT, `새벽`: BIGINT, `아침`: BIGINT, `오후`: BIGINT, `저녁`: BIGINT, `점심`: BIGINT>, `today_payments`: STRUCT<`KB`: BIGINT, `농협NH`: BIGINT, `롯데`: BIGINT, `배달의민족`: BIGINT, `요기요`: BIGINT, `배달통`: BIGINT, `비씨`: BIGINT, `삼성`: BIGINT, `신한`: BIGINT, `하나`: BIGINT, `현대`: BIGINT>>, `template_code`: STRING, `title`: STRING>', map())\n                      AS payload\n              FROM    report_logs\n              WHERE   id > 398030145\n              AND     group_id in ('0aedb1b7-7b73-4f94-9361-c49e3480efe3','e365a43e-c321-4f54-a6f5-dbc1245228a6')\n              AND     report_type = 'daily'\n              AND     business_id IS NOT NULL\n              AND     user_id IS NOT NULL\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT    *,\n          (hourly_sales_0_6_amount + hourly_sales_6_11_amount + hourly_sales_11_14_amount + hourly_sales_14_17_amount + hourly_sales_17_24_amount + hourly_sales_etc_amount) AS hourly_sales_amount_sum\nFROM (\nSELECT    target_id, business_id, user_id, title, template_code, url_mobile,\n          NVL(card_sales_amount, 0) AS card_sales_amount,\n          NVL(card_sales_count, 0) AS card_sales_count,\n          NVL(card_sales_fee, 0) AS card_sales_fee,\n          NVL(card_sales_vat_fee, 0) AS card_sales_vat_fee,\n          NVL(card_sales_payment, 0) AS card_sales_payment,\n          NVL(card_sales_new_amount, 0) AS card_sales_new_amount,\n          NVL(card_sales_returning_amount, 0) AS card_sales_returning_amount,\n          NVL(card_sales_monthly_amount, 0) AS card_sales_monthly_amount,\n          NVL(hourly_sales_0_6_amount, 0) AS hourly_sales_0_6_amount,\n          NVL(hourly_sales_6_11_amount, 0) AS hourly_sales_6_11_amount,\n          NVL(hourly_sales_11_14_amount, 0) AS hourly_sales_11_14_amount,\n          NVL(hourly_sales_14_17_amount, 0) AS hourly_sales_14_17_amount,\n          NVL(hourly_sales_17_24_amount, 0) AS hourly_sales_17_24_amount,\n          NVL(hourly_sales_etc_amount, 0) AS hourly_sales_etc_amount,\n          NVL(delivery_app_sales_monthly_amount, 0) AS delivery_app_sales_monthly_amount,\n          NVL(card_purchases_monthly_amount, 0) AS card_purchases_monthly_amount,\n          NVL(hometax_sales_monthly_invoice_amount, 0) AS hometax_sales_monthly_invoice_amount,\n          NVL(hometax_sales_monthly_cash_amount, 0) AS hometax_sales_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_cash_amount, 0) AS hometax_purchases_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_invoice_amount, 0) AS hometax_purchases_monthly_invoice_amount,\n          NVL(delivery_app_sales_baemin_amount, 0) AS delivery_app_sales_baemin_amount,\n          NVL(delivery_app_sales_yogiyo_amount, 0) AS delivery_app_sales_yogiyo_amount,\n          NVL(delivery_app_sales_baedaltong_amount, 0) AS delivery_app_sales_baedaltong_amount,\n          array(\n              named_struct('issuer_name', 'KB', 'amount', nvl(today_payments_kb, 0L)),\n              named_struct('issuer_name', '농협NH', 'amount', nvl(today_payments_nh, 0L)),\n              named_struct('issuer_name', '롯데', 'amount', nvl(today_payments_lotte, 0L)),\n              named_struct('issuer_name', '비씨', 'amount', nvl(today_payments_bc, 0L)),\n              named_struct('issuer_name', '삼성', 'amount', nvl(today_payments_samsung, 0L)),\n              named_struct('issuer_name', '신한', 'amount', nvl(today_payments_shinhan, 0L)),\n              named_struct('issuer_name', '하나', 'amount', nvl(today_payments_hana, 0L)),\n              named_struct('issuer_name', '현대', 'amount', nvl(today_payments_hyundai, 0L)),\n              named_struct('issuer_name', '배달의민족', 'amount', nvl(today_payments_baemin, 0L)),\n              named_struct('issuer_name', '요기요', 'amount', nvl(today_payments_yogiyo, 0L)),\n              named_struct('issuer_name', '배달통', 'amount', nvl(today_payments_baedaltong, 0L))\n          ) AS today_payments_arr,\n          array(\n              named_struct('app_name', '배달의민족', 'amount', delivery_app_sales_baemin_amount),\n              named_struct('app_name', '요기요', 'amount', delivery_app_sales_yogiyo_amount),\n              named_struct('app_name', '배달통', 'amount', delivery_app_sales_baedaltong_amount)\n          ) AS delivery_app_sales_arr,\n          future_payments_arr,\n          bank_accounts_arr,\n          today_card_purchases_arr\nFROM (\n        SELECT\n                  o.target_id, o.business_id, o.user_id, o.title, o.template_code, o.url_mobile,\n\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_amount'),           n.card_sales_amount, o.card_sales_amount) AS card_sales_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_count'),            n.card_sales_count, o.card_sales_count) AS card_sales_count,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_fee'),              n.card_sales_fee, o.card_sales_fee) AS card_sales_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_vat_fee'),          n.card_sales_vat_fee, o.card_sales_vat_fee) AS card_sales_vat_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_payment'),          n.card_sales_payment, o.card_sales_payment) AS card_sales_payment,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_new_amount'),       n.card_sales_new_amount, o.card_sales_new_amount) AS card_sales_new_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_returning_amount'), n.card_sales_returning_amount, o.card_sales_returning_amount) AS card_sales_returning_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_monthly_amount'),   n.card_sales_monthly_amount, o.card_sales_monthly_amount) AS card_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_0_6_amount'),     n.hourly_sales_0_6_amount, o.hourly_sales_0_6_amount) AS hourly_sales_0_6_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_6_11_amount'),    n.hourly_sales_6_11_amount, o.hourly_sales_6_11_amount) AS hourly_sales_6_11_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_11_14_amount'),   n.hourly_sales_11_14_amount, o.hourly_sales_11_14_amount) AS hourly_sales_11_14_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_14_17_amount'),   n.hourly_sales_14_17_amount, o.hourly_sales_14_17_amount) AS hourly_sales_14_17_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_17_24_amount'),   n.hourly_sales_17_24_amount, o.hourly_sales_17_24_amount) AS hourly_sales_17_24_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_kb'),           n.today_payments_kb, o.today_payments_kb) AS today_payments_kb,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_nh'),           n.today_payments_nh, o.today_payments_nh) AS today_payments_nh,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_lotte'),        n.today_payments_lotte, o.today_payments_lotte) AS today_payments_lotte,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baemin'),       n.today_payments_baemin, o.today_payments_baemin) AS today_payments_baemin,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_bc'),           n.today_payments_bc, o.today_payments_bc) AS today_payments_bc,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_samsung'),      n.today_payments_samsung, o.today_payments_samsung) AS today_payments_samsung,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_shinhan'),      n.today_payments_shinhan, o.today_payments_shinhan) AS today_payments_shinhan,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hana'),         n.today_payments_hana, o.today_payments_hana) AS today_payments_hana,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hyundai'),      n.today_payments_hyundai, o.today_payments_hyundai) AS today_payments_hyundai,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_yogiyo'),       n.today_payments_yogiyo, o.today_payments_yogiyo) AS today_payments_yogiyo,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baedaltong'),   n.today_payments_baedaltong, o.today_payments_baedaltong) AS today_payments_baedaltong,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baemin_amount'),        n.delivery_app_sales_baemin_amount, o.delivery_app_sales_baemin_amount) AS delivery_app_sales_baemin_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_yogiyo_amount'),        n.delivery_app_sales_yogiyo_amount, o.delivery_app_sales_yogiyo_amount) AS delivery_app_sales_yogiyo_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baedaltong_amount'),    n.delivery_app_sales_baedaltong_amount, o.delivery_app_sales_baedaltong_amount) AS delivery_app_sales_baedaltong_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_monthly_amount'),       n.delivery_app_sales_monthly_amount, o.delivery_app_sales_monthly_amount) AS delivery_app_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_purchases_monthly_amount'),           n.card_purchases_monthly_amount, o.card_purchases_monthly_amount) AS card_purchases_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_invoice_amount'),    n.hometax_sales_monthly_invoice_amount, o.hometax_sales_monthly_invoice_amount) AS hometax_sales_monthly_invoice_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_cash_amount'),       n.hometax_sales_monthly_cash_amount, o.hometax_sales_monthly_cash_amount) AS hometax_sales_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_cash_amount'),   n.hometax_purchases_monthly_cash_amount, o.hometax_purchases_monthly_cash_amount) AS hometax_purchases_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_invoice_amount'),n.hometax_purchases_monthly_invoice_amount, o.hometax_purchases_monthly_invoice_amount) AS hometax_purchases_monthly_invoice_amount,\n                  o.hourly_sales_etc_amount,\n                  o.future_payments_arr,\n                  o.bank_accounts_arr,\n                  o.today_card_purchases_arr\n        FROM      formatted_report_logs AS o\n        LEFT OUTER JOIN   formatted_daily_report AS n\n        ON        o.business_id = n.business_id\n)\n)""}, 'role': 'process', 'type': 'sql'}]"
545,process:::formatted_report_logs:::daily_reports,s3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT\n          id, group_id, target_id, business_id, user_id, title, template_code, url_mobile,\n\n          card_sales.card_sales_amount AS card_sales_amount,\n          card_sales.card_sales_count AS card_sales_count,\n          card_sales.card_sales_fee AS card_sales_fee,\n          card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n          card_sales.card_sales_payment AS card_sales_payment,\n          card_sales.new_amount AS card_sales_new_amount,\n          card_sales.returning_amount AS card_sales_returning_amount,\n          card_sales.monthly_card_sales AS card_sales_monthly_amount,\n\n          hourly_sales.`새벽` AS `hourly_sales_0_6_amount`,\n          hourly_sales.`아침` AS `hourly_sales_6_11_amount`,\n          hourly_sales.`점심` AS `hourly_sales_11_14_amount`,\n          hourly_sales.`오후` AS `hourly_sales_14_17_amount`,\n          hourly_sales.`저녁` AS `hourly_sales_17_24_amount`,\n          hourly_sales.`미분류` AS `hourly_sales_etc_amount`,\n\n          today_payments.`KB` AS today_payments_kb,\n          today_payments.`농협NH` AS today_payments_nh,\n          today_payments.`롯데` AS today_payments_lotte,\n          today_payments.`비씨` AS today_payments_bc,\n          today_payments.`삼성` AS today_payments_samsung,\n          today_payments.`신한` AS today_payments_shinhan,\n          today_payments.`하나` AS today_payments_hana,\n          today_payments.`현대` AS today_payments_hyundai,\n          today_payments.`배달의민족` AS today_payments_baemin,\n          today_payments.`요기요` AS today_payments_yogiyo,\n          today_payments.`배달통` AS today_payments_baedaltong,\n\n          delivery_app_sales.baemin_sales_amount AS delivery_app_sales_baemin_amount,\n          delivery_app_sales.yogiyo_sales_amount AS delivery_app_sales_yogiyo_amount,\n          delivery_app_sales.baedaltong_sales_amount AS delivery_app_sales_baedaltong_amount,\n          delivery_app_sales.monthly_delivery_app_sales AS delivery_app_sales_monthly_amount,\n\n          card_purchases.monthly_card_purchases AS card_purchases_monthly_amount,\n          CAST(hometax_sales.monthly_invoice_sales_amount AS LONG) AS hometax_sales_monthly_invoice_amount,\n          CAST(hometax_sales.monthly_cash_sales_amount AS LONG) AS hometax_sales_monthly_cash_amount,\n          CAST(hometax_purchases.monthly_cash_purchases AS LONG) AS hometax_purchases_monthly_cash_amount,\n          CAST(hometax_purchases.monthly_invoice_purchases AS LONG) AS hometax_purchases_monthly_invoice_amount,\n\n          transform(future_payments, m -> named_struct('amount', m.amount, 'date', CONCAT(date_format(m.date, 'd일'), '(', dayofweek_kor(m.date), ')')))\n          AS future_payments_arr,\n          transform(bank_accounts, m -> named_struct('bank_name', m.bank_name, 'account_number', CONCAT('*', SUBSTRING(m.account_number, -5)), 'balance', nvl(m.balance, 0), 'unused', IF(m.balance IS null, true, false)))\n          AS bank_accounts_arr,\n          transform(card_purchases.today_purchases, m -> named_struct('amount', nvl(m.amount, 0), 'count', m.count, 'issuer', m.card.issuer, 'number', CONCAT('*', SUBSTRING(m.card.number, -4))   ))\n          AS today_card_purchases_arr\nFROM (\n        SELECT    id, group_id, target_id, business_id, user_id,\n                  nvl(payload.title, '') AS title,\n                  payload.attachment, payload.template_code,\n                  payload.attachment.button[0].url_mobile AS url_mobile,\n                  payload.raw_data.*\n        FROM (\n              SELECT  id, group_id, CONCAT(user_id, '_', business_id) AS target_id,\n                      business_id, user_id,\n                      from_json(bzm_payload, 'STRUCT<`attachment`: STRUCT<`button`: ARRAY<STRUCT<`name`: STRING, `type`: STRING, `url_mobile`: STRING>>>, `raw_data`: STRUCT<`bank_accounts`: ARRAY<STRUCT<`account_number`: STRING, `balance`: BIGINT, `bank_name`: STRING>>, `card_purchases`: STRUCT<`monthly_card_purchases`: BIGINT, `today_purchases`: ARRAY<STRUCT<`amount`: BIGINT, `card`: STRUCT<`business_id`: BIGINT, `card_type`: STRING, `created_at`: STRING, `credential_id`: BIGINT, `id`: BIGINT, `issuer`: STRING, `name`: STRING, `number`: STRING, `updated_at`: STRING, `uuid`: STRING>, `count`: BIGINT>>>, `card_sales`: STRUCT<`card_sales_amount`: BIGINT, `card_sales_count`: BIGINT, `card_sales_fee`: BIGINT, `card_sales_payment`: BIGINT, `card_sales_vat_fee`: BIGINT, `monthly_card_sales`: BIGINT, `new_amount`: BIGINT, `returning_amount`: BIGINT>, `delivery_app_sales`: STRUCT<`baedaltong_sales_amount`: BIGINT, `baemin_sales_amount`: BIGINT, `monthly_delivery_app_sales`: BIGINT, `yogiyo_sales_amount`: BIGINT>, `future_payments`: ARRAY<STRUCT<`amount`: BIGINT, `date`: STRING>>, `hometax_purchases`: STRUCT<`monthly_cash_purchases`: STRING, `monthly_invoice_purchases`: STRING>, `hometax_sales`: STRUCT<`monthly_cash_sales_amount`: STRING, `monthly_invoice_sales_amount`: STRING>, `hourly_sales`: STRUCT<`미분류`: BIGINT, `새벽`: BIGINT, `아침`: BIGINT, `오후`: BIGINT, `저녁`: BIGINT, `점심`: BIGINT>, `today_payments`: STRUCT<`KB`: BIGINT, `농협NH`: BIGINT, `롯데`: BIGINT, `배달의민족`: BIGINT, `요기요`: BIGINT, `배달통`: BIGINT, `비씨`: BIGINT, `삼성`: BIGINT, `신한`: BIGINT, `하나`: BIGINT, `현대`: BIGINT>>, `template_code`: STRING, `title`: STRING>', map())\n                      AS payload\n              FROM    report_logs\n              WHERE   id > 398030145\n              AND     group_id in ('0aedb1b7-7b73-4f94-9361-c49e3480efe3','e365a43e-c321-4f54-a6f5-dbc1245228a6')\n              AND     report_type = 'daily'\n              AND     business_id IS NOT NULL\n              AND     user_id IS NOT NULL\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_reports.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/date_id=2021-01-28', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'group_id'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'daily_reports.json', 'options': {'format': 'text', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/latest_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/date_id=2021-01-01'}, 'role': 'source', 'type': 'file'}]"
546,process:::latest_id:::daily_reports,s3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'sql': 'SELECT CAST(max(id) AS STRING) AS value FROM formatted_report_logs'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_reports.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/date_id=2021-01-28', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'group_id'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'daily_reports.json', 'options': {'format': 'text', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/latest_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/date_id=2021-01-01'}, 'role': 'source', 'type': 'file'}]"
547,process:::merged:::daily_reports,process:::calc_additional_columns:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT    *,\n          (hourly_sales_0_6_amount + hourly_sales_6_11_amount + hourly_sales_11_14_amount + hourly_sales_14_17_amount + hourly_sales_17_24_amount + hourly_sales_etc_amount) AS hourly_sales_amount_sum\nFROM (\nSELECT    target_id, business_id, user_id, title, template_code, url_mobile,\n          NVL(card_sales_amount, 0) AS card_sales_amount,\n          NVL(card_sales_count, 0) AS card_sales_count,\n          NVL(card_sales_fee, 0) AS card_sales_fee,\n          NVL(card_sales_vat_fee, 0) AS card_sales_vat_fee,\n          NVL(card_sales_payment, 0) AS card_sales_payment,\n          NVL(card_sales_new_amount, 0) AS card_sales_new_amount,\n          NVL(card_sales_returning_amount, 0) AS card_sales_returning_amount,\n          NVL(card_sales_monthly_amount, 0) AS card_sales_monthly_amount,\n          NVL(hourly_sales_0_6_amount, 0) AS hourly_sales_0_6_amount,\n          NVL(hourly_sales_6_11_amount, 0) AS hourly_sales_6_11_amount,\n          NVL(hourly_sales_11_14_amount, 0) AS hourly_sales_11_14_amount,\n          NVL(hourly_sales_14_17_amount, 0) AS hourly_sales_14_17_amount,\n          NVL(hourly_sales_17_24_amount, 0) AS hourly_sales_17_24_amount,\n          NVL(hourly_sales_etc_amount, 0) AS hourly_sales_etc_amount,\n          NVL(delivery_app_sales_monthly_amount, 0) AS delivery_app_sales_monthly_amount,\n          NVL(card_purchases_monthly_amount, 0) AS card_purchases_monthly_amount,\n          NVL(hometax_sales_monthly_invoice_amount, 0) AS hometax_sales_monthly_invoice_amount,\n          NVL(hometax_sales_monthly_cash_amount, 0) AS hometax_sales_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_cash_amount, 0) AS hometax_purchases_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_invoice_amount, 0) AS hometax_purchases_monthly_invoice_amount,\n          NVL(delivery_app_sales_baemin_amount, 0) AS delivery_app_sales_baemin_amount,\n          NVL(delivery_app_sales_yogiyo_amount, 0) AS delivery_app_sales_yogiyo_amount,\n          NVL(delivery_app_sales_baedaltong_amount, 0) AS delivery_app_sales_baedaltong_amount,\n          array(\n              named_struct('issuer_name', 'KB', 'amount', nvl(today_payments_kb, 0L)),\n              named_struct('issuer_name', '농협NH', 'amount', nvl(today_payments_nh, 0L)),\n              named_struct('issuer_name', '롯데', 'amount', nvl(today_payments_lotte, 0L)),\n              named_struct('issuer_name', '비씨', 'amount', nvl(today_payments_bc, 0L)),\n              named_struct('issuer_name', '삼성', 'amount', nvl(today_payments_samsung, 0L)),\n              named_struct('issuer_name', '신한', 'amount', nvl(today_payments_shinhan, 0L)),\n              named_struct('issuer_name', '하나', 'amount', nvl(today_payments_hana, 0L)),\n              named_struct('issuer_name', '현대', 'amount', nvl(today_payments_hyundai, 0L)),\n              named_struct('issuer_name', '배달의민족', 'amount', nvl(today_payments_baemin, 0L)),\n              named_struct('issuer_name', '요기요', 'amount', nvl(today_payments_yogiyo, 0L)),\n              named_struct('issuer_name', '배달통', 'amount', nvl(today_payments_baedaltong, 0L))\n          ) AS today_payments_arr,\n          array(\n              named_struct('app_name', '배달의민족', 'amount', delivery_app_sales_baemin_amount),\n              named_struct('app_name', '요기요', 'amount', delivery_app_sales_yogiyo_amount),\n              named_struct('app_name', '배달통', 'amount', delivery_app_sales_baedaltong_amount)\n          ) AS delivery_app_sales_arr,\n          future_payments_arr,\n          bank_accounts_arr,\n          today_card_purchases_arr\nFROM (\n        SELECT\n                  o.target_id, o.business_id, o.user_id, o.title, o.template_code, o.url_mobile,\n\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_amount'),           n.card_sales_amount, o.card_sales_amount) AS card_sales_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_count'),            n.card_sales_count, o.card_sales_count) AS card_sales_count,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_fee'),              n.card_sales_fee, o.card_sales_fee) AS card_sales_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_vat_fee'),          n.card_sales_vat_fee, o.card_sales_vat_fee) AS card_sales_vat_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_payment'),          n.card_sales_payment, o.card_sales_payment) AS card_sales_payment,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_new_amount'),       n.card_sales_new_amount, o.card_sales_new_amount) AS card_sales_new_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_returning_amount'), n.card_sales_returning_amount, o.card_sales_returning_amount) AS card_sales_returning_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_monthly_amount'),   n.card_sales_monthly_amount, o.card_sales_monthly_amount) AS card_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_0_6_amount'),     n.hourly_sales_0_6_amount, o.hourly_sales_0_6_amount) AS hourly_sales_0_6_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_6_11_amount'),    n.hourly_sales_6_11_amount, o.hourly_sales_6_11_amount) AS hourly_sales_6_11_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_11_14_amount'),   n.hourly_sales_11_14_amount, o.hourly_sales_11_14_amount) AS hourly_sales_11_14_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_14_17_amount'),   n.hourly_sales_14_17_amount, o.hourly_sales_14_17_amount) AS hourly_sales_14_17_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_17_24_amount'),   n.hourly_sales_17_24_amount, o.hourly_sales_17_24_amount) AS hourly_sales_17_24_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_kb'),           n.today_payments_kb, o.today_payments_kb) AS today_payments_kb,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_nh'),           n.today_payments_nh, o.today_payments_nh) AS today_payments_nh,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_lotte'),        n.today_payments_lotte, o.today_payments_lotte) AS today_payments_lotte,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baemin'),       n.today_payments_baemin, o.today_payments_baemin) AS today_payments_baemin,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_bc'),           n.today_payments_bc, o.today_payments_bc) AS today_payments_bc,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_samsung'),      n.today_payments_samsung, o.today_payments_samsung) AS today_payments_samsung,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_shinhan'),      n.today_payments_shinhan, o.today_payments_shinhan) AS today_payments_shinhan,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hana'),         n.today_payments_hana, o.today_payments_hana) AS today_payments_hana,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hyundai'),      n.today_payments_hyundai, o.today_payments_hyundai) AS today_payments_hyundai,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_yogiyo'),       n.today_payments_yogiyo, o.today_payments_yogiyo) AS today_payments_yogiyo,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baedaltong'),   n.today_payments_baedaltong, o.today_payments_baedaltong) AS today_payments_baedaltong,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baemin_amount'),        n.delivery_app_sales_baemin_amount, o.delivery_app_sales_baemin_amount) AS delivery_app_sales_baemin_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_yogiyo_amount'),        n.delivery_app_sales_yogiyo_amount, o.delivery_app_sales_yogiyo_amount) AS delivery_app_sales_yogiyo_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baedaltong_amount'),    n.delivery_app_sales_baedaltong_amount, o.delivery_app_sales_baedaltong_amount) AS delivery_app_sales_baedaltong_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_monthly_amount'),       n.delivery_app_sales_monthly_amount, o.delivery_app_sales_monthly_amount) AS delivery_app_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_purchases_monthly_amount'),           n.card_purchases_monthly_amount, o.card_purchases_monthly_amount) AS card_purchases_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_invoice_amount'),    n.hometax_sales_monthly_invoice_amount, o.hometax_sales_monthly_invoice_amount) AS hometax_sales_monthly_invoice_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_cash_amount'),       n.hometax_sales_monthly_cash_amount, o.hometax_sales_monthly_cash_amount) AS hometax_sales_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_cash_amount'),   n.hometax_purchases_monthly_cash_amount, o.hometax_purchases_monthly_cash_amount) AS hometax_purchases_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_invoice_amount'),n.hometax_purchases_monthly_invoice_amount, o.hometax_purchases_monthly_invoice_amount) AS hometax_purchases_monthly_invoice_amount,\n                  o.hourly_sales_etc_amount,\n                  o.future_payments_arr,\n                  o.bank_accounts_arr,\n                  o.today_card_purchases_arr\n        FROM      formatted_report_logs AS o\n        LEFT OUTER JOIN   formatted_daily_report AS n\n        ON        o.business_id = n.business_id\n)\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT    *,\n          date_format('2021-01-28', 'M월') AS report_month,\n          date_format('2021-01-28', 'M월 d일') AS report_date,\n          dayofweek_kor('2021-01-28') AS report_day_of_week,\n          date_format('2021-01-29', 'M월 d일') AS today_date,\n          dayofweek_kor('2021-01-29') AS today_day_of_week,\n\n          IF(bank_account_etc_count > 0, true, false) AS bank_account_etc_exists,\n          IF(today_card_purchases_etc_count > 0, true, false) AS today_card_purchases_etc_exists,\n          IF(size(delivery_app_sales) > 0, true, false) AS delivery_app_sales_exists,\n          IF(size(today_payments) > 0, true, false) AS today_payments_exists,\n          IF(size(future_payments) > 0, true, false) AS future_payments_exists\nFROM (\n        SELECT    target_id, business_id, user_id, title, template_code, url_mobile,\n\n                  FORMAT_NUMBER(card_sales_amount, 0) AS card_sales_amount,\n                  FORMAT_NUMBER(card_sales_count, 0) AS card_sales_count,\n                  FORMAT_NUMBER(card_sales_fee, 0) AS card_sales_fee,\n                  FORMAT_NUMBER(card_sales_vat_fee, 0) AS card_sales_vat_fee,\n                  IF(card_sales_vat_fee > 0, true, false) AS card_sales_vat_fee_exists,\n                  FORMAT_NUMBER(card_sales_payment, 0) AS card_sales_payment,\n                  FORMAT_NUMBER(card_sales_new_amount, 0) AS card_sales_new_amount,\n                  FORMAT_NUMBER(card_sales_returning_amount, 0) AS card_sales_returning_amount,\n                  FORMAT_NUMBER(card_sales_monthly_amount, 0) AS card_sales_monthly_amount,\n                  FORMAT_NUMBER(delivery_app_sales_monthly_amount, 0) AS delivery_app_sales_monthly_amount,\n                  FORMAT_NUMBER(card_purchases_monthly_amount, 0) AS card_purchases_monthly_amount,\n                  FORMAT_NUMBER(hometax_sales_monthly_invoice_amount, 0) AS hometax_sales_monthly_invoice_amount,\n                  FORMAT_NUMBER(hometax_sales_monthly_cash_amount, 0) AS hometax_sales_monthly_cash_amount,\n                  FORMAT_NUMBER(hometax_purchases_monthly_cash_amount, 0) AS hometax_purchases_monthly_cash_amount,\n                  FORMAT_NUMBER(hometax_purchases_monthly_invoice_amount, 0) AS hometax_purchases_monthly_invoice_amount,\n\n                  NVL(FORMAT_NUMBER(FLOOR(card_sales_amount / card_sales_count), 0), '0') AS card_sales_unit_price,\n                  NVL(FORMAT_NUMBER(ROUND(card_sales_new_amount / card_sales_amount * 100), 0), '0') AS card_sales_new_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(card_sales_returning_amount / card_sales_amount * 100), 0), '0') AS card_sales_returning_amount_percent,\n                  IF(card_sales_amount > 0, true, false) AS card_sales_amount_exists,\n\n                  FORMAT_NUMBER(hourly_sales_0_6_amount, 0) AS hourly_sales_0_6_amount,\n                  FORMAT_NUMBER(hourly_sales_6_11_amount, 0) AS hourly_sales_6_11_amount,\n                  FORMAT_NUMBER(hourly_sales_11_14_amount, 0) AS hourly_sales_11_14_amount,\n                  FORMAT_NUMBER(hourly_sales_14_17_amount, 0) AS hourly_sales_14_17_amount,\n                  FORMAT_NUMBER(hourly_sales_17_24_amount, 0) AS hourly_sales_17_24_amount,\n                  FORMAT_NUMBER(hourly_sales_etc_amount, 0) AS hourly_sales_etc_amount,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_0_6_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_0_6_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_6_11_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_6_11_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_11_14_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_11_14_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_14_17_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_14_17_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_17_24_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_17_24_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_etc_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_etc_amount_percent,\n                  IF(hourly_sales_etc_amount > 0, true, false) AS hourly_sales_etc_amount_exists,\n                  IF(hourly_sales_amount_sum > 0, true, false) AS hourly_sales_exists,\n\n                  FORMAT_NUMBER(delivery_app_sales_baemin_amount, 0) AS delivery_app_sales_baemin_amount,\n                  FORMAT_NUMBER(delivery_app_sales_yogiyo_amount, 0) AS delivery_app_sales_yogiyo_amount,\n                  FORMAT_NUMBER(delivery_app_sales_baedaltong_amount, 0) AS delivery_app_sales_baedaltong_amount,\n\n                  filter(today_payments_arr, d -> d.amount > 0) AS today_payments,\n                  aggregate(today_payments_arr, 0L, (acc, d) -> acc + d.amount) AS today_payments_sum_amount,\n\n                  future_payments_arr AS future_payments,\n                  aggregate(future_payments_arr, 0L, (acc, d) -> acc + d.amount) AS future_payments_sum_amount,\n\n                  slice(bank_accounts_arr, 1, 5) AS bank_accounts,\n                  IF(size(bank_accounts_arr) > 5, size(bank_accounts_arr) - 5, 0) AS bank_account_etc_count,\n\n                  slice(today_card_purchases_arr, 1, 5) AS today_card_purchases,\n                  IF(size(today_card_purchases_arr) > 5, size(today_card_purchases_arr) - 5, 0) AS today_card_purchases_etc_count,\n\n                  filter(delivery_app_sales_arr, d -> d.amount > 0) AS delivery_app_sales,\n\n                  (\n                      card_sales_monthly_amount +\n                      delivery_app_sales_monthly_amount +\n                      hometax_sales_monthly_invoice_amount +\n                      hometax_sales_monthly_cash_amount\n                  ) AS monthly_sales_sum,\n                  (\n                      card_purchases_monthly_amount +\n                      hometax_purchases_monthly_cash_amount +\n                      hometax_purchases_monthly_invoice_amount\n                  ) AS monthly_purchases_sum\n        FROM      merged\n)""}, 'role': 'process', 'type': 'sql'}]"
548,process:::calc_additional_columns:::daily_reports,process:::with_businesses:::daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT    *,\n          date_format('2021-01-28', 'M월') AS report_month,\n          date_format('2021-01-28', 'M월 d일') AS report_date,\n          dayofweek_kor('2021-01-28') AS report_day_of_week,\n          date_format('2021-01-29', 'M월 d일') AS today_date,\n          dayofweek_kor('2021-01-29') AS today_day_of_week,\n\n          IF(bank_account_etc_count > 0, true, false) AS bank_account_etc_exists,\n          IF(today_card_purchases_etc_count > 0, true, false) AS today_card_purchases_etc_exists,\n          IF(size(delivery_app_sales) > 0, true, false) AS delivery_app_sales_exists,\n          IF(size(today_payments) > 0, true, false) AS today_payments_exists,\n          IF(size(future_payments) > 0, true, false) AS future_payments_exists\nFROM (\n        SELECT    target_id, business_id, user_id, title, template_code, url_mobile,\n\n                  FORMAT_NUMBER(card_sales_amount, 0) AS card_sales_amount,\n                  FORMAT_NUMBER(card_sales_count, 0) AS card_sales_count,\n                  FORMAT_NUMBER(card_sales_fee, 0) AS card_sales_fee,\n                  FORMAT_NUMBER(card_sales_vat_fee, 0) AS card_sales_vat_fee,\n                  IF(card_sales_vat_fee > 0, true, false) AS card_sales_vat_fee_exists,\n                  FORMAT_NUMBER(card_sales_payment, 0) AS card_sales_payment,\n                  FORMAT_NUMBER(card_sales_new_amount, 0) AS card_sales_new_amount,\n                  FORMAT_NUMBER(card_sales_returning_amount, 0) AS card_sales_returning_amount,\n                  FORMAT_NUMBER(card_sales_monthly_amount, 0) AS card_sales_monthly_amount,\n                  FORMAT_NUMBER(delivery_app_sales_monthly_amount, 0) AS delivery_app_sales_monthly_amount,\n                  FORMAT_NUMBER(card_purchases_monthly_amount, 0) AS card_purchases_monthly_amount,\n                  FORMAT_NUMBER(hometax_sales_monthly_invoice_amount, 0) AS hometax_sales_monthly_invoice_amount,\n                  FORMAT_NUMBER(hometax_sales_monthly_cash_amount, 0) AS hometax_sales_monthly_cash_amount,\n                  FORMAT_NUMBER(hometax_purchases_monthly_cash_amount, 0) AS hometax_purchases_monthly_cash_amount,\n                  FORMAT_NUMBER(hometax_purchases_monthly_invoice_amount, 0) AS hometax_purchases_monthly_invoice_amount,\n\n                  NVL(FORMAT_NUMBER(FLOOR(card_sales_amount / card_sales_count), 0), '0') AS card_sales_unit_price,\n                  NVL(FORMAT_NUMBER(ROUND(card_sales_new_amount / card_sales_amount * 100), 0), '0') AS card_sales_new_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(card_sales_returning_amount / card_sales_amount * 100), 0), '0') AS card_sales_returning_amount_percent,\n                  IF(card_sales_amount > 0, true, false) AS card_sales_amount_exists,\n\n                  FORMAT_NUMBER(hourly_sales_0_6_amount, 0) AS hourly_sales_0_6_amount,\n                  FORMAT_NUMBER(hourly_sales_6_11_amount, 0) AS hourly_sales_6_11_amount,\n                  FORMAT_NUMBER(hourly_sales_11_14_amount, 0) AS hourly_sales_11_14_amount,\n                  FORMAT_NUMBER(hourly_sales_14_17_amount, 0) AS hourly_sales_14_17_amount,\n                  FORMAT_NUMBER(hourly_sales_17_24_amount, 0) AS hourly_sales_17_24_amount,\n                  FORMAT_NUMBER(hourly_sales_etc_amount, 0) AS hourly_sales_etc_amount,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_0_6_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_0_6_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_6_11_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_6_11_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_11_14_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_11_14_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_14_17_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_14_17_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_17_24_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_17_24_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_etc_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_etc_amount_percent,\n                  IF(hourly_sales_etc_amount > 0, true, false) AS hourly_sales_etc_amount_exists,\n                  IF(hourly_sales_amount_sum > 0, true, false) AS hourly_sales_exists,\n\n                  FORMAT_NUMBER(delivery_app_sales_baemin_amount, 0) AS delivery_app_sales_baemin_amount,\n                  FORMAT_NUMBER(delivery_app_sales_yogiyo_amount, 0) AS delivery_app_sales_yogiyo_amount,\n                  FORMAT_NUMBER(delivery_app_sales_baedaltong_amount, 0) AS delivery_app_sales_baedaltong_amount,\n\n                  filter(today_payments_arr, d -> d.amount > 0) AS today_payments,\n                  aggregate(today_payments_arr, 0L, (acc, d) -> acc + d.amount) AS today_payments_sum_amount,\n\n                  future_payments_arr AS future_payments,\n                  aggregate(future_payments_arr, 0L, (acc, d) -> acc + d.amount) AS future_payments_sum_amount,\n\n                  slice(bank_accounts_arr, 1, 5) AS bank_accounts,\n                  IF(size(bank_accounts_arr) > 5, size(bank_accounts_arr) - 5, 0) AS bank_account_etc_count,\n\n                  slice(today_card_purchases_arr, 1, 5) AS today_card_purchases,\n                  IF(size(today_card_purchases_arr) > 5, size(today_card_purchases_arr) - 5, 0) AS today_card_purchases_etc_count,\n\n                  filter(delivery_app_sales_arr, d -> d.amount > 0) AS delivery_app_sales,\n\n                  (\n                      card_sales_monthly_amount +\n                      delivery_app_sales_monthly_amount +\n                      hometax_sales_monthly_invoice_amount +\n                      hometax_sales_monthly_cash_amount\n                  ) AS monthly_sales_sum,\n                  (\n                      card_purchases_monthly_amount +\n                      hometax_purchases_monthly_cash_amount +\n                      hometax_purchases_monthly_invoice_amount\n                  ) AS monthly_purchases_sum\n        FROM      merged\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    calc_additional_columns.*,\n                  b.*,\n                  IF(c.confirmed, 'daily_reports', 'daily_reports_wo_crefia') AS report_name\n        FROM      calc_additional_columns\n        LEFT OUTER JOIN   businesses_info AS b\n        ON        calc_additional_columns.business_id = b.id\n        LEFT OUTER JOIN   crefia_credential AS c\n        ON        calc_additional_columns.business_id = c.business_id\n) r\nCROSS JOIN outdated_issuers""}, 'role': 'process', 'type': 'sql'}]"
549,process:::with_businesses:::daily_reports,s3://kcd-de-production/service/message/reports/user_type=cashnote/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    calc_additional_columns.*,\n                  b.*,\n                  IF(c.confirmed, 'daily_reports', 'daily_reports_wo_crefia') AS report_name\n        FROM      calc_additional_columns\n        LEFT OUTER JOIN   businesses_info AS b\n        ON        calc_additional_columns.business_id = b.id\n        LEFT OUTER JOIN   crefia_credential AS c\n        ON        calc_additional_columns.business_id = c.business_id\n) r\nCROSS JOIN outdated_issuers""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_reports.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/service/message/reports/user_type=cashnote/date_id=2021-01-29', 'format': 'json', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'report_name'}, 'role': 'sink', 'type': 'custom'}]"
550,s3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/,process:::latest_id:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/date_id=2021-01-28', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'group_id'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'daily_reports.json', 'options': {'format': 'text', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/latest_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/date_id=2021-01-01'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': 'SELECT CAST(max(id) AS STRING) AS value FROM formatted_report_logs'}, 'role': 'process', 'type': 'sql'}]"
551,s3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/,process:::merged:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/date_id=2021-01-28', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'group_id'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'daily_reports.json', 'options': {'format': 'text', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/latest_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/date_id=2021-01-01'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT    *,\n          (hourly_sales_0_6_amount + hourly_sales_6_11_amount + hourly_sales_11_14_amount + hourly_sales_14_17_amount + hourly_sales_17_24_amount + hourly_sales_etc_amount) AS hourly_sales_amount_sum\nFROM (\nSELECT    target_id, business_id, user_id, title, template_code, url_mobile,\n          NVL(card_sales_amount, 0) AS card_sales_amount,\n          NVL(card_sales_count, 0) AS card_sales_count,\n          NVL(card_sales_fee, 0) AS card_sales_fee,\n          NVL(card_sales_vat_fee, 0) AS card_sales_vat_fee,\n          NVL(card_sales_payment, 0) AS card_sales_payment,\n          NVL(card_sales_new_amount, 0) AS card_sales_new_amount,\n          NVL(card_sales_returning_amount, 0) AS card_sales_returning_amount,\n          NVL(card_sales_monthly_amount, 0) AS card_sales_monthly_amount,\n          NVL(hourly_sales_0_6_amount, 0) AS hourly_sales_0_6_amount,\n          NVL(hourly_sales_6_11_amount, 0) AS hourly_sales_6_11_amount,\n          NVL(hourly_sales_11_14_amount, 0) AS hourly_sales_11_14_amount,\n          NVL(hourly_sales_14_17_amount, 0) AS hourly_sales_14_17_amount,\n          NVL(hourly_sales_17_24_amount, 0) AS hourly_sales_17_24_amount,\n          NVL(hourly_sales_etc_amount, 0) AS hourly_sales_etc_amount,\n          NVL(delivery_app_sales_monthly_amount, 0) AS delivery_app_sales_monthly_amount,\n          NVL(card_purchases_monthly_amount, 0) AS card_purchases_monthly_amount,\n          NVL(hometax_sales_monthly_invoice_amount, 0) AS hometax_sales_monthly_invoice_amount,\n          NVL(hometax_sales_monthly_cash_amount, 0) AS hometax_sales_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_cash_amount, 0) AS hometax_purchases_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_invoice_amount, 0) AS hometax_purchases_monthly_invoice_amount,\n          NVL(delivery_app_sales_baemin_amount, 0) AS delivery_app_sales_baemin_amount,\n          NVL(delivery_app_sales_yogiyo_amount, 0) AS delivery_app_sales_yogiyo_amount,\n          NVL(delivery_app_sales_baedaltong_amount, 0) AS delivery_app_sales_baedaltong_amount,\n          array(\n              named_struct('issuer_name', 'KB', 'amount', nvl(today_payments_kb, 0L)),\n              named_struct('issuer_name', '농협NH', 'amount', nvl(today_payments_nh, 0L)),\n              named_struct('issuer_name', '롯데', 'amount', nvl(today_payments_lotte, 0L)),\n              named_struct('issuer_name', '비씨', 'amount', nvl(today_payments_bc, 0L)),\n              named_struct('issuer_name', '삼성', 'amount', nvl(today_payments_samsung, 0L)),\n              named_struct('issuer_name', '신한', 'amount', nvl(today_payments_shinhan, 0L)),\n              named_struct('issuer_name', '하나', 'amount', nvl(today_payments_hana, 0L)),\n              named_struct('issuer_name', '현대', 'amount', nvl(today_payments_hyundai, 0L)),\n              named_struct('issuer_name', '배달의민족', 'amount', nvl(today_payments_baemin, 0L)),\n              named_struct('issuer_name', '요기요', 'amount', nvl(today_payments_yogiyo, 0L)),\n              named_struct('issuer_name', '배달통', 'amount', nvl(today_payments_baedaltong, 0L))\n          ) AS today_payments_arr,\n          array(\n              named_struct('app_name', '배달의민족', 'amount', delivery_app_sales_baemin_amount),\n              named_struct('app_name', '요기요', 'amount', delivery_app_sales_yogiyo_amount),\n              named_struct('app_name', '배달통', 'amount', delivery_app_sales_baedaltong_amount)\n          ) AS delivery_app_sales_arr,\n          future_payments_arr,\n          bank_accounts_arr,\n          today_card_purchases_arr\nFROM (\n        SELECT\n                  o.target_id, o.business_id, o.user_id, o.title, o.template_code, o.url_mobile,\n\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_amount'),           n.card_sales_amount, o.card_sales_amount) AS card_sales_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_count'),            n.card_sales_count, o.card_sales_count) AS card_sales_count,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_fee'),              n.card_sales_fee, o.card_sales_fee) AS card_sales_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_vat_fee'),          n.card_sales_vat_fee, o.card_sales_vat_fee) AS card_sales_vat_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_payment'),          n.card_sales_payment, o.card_sales_payment) AS card_sales_payment,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_new_amount'),       n.card_sales_new_amount, o.card_sales_new_amount) AS card_sales_new_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_returning_amount'), n.card_sales_returning_amount, o.card_sales_returning_amount) AS card_sales_returning_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_monthly_amount'),   n.card_sales_monthly_amount, o.card_sales_monthly_amount) AS card_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_0_6_amount'),     n.hourly_sales_0_6_amount, o.hourly_sales_0_6_amount) AS hourly_sales_0_6_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_6_11_amount'),    n.hourly_sales_6_11_amount, o.hourly_sales_6_11_amount) AS hourly_sales_6_11_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_11_14_amount'),   n.hourly_sales_11_14_amount, o.hourly_sales_11_14_amount) AS hourly_sales_11_14_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_14_17_amount'),   n.hourly_sales_14_17_amount, o.hourly_sales_14_17_amount) AS hourly_sales_14_17_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_17_24_amount'),   n.hourly_sales_17_24_amount, o.hourly_sales_17_24_amount) AS hourly_sales_17_24_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_kb'),           n.today_payments_kb, o.today_payments_kb) AS today_payments_kb,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_nh'),           n.today_payments_nh, o.today_payments_nh) AS today_payments_nh,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_lotte'),        n.today_payments_lotte, o.today_payments_lotte) AS today_payments_lotte,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baemin'),       n.today_payments_baemin, o.today_payments_baemin) AS today_payments_baemin,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_bc'),           n.today_payments_bc, o.today_payments_bc) AS today_payments_bc,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_samsung'),      n.today_payments_samsung, o.today_payments_samsung) AS today_payments_samsung,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_shinhan'),      n.today_payments_shinhan, o.today_payments_shinhan) AS today_payments_shinhan,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hana'),         n.today_payments_hana, o.today_payments_hana) AS today_payments_hana,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hyundai'),      n.today_payments_hyundai, o.today_payments_hyundai) AS today_payments_hyundai,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_yogiyo'),       n.today_payments_yogiyo, o.today_payments_yogiyo) AS today_payments_yogiyo,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baedaltong'),   n.today_payments_baedaltong, o.today_payments_baedaltong) AS today_payments_baedaltong,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baemin_amount'),        n.delivery_app_sales_baemin_amount, o.delivery_app_sales_baemin_amount) AS delivery_app_sales_baemin_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_yogiyo_amount'),        n.delivery_app_sales_yogiyo_amount, o.delivery_app_sales_yogiyo_amount) AS delivery_app_sales_yogiyo_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baedaltong_amount'),    n.delivery_app_sales_baedaltong_amount, o.delivery_app_sales_baedaltong_amount) AS delivery_app_sales_baedaltong_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_monthly_amount'),       n.delivery_app_sales_monthly_amount, o.delivery_app_sales_monthly_amount) AS delivery_app_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_purchases_monthly_amount'),           n.card_purchases_monthly_amount, o.card_purchases_monthly_amount) AS card_purchases_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_invoice_amount'),    n.hometax_sales_monthly_invoice_amount, o.hometax_sales_monthly_invoice_amount) AS hometax_sales_monthly_invoice_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_cash_amount'),       n.hometax_sales_monthly_cash_amount, o.hometax_sales_monthly_cash_amount) AS hometax_sales_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_cash_amount'),   n.hometax_purchases_monthly_cash_amount, o.hometax_purchases_monthly_cash_amount) AS hometax_purchases_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_invoice_amount'),n.hometax_purchases_monthly_invoice_amount, o.hometax_purchases_monthly_invoice_amount) AS hometax_purchases_monthly_invoice_amount,\n                  o.hourly_sales_etc_amount,\n                  o.future_payments_arr,\n                  o.bank_accounts_arr,\n                  o.today_card_purchases_arr\n        FROM      formatted_report_logs AS o\n        LEFT OUTER JOIN   formatted_daily_report AS n\n        ON        o.business_id = n.business_id\n)\n)""}, 'role': 'process', 'type': 'sql'}]"
552,s3://kcd-de-production/raw/db/goose/incremental/card_payments,process:::paynote_businesses:::paynote_businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/card_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'paynote_businesses.json', 'options': {'sql': ""  SELECT  DISTINCT registration_number\n  FROM    card_payments\n  WHERE   approved_at between '2019-01-01' AND '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]"
553,s3://kcd-de-production/raw/db/goose/incremental/card_payments,process:::card_payments:::build_user_categories,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/card_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_user_categories.json', 'options': {'sql': ""SELECT *\nFROM   card_payments_src\nWHERE  date_trunc('month', approved_at) >= add_months(date_trunc('month', current_date()), -2)\nAND    date_trunc('month', approved_at) < date_trunc('month', current_date())""}, 'role': 'process', 'type': 'sql'}]"
554,s3://kcd-de-production/raw/db/goose/incremental/card_payments,process:::paynote_business:::registration_number_businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/card_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_businesses.json', 'options': {'sql': ""SELECT    registration_number,\n          collect_set(struct(card_issuer, merchant_number)) AS merchants,\n          collect_set(card_issuer) AS card_issuers\nFROM (\n        SELECT\n                registration_number, merchant_number,\n                CASE\n                    WHEN card_issuer = 'bc' THEN '비씨'\n                    WHEN card_issuer = 'shinhan' THEN '신한'\n                    WHEN card_issuer = 'hyundai' THEN '현대'\n                    ELSE card_issuer\n                END AS card_issuer\n        FROM (\n            SELECT DISTINCT registration_number, merchant_number, card_issuer\n            FROM  card_payments\n            WHERE card_issuer is not null\n        )\n)\nGROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]"
555,s3://kcd-de-production/raw/db/goose/incremental/card_payments,process:::merchant_info:::merchant_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/card_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_info.json', 'options': {'sql': 'SELECT    *\nFROM (\n        SELECT    DISTINCT registration_number, card_issuer, merchant_number,\n                  merchant, classification_code, merchant_code_name, merchant_address,\n                  row_number() OVER (PARTITION BY registration_number, card_issuer, merchant_number ORDER BY updated_at DESC) AS rank\n        FROM      card_payments\n        WHERE     card_issuer is not null\n        AND       registration_number is not null\n)\nWHERE   rank = 1'}, 'role': 'process', 'type': 'sql'}]"
556,s3://kcd-de-production/raw/db/goose/incremental/card_payments,process:::latest_ids:::get_latest_ids_goose,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/card_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids_goose.json', 'options': {'sql': ""  SELECT  'card_payments' AS table, max(id) AS latest_id\n  FROM    card_payments\n  WHERE   created_at > (SELECT max(created_at_date) FROM card_payments)\n\n  UNION ALL\n\n  SELECT  'access_logs' AS table, max(id) AS latest_id\n  FROM    access_logs\n  WHERE   created_at > (SELECT max(created_at_date) FROM access_logs)\n\n  UNION ALL\n\n  SELECT  'user_events' AS table, max(id) AS latest_id\n  FROM    user_events\n  WHERE   created_at > (SELECT max(created_at_date) FROM user_events)""}, 'role': 'process', 'type': 'sql'}]"
557,s3://kcd-de-production/raw/db/goose/incremental/card_payments,process:::card_payments_classification:::card_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/card_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'card_classification.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, classification_code, merchant_code_name AS classification_name\nFROM (\n        SELECT    registration_number, card_issuer, classification_code, merchant_code_name,\n                  row_number() OVER (PARTITION BY registration_number, card_issuer ORDER BY updated_at DESC) AS rank\n        FROM      card_payments\n        WHERE     card_issuer is not null\n)\nWHERE   rank = 1'}, 'role': 'process', 'type': 'sql'}]"
558,s3://kcd-de-production/raw/db/goose/incremental/card_payments,process:::payments_with_user_demo:::registration_number_card_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/card_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'sql': "" SELECT\n         payment.*,\n         paynote_users.gender,\n         paynote_users.age_band\n FROM (\n     SELECT\n             date_trunc('MONTH', approved_at) AS timestamp,\n             registration_number,\n             user_id,\n             amount\n     FROM    card_payments\n     WHERE   approved_at between '2020-08-01' AND '2021-01-28'\n     AND     card_issuer IS NOT NULL\n ) AS payment\n JOIN paynote_users\n ON payment.user_id = paynote_users.user_id""}, 'role': 'process', 'type': 'sql'}]"
559,s3://kcd-de-production/raw/db/goose/incremental/card_payments,process:::card_payments_stat:::paynote_user_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/card_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'paynote_user_stat.json', 'options': {'sql': ""  SELECT\n          user_id, timestamp,\n          registration_number, card_issuer, merchant_number,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count\n  FROM (\n          SELECT\n                  user_id,\n                  date_trunc('MONTH', approved_at) AS timestamp,\n                  registration_number, card_issuer, merchant_number,\n                  amount\n          FROM    card_payments\n          WHERE   approved_at between '2019-01-01' AND '2021-01-29'\n          AND     card_issuer IS NOT NULL\n )\n GROUP BY user_id, timestamp, registration_number, card_issuer, merchant_number""}, 'role': 'process', 'type': 'sql'}]"
560,process:::paynote_businesses:::paynote_businesses,process:::joined:::paynote_businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_businesses.json', 'options': {'sql': ""  SELECT  DISTINCT registration_number\n  FROM    card_payments\n  WHERE   approved_at between '2019-01-01' AND '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_businesses.json', 'options': {'sql': '  SELECT\n          cashnote_businesses.id AS business_id,\n          true AS is_paynote_business\n  FROM    cashnote_businesses\n  JOIN paynote_businesses\n  ON  cashnote_businesses.registration_number = paynote_businesses.registration_number'}, 'role': 'process', 'type': 'sql'}]"
561,process:::joined:::paynote_businesses,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=paynote,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_businesses.json', 'options': {'sql': '  SELECT\n          cashnote_businesses.id AS business_id,\n          true AS is_paynote_business\n  FROM    cashnote_businesses\n  JOIN paynote_businesses\n  ON  cashnote_businesses.registration_number = paynote_businesses.registration_number'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=paynote'}, 'role': 'sink', 'type': 'file'}]"
562,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=naver,process:::naver:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=naver'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=naver'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT\n      business_id,\n      kcd_naver_mapping.kcd_depth_1_code,\n      kcd_naver_mapping.kcd_depth_2_code,\n      kcd_naver_mapping.kcd_depth_3_code\nFROM  naver_classification\nJOIN  kcd_naver_mapping\nON    naver_classification.depth_1_name = kcd_naver_mapping.naver_depth_1_name\nAND   naver_classification.depth_2_name = kcd_naver_mapping.naver_depth_2_name'}, 'role': 'process', 'type': 'sql'}]"
563,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kakao,process:::kakao:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kakao'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kakao'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': ""SELECT\n      business_id,\n      kcd_kakao_mapping.kcd_depth_1_code,\n      kcd_kakao_mapping.kcd_depth_2_code,\n      kcd_kakao_mapping.kcd_depth_3_code\nFROM  kakao_classification\nJOIN  kcd_kakao_mapping\nON    kakao_classification.depth_1_name = kcd_kakao_mapping.depth_1_name\nAND   kakao_classification.depth_2_name = kcd_kakao_mapping.depth_2_name\nAND   nvl(kakao_classification.depth_3_name, 'empty') = nvl(kcd_kakao_mapping.depth_3_name, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
564,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax,process:::hometax:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax'}, 'role': 'source', 'type': 'file'}, {'filename': 'new_hometax_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': '  SELECT\n          business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\n  FROM    hometax_classification\n  JOIN    hometax_kcd_mapping\n  ON  hometax_classification.classification_code = hometax_kcd_mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]"
565,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=shinhancard,process:::shinhancard:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=shinhancard'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=shinhancard'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT    business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\nFROM  shinhancard_classification\nJOIN  shinhancard_kcd_mapping AS mapping\nON    shinhancard_classification.classification_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]"
566,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=bccard_new,process:::bccard:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=bccard_new'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=bccard_new'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT    business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\nFROM  bccard_classification\nJOIN  bccard_kcd_mapping AS mapping\nON    bccard_classification.depth_3_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]"
567,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hyundaicard,process:::hyundaicard:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hyundaicard'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hyundaicard'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT    business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\nFROM  hyundaicard_classification\nJOIN  hyundaicard_kcd_mapping AS mapping\nON    hyundaicard_classification.classification_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]"
568,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=franchise,process:::franchise:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=franchise'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT\n        business_id,\n        kcd_depth_1_code,\n        kcd_depth_2_code,\n        kcd_depth_3_code\nFROM (\n    SELECT\n            c.business_id,\n            m.kcd_depth_1_code,\n            m.kcd_depth_2_code,\n            m.kcd_depth_3_code,\n            row_number() OVER (PARTITION BY c.business_id ORDER BY m.kcd_depth_3_code) AS rank\n    FROM (\n        SELECT business_id, explode(codes) AS code\n        FROM franchise_classification\n    ) AS c\n    JOIN franchise_kcd_mapping AS m\n    ON c.code.company_code = m.franchise_company_code\n    AND c.code.brand_code = m.franchise_brand_code\n)\nWHERE rank =1'}, 'role': 'process', 'type': 'sql'}]"
569,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/hometax_kcd_mapping.tsv,process:::hometax:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hometax_kcd_mapping.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': '  SELECT\n          business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\n  FROM    hometax_classification\n  JOIN    hometax_kcd_mapping\n  ON  hometax_classification.classification_code = hometax_kcd_mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]"
570,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_naver_kcd_mapping.tsv,process:::naver:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_naver_kcd_mapping.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_naver_kcd_mapping.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT\n      business_id,\n      kcd_naver_mapping.kcd_depth_1_code,\n      kcd_naver_mapping.kcd_depth_2_code,\n      kcd_naver_mapping.kcd_depth_3_code\nFROM  naver_classification\nJOIN  kcd_naver_mapping\nON    naver_classification.depth_1_name = kcd_naver_mapping.naver_depth_1_name\nAND   naver_classification.depth_2_name = kcd_naver_mapping.naver_depth_2_name'}, 'role': 'process', 'type': 'sql'}]"
571,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_naver_kcd_mapping.tsv,process:::naver:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_naver_kcd_mapping.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_naver_kcd_mapping.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT\n      registration_number, card_issuer, merchant_number,\n      kcd_naver_mapping.kcd_depth_1_code,\n      kcd_naver_mapping.kcd_depth_2_code,\n      kcd_naver_mapping.kcd_depth_3_code\nFROM  naver_classification\nJOIN  kcd_naver_mapping\nON    naver_classification.depth_1_name = kcd_naver_mapping.naver_depth_1_name\nAND   naver_classification.depth_2_name = kcd_naver_mapping.naver_depth_2_name'}, 'role': 'process', 'type': 'sql'}]"
572,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_kakao_kcd_mapping_cleansing,process:::kakao:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_kakao_kcd_mapping_cleansing'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_kakao_kcd_mapping_cleansing'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': ""SELECT\n      business_id,\n      kcd_kakao_mapping.kcd_depth_1_code,\n      kcd_kakao_mapping.kcd_depth_2_code,\n      kcd_kakao_mapping.kcd_depth_3_code\nFROM  kakao_classification\nJOIN  kcd_kakao_mapping\nON    kakao_classification.depth_1_name = kcd_kakao_mapping.depth_1_name\nAND   kakao_classification.depth_2_name = kcd_kakao_mapping.depth_2_name\nAND   nvl(kakao_classification.depth_3_name, 'empty') = nvl(kcd_kakao_mapping.depth_3_name, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
573,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_kakao_kcd_mapping_cleansing,process:::kakao:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_kakao_kcd_mapping_cleansing'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/place_kakao_kcd_mapping_cleansing'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': ""SELECT\n      registration_number, card_issuer, merchant_number,\n      kcd_kakao_mapping.kcd_depth_1_code,\n      kcd_kakao_mapping.kcd_depth_2_code,\n      kcd_kakao_mapping.kcd_depth_3_code\nFROM  kakao_classification\nJOIN  kcd_kakao_mapping\nON    kakao_classification.depth_1_name = kcd_kakao_mapping.depth_1_name\nAND   kakao_classification.depth_2_name = kcd_kakao_mapping.depth_2_name\nAND   nvl(kakao_classification.depth_3_name, 'empty') = nvl(kcd_kakao_mapping.depth_3_name, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
574,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/kcd_classification.tsv,process:::business_classification:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/kcd_classification.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': ""SELECT\n          business_id,\n          depth_1_code,\n          depth_1_name,\n          nvl(depth_2_code, 'X99') AS depth_2_code,\n          nvl(depth_2_name, '분류정보없음') AS depth_2_name,\n          nvl(depth_3_code, 'X99X99') AS depth_3_code,\n          nvl(depth_3_name, '분류정보없음') AS depth_3_name\nFROM (\n        SELECT    business_id, kcd_classification.*\n        FROM  merged_classification\n        JOIN  kcd_classification\n        ON    merged_classification.kcd_depth_1_code = kcd_classification.depth_1_code\n        AND   nvl(merged_classification.kcd_depth_2_code, 'empty') = nvl(kcd_classification.depth_2_code, 'empty')\n        AND   nvl(merged_classification.kcd_depth_3_code, 'empty') = nvl(kcd_classification.depth_3_code, 'empty')\n)""}, 'role': 'process', 'type': 'sql'}]"
575,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_to_kcd_20210118.tsv,process:::shinhancard:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_to_kcd_20210118.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_to_kcd_20210118.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT    business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\nFROM  shinhancard_classification\nJOIN  shinhancard_kcd_mapping AS mapping\nON    shinhancard_classification.classification_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]"
576,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_to_kcd_20210118.tsv,process:::shinhancard:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_to_kcd_20210118.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_to_kcd_20210118.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number,\n          mapping.kcd_depth_1_code,\n          mapping.kcd_depth_2_code,\n          mapping.kcd_depth_3_code\nFROM shinhancard_classification\nJOIN kcd_shinhancard_mapping AS mapping\nON shinhancard_classification.classification_code = mapping.classification_code\nWHERE kcd_depth_1_code is not null'}, 'role': 'process', 'type': 'sql'}]"
577,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_to_kcd_20210118.tsv,process:::bccard:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_to_kcd_20210118.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT    business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\nFROM  bccard_classification\nJOIN  bccard_kcd_mapping AS mapping\nON    bccard_classification.depth_3_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]"
578,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_to_kcd_20210118.tsv,process:::hyundaicard:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_to_kcd_20210118.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_to_kcd_20210118.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT    business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\nFROM  hyundaicard_classification\nJOIN  hyundaicard_kcd_mapping AS mapping\nON    hyundaicard_classification.classification_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]"
579,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_to_kcd_20210118.tsv,process:::hyundaicard:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_to_kcd_20210118.tsv'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_classification_kcd.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_to_kcd_20210118.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number,\n          mapping.kcd_depth_1_code,\n          mapping.kcd_depth_2_code,\n          mapping.kcd_depth_3_code\nFROM  hyundaicard_classification\nJOIN  hyundaicard_kcd_mapping AS mapping\nON    hyundaicard_classification.classification_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]"
580,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/franchise_kcd_mapping,process:::franchise:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/franchise_kcd_mapping'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT\n        business_id,\n        kcd_depth_1_code,\n        kcd_depth_2_code,\n        kcd_depth_3_code\nFROM (\n    SELECT\n            c.business_id,\n            m.kcd_depth_1_code,\n            m.kcd_depth_2_code,\n            m.kcd_depth_3_code,\n            row_number() OVER (PARTITION BY c.business_id ORDER BY m.kcd_depth_3_code) AS rank\n    FROM (\n        SELECT business_id, explode(codes) AS code\n        FROM franchise_classification\n    ) AS c\n    JOIN franchise_kcd_mapping AS m\n    ON c.code.company_code = m.franchise_company_code\n    AND c.code.brand_code = m.franchise_brand_code\n)\nWHERE rank =1'}, 'role': 'process', 'type': 'sql'}]"
581,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/custom_business_classification.tsv,process:::new_kcd_classification:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/custom_business_classification.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT\n          nvl(c.business_id, k.business_id) AS business_id,\n          nvl(c.depth_1_code, k.depth_1_code) AS depth_1_code,\n          nvl(c.depth_1_name, k.depth_1_name) AS depth_1_name,\n          nvl(c.depth_2_code, k.depth_2_code) AS depth_2_code,\n          nvl(c.depth_2_name, k.depth_2_name) AS depth_2_name,\n          nvl(c.depth_3_code, k.depth_3_code) AS depth_3_code,\n          nvl(c.depth_3_name, k.depth_3_name) AS depth_3_name\nFROM  business_classification AS k\nFULL OUTER JOIN   custom_business_classification AS c\nON    k.business_id = c.business_id'}, 'role': 'process', 'type': 'sql'}]"
582,process:::hometax:::kcd_classification,process:::merged:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'sql': '  SELECT\n          business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\n  FROM    hometax_classification\n  JOIN    hometax_kcd_mapping\n  ON  hometax_classification.classification_code = hometax_kcd_mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
583,process:::shinhancard:::kcd_classification,process:::merged:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT    business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\nFROM  shinhancard_classification\nJOIN  shinhancard_kcd_mapping AS mapping\nON    shinhancard_classification.classification_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
584,process:::bccard:::kcd_classification,process:::merged:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT    business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\nFROM  bccard_classification\nJOIN  bccard_kcd_mapping AS mapping\nON    bccard_classification.depth_3_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
585,process:::hyundaicard:::kcd_classification,process:::merged:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT    business_id,\n          kcd_depth_1_code,\n          kcd_depth_2_code,\n          kcd_depth_3_code\nFROM  hyundaicard_classification\nJOIN  hyundaicard_kcd_mapping AS mapping\nON    hyundaicard_classification.classification_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
586,process:::naver:::kcd_classification,process:::merged:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT\n      business_id,\n      kcd_naver_mapping.kcd_depth_1_code,\n      kcd_naver_mapping.kcd_depth_2_code,\n      kcd_naver_mapping.kcd_depth_3_code\nFROM  naver_classification\nJOIN  kcd_naver_mapping\nON    naver_classification.depth_1_name = kcd_naver_mapping.naver_depth_1_name\nAND   naver_classification.depth_2_name = kcd_naver_mapping.naver_depth_2_name'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
587,process:::kakao:::kcd_classification,process:::merged:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'sql': ""SELECT\n      business_id,\n      kcd_kakao_mapping.kcd_depth_1_code,\n      kcd_kakao_mapping.kcd_depth_2_code,\n      kcd_kakao_mapping.kcd_depth_3_code\nFROM  kakao_classification\nJOIN  kcd_kakao_mapping\nON    kakao_classification.depth_1_name = kcd_kakao_mapping.depth_1_name\nAND   kakao_classification.depth_2_name = kcd_kakao_mapping.depth_2_name\nAND   nvl(kakao_classification.depth_3_name, 'empty') = nvl(kcd_kakao_mapping.depth_3_name, 'empty')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
588,process:::franchise:::kcd_classification,process:::merged:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT\n        business_id,\n        kcd_depth_1_code,\n        kcd_depth_2_code,\n        kcd_depth_3_code\nFROM (\n    SELECT\n            c.business_id,\n            m.kcd_depth_1_code,\n            m.kcd_depth_2_code,\n            m.kcd_depth_3_code,\n            row_number() OVER (PARTITION BY c.business_id ORDER BY m.kcd_depth_3_code) AS rank\n    FROM (\n        SELECT business_id, explode(codes) AS code\n        FROM franchise_classification\n    ) AS c\n    JOIN franchise_kcd_mapping AS m\n    ON c.code.company_code = m.franchise_company_code\n    AND c.code.brand_code = m.franchise_brand_code\n)\nWHERE rank =1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
589,process:::merged:::kcd_classification,process:::merged_classification:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT    business_id, common.*\nFROM (\n    SELECT    business_id,\n              CASE\n                  WHEN   franchise IS NOT NULL AND franchise.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          franchise.kcd_depth_1_code,\n                                                          franchise.kcd_depth_2_code,\n                                                          franchise.kcd_depth_3_code\n                                                      )\n                  WHEN   bccard IS NOT NULL AND bccard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          bccard.kcd_depth_1_code,\n                                                          bccard.kcd_depth_2_code,\n                                                          bccard.kcd_depth_3_code\n                                                      )\n                  WHEN   kakao IS NOT NULL AND kakao.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          kakao.kcd_depth_1_code,\n                                                          kakao.kcd_depth_2_code,\n                                                          kakao.kcd_depth_3_code\n                                                      )\n                  WHEN   shinhancard IS NOT NULL AND shinhancard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          shinhancard.kcd_depth_1_code,\n                                                          shinhancard.kcd_depth_2_code,\n                                                          shinhancard.kcd_depth_3_code\n                                                      )\n                  WHEN   hometax IS NOT NULL AND hometax.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          hometax.kcd_depth_1_code,\n                                                          hometax.kcd_depth_2_code,\n                                                          hometax.kcd_depth_3_code\n                                                      )\n                  WHEN   hyundaicard IS NOT NULL AND hyundaicard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          hyundaicard.kcd_depth_1_code,\n                                                          hyundaicard.kcd_depth_2_code,\n                                                          hyundaicard.kcd_depth_3_code\n                                                      )\n                  WHEN   naver IS NOT NULL AND naver.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          naver.kcd_depth_1_code,\n                                                          naver.kcd_depth_2_code,\n                                                          naver.kcd_depth_3_code\n                                                      )\n                  WHEN   franchise IS NOT NULL THEN struct(\n                                                          franchise.kcd_depth_1_code,\n                                                          franchise.kcd_depth_2_code,\n                                                          franchise.kcd_depth_3_code\n                                                      )\n                  WHEN   bccard IS NOT NULL THEN struct(\n                                                          bccard.kcd_depth_1_code,\n                                                          bccard.kcd_depth_2_code,\n                                                          bccard.kcd_depth_3_code\n                                                      )\n                  WHEN   kakao IS NOT NULL THEN struct(\n                                                          kakao.kcd_depth_1_code,\n                                                          kakao.kcd_depth_2_code,\n                                                          kakao.kcd_depth_3_code\n                                                      )\n                  WHEN   shinhancard IS NOT NULL THEN struct(\n                                                          shinhancard.kcd_depth_1_code,\n                                                          shinhancard.kcd_depth_2_code,\n                                                          shinhancard.kcd_depth_3_code\n                                                      )\n                  WHEN   hometax IS NOT NULL THEN struct(\n                                                          hometax.kcd_depth_1_code,\n                                                          hometax.kcd_depth_2_code,\n                                                          hometax.kcd_depth_3_code\n                                                      )\n                  WHEN   hyundaicard IS NOT NULL THEN struct(\n                                                          hyundaicard.kcd_depth_1_code,\n                                                          hyundaicard.kcd_depth_2_code,\n                                                          hyundaicard.kcd_depth_3_code\n                                                      )\n                  ELSE\n                                                      struct(\n                                                          naver.kcd_depth_1_code,\n                                                          naver.kcd_depth_2_code,\n                                                          naver.kcd_depth_3_code\n                                                      )\n              END AS common\n    FROM      merged\n)\nWHERE     business_id is not null\nAND       common.kcd_depth_1_code is not null'}, 'role': 'process', 'type': 'sql'}]"
590,process:::merged_classification:::kcd_classification,process:::business_classification:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT    business_id, common.*\nFROM (\n    SELECT    business_id,\n              CASE\n                  WHEN   franchise IS NOT NULL AND franchise.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          franchise.kcd_depth_1_code,\n                                                          franchise.kcd_depth_2_code,\n                                                          franchise.kcd_depth_3_code\n                                                      )\n                  WHEN   bccard IS NOT NULL AND bccard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          bccard.kcd_depth_1_code,\n                                                          bccard.kcd_depth_2_code,\n                                                          bccard.kcd_depth_3_code\n                                                      )\n                  WHEN   kakao IS NOT NULL AND kakao.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          kakao.kcd_depth_1_code,\n                                                          kakao.kcd_depth_2_code,\n                                                          kakao.kcd_depth_3_code\n                                                      )\n                  WHEN   shinhancard IS NOT NULL AND shinhancard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          shinhancard.kcd_depth_1_code,\n                                                          shinhancard.kcd_depth_2_code,\n                                                          shinhancard.kcd_depth_3_code\n                                                      )\n                  WHEN   hometax IS NOT NULL AND hometax.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          hometax.kcd_depth_1_code,\n                                                          hometax.kcd_depth_2_code,\n                                                          hometax.kcd_depth_3_code\n                                                      )\n                  WHEN   hyundaicard IS NOT NULL AND hyundaicard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          hyundaicard.kcd_depth_1_code,\n                                                          hyundaicard.kcd_depth_2_code,\n                                                          hyundaicard.kcd_depth_3_code\n                                                      )\n                  WHEN   naver IS NOT NULL AND naver.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          naver.kcd_depth_1_code,\n                                                          naver.kcd_depth_2_code,\n                                                          naver.kcd_depth_3_code\n                                                      )\n                  WHEN   franchise IS NOT NULL THEN struct(\n                                                          franchise.kcd_depth_1_code,\n                                                          franchise.kcd_depth_2_code,\n                                                          franchise.kcd_depth_3_code\n                                                      )\n                  WHEN   bccard IS NOT NULL THEN struct(\n                                                          bccard.kcd_depth_1_code,\n                                                          bccard.kcd_depth_2_code,\n                                                          bccard.kcd_depth_3_code\n                                                      )\n                  WHEN   kakao IS NOT NULL THEN struct(\n                                                          kakao.kcd_depth_1_code,\n                                                          kakao.kcd_depth_2_code,\n                                                          kakao.kcd_depth_3_code\n                                                      )\n                  WHEN   shinhancard IS NOT NULL THEN struct(\n                                                          shinhancard.kcd_depth_1_code,\n                                                          shinhancard.kcd_depth_2_code,\n                                                          shinhancard.kcd_depth_3_code\n                                                      )\n                  WHEN   hometax IS NOT NULL THEN struct(\n                                                          hometax.kcd_depth_1_code,\n                                                          hometax.kcd_depth_2_code,\n                                                          hometax.kcd_depth_3_code\n                                                      )\n                  WHEN   hyundaicard IS NOT NULL THEN struct(\n                                                          hyundaicard.kcd_depth_1_code,\n                                                          hyundaicard.kcd_depth_2_code,\n                                                          hyundaicard.kcd_depth_3_code\n                                                      )\n                  ELSE\n                                                      struct(\n                                                          naver.kcd_depth_1_code,\n                                                          naver.kcd_depth_2_code,\n                                                          naver.kcd_depth_3_code\n                                                      )\n              END AS common\n    FROM      merged\n)\nWHERE     business_id is not null\nAND       common.kcd_depth_1_code is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': ""SELECT\n          business_id,\n          depth_1_code,\n          depth_1_name,\n          nvl(depth_2_code, 'X99') AS depth_2_code,\n          nvl(depth_2_name, '분류정보없음') AS depth_2_name,\n          nvl(depth_3_code, 'X99X99') AS depth_3_code,\n          nvl(depth_3_name, '분류정보없음') AS depth_3_name\nFROM (\n        SELECT    business_id, kcd_classification.*\n        FROM  merged_classification\n        JOIN  kcd_classification\n        ON    merged_classification.kcd_depth_1_code = kcd_classification.depth_1_code\n        AND   nvl(merged_classification.kcd_depth_2_code, 'empty') = nvl(kcd_classification.depth_2_code, 'empty')\n        AND   nvl(merged_classification.kcd_depth_3_code, 'empty') = nvl(kcd_classification.depth_3_code, 'empty')\n)""}, 'role': 'process', 'type': 'sql'}]"
591,process:::business_classification:::kcd_classification,process:::new_kcd_classification:::kcd_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'sql': ""SELECT\n          business_id,\n          depth_1_code,\n          depth_1_name,\n          nvl(depth_2_code, 'X99') AS depth_2_code,\n          nvl(depth_2_name, '분류정보없음') AS depth_2_name,\n          nvl(depth_3_code, 'X99X99') AS depth_3_code,\n          nvl(depth_3_name, '분류정보없음') AS depth_3_name\nFROM (\n        SELECT    business_id, kcd_classification.*\n        FROM  merged_classification\n        JOIN  kcd_classification\n        ON    merged_classification.kcd_depth_1_code = kcd_classification.depth_1_code\n        AND   nvl(merged_classification.kcd_depth_2_code, 'empty') = nvl(kcd_classification.depth_2_code, 'empty')\n        AND   nvl(merged_classification.kcd_depth_3_code, 'empty') = nvl(kcd_classification.depth_3_code, 'empty')\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT\n          nvl(c.business_id, k.business_id) AS business_id,\n          nvl(c.depth_1_code, k.depth_1_code) AS depth_1_code,\n          nvl(c.depth_1_name, k.depth_1_name) AS depth_1_name,\n          nvl(c.depth_2_code, k.depth_2_code) AS depth_2_code,\n          nvl(c.depth_2_name, k.depth_2_name) AS depth_2_name,\n          nvl(c.depth_3_code, k.depth_3_code) AS depth_3_code,\n          nvl(c.depth_3_name, k.depth_3_name) AS depth_3_name\nFROM  business_classification AS k\nFULL OUTER JOIN   custom_business_classification AS c\nON    k.business_id = c.business_id'}, 'role': 'process', 'type': 'sql'}]"
592,process:::new_kcd_classification:::kcd_classification,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'sql': 'SELECT\n          nvl(c.business_id, k.business_id) AS business_id,\n          nvl(c.depth_1_code, k.depth_1_code) AS depth_1_code,\n          nvl(c.depth_1_name, k.depth_1_name) AS depth_1_name,\n          nvl(c.depth_2_code, k.depth_2_code) AS depth_2_code,\n          nvl(c.depth_2_name, k.depth_2_name) AS depth_2_name,\n          nvl(c.depth_3_code, k.depth_3_code) AS depth_3_code,\n          nvl(c.depth_3_name, k.depth_3_name) AS depth_3_name\nFROM  business_classification AS k\nFULL OUTER JOIN   custom_business_classification AS c\nON    k.business_id = c.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_area_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd'}, 'role': 'source', 'type': 'file'}]"
593,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd,process:::business_classification:::market_area_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_area_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'market_area_classification.json', 'options': {'sql': ""SELECT\n      business_id,\n      mapping.depth_1_code,\n      mapping.depth_1_name,\n      mapping.depth_2_code,\n      mapping.depth_2_name,\n      mapping.depth_3_code,\n      mapping.depth_3_name\nFROM kcd_classification AS kcd\nJOIN mapping\nON kcd.depth_1_code = mapping.kcd_depth_1_code\nAND kcd.depth_2_code = mapping.kcd_depth_2_code\nAND kcd.depth_3_code = nvl(mapping.kcd_depth_3_code, 'X99X99')""}, 'role': 'process', 'type': 'sql'}]"
594,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd,process:::kcd_places:::build_user_tags,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_area_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kcd'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_user_tags.json', 'options': {'sql': ""  SELECT\n          CAST(address.business_id AS INT) AS business_id,\n          address.value AS address,\n          cate.value AS classification\n  FROM (\n      SELECT business_id, b_code AS value\n      FROM location\n      WHERE b_code is not null\n  ) AS address\n  JOIN (\n      SELECT business_id, concat(depth_1_name, '>', depth_2_name) AS value\n      FROM classification\n      WHERE depth_2_name is not null\n  ) AS cate\n  ON address.business_id = cate.business_id""}, 'role': 'process', 'type': 'sql'}]"
595,process:::ad_group_filter:::target_download,process:::targets:::target_download,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'target_download.json', 'options': {'sql': ""  SELECT  *\n  FROM    ad_group\n  WHERE   status = 'DOWNLOADING'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'target_download.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetSearchProcess', 'adGroupName': 'ad_group_filter', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.port': '443', 'es.nodes.wan.only': 'true', 'es.scroll.size': '10000', 'es.read.field.as.array.include': 'credentials.credential_types,memberships.phonenums,memberships.notifications,hometax_card_purchases.vendor_business_names,hometax_card_purchases.vendor_business_categories,hometax_card_purchases.vendor_business_classification_codes,hometax_card_purchases.vendor_registration_numbers,hometax_card_purchases.vendor_taxation_types,hometax_purchases_cash_receipts.vendor_registration_numbers,hometax_purchases_cash_receipts.vendor_business_names,hometax_purchases_cash_receipts.vendor_business_codes,hometax_purchases_invoices.notes,hometax_purchases_invoices.vendor_registration_numbers,hometax_purchases_invoices.vendor_business_names,hometax_purchases_invoices.vendor_business_classifications,hometax_purchases_invoices.vendor_business_categories,hometax_purchases_invoices.item_names,hometax_purchases_invoices.item_notes,hometax_sales_invoices.customer_registration_numbers,hometax_sales_invoices.customer_business_names,hometax_sales_invoices.customer_business_classifications,hometax_sales_invoices.customer_business_categories,hometax_sales_invoices.item_names,hometax_sales_invoices.item_notes,naver_menu.menus,naver_menu.prices,kakao_menu.menus,kakao_menu.prices,market.targets'}, 'role': 'process', 'type': 'custom'}]"
596,process:::ad_group_filter:::target_download,process:::update_ad_group:::target_download,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'target_download.json', 'options': {'sql': ""  SELECT  *\n  FROM    ad_group\n  WHERE   status = 'DOWNLOADING'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'target_download.json', 'options': {'sql': ""  SELECT\n          ad_group_filter.id,\n          ad_group_filter.campaign_id,\n          ad_group_filter.name,\n          ad_group_filter.description,\n          ad_group_filter.type,\n          ad_group_filter.target,\n          ad_group_filter.target_type,\n          IF(stat.ad_group_id IS NULL, 'FAILED', 'READY') AS status,\n          IF(stat.ad_group_id IS NULL, null,\n               CONCAT('s3://kcd-de-production/service/message/targets/date_id=2021-01-29/ts=08_15/ad_group_id=',  stat.ad_group_id)\n          ) AS path,\n          IF(stat.ad_group_id IS NULL, 0, stat.population) AS population,\n          ad_group_filter.frequency_cap,\n          ad_group_filter.enabled,\n          ad_group_filter.created_at,\n          current_timestamp() AS updated_at,\n          ad_group_filter.use_today_data,\n          ad_group_filter.report_name,\n          ad_group_filter.extract_path,\n          ad_group_filter.target_count\n  FROM    ad_group_filter\n  LEFT OUTER JOIN (\n          SELECT  ad_group_id, count(1) AS population\n          FROM    cast_targets\n          GROUP BY ad_group_id\n  ) AS stat\n  ON      ad_group_filter.id = stat.ad_group_id""}, 'role': 'process', 'type': 'sql'}]"
597,process:::targets:::target_download,process:::cast_targets:::target_download,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'target_download.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetSearchProcess', 'adGroupName': 'ad_group_filter', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.port': '443', 'es.nodes.wan.only': 'true', 'es.scroll.size': '10000', 'es.read.field.as.array.include': 'credentials.credential_types,memberships.phonenums,memberships.notifications,hometax_card_purchases.vendor_business_names,hometax_card_purchases.vendor_business_categories,hometax_card_purchases.vendor_business_classification_codes,hometax_card_purchases.vendor_registration_numbers,hometax_card_purchases.vendor_taxation_types,hometax_purchases_cash_receipts.vendor_registration_numbers,hometax_purchases_cash_receipts.vendor_business_names,hometax_purchases_cash_receipts.vendor_business_codes,hometax_purchases_invoices.notes,hometax_purchases_invoices.vendor_registration_numbers,hometax_purchases_invoices.vendor_business_names,hometax_purchases_invoices.vendor_business_classifications,hometax_purchases_invoices.vendor_business_categories,hometax_purchases_invoices.item_names,hometax_purchases_invoices.item_notes,hometax_sales_invoices.customer_registration_numbers,hometax_sales_invoices.customer_business_names,hometax_sales_invoices.customer_business_classifications,hometax_sales_invoices.customer_business_categories,hometax_sales_invoices.item_names,hometax_sales_invoices.item_notes,naver_menu.menus,naver_menu.prices,kakao_menu.menus,kakao_menu.prices,market.targets'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'target_download.json', 'options': {'sql': '  SELECT  ad_group_id, CAST(target_id AS String) AS target_id\n  FROM    targets'}, 'role': 'process', 'type': 'sql'}]"
598,process:::cast_targets:::target_download,process:::update_ad_group:::target_download,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'target_download.json', 'options': {'sql': '  SELECT  ad_group_id, CAST(target_id AS String) AS target_id\n  FROM    targets'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'target_download.json', 'options': {'sql': ""  SELECT\n          ad_group_filter.id,\n          ad_group_filter.campaign_id,\n          ad_group_filter.name,\n          ad_group_filter.description,\n          ad_group_filter.type,\n          ad_group_filter.target,\n          ad_group_filter.target_type,\n          IF(stat.ad_group_id IS NULL, 'FAILED', 'READY') AS status,\n          IF(stat.ad_group_id IS NULL, null,\n               CONCAT('s3://kcd-de-production/service/message/targets/date_id=2021-01-29/ts=08_15/ad_group_id=',  stat.ad_group_id)\n          ) AS path,\n          IF(stat.ad_group_id IS NULL, 0, stat.population) AS population,\n          ad_group_filter.frequency_cap,\n          ad_group_filter.enabled,\n          ad_group_filter.created_at,\n          current_timestamp() AS updated_at,\n          ad_group_filter.use_today_data,\n          ad_group_filter.report_name,\n          ad_group_filter.extract_path,\n          ad_group_filter.target_count\n  FROM    ad_group_filter\n  LEFT OUTER JOIN (\n          SELECT  ad_group_id, count(1) AS population\n          FROM    cast_targets\n          GROUP BY ad_group_id\n  ) AS stat\n  ON      ad_group_filter.id = stat.ad_group_id""}, 'role': 'process', 'type': 'sql'}]"
599,process:::cast_targets:::target_download,s3://kcd-de-production/service/message/targets/ts=08_15,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'target_download.json', 'options': {'sql': '  SELECT  ad_group_id, CAST(target_id AS String) AS target_id\n  FROM    targets'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'target_download.json', 'options': {'format': 'text', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/targets/date_id=2021-01-29/ts=08_15', 'partitions': 'ad_group_id'}, 'role': 'sink', 'type': 'file'}]"
600,process:::update_ad_group:::target_download,update_ad_group_db_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'target_download.json', 'options': {'sql': ""  SELECT\n          ad_group_filter.id,\n          ad_group_filter.campaign_id,\n          ad_group_filter.name,\n          ad_group_filter.description,\n          ad_group_filter.type,\n          ad_group_filter.target,\n          ad_group_filter.target_type,\n          IF(stat.ad_group_id IS NULL, 'FAILED', 'READY') AS status,\n          IF(stat.ad_group_id IS NULL, null,\n               CONCAT('s3://kcd-de-production/service/message/targets/date_id=2021-01-29/ts=08_15/ad_group_id=',  stat.ad_group_id)\n          ) AS path,\n          IF(stat.ad_group_id IS NULL, 0, stat.population) AS population,\n          ad_group_filter.frequency_cap,\n          ad_group_filter.enabled,\n          ad_group_filter.created_at,\n          current_timestamp() AS updated_at,\n          ad_group_filter.use_today_data,\n          ad_group_filter.report_name,\n          ad_group_filter.extract_path,\n          ad_group_filter.target_count\n  FROM    ad_group_filter\n  LEFT OUTER JOIN (\n          SELECT  ad_group_id, count(1) AS population\n          FROM    cast_targets\n          GROUP BY ad_group_id\n  ) AS stat\n  ON      ad_group_filter.id = stat.ad_group_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'id', 'updateColumns': 'extract_path,target_count,updated_at'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'id', 'updateColumns': 'status,path,population,updated_at'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'id', 'updateColumns': 'status,extract_path,target_count,updated_at'}, 'role': 'sink', 'type': 'jdbc'}]"
601,pos_bills_raw_v2,process:::pos_bills_source_v2:::dedup_bills,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_bills_v2.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=posetl_bills_v2/created_at_date=2021-01-28,s3://kcd-de-production/raw/catalog_v2/raw/tb=posetl_bills_v2/created_at_date=2021-01-27,s3://kcd-de-production/raw/catalog_v2/raw/tb=posetl_bills_v2/created_at_date=2021-01-26', 'partition_keys': 'created_at_date,created_at_hour', 'mergeSchema': 'true'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'dedup_bills_v2.json', 'options': {'sql': 'SELECT\n  _event_id,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  business_public_id,\n  card_amount,\n  cash_amount,\n  client_id,\n  label_name,\n  mac_address,\n  order_no,\n  order_status,\n  paid_at,\n  paid_type,\n  pos_no,\n  pos_type,\n  public_ip,\n  service_name,\n  head_office_no,\n  shop_code,\n  timestamp,\n  total_amount,\n  CAST(created_at_date as string) AS created_at_date,\n  paid_at_timestamp AS transacted_at,\n  CAST(to_date(paid_at_timestamp, \'yyyy-MM-dd\') AS string) AS transacted_at_date\nFROM (\n  SELECT\n    *,\n    COALESCE(\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd\'T\'HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"")\n    ) AS paid_at_timestamp,\n    row_number() OVER (PARTITION BY bill_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_bills_raw_v2\n  WHERE\n    created_at_date >= \'2020-07-30\' AND created_at_date <= \'2021-01-29\'\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
602,process:::pos_bills_source_v2:::dedup_bills,s3://kcd-de-production/raw/etl/pos/pos_bills_v2,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_bills_v2.json', 'options': {'sql': 'SELECT\n  _event_id,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  business_public_id,\n  card_amount,\n  cash_amount,\n  client_id,\n  label_name,\n  mac_address,\n  order_no,\n  order_status,\n  paid_at,\n  paid_type,\n  pos_no,\n  pos_type,\n  public_ip,\n  service_name,\n  head_office_no,\n  shop_code,\n  timestamp,\n  total_amount,\n  CAST(created_at_date as string) AS created_at_date,\n  paid_at_timestamp AS transacted_at,\n  CAST(to_date(paid_at_timestamp, \'yyyy-MM-dd\') AS string) AS transacted_at_date\nFROM (\n  SELECT\n    *,\n    COALESCE(\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd\'T\'HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"")\n    ) AS paid_at_timestamp,\n    row_number() OVER (PARTITION BY bill_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_bills_raw_v2\n  WHERE\n    created_at_date >= \'2020-07-30\' AND created_at_date <= \'2021-01-29\'\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_sales_amount_daily_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_bills_v2', 'partition_keys': 'created_at_date'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_bills_v2.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_bills_v2', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
603,s3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat,process:::formatted_send:::send_log_to_es,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'send_log.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'copy_message_send.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_send_stat.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'send_log.json', 'options': {'sql': ""    SELECT\n            'send' AS type,\n            timestamp,\n            meta_campaign_id AS campaign_id,\n            meta_ad_group_id AS ad_group_id,\n            meta_creative_id AS creative_id,\n            meta_user_id AS user_id,\n            meta_business_id AS business_id,\n            meta_user_type AS user_type,\n            meta_type AS ad_group_type,\n            message_message_type AS message_type,\n            message_ad_flag AS ad_flag,\n            status,\n            error_code,\n            CASE\n                WHEN error_code = '400' THEN 'AdGroupNotFound'\n                WHEN error_code = '401' THEN 'UserNotFound'\n                WHEN error_code = '402' THEN 'AdGroupDisabled'\n                WHEN error_code = '403' THEN 'BlockedByFrequencyCap'\n                WHEN error_code = '500' THEN 'InvalidResponse'\n                WHEN error_code = '501' THEN 'UnknownError'\n                WHEN error_code = '200' THEN 'Success'\n                ELSE 'EtcError'\n            END AS status_msg\n    FROM (\n            SELECT  *,\n                    row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n            FROM    send_log\n            WHERE   nvl(meta_test_mode, false) = false\n    )\n    WHERE rank = 1"", 'backup_sql': 'message_template_code\n            AND     nvl(meta_test_mode_skip_user, false) = false\n            AND     nvl(meta_test_mode_skip_frequency_cap, false) = false\n            AND     nvl(meta_test_mode_skip_ad_group, false) = false\n            AND     nvl(meta_test_mode_skip_send, false) = false'}, 'role': 'process', 'type': 'sql'}]"
604,s3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat,process:::select_columns:::message_send,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'send_log.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'copy_message_send.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_send_stat.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'copy_message_send.json', 'options': {'sql': 'SELECT\n        created_at_date,\n        timestamp,\n        meta_campaign_id,\n        meta_ad_group_id,\n        meta_creative_id,\n        meta_user_id,\n        meta_business_id,\n        meta_user_type,\n        meta_type,\n        message_message_type,\n        message_ad_flag,\n        message_template_code,\n        status,\n        error_code\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n        FROM    send_log\n        WHERE   nvl(meta_test_mode, false) = false\n        AND     nvl(meta_test_mode_skip_user, false) = false\n        AND     nvl(meta_test_mode_skip_frequency_cap, false) = false\n        AND     nvl(meta_test_mode_skip_ad_group, false) = false\n        AND     nvl(meta_test_mode_skip_send, false) = false\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
605,s3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat,process:::message_history:::message_send_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'send_log.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'copy_message_send.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_send_stat.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=dmp_message_result_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'message_send_stat.json', 'options': {'sql': ""SELECT\n        timestamp,\n        created_at_date AS date_id,\n        meta_campaign_id AS campaign_id,\n        meta_ad_group_id AS ad_group_id,\n        meta_creative_id AS creative_id,\n        meta_user_id AS user_id,\n        meta_business_id AS business_id,\n        meta_user_type AS user_type,\n        meta_type AS ad_group_type,\n        message_message_type AS message_type,\n        message_ad_flag AS ad_flag,\n        message_template_code AS template_code\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n        FROM    send_log\n        WHERE   status = true\n        AND     meta_user_type = 'cashnote'\n        AND     nvl(meta_test_mode, false) = false\n        AND     nvl(meta_test_mode_skip_user, false) = false\n        AND     nvl(meta_test_mode_skip_frequency_cap, false) = false\n        AND     nvl(meta_test_mode_skip_ad_group, false) = false\n        AND     nvl(meta_test_mode_skip_send, false) = false\n)\nWHERE rank = 1""}, 'role': 'process', 'type': 'sql'}]"
606,process:::formatted_send:::send_log_to_es,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'send_log.json', 'options': {'sql': ""    SELECT\n            'send' AS type,\n            timestamp,\n            meta_campaign_id AS campaign_id,\n            meta_ad_group_id AS ad_group_id,\n            meta_creative_id AS creative_id,\n            meta_user_id AS user_id,\n            meta_business_id AS business_id,\n            meta_user_type AS user_type,\n            meta_type AS ad_group_type,\n            message_message_type AS message_type,\n            message_ad_flag AS ad_flag,\n            status,\n            error_code,\n            CASE\n                WHEN error_code = '400' THEN 'AdGroupNotFound'\n                WHEN error_code = '401' THEN 'UserNotFound'\n                WHEN error_code = '402' THEN 'AdGroupDisabled'\n                WHEN error_code = '403' THEN 'BlockedByFrequencyCap'\n                WHEN error_code = '500' THEN 'InvalidResponse'\n                WHEN error_code = '501' THEN 'UnknownError'\n                WHEN error_code = '200' THEN 'Success'\n                ELSE 'EtcError'\n            END AS status_msg\n    FROM (\n            SELECT  *,\n                    row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n            FROM    send_log\n            WHERE   nvl(meta_test_mode, false) = false\n    )\n    WHERE rank = 1"", 'backup_sql': 'message_template_code\n            AND     nvl(meta_test_mode_skip_user, false) = false\n            AND     nvl(meta_test_mode_skip_frequency_cap, false) = false\n            AND     nvl(meta_test_mode_skip_ad_group, false) = false\n            AND     nvl(meta_test_mode_skip_send, false) = false'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
607,businesses,process:::merge:::business_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
608,classification,process:::merge:::business_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
609,classification,process:::merge:::merchant_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'process', 'type': 'custom'}]"
610,hometax,process:::merge:::business_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
611,hometax,process:::merge:::business_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
612,location,process:::merge:::business_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
613,location,process:::merge:::merchant_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'process', 'type': 'custom'}]"
614,bank,process:::merge:::business_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=bank', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=bank', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
615,bank,process:::merge:::business_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=bank', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=bank', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
616,cardsales,process:::merge:::business_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=cardsales', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=cardsales', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
617,cardsales,process:::merge:::registration_number_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=cardsales', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=cardsales', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'process', 'type': 'custom'}]"
618,process:::merge:::business_meta,s3://kcd-de-production/data_cubes/dimension/name=business_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'crefia_business_meta.json', 'options': {'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=business_meta'}, 'role': 'source', 'type': 'file'}]"
619,s3://kcd-de-production/raw/etl/snowdon/card_sales/approvals,process:::approvals_stat:::card_sales_approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'sales_approvals.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'sales_approvals.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount_sum) AS amount_sum,\n          SUM(tx_count) AS tx_count,\n          SUM(cancel_count) AS cancel_count,\n          SUM(installment_count) AS installment_count,\n          map_from_entries(collect_list(struct(issuer_name, amount_sum))) AS issuer_amount_sum,\n          map_from_entries(collect_list(struct(issuer_name, tx_count))) AS issuer_tx_count\n  FROM (\n          SELECT\n                  timestamp,\n                  business_id,\n                  issuer_name,\n                  SUM(cancel_count) AS cancel_count,\n                  SUM(installment_count) AS installment_count,\n                  SUM(amount) AS amount_sum,\n                  COUNT(1) AS tx_count\n          FROM (\n                  SELECT\n                          business_id,\n                          date_trunc('MONTH', transacted_at) AS timestamp,\n                          amount,\n                          issuer_name,\n                          IF(status = 1, 1, 0) cancel_count,\n                          IF(installment > 0, 1, 0) installment_count\n                  FROM    approvals\n                  WHERE   business_id IS NOT NULL\n                  AND     transacted_at between '2019-01-01' AND '2020-09-05'\n          )\n          GROUP BY business_id, issuer_name, timestamp\n ) GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
620,s3://kcd-de-production/raw/etl/snowdon/card_sales/approvals,process:::current_approvals:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'sales_approvals.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]"
621,s3://kcd-de-production/raw/etl/snowdon/card_sales/approvals,process:::prev_approvals:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'sales_approvals.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-10-29'\nAND     created_at_date < '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    approvals_raw\nWHERE   created_at_date >= '2020-11-05'\nAND     created_at_date < '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]"
622,s3://kcd-de-production/raw/etl/snowdon/card_sales/approvals,process:::tx_with_meta:::weekly_aggr,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'sales_approvals.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'weekly_aggr.json', 'options': {'sql': ""SELECT  /*+BROADCAST(p, t) */\n        tx.*,\n        kcd_classification_1_depth,\n        kcd_classification_2_depth,\n        kcd_classification_3_depth,\n        kcd_classification_4_depth,\n        kcd_classification_5_depth,\n        name,\n        type,\n        uid,\n        latitude,\n        longitude,\n        lot_address,\n        lot_address_1_depth,\n        lot_address_2_depth,\n        lot_address_3_depth\nFROM    approvals tx, places p, (\n  SELECT  business_id\n  FROM    targets_src\n  WHERE   transacted_at_month_count = 13\n) t\nWHERE   tx.business_id = p.business_id\nAND     p.business_id = t.business_id\nAND     tx.status = 0\nAND     transacted_at >= '2021-01-04' AND transacted_at < '2021-01-25'\nAND     created_at_date >= '2021-01-04' AND created_at_date < '2021-01-25'""}, 'role': 'process', 'type': 'sql'}]"
623,s3://kcd-de-production/raw/etl/snowdon/card_sales/approvals,process:::prev_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'sales_approvals.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_approvals_raw\n WHERE    created_at_date >= '2020-11-23'\n AND      created_at_date < '2020-11-30'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_approvals_raw\n WHERE    created_at_date >= '2019-12-15'\n AND      created_at_date < '2019-12-22'""}, 'role': 'process', 'type': 'sql'}]"
624,process:::approvals_stat:::card_sales_approvals,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'sales_approvals.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount_sum) AS amount_sum,\n          SUM(tx_count) AS tx_count,\n          SUM(cancel_count) AS cancel_count,\n          SUM(installment_count) AS installment_count,\n          map_from_entries(collect_list(struct(issuer_name, amount_sum))) AS issuer_amount_sum,\n          map_from_entries(collect_list(struct(issuer_name, tx_count))) AS issuer_tx_count\n  FROM (\n          SELECT\n                  timestamp,\n                  business_id,\n                  issuer_name,\n                  SUM(cancel_count) AS cancel_count,\n                  SUM(installment_count) AS installment_count,\n                  SUM(amount) AS amount_sum,\n                  COUNT(1) AS tx_count\n          FROM (\n                  SELECT\n                          business_id,\n                          date_trunc('MONTH', transacted_at) AS timestamp,\n                          amount,\n                          issuer_name,\n                          IF(status = 1, 1, 0) cancel_count,\n                          IF(installment > 0, 1, 0) installment_count\n                  FROM    approvals\n                  WHERE   business_id IS NOT NULL\n                  AND     transacted_at between '2019-01-01' AND '2020-09-05'\n          )\n          GROUP BY business_id, issuer_name, timestamp\n ) GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'sales_approvals.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_approvals', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
625,s3://kcd-de-staging/work/ryan/2020-12-01/business_meta_with_status,process:::business_meta_with_status:::build_nice_monthly_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2020-12-01/business_meta_with_status', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': ""SELECT  DISTINCT\n        business_id,\n        registration_number,\n        registration_code,\n        status_code\nFROM\n(\n      SELECT  COALESCE(b.business_id, l.business_id) AS business_id,\n              COALESCE(b.registration_number, l.registration_number) AS registration_number,\n              COALESCE(b.registration_code, '7') AS registration_code,\n              CASE\n                WHEN b.crefia_registered AND b.hometax_registered THEN '00'\n                WHEN b.crefia_registered AND NOT b.hometax_registered THEN '01'\n                WHEN NOT b.crefia_registered AND b.hometax_registered THEN '02'\n                ELSE '03'\n              END AS status_code\n      FROM    (\n              SELECT  business_id,\n                      businesses.businesses.registration_number,\n                      IF(businesses.businesses.created_at >= '2020-12-01', '1', '3') AS registration_code,\n                      (\n                        array_contains(businesses.credentials.types, 'Crefia')\n                        OR array_contains(businesses.credentials.types, 'CrefiaBusiness')\n                      ) AS crefia_registered,\n                      (\n                        array_contains(businesses.credentials.types, 'HometaxLogin')\n                        OR array_contains(businesses.credentials.types, 'HometaxCertificate')\n                      ) AS hometax_registered\n              FROM    business_meta\n      ) b FULL OUTER JOIN (\n              SELECT   business_id,\n                       registration_number\n              FROM     last_sent_businesses\n              WHERE    registration_code != '7'\n      ) l ON b.registration_number = l.registration_number\n) t\nWHERE   t.business_id IS NOT NULL\nAND     t.registration_number IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
626,s3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta,process:::businesses_monthly_stats:::build_nice_monthly_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_corona_weekly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_semas_daily_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': ""SELECT  meta.*,\n        stats.location_meta,\n        stats.classification_meta,\n        stats.3_month_avg_card_sales_amount,\n        stats.3_month_sum_card_sales_amount,\n        stats.3_month_sum_returning_count,\n        stats.3_month_sum_card_sales_count,\n        stats.3_month_avg_card_sales_count,\n        stats.6_month_sum_card_sales_amount,\n        stats.6_month_avg_card_sales_amount,\n        stats.6_month_sum_returning_count,\n        stats.6_month_sum_card_sales_count,\n        stats.6_month_avg_card_sales_count,\n        stats.12_month_avg_returning_count,\n        stats.before_6_month_sum_card_sales_amount,\n        stats.before_6_month_avg_card_sales_amount,\n        stats.before_6_month_sum_card_sales_count,\n        stats.before_6_month_avg_card_sales_count,\n        stats.last_year_3_month_avg_card_sales_amount,\n        stats.last_year_6_month_avg_card_sales_count,\n        CONCAT_WS('_', stats.location_meta.sido, stats.location_meta.sigungu, stats.location_meta.dong) AS address,\n        CONCAT_WS('_', stats.classification_meta.depth_1_name, stats.classification_meta.depth_2_name, stats.classification_meta.depth_3_name) AS classification,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -3), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -6), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 12_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -7), 'yyyyMMdd')) AS before_6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -15), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -18), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_6_month\nFROM (\n    SELECT  business_id,\n            MAX(location) as location_meta,\n            MAX(classification) as classification_meta,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) AS 3_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), returning_count, 0)) AS 3_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) AS 3_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) AS 6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), returning_count, 0)) AS 6_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) AS 6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -12), returning_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12), 1, 0)) AS 12_month_avg_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) AS before_6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) AS before_6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_6_month_avg_card_sales_count\n    FROM    transactions_stat_with_meta\n    WHERE   time_unit = 'month'\n    AND     time < '2021-01-01'\n    GROUP BY 1\n)   stats RIGHT OUTER JOIN business_meta_with_status meta\nON  stats.business_id = meta.business_id""}, 'role': 'process', 'type': 'sql'}]"
627,s3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta,process:::weekly_txns:::build_corona_weekly_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_corona_weekly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_semas_daily_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_corona_weekly_stats.json', 'options': {'sql': ""SELECT  *,\n        weekofyear(transacted_at_week) AS week_of_year\nFROM    (\n  SELECT  st.business_id,\n          date_trunc('week', time) AS transacted_at_week,\n          SUM(card_sales_amount) AS amount_sum,\n          SUM(IF (hour(time) < 18 AND hour(time) >= 6, card_sales_amount, 0)) as day_time_amount_sum,\n          SUM(IF (hour(time) >= 18 OR hour(time) < 6, card_sales_amount, 0)) as night_time_amount_sum,\n          SUM(IF (weekday(time) > 4, card_sales_amount, 0)) as weekend_amount_sum,\n          SUM(IF (weekday(time) <= 4, card_sales_amount, 0)) as weekday_amount_sum,\n          SUM(card_sales_amount - returning_amount) as new_amount_sum,\n          SUM(returning_amount) as revisit_amount_sum,\n          SUM(card_sales_count) as tx_count,\n          MAX(st.place.lot_address_1_depth) as lot_address_1_depth,\n          MAX(st.place.lot_address_2_depth) as lot_address_2_depth,\n          MAX(st.place.lot_address_3_depth) as lot_address_3_depth,\n          MAX(st.place.kcd_classification_1_depth) as kcd_classification_1_depth,\n          MAX(st.place.kcd_classification_2_depth) as kcd_classification_2_depth,\n          MAX(st.place.kcd_classification_3_depth) as kcd_classification_3_depth\n  FROM    transactions_stat_with_meta st, targets t\n  WHERE   st.business_id = t.business_id\n  AND     t.transacted_at_month_count = 13\n  AND     st.time_unit = 'day_hour'\n  AND     weekofyear(st.time) < weekofyear(current_date())\n  GROUP BY 1, 2\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'sql': ""SELECT  *,\n        weekofyear(transacted_at_week) AS week_of_year\nFROM    (\n  SELECT  st.business_id,\n          date_trunc('week', time) AS transacted_at_week,\n          SUM(card_sales_amount) AS amount_sum,\n          SUM(IF (hour(time) < 18, card_sales_amount, 0)) as day_time_amount_sum,\n          SUM(IF (hour(time) >= 18, card_sales_amount, 0)) as night_time_amount_sum,\n          SUM(IF (weekday(time) > 4, card_sales_amount, 0)) as weekend_amount_sum,\n          SUM(IF (weekday(time) <= 4, card_sales_amount, 0)) as weekday_amount_sum,\n          SUM(card_sales_amount - returning_amount) as new_amount_sum,\n          SUM(returning_amount) as revisit_amount_sum,\n          SUM(card_sales_count) as tx_count,\n          MAX(st.place.lot_address_1_depth) as lot_address_1_depth,\n          MAX(st.place.lot_address_2_depth) as lot_address_2_depth,\n          MAX(st.place.lot_address_3_depth) as lot_address_3_depth,\n          MAX(st.place.kcd_classification_1_depth) as kcd_classification_1_depth,\n          MAX(st.place.kcd_classification_2_depth) as kcd_classification_2_depth,\n          MAX(st.place.kcd_classification_3_depth) as kcd_classification_3_depth\n  FROM    transactions_stat_with_meta st, targets t\n  WHERE   st.business_id = t.business_id\n  AND     t.transacted_at_month_count = 13\n  AND     st.time_unit = 'day_hour'\n  AND     weekofyear(st.time) < weekofyear(current_date())\n  GROUP BY 1, 2\n)""}, 'role': 'process', 'type': 'sql'}]"
628,s3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta,process:::tx_with_meta:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_corona_weekly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_semas_daily_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(t) */\n        src.*,\n        location.sido AS sido,\n        location.sigungu AS sigungu,\n        location.dong AS dong,\n        CASE\n          WHEN classification.depth_1_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_1_name\n        END AS classification_kcd_depth_1_name,\n        CASE\n          WHEN classification.depth_2_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_2_name\n        END AS classification_kcd_depth_2_name\nFROM    tx_with_meta_src src, (\n  SELECT  *\n  FROM    targets_src\n  WHERE   transacted_at_month_count = 13\n) t\nWHERE   src.business_id = t.business_id\nAND     classification.depth_1_name is not null\nAND    (\n   (\n     time_unit = 'week' AND\n     year(time) in (2019, 2020) AND\n     weekofyear(time) < weekofyear(current_date()) AND\n     weekofyear(time) >= weekofyear(current_date()) - 8\n   ) OR\n   (\n     time_unit = 'day' AND\n     time < current_date() AND\n     time >= DATE_SUB(current_date(), 7)\n   ) OR\n   (\n     time_unit = 'week' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   ) OR\n   (\n     time_unit = 'day' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   )\n )""}, 'role': 'process', 'type': 'sql'}]"
629,s3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta,process:::target_date_standard_period_transactions:::semas_daily_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_corona_weekly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_semas_daily_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT  business_id,\n        MAX(place) AS meta,\n        SUM(IF (weekofyear(time) = weekofyear('2020-12-10') and year(time) = 2019, card_sales_amount, 0)) AS standard_amount,\n        SUM(IF (time = '2020-12-10', card_sales_amount, 0)) AS target_amount\nFROM    transactions_stat_with_meta\nWHERE   time_unit = 'day'\nGROUP BY 1""}, 'role': 'process', 'type': 'sql'}]"
630,s3://kcd-de-staging/work/ryan/raw/stat/snowdon/hometax/hometax_stat,process:::hometax_sales_monthly_stat:::build_nice_monthly_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/raw/stat/snowdon/hometax/hometax_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': ""SELECT  business_id,\n        (\n          SUM(IF (time >= add_months('2021-01-01', -3), hometax_sales_invoices_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -3), hometax_sales_cash_receipts_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -3), hometax_sales_card_transactions_amount, 0))\n        ) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_hometax_sales_amount,\n        (\n          SUM(IF (time >= add_months('2021-01-01', -12), hometax_sales_invoices_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -12), hometax_sales_cash_receipts_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -12), hometax_sales_card_transactions_amount, 0))\n        ) / SUM(IF (time >= add_months('2021-01-01', -12), 1, 0)) AS 12_month_avg_hometax_sales_amount\nFROM    hometax_stat\nWHERE   time_unit = 'month'\nAND     time < '2021-01-01'\nGROUP BY 1""}, 'role': 'process', 'type': 'sql'}]"
631,process:::business_meta_with_status:::build_nice_monthly_stats,process:::businesses_monthly_stats:::build_nice_monthly_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': ""SELECT  DISTINCT\n        business_id,\n        registration_number,\n        registration_code,\n        status_code\nFROM\n(\n      SELECT  COALESCE(b.business_id, l.business_id) AS business_id,\n              COALESCE(b.registration_number, l.registration_number) AS registration_number,\n              COALESCE(b.registration_code, '7') AS registration_code,\n              CASE\n                WHEN b.crefia_registered AND b.hometax_registered THEN '00'\n                WHEN b.crefia_registered AND NOT b.hometax_registered THEN '01'\n                WHEN NOT b.crefia_registered AND b.hometax_registered THEN '02'\n                ELSE '03'\n              END AS status_code\n      FROM    (\n              SELECT  business_id,\n                      businesses.businesses.registration_number,\n                      IF(businesses.businesses.created_at >= '2020-12-01', '1', '3') AS registration_code,\n                      (\n                        array_contains(businesses.credentials.types, 'Crefia')\n                        OR array_contains(businesses.credentials.types, 'CrefiaBusiness')\n                      ) AS crefia_registered,\n                      (\n                        array_contains(businesses.credentials.types, 'HometaxLogin')\n                        OR array_contains(businesses.credentials.types, 'HometaxCertificate')\n                      ) AS hometax_registered\n              FROM    business_meta\n      ) b FULL OUTER JOIN (\n              SELECT   business_id,\n                       registration_number\n              FROM     last_sent_businesses\n              WHERE    registration_code != '7'\n      ) l ON b.registration_number = l.registration_number\n) t\nWHERE   t.business_id IS NOT NULL\nAND     t.registration_number IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': ""SELECT  meta.*,\n        stats.location_meta,\n        stats.classification_meta,\n        stats.3_month_avg_card_sales_amount,\n        stats.3_month_sum_card_sales_amount,\n        stats.3_month_sum_returning_count,\n        stats.3_month_sum_card_sales_count,\n        stats.3_month_avg_card_sales_count,\n        stats.6_month_sum_card_sales_amount,\n        stats.6_month_avg_card_sales_amount,\n        stats.6_month_sum_returning_count,\n        stats.6_month_sum_card_sales_count,\n        stats.6_month_avg_card_sales_count,\n        stats.12_month_avg_returning_count,\n        stats.before_6_month_sum_card_sales_amount,\n        stats.before_6_month_avg_card_sales_amount,\n        stats.before_6_month_sum_card_sales_count,\n        stats.before_6_month_avg_card_sales_count,\n        stats.last_year_3_month_avg_card_sales_amount,\n        stats.last_year_6_month_avg_card_sales_count,\n        CONCAT_WS('_', stats.location_meta.sido, stats.location_meta.sigungu, stats.location_meta.dong) AS address,\n        CONCAT_WS('_', stats.classification_meta.depth_1_name, stats.classification_meta.depth_2_name, stats.classification_meta.depth_3_name) AS classification,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -3), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -6), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 12_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -7), 'yyyyMMdd')) AS before_6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -15), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -18), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_6_month\nFROM (\n    SELECT  business_id,\n            MAX(location) as location_meta,\n            MAX(classification) as classification_meta,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) AS 3_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), returning_count, 0)) AS 3_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) AS 3_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) AS 6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), returning_count, 0)) AS 6_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) AS 6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -12), returning_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12), 1, 0)) AS 12_month_avg_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) AS before_6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) AS before_6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_6_month_avg_card_sales_count\n    FROM    transactions_stat_with_meta\n    WHERE   time_unit = 'month'\n    AND     time < '2021-01-01'\n    GROUP BY 1\n)   stats RIGHT OUTER JOIN business_meta_with_status meta\nON  stats.business_id = meta.business_id""}, 'role': 'process', 'type': 'sql'}]"
632,process:::business_meta_with_status:::build_nice_monthly_stats,s3://kcd-de-staging/work/ryan/2021-01-01/business_meta_with_status,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': ""SELECT  DISTINCT\n        business_id,\n        registration_number,\n        registration_code,\n        status_code\nFROM\n(\n      SELECT  COALESCE(b.business_id, l.business_id) AS business_id,\n              COALESCE(b.registration_number, l.registration_number) AS registration_number,\n              COALESCE(b.registration_code, '7') AS registration_code,\n              CASE\n                WHEN b.crefia_registered AND b.hometax_registered THEN '00'\n                WHEN b.crefia_registered AND NOT b.hometax_registered THEN '01'\n                WHEN NOT b.crefia_registered AND b.hometax_registered THEN '02'\n                ELSE '03'\n              END AS status_code\n      FROM    (\n              SELECT  business_id,\n                      businesses.businesses.registration_number,\n                      IF(businesses.businesses.created_at >= '2020-12-01', '1', '3') AS registration_code,\n                      (\n                        array_contains(businesses.credentials.types, 'Crefia')\n                        OR array_contains(businesses.credentials.types, 'CrefiaBusiness')\n                      ) AS crefia_registered,\n                      (\n                        array_contains(businesses.credentials.types, 'HometaxLogin')\n                        OR array_contains(businesses.credentials.types, 'HometaxCertificate')\n                      ) AS hometax_registered\n              FROM    business_meta\n      ) b FULL OUTER JOIN (\n              SELECT   business_id,\n                       registration_number\n              FROM     last_sent_businesses\n              WHERE    registration_code != '7'\n      ) l ON b.registration_number = l.registration_number\n) t\nWHERE   t.business_id IS NOT NULL\nAND     t.registration_number IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/business_meta_with_status'}, 'role': 'sink', 'type': 'file'}]"
633,process:::businesses_monthly_stats:::build_nice_monthly_stats,process:::address_monthly_stats:::build_nice_monthly_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': ""SELECT  meta.*,\n        stats.location_meta,\n        stats.classification_meta,\n        stats.3_month_avg_card_sales_amount,\n        stats.3_month_sum_card_sales_amount,\n        stats.3_month_sum_returning_count,\n        stats.3_month_sum_card_sales_count,\n        stats.3_month_avg_card_sales_count,\n        stats.6_month_sum_card_sales_amount,\n        stats.6_month_avg_card_sales_amount,\n        stats.6_month_sum_returning_count,\n        stats.6_month_sum_card_sales_count,\n        stats.6_month_avg_card_sales_count,\n        stats.12_month_avg_returning_count,\n        stats.before_6_month_sum_card_sales_amount,\n        stats.before_6_month_avg_card_sales_amount,\n        stats.before_6_month_sum_card_sales_count,\n        stats.before_6_month_avg_card_sales_count,\n        stats.last_year_3_month_avg_card_sales_amount,\n        stats.last_year_6_month_avg_card_sales_count,\n        CONCAT_WS('_', stats.location_meta.sido, stats.location_meta.sigungu, stats.location_meta.dong) AS address,\n        CONCAT_WS('_', stats.classification_meta.depth_1_name, stats.classification_meta.depth_2_name, stats.classification_meta.depth_3_name) AS classification,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -3), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -6), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 12_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -7), 'yyyyMMdd')) AS before_6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -15), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -18), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_6_month\nFROM (\n    SELECT  business_id,\n            MAX(location) as location_meta,\n            MAX(classification) as classification_meta,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) AS 3_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), returning_count, 0)) AS 3_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) AS 3_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) AS 6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), returning_count, 0)) AS 6_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) AS 6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -12), returning_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12), 1, 0)) AS 12_month_avg_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) AS before_6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) AS before_6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_6_month_avg_card_sales_count\n    FROM    transactions_stat_with_meta\n    WHERE   time_unit = 'month'\n    AND     time < '2021-01-01'\n    GROUP BY 1\n)   stats RIGHT OUTER JOIN business_meta_with_status meta\nON  stats.business_id = meta.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': 'SELECT  address,\n        AVG(3_month_sum_card_sales_count) AS address_3_month_avg_card_sales_count\nFROM    businesses_monthly_stats\nWHERE   3_month_sum_card_sales_count > 0\nGROUP BY 1'}, 'role': 'process', 'type': 'sql'}]"
634,process:::businesses_monthly_stats:::build_nice_monthly_stats,process:::classification_monthly_stats:::build_nice_monthly_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': ""SELECT  meta.*,\n        stats.location_meta,\n        stats.classification_meta,\n        stats.3_month_avg_card_sales_amount,\n        stats.3_month_sum_card_sales_amount,\n        stats.3_month_sum_returning_count,\n        stats.3_month_sum_card_sales_count,\n        stats.3_month_avg_card_sales_count,\n        stats.6_month_sum_card_sales_amount,\n        stats.6_month_avg_card_sales_amount,\n        stats.6_month_sum_returning_count,\n        stats.6_month_sum_card_sales_count,\n        stats.6_month_avg_card_sales_count,\n        stats.12_month_avg_returning_count,\n        stats.before_6_month_sum_card_sales_amount,\n        stats.before_6_month_avg_card_sales_amount,\n        stats.before_6_month_sum_card_sales_count,\n        stats.before_6_month_avg_card_sales_count,\n        stats.last_year_3_month_avg_card_sales_amount,\n        stats.last_year_6_month_avg_card_sales_count,\n        CONCAT_WS('_', stats.location_meta.sido, stats.location_meta.sigungu, stats.location_meta.dong) AS address,\n        CONCAT_WS('_', stats.classification_meta.depth_1_name, stats.classification_meta.depth_2_name, stats.classification_meta.depth_3_name) AS classification,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -3), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -6), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 12_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -7), 'yyyyMMdd')) AS before_6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -15), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -18), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_6_month\nFROM (\n    SELECT  business_id,\n            MAX(location) as location_meta,\n            MAX(classification) as classification_meta,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) AS 3_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), returning_count, 0)) AS 3_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) AS 3_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) AS 6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), returning_count, 0)) AS 6_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) AS 6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -12), returning_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12), 1, 0)) AS 12_month_avg_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) AS before_6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) AS before_6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_6_month_avg_card_sales_count\n    FROM    transactions_stat_with_meta\n    WHERE   time_unit = 'month'\n    AND     time < '2021-01-01'\n    GROUP BY 1\n)   stats RIGHT OUTER JOIN business_meta_with_status meta\nON  stats.business_id = meta.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': 'SELECT  classification,\n        AVG(6_month_sum_card_sales_amount) AS classification_6_month_avg_card_sales_amount,\n        AVG(6_month_sum_card_sales_count) AS classification_6_month_avg_card_sales_count\nFROM    businesses_monthly_stats\nWHERE   6_month_sum_card_sales_count > 0\nGROUP BY 1'}, 'role': 'process', 'type': 'sql'}]"
635,process:::businesses_monthly_stats:::build_nice_monthly_stats,s3://kcd-de-staging/work/ryan/2021-01-01/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': ""SELECT  meta.*,\n        stats.location_meta,\n        stats.classification_meta,\n        stats.3_month_avg_card_sales_amount,\n        stats.3_month_sum_card_sales_amount,\n        stats.3_month_sum_returning_count,\n        stats.3_month_sum_card_sales_count,\n        stats.3_month_avg_card_sales_count,\n        stats.6_month_sum_card_sales_amount,\n        stats.6_month_avg_card_sales_amount,\n        stats.6_month_sum_returning_count,\n        stats.6_month_sum_card_sales_count,\n        stats.6_month_avg_card_sales_count,\n        stats.12_month_avg_returning_count,\n        stats.before_6_month_sum_card_sales_amount,\n        stats.before_6_month_avg_card_sales_amount,\n        stats.before_6_month_sum_card_sales_count,\n        stats.before_6_month_avg_card_sales_count,\n        stats.last_year_3_month_avg_card_sales_amount,\n        stats.last_year_6_month_avg_card_sales_count,\n        CONCAT_WS('_', stats.location_meta.sido, stats.location_meta.sigungu, stats.location_meta.dong) AS address,\n        CONCAT_WS('_', stats.classification_meta.depth_1_name, stats.classification_meta.depth_2_name, stats.classification_meta.depth_3_name) AS classification,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -3), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -6), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -1), 'yyyyMMdd')) AS 12_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -12), 'yyyyMMdd'), date_format(add_months('2021-01-01', -7), 'yyyyMMdd')) AS before_6_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -15), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_3_month,\n        CONCAT_WS(' ~ ', date_format(add_months('2021-01-01', -18), 'yyyyMMdd'), date_format(add_months('2021-01-01', -13), 'yyyyMMdd')) AS last_year_6_month\nFROM (\n    SELECT  business_id,\n            MAX(location) as location_meta,\n            MAX(classification) as classification_meta,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_amount, 0)) AS 3_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -3), returning_count, 0)) AS 3_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) AS 3_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -3), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) AS 6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -6), returning_count, 0)) AS 6_month_sum_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) AS 6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -6), 1, 0)) AS 6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -12), returning_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12), 1, 0)) AS 12_month_avg_returning_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) AS before_6_month_sum_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) AS before_6_month_sum_card_sales_count,\n            SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -12) AND time < add_months('2021-01-01', -6), 1, 0)) AS before_6_month_avg_card_sales_count,\n\n            SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), card_sales_amount, 0)) / SUM(IF (time >= add_months('2021-01-01', -15) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_3_month_avg_card_sales_amount,\n            SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), card_sales_count, 0)) / SUM(IF (time >= add_months('2021-01-01', -18) AND time < add_months('2021-01-01', -12), 1, 0)) AS last_year_6_month_avg_card_sales_count\n    FROM    transactions_stat_with_meta\n    WHERE   time_unit = 'month'\n    AND     time < '2021-01-01'\n    GROUP BY 1\n)   stats RIGHT OUTER JOIN business_meta_with_status meta\nON  stats.business_id = meta.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_with_nice_monthly_variables'}, 'role': 'sink', 'type': 'file'}]"
636,process:::address_monthly_stats:::build_nice_monthly_stats,s3://kcd-de-staging/work/ryan/2021-01-01/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': 'SELECT  address,\n        AVG(3_month_sum_card_sales_count) AS address_3_month_avg_card_sales_count\nFROM    businesses_monthly_stats\nWHERE   3_month_sum_card_sales_count > 0\nGROUP BY 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_with_nice_monthly_variables'}, 'role': 'sink', 'type': 'file'}]"
637,process:::classification_monthly_stats:::build_nice_monthly_stats,s3://kcd-de-staging/work/ryan/2021-01-01/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': 'SELECT  classification,\n        AVG(6_month_sum_card_sales_amount) AS classification_6_month_avg_card_sales_amount,\n        AVG(6_month_sum_card_sales_count) AS classification_6_month_avg_card_sales_count\nFROM    businesses_monthly_stats\nWHERE   6_month_sum_card_sales_count > 0\nGROUP BY 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_with_nice_monthly_variables'}, 'role': 'sink', 'type': 'file'}]"
638,process:::hometax_sales_monthly_stat:::build_nice_monthly_stats,s3://kcd-de-staging/work/ryan/2021-01-01/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'sql': ""SELECT  business_id,\n        (\n          SUM(IF (time >= add_months('2021-01-01', -3), hometax_sales_invoices_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -3), hometax_sales_cash_receipts_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -3), hometax_sales_card_transactions_amount, 0))\n        ) / SUM(IF (time >= add_months('2021-01-01', -3), 1, 0)) AS 3_month_avg_hometax_sales_amount,\n        (\n          SUM(IF (time >= add_months('2021-01-01', -12), hometax_sales_invoices_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -12), hometax_sales_cash_receipts_amount, 0))\n          + SUM(IF (time >= add_months('2021-01-01', -12), hometax_sales_card_transactions_amount, 0))\n        ) / SUM(IF (time >= add_months('2021-01-01', -12), 1, 0)) AS 12_month_avg_hometax_sales_amount\nFROM    hometax_stat\nWHERE   time_unit = 'month'\nAND     time < '2021-01-01'\nGROUP BY 1""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_with_nice_monthly_variables'}, 'role': 'sink', 'type': 'file'}]"
639,s3://kcd-de-staging/work/ryan/2021-01-01/,process:::businesses_with_nice_monthly_variables:::build_nice_monthly_variables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_with_nice_monthly_variables'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'build_nice_monthly_variables.json', 'options': {'sql': ""SELECT  stats.business_id,\n        stats.registration_number,\n        stats.registration_code,\n        stats.status_code,\n        date_format(date_sub('2021-01-01', 1), 'yyyyMMdd') as standard_date,\n        CAST(3_month_avg_card_sales_amount AS bigint) AS TR0102_M03,\n        3_month_sum_returning_count AS TR0251_M03,\n        CAST((1 - 3_month_sum_returning_count / 3_month_sum_card_sales_count) * 100 AS int) AS TR0260_M03,\n        CAST((3_month_sum_returning_count / 3_month_sum_card_sales_count) * 100 AS int) AS TR0261_M03,\n        6_month_sum_returning_count AS TR0251_M06,\n        CAST((1 - 6_month_sum_returning_count / 6_month_sum_card_sales_count) * 100 AS int) AS TR0260_M06,\n        CAST(12_month_avg_returning_count AS int) AS TR0256_M12,\n        CAST((3_month_sum_card_sales_amount / 6_month_sum_card_sales_amount) * 100 AS int) AS TR4101_M03,\n        CAST((3_month_avg_card_sales_amount / 6_month_avg_card_sales_amount) * 100 AS int) AS TR4102_M03,\n        CAST((3_month_sum_card_sales_count / 6_month_sum_card_sales_count) * 100 AS int) AS TR4201_M03,\n        CAST((3_month_avg_card_sales_count / 6_month_avg_card_sales_count) * 100 AS int) AS TR4202_M03,\n        CAST((6_month_sum_card_sales_amount / before_6_month_sum_card_sales_amount) * 100 AS int) AS TR6101_M06,\n        CAST((6_month_avg_card_sales_amount / before_6_month_avg_card_sales_amount) * 100 AS int) AS TR6102_M06,\n        CAST((6_month_sum_card_sales_count / before_6_month_sum_card_sales_count) * 100 AS int) AS TR6201_M06,\n        CAST((6_month_avg_card_sales_count / before_6_month_avg_card_sales_count) * 100 AS int) AS TR6202_M06,\n        CAST((3_month_avg_card_sales_amount / last_year_3_month_avg_card_sales_amount) * 100 AS int) AS TR7102_M03,\n        CAST((6_month_avg_card_sales_count / last_year_6_month_avg_card_sales_count) * 100 AS int) AS TR7202_M06,\n        CAST((3_month_sum_card_sales_count / address_3_month_avg_card_sales_count) * 100 AS int) AS LT8201_M03,\n        CAST((6_month_sum_card_sales_amount / classification_6_month_avg_card_sales_amount) * 100 AS int) AS CL8101_M06,\n        CAST((6_month_sum_card_sales_count / classification_6_month_avg_card_sales_count) * 100 AS int) AS CL8201_M06,\n        CAST((3_month_avg_hometax_sales_amount / 12_month_avg_hometax_sales_amount) * 100 AS int) AS SL5102_M03\nFROM businesses_monthly_stats stats\nLEFT OUTER JOIN address_monthly_stats ON stats.address = address_monthly_stats.address\nLEFT OUTER JOIN classification_monthly_stats classification ON stats.classification = classification.classification\nLEFT OUTER JOIN hometax_sales_monthly_stat hometax_stats ON stats.business_id = hometax_stats.business_id""}, 'role': 'process', 'type': 'sql'}]"
640,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=card,process:::merged:::merchant_location_common,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=card'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=card'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'merchant_location_common.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'registration_number,card_issuer,merchant_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
641,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=naver,process:::merged:::merchant_location_common,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=naver'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=naver'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'merchant_location_common.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'registration_number,card_issuer,merchant_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
642,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=kakao,process:::merged:::merchant_location_common,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=kakao'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=kakao'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'merchant_location_common.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'registration_number,card_issuer,merchant_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
643,process:::merged:::merchant_location_common,process:::common_location:::merchant_location_common,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_location_common.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'registration_number,card_issuer,merchant_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'merchant_location_common.json', 'options': {'sql': 'SELECT\n          registration_number, card_issuer, merchant_number,\n          common.*\nFROM (\n        SELECT\n                  registration_number, card_issuer, merchant_number,\n                  CASE\n                      WHEN naver IS NOT NULL THEN struct(\n                                                                naver.geo_point,\n                                                                naver.full_address,\n                                                                naver.b_code,\n                                                                naver.sido,\n                                                                naver.sido_code,\n                                                                naver.sigungu,\n                                                                naver.sigungu_code,\n                                                                naver.dong,\n                                                                naver.h_codes\n                                                              )\n                      WHEN kakao IS NOT NULL THEN struct(\n                                                                kakao.geo_point,\n                                                                kakao.full_address,\n                                                                kakao.b_code,\n                                                                kakao.sido,\n                                                                kakao.sido_code,\n                                                                kakao.sigungu,\n                                                                kakao.sigungu_code,\n                                                                kakao.dong,\n                                                                kakao.h_codes\n                                                              )\n                      ELSE struct(\n                                   card.geo_point,\n                                   card.full_address,\n                                   card.b_code,\n                                   card.sido,\n                                   card.sido_code,\n                                   card.sigungu,\n                                   card.sigungu_code,\n                                   card.dong,\n                                   card.h_codes\n                                 )\n                  END AS common\n        FROM      merged\n)'}, 'role': 'process', 'type': 'sql'}]"
644,process:::common_location:::merchant_location_common,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=common,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_location_common.json', 'options': {'sql': 'SELECT\n          registration_number, card_issuer, merchant_number,\n          common.*\nFROM (\n        SELECT\n                  registration_number, card_issuer, merchant_number,\n                  CASE\n                      WHEN naver IS NOT NULL THEN struct(\n                                                                naver.geo_point,\n                                                                naver.full_address,\n                                                                naver.b_code,\n                                                                naver.sido,\n                                                                naver.sido_code,\n                                                                naver.sigungu,\n                                                                naver.sigungu_code,\n                                                                naver.dong,\n                                                                naver.h_codes\n                                                              )\n                      WHEN kakao IS NOT NULL THEN struct(\n                                                                kakao.geo_point,\n                                                                kakao.full_address,\n                                                                kakao.b_code,\n                                                                kakao.sido,\n                                                                kakao.sido_code,\n                                                                kakao.sigungu,\n                                                                kakao.sigungu_code,\n                                                                kakao.dong,\n                                                                kakao.h_codes\n                                                              )\n                      ELSE struct(\n                                   card.geo_point,\n                                   card.full_address,\n                                   card.b_code,\n                                   card.sido,\n                                   card.sido_code,\n                                   card.sigungu,\n                                   card.sigungu_code,\n                                   card.dong,\n                                   card.h_codes\n                                 )\n                  END AS common\n        FROM      merged\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_location_common.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=common', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=common'}, 'role': 'source', 'type': 'file'}]"
645,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=common,process:::merchant_location:::registration_number_common_location,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_location_common.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=common', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=common'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_common_location.json', 'options': {'sql': 'SELECT\n      registration_number,\n      candidates\nFROM (\n      SELECT\n              registration_number,\n              collect_set(struct(\n                geo_point,\n                full_address,\n                b_code,\n                sido,\n                sido_code,\n                sigungu,\n                sigungu_code,\n                dong,\n                h_codes\n              )) AS candidates\n      FROM  merchant_common_location\n      GROUP BY registration_number\n)'}, 'role': 'process', 'type': 'sql'}]"
646,s3://kcd-de-production/service/market_area/market_info,process:::market_info_with_ts:::market_info_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/market_info'}, 'role': 'source', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/market_info'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'market_info_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-01', 'yyyy-MM-dd') AS timestamp,\n            CONCAT(business_id, '_', duration) AS doc_id,\n            *\n  FROM      market_info""}, 'role': 'process', 'type': 'sql'}]"
647,process:::market_info_with_ts:::market_info_sink,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-01', 'yyyy-MM-dd') AS timestamp,\n            CONCAT(business_id, '_', duration) AS doc_id,\n            *\n  FROM      market_info""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
648,s3://kcd-de-production/raw/etl/snowdon/card_sales/purchases,process:::current_purchases:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_purchases.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]"
649,s3://kcd-de-production/raw/etl/snowdon/card_sales/purchases,process:::prev_purchases:::build_matched_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_purchases.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-10-29'\nAND     created_at_date < '2020-11-29'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'staging_build_matched_tables.json', 'options': {'sql': ""SELECT  *\nFROM    purchases_raw\nWHERE   created_at_date >= '2020-11-05'\nAND     created_at_date < '2020-12-06'""}, 'role': 'process', 'type': 'sql'}]"
650,s3://kcd-de-production/raw/etl/snowdon/card_sales/purchases,process:::prev_purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_purchases.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_purchases_raw\n WHERE    created_at_date >= '2020-11-23'\n AND      created_at_date < '2020-11-30'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_purchases_raw\n WHERE    created_at_date >= '2019-12-15'\n AND      created_at_date < '2019-12-22'""}, 'role': 'process', 'type': 'sql'}]"
651,s3://kcd-de-production/raw/etl/snowdon/card_sales/purchases,process:::purchases_stat:::build_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_purchases.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT    business_id,\n          credential_key,\n          paid_at AS time,\n          issuer_name,\n          'day' AS time_unit,\n          SUM(payment) AS expected\nFROM      purchases\nGROUP BY 1, 2, 3, 4""}, 'role': 'process', 'type': 'sql'}]"
652,s3://kcd-de-production/raw/etl/snowdon/card_sales/purchases,process:::purchases_stat:::card_sales_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_matched_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'staging_build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_raw_tables.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_purchases.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'sales_purchases.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount_sum) AS amount_sum,\n          SUM(tx_count) AS tx_count,\n          map_from_entries(collect_list(struct(issuer_name, amount_sum))) AS issuer_amount_sum,\n          map_from_entries(collect_list(struct(issuer_name, tx_count))) AS issuer_tx_count\n  FROM (\n          SELECT\n                  timestamp,\n                  business_id,\n                  issuer_name,\n                  SUM(amount) AS amount_sum,\n                  COUNT(1) AS tx_count\n          FROM (\n                  SELECT\n                          business_id,\n                          date_trunc('MONTH', transacted_at) AS timestamp,\n                          amount,\n                          issuer_name\n                  FROM    purchases\n                  WHERE   business_id IS NOT NULL\n                  AND     transacted_at between '2019-01-01' AND '2020-09-05'\n          )\n          GROUP BY business_id, issuer_name, timestamp\n ) GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
653,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/kcd_classification_20201125.tsv,process:::business_classification:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_kcd.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/kcd_classification_20201125.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': ""SELECT    registration_number, card_issuer, merchant_number, kcd_classification.*\nFROM  merged_classification\nJOIN  kcd_classification\nON    merged_classification.kcd_depth_1_code = kcd_classification.depth_1_code\nAND   merged_classification.kcd_depth_2_code = kcd_classification.depth_2_code\nAND   nvl(merged_classification.kcd_depth_3_code, 'empty') = nvl(kcd_classification.depth_3_code, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
654,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_to_kcd_20210127.tsv,process:::bccard:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_kcd.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_to_kcd_20210127.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number,\n          mapping.kcd_depth_1_code,\n          mapping.kcd_depth_2_code,\n          mapping.kcd_depth_3_code\nFROM  bccard_classification\nJOIN  kcd_bccard_mapping AS mapping\nON bccard_classification.depth_3_code = mapping.classification_code\nWHERE kcd_depth_1_code is not null'}, 'role': 'process', 'type': 'sql'}]"
655,process:::naver:::merchant_classification_kcd,process:::merged:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT\n      registration_number, card_issuer, merchant_number,\n      kcd_naver_mapping.kcd_depth_1_code,\n      kcd_naver_mapping.kcd_depth_2_code,\n      kcd_naver_mapping.kcd_depth_3_code\nFROM  naver_classification\nJOIN  kcd_naver_mapping\nON    naver_classification.depth_1_name = kcd_naver_mapping.naver_depth_1_name\nAND   naver_classification.depth_2_name = kcd_naver_mapping.naver_depth_2_name'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'registration_number,card_issuer,merchant_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
656,process:::kakao:::merchant_classification_kcd,process:::merged:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': ""SELECT\n      registration_number, card_issuer, merchant_number,\n      kcd_kakao_mapping.kcd_depth_1_code,\n      kcd_kakao_mapping.kcd_depth_2_code,\n      kcd_kakao_mapping.kcd_depth_3_code\nFROM  kakao_classification\nJOIN  kcd_kakao_mapping\nON    kakao_classification.depth_1_name = kcd_kakao_mapping.depth_1_name\nAND   kakao_classification.depth_2_name = kcd_kakao_mapping.depth_2_name\nAND   nvl(kakao_classification.depth_3_name, 'empty') = nvl(kcd_kakao_mapping.depth_3_name, 'empty')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'registration_number,card_issuer,merchant_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
657,process:::shinhancard:::merchant_classification_kcd,process:::merged:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number,\n          mapping.kcd_depth_1_code,\n          mapping.kcd_depth_2_code,\n          mapping.kcd_depth_3_code\nFROM shinhancard_classification\nJOIN kcd_shinhancard_mapping AS mapping\nON shinhancard_classification.classification_code = mapping.classification_code\nWHERE kcd_depth_1_code is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'registration_number,card_issuer,merchant_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
658,process:::bccard:::merchant_classification_kcd,process:::merged:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number,\n          mapping.kcd_depth_1_code,\n          mapping.kcd_depth_2_code,\n          mapping.kcd_depth_3_code\nFROM  bccard_classification\nJOIN  kcd_bccard_mapping AS mapping\nON bccard_classification.depth_3_code = mapping.classification_code\nWHERE kcd_depth_1_code is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'registration_number,card_issuer,merchant_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
659,process:::hyundaicard:::merchant_classification_kcd,process:::merged:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number,\n          mapping.kcd_depth_1_code,\n          mapping.kcd_depth_2_code,\n          mapping.kcd_depth_3_code\nFROM  hyundaicard_classification\nJOIN  hyundaicard_kcd_mapping AS mapping\nON    hyundaicard_classification.classification_code = mapping.classification_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'registration_number,card_issuer,merchant_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
660,process:::merged:::merchant_classification_kcd,process:::merged_classification:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_kcd.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'registration_number,card_issuer,merchant_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number, common.*\nFROM (\n    SELECT    registration_number, card_issuer, merchant_number,\n              CASE\n                  WHEN   bccard IS NOT NULL AND bccard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          bccard.kcd_depth_1_code,\n                                                          bccard.kcd_depth_2_code,\n                                                          bccard.kcd_depth_3_code\n                                                      )\n                  WHEN   kakao IS NOT NULL AND kakao.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          kakao.kcd_depth_1_code,\n                                                          kakao.kcd_depth_2_code,\n                                                          kakao.kcd_depth_3_code\n                                                      )\n                  WHEN   shinhancard IS NOT NULL AND shinhancard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          shinhancard.kcd_depth_1_code,\n                                                          shinhancard.kcd_depth_2_code,\n                                                          shinhancard.kcd_depth_3_code\n                                                      )\n                  WHEN   hyundaicard IS NOT NULL AND hyundaicard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          hyundaicard.kcd_depth_1_code,\n                                                          hyundaicard.kcd_depth_2_code,\n                                                          hyundaicard.kcd_depth_3_code\n                                                      )\n                  WHEN   naver IS NOT NULL AND naver.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          naver.kcd_depth_1_code,\n                                                          naver.kcd_depth_2_code,\n                                                          naver.kcd_depth_3_code\n                                                      )\n                  WHEN   bccard IS NOT NULL THEN struct(\n                                                          bccard.kcd_depth_1_code,\n                                                          bccard.kcd_depth_2_code,\n                                                          bccard.kcd_depth_3_code\n                                                      )\n                  WHEN   kakao IS NOT NULL THEN struct(\n                                                          kakao.kcd_depth_1_code,\n                                                          kakao.kcd_depth_2_code,\n                                                          kakao.kcd_depth_3_code\n                                                      )\n                  WHEN   shinhancard IS NOT NULL THEN struct(\n                                                          shinhancard.kcd_depth_1_code,\n                                                          shinhancard.kcd_depth_2_code,\n                                                          shinhancard.kcd_depth_3_code\n                                                      )\n                  WHEN   hyundaicard IS NOT NULL THEN struct(\n                                                          hyundaicard.kcd_depth_1_code,\n                                                          hyundaicard.kcd_depth_2_code,\n                                                          hyundaicard.kcd_depth_3_code\n                                                      )\n                  ELSE\n                                                      struct(\n                                                          naver.kcd_depth_1_code,\n                                                          naver.kcd_depth_2_code,\n                                                          naver.kcd_depth_3_code\n                                                      )\n              END AS common\n    FROM      merged\n)'}, 'role': 'process', 'type': 'sql'}]"
661,process:::merged_classification:::merchant_classification_kcd,process:::business_classification:::merchant_classification_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number, common.*\nFROM (\n    SELECT    registration_number, card_issuer, merchant_number,\n              CASE\n                  WHEN   bccard IS NOT NULL AND bccard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          bccard.kcd_depth_1_code,\n                                                          bccard.kcd_depth_2_code,\n                                                          bccard.kcd_depth_3_code\n                                                      )\n                  WHEN   kakao IS NOT NULL AND kakao.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          kakao.kcd_depth_1_code,\n                                                          kakao.kcd_depth_2_code,\n                                                          kakao.kcd_depth_3_code\n                                                      )\n                  WHEN   shinhancard IS NOT NULL AND shinhancard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          shinhancard.kcd_depth_1_code,\n                                                          shinhancard.kcd_depth_2_code,\n                                                          shinhancard.kcd_depth_3_code\n                                                      )\n                  WHEN   hyundaicard IS NOT NULL AND hyundaicard.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          hyundaicard.kcd_depth_1_code,\n                                                          hyundaicard.kcd_depth_2_code,\n                                                          hyundaicard.kcd_depth_3_code\n                                                      )\n                  WHEN   naver IS NOT NULL AND naver.kcd_depth_3_code IS NOT NULL THEN struct(\n                                                          naver.kcd_depth_1_code,\n                                                          naver.kcd_depth_2_code,\n                                                          naver.kcd_depth_3_code\n                                                      )\n                  WHEN   bccard IS NOT NULL THEN struct(\n                                                          bccard.kcd_depth_1_code,\n                                                          bccard.kcd_depth_2_code,\n                                                          bccard.kcd_depth_3_code\n                                                      )\n                  WHEN   kakao IS NOT NULL THEN struct(\n                                                          kakao.kcd_depth_1_code,\n                                                          kakao.kcd_depth_2_code,\n                                                          kakao.kcd_depth_3_code\n                                                      )\n                  WHEN   shinhancard IS NOT NULL THEN struct(\n                                                          shinhancard.kcd_depth_1_code,\n                                                          shinhancard.kcd_depth_2_code,\n                                                          shinhancard.kcd_depth_3_code\n                                                      )\n                  WHEN   hyundaicard IS NOT NULL THEN struct(\n                                                          hyundaicard.kcd_depth_1_code,\n                                                          hyundaicard.kcd_depth_2_code,\n                                                          hyundaicard.kcd_depth_3_code\n                                                      )\n                  ELSE\n                                                      struct(\n                                                          naver.kcd_depth_1_code,\n                                                          naver.kcd_depth_2_code,\n                                                          naver.kcd_depth_3_code\n                                                      )\n              END AS common\n    FROM      merged\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': ""SELECT    registration_number, card_issuer, merchant_number, kcd_classification.*\nFROM  merged_classification\nJOIN  kcd_classification\nON    merged_classification.kcd_depth_1_code = kcd_classification.depth_1_code\nAND   merged_classification.kcd_depth_2_code = kcd_classification.depth_2_code\nAND   nvl(merged_classification.kcd_depth_3_code, 'empty') = nvl(kcd_classification.depth_3_code, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
662,process:::business_classification:::merchant_classification_kcd,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_classification_kcd.json', 'options': {'sql': ""SELECT    registration_number, card_issuer, merchant_number, kcd_classification.*\nFROM  merged_classification\nJOIN  kcd_classification\nON    merged_classification.kcd_depth_1_code = kcd_classification.depth_1_code\nAND   merged_classification.kcd_depth_2_code = kcd_classification.depth_2_code\nAND   nvl(merged_classification.kcd_depth_3_code, 'empty') = nvl(kcd_classification.depth_3_code, 'empty')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_kcd.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=kcd'}, 'role': 'sink', 'type': 'file'}]"
663,s3://kcd-de-production/raw/etl/pos/pos_payments_v2,process:::pos_payments_distinct_src_v2:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_payments_v2'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_payments_v2', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  card_number,\n  client_id,\n  idx,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM\n  pos_payments_distinct_src_v2_raw\nWHERE\n  created_at_date >= date_sub(to_date('2020-01-30'), 365) AND created_at_date < '2021-01-30'\nAND card_number != ''\nAND card_number != '******'\nAND card_number != '00******'\nAND card_number != '000000******0000'""}, 'role': 'process', 'type': 'sql'}]"
664,process:::pos_payments_distinct_src_v2:::pos_add_visit_order,process:::prev_pos_payments_approved_v2:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  card_number,\n  client_id,\n  idx,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM\n  pos_payments_distinct_src_v2_raw\nWHERE\n  created_at_date >= date_sub(to_date('2020-01-30'), 365) AND created_at_date < '2021-01-30'\nAND card_number != ''\nAND card_number != '******'\nAND card_number != '00******'\nAND card_number != '000000******0000'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src_v2\nWHERE\n  created_at_date >= date_sub(to_date('2020-01-30'), 365) AND created_at_date < '2020-01-30'\nAND amount >= 0""}, 'role': 'process', 'type': 'sql'}]"
665,process:::pos_payments_distinct_src_v2:::pos_add_visit_order,process:::current_pos_payments_approved_v2:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  card_number,\n  client_id,\n  idx,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM\n  pos_payments_distinct_src_v2_raw\nWHERE\n  created_at_date >= date_sub(to_date('2020-01-30'), 365) AND created_at_date < '2021-01-30'\nAND card_number != ''\nAND card_number != '******'\nAND card_number != '00******'\nAND card_number != '000000******0000'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src_v2\nWHERE\n  created_at_date >= '2020-01-30' AND created_at_date < '2021-01-30'\nAND amount >= 0""}, 'role': 'process', 'type': 'sql'}]"
666,process:::pos_payments_distinct_src_v2:::pos_add_visit_order,process:::current_pos_payments_canceled_v2:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  card_number,\n  client_id,\n  idx,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM\n  pos_payments_distinct_src_v2_raw\nWHERE\n  created_at_date >= date_sub(to_date('2020-01-30'), 365) AND created_at_date < '2021-01-30'\nAND card_number != ''\nAND card_number != '******'\nAND card_number != '00******'\nAND card_number != '000000******0000'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src_v2\nWHERE\n  created_at_date >= '2020-01-30' AND created_at_date < '2021-01-30'\nAND amount < 0""}, 'role': 'process', 'type': 'sql'}]"
667,process:::prev_pos_payments_approved_v2:::pos_add_visit_order,process:::current_visits_approved_v2:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src_v2\nWHERE\n  created_at_date >= date_sub(to_date('2020-01-30'), 365) AND created_at_date < '2020-01-30'\nAND amount >= 0""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  card_number,\n  client_id,\n  idx,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM    (\n  SELECT  pos_tx.*\n  FROM    (\n    SELECT  explode(pos_add_visit_order(histories)) AS pos_tx\n    FROM    (\n      SELECT  uid,\n              uid_type\n              card_number,\n              collect_list(struct(*)) AS histories\n      FROM    (\n        SELECT * FROM prev_pos_payments_approved_v2\n        UNION ALL\n        SELECT * FROM current_pos_payments_approved_v2\n      )\n      GROUP BY uid, uid_type, card_number\n    )\n  )\n)\nWHERE   created_at_date >= '2020-01-30' -- leave current""}, 'role': 'process', 'type': 'sql'}]"
668,process:::current_pos_payments_approved_v2:::pos_add_visit_order,process:::current_visits_approved_v2:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src_v2\nWHERE\n  created_at_date >= '2020-01-30' AND created_at_date < '2021-01-30'\nAND amount >= 0""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  card_number,\n  client_id,\n  idx,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM    (\n  SELECT  pos_tx.*\n  FROM    (\n    SELECT  explode(pos_add_visit_order(histories)) AS pos_tx\n    FROM    (\n      SELECT  uid,\n              uid_type\n              card_number,\n              collect_list(struct(*)) AS histories\n      FROM    (\n        SELECT * FROM prev_pos_payments_approved_v2\n        UNION ALL\n        SELECT * FROM current_pos_payments_approved_v2\n      )\n      GROUP BY uid, uid_type, card_number\n    )\n  )\n)\nWHERE   created_at_date >= '2020-01-30' -- leave current""}, 'role': 'process', 'type': 'sql'}]"
669,process:::current_pos_payments_canceled_v2:::pos_add_visit_order,process:::current_visits_canceled_v2:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src_v2\nWHERE\n  created_at_date >= '2020-01-30' AND created_at_date < '2021-01-30'\nAND amount < 0""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': 'SELECT\n    _event_id,\n    `type`,\n    amount,\n    authorization_number,\n    bill_key,\n    bill_no,\n    uid,\n    uid_type,\n    card_number,\n    client_id,\n    idx,\n    issuer_name,\n    label_name,\n    merchant_number,\n    order_status,\n    paid_at,\n    payment_key,\n    pos_no,\n    pos_type,\n    service_name,\n    shop_code,\n    timestamp,\n    CAST(null AS int) AS visit_order,\n    created_at_date\nFROM\n    current_pos_payments_canceled_v2'}, 'role': 'process', 'type': 'sql'}]"
670,process:::current_visits_approved_v2:::pos_add_visit_order,process:::visits:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': ""SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  card_number,\n  client_id,\n  idx,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  timestamp,\n  visit_order,\n  created_at_date\nFROM    (\n  SELECT  pos_tx.*\n  FROM    (\n    SELECT  explode(pos_add_visit_order(histories)) AS pos_tx\n    FROM    (\n      SELECT  uid,\n              uid_type\n              card_number,\n              collect_list(struct(*)) AS histories\n      FROM    (\n        SELECT * FROM prev_pos_payments_approved_v2\n        UNION ALL\n        SELECT * FROM current_pos_payments_approved_v2\n      )\n      GROUP BY uid, uid_type, card_number\n    )\n  )\n)\nWHERE   created_at_date >= '2020-01-30' -- leave current""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved_v2\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled_v2'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}]"
671,process:::current_visits_canceled_v2:::pos_add_visit_order,process:::visits:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': 'SELECT\n    _event_id,\n    `type`,\n    amount,\n    authorization_number,\n    bill_key,\n    bill_no,\n    uid,\n    uid_type,\n    card_number,\n    client_id,\n    idx,\n    issuer_name,\n    label_name,\n    merchant_number,\n    order_status,\n    paid_at,\n    payment_key,\n    pos_no,\n    pos_type,\n    service_name,\n    shop_code,\n    timestamp,\n    CAST(null AS int) AS visit_order,\n    created_at_date\nFROM\n    current_pos_payments_canceled_v2'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved_v2\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled_v2'}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT  *\nFROM    current_visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    current_visits_canceled'}, 'role': 'process', 'type': 'sql'}]"
672,process:::merged:::business_location_kcd,process:::common_location:::business_location_kcd,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_common.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'business_location_common.json', 'options': {'sql': 'SELECT\n          business_id,\n          common.*\nFROM (\n        SELECT\n                  business_id,\n                  CASE\n                      WHEN place_naver IS NOT NULL THEN struct(\n                                                                place_naver.geo_point,\n                                                                place_naver.full_address,\n                                                                place_naver.b_code,\n                                                                place_naver.sido,\n                                                                place_naver.sido_code,\n                                                                place_naver.sigungu,\n                                                                place_naver.sigungu_code,\n                                                                place_naver.dong,\n                                                                place_naver.h_codes\n                                                              )\n                      WHEN place_kakao IS NOT NULL THEN struct(\n                                                                place_kakao.geo_point,\n                                                                place_kakao.full_address,\n                                                                place_kakao.b_code,\n                                                                place_kakao.sido,\n                                                                place_kakao.sido_code,\n                                                                place_kakao.sigungu,\n                                                                place_kakao.sigungu_code,\n                                                                place_kakao.dong,\n                                                                place_kakao.h_codes\n                                                              )\n                      WHEN naver_basic IS NOT NULL THEN struct(\n                                                                naver_basic.geo_point,\n                                                                naver_basic.full_address,\n                                                                naver_basic.b_code,\n                                                                naver_basic.sido,\n                                                                naver_basic.sido_code,\n                                                                naver_basic.sigungu,\n                                                                naver_basic.sigungu_code,\n                                                                naver_basic.dong,\n                                                                naver_basic.h_codes\n                                                              )\n                      WHEN kakao_basic IS NOT NULL THEN struct(\n                                                                kakao_basic.geo_point,\n                                                                kakao_basic.full_address,\n                                                                kakao_basic.b_code,\n                                                                kakao_basic.sido,\n                                                                kakao_basic.sido_code,\n                                                                kakao_basic.sigungu,\n                                                                kakao_basic.sigungu_code,\n                                                                kakao_basic.dong,\n                                                                kakao_basic.h_codes\n                                                              )\n                      WHEN hometax IS NOT NULL THEN struct(\n                                                              hometax.geo_point,\n                                                              hometax.full_address,\n                                                              hometax.b_code,\n                                                              hometax.sido,\n                                                              hometax.sido_code,\n                                                              hometax.sigungu,\n                                                              hometax.sigungu_code,\n                                                              hometax.dong,\n                                                              hometax.h_codes\n                                                            )\n                      ELSE struct(\n                                   businesses.geo_point,\n                                   businesses.full_address,\n                                   businesses.b_code,\n                                   businesses.sido,\n                                   businesses.sido_code,\n                                   businesses.sigungu,\n                                   businesses.sigungu_code,\n                                   businesses.dong,\n                                   businesses.h_codes\n                                 )\n                  END AS common\n        FROM      merged\n)\nWHERE business_id is not null'}, 'role': 'process', 'type': 'sql'}]"
673,process:::common_location:::business_location_kcd,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_common.json', 'options': {'sql': 'SELECT\n          business_id,\n          common.*\nFROM (\n        SELECT\n                  business_id,\n                  CASE\n                      WHEN place_naver IS NOT NULL THEN struct(\n                                                                place_naver.geo_point,\n                                                                place_naver.full_address,\n                                                                place_naver.b_code,\n                                                                place_naver.sido,\n                                                                place_naver.sido_code,\n                                                                place_naver.sigungu,\n                                                                place_naver.sigungu_code,\n                                                                place_naver.dong,\n                                                                place_naver.h_codes\n                                                              )\n                      WHEN place_kakao IS NOT NULL THEN struct(\n                                                                place_kakao.geo_point,\n                                                                place_kakao.full_address,\n                                                                place_kakao.b_code,\n                                                                place_kakao.sido,\n                                                                place_kakao.sido_code,\n                                                                place_kakao.sigungu,\n                                                                place_kakao.sigungu_code,\n                                                                place_kakao.dong,\n                                                                place_kakao.h_codes\n                                                              )\n                      WHEN naver_basic IS NOT NULL THEN struct(\n                                                                naver_basic.geo_point,\n                                                                naver_basic.full_address,\n                                                                naver_basic.b_code,\n                                                                naver_basic.sido,\n                                                                naver_basic.sido_code,\n                                                                naver_basic.sigungu,\n                                                                naver_basic.sigungu_code,\n                                                                naver_basic.dong,\n                                                                naver_basic.h_codes\n                                                              )\n                      WHEN kakao_basic IS NOT NULL THEN struct(\n                                                                kakao_basic.geo_point,\n                                                                kakao_basic.full_address,\n                                                                kakao_basic.b_code,\n                                                                kakao_basic.sido,\n                                                                kakao_basic.sido_code,\n                                                                kakao_basic.sigungu,\n                                                                kakao_basic.sigungu_code,\n                                                                kakao_basic.dong,\n                                                                kakao_basic.h_codes\n                                                              )\n                      WHEN hometax IS NOT NULL THEN struct(\n                                                              hometax.geo_point,\n                                                              hometax.full_address,\n                                                              hometax.b_code,\n                                                              hometax.sido,\n                                                              hometax.sido_code,\n                                                              hometax.sigungu,\n                                                              hometax.sigungu_code,\n                                                              hometax.dong,\n                                                              hometax.h_codes\n                                                            )\n                      ELSE struct(\n                                   businesses.geo_point,\n                                   businesses.full_address,\n                                   businesses.b_code,\n                                   businesses.sido,\n                                   businesses.sido_code,\n                                   businesses.sigungu,\n                                   businesses.sigungu_code,\n                                   businesses.dong,\n                                   businesses.h_codes\n                                 )\n                  END AS common\n        FROM      merged\n)\nWHERE business_id is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}]"
674,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common,process:::business_location:::registration_number_common_location,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_common_location.json', 'options': {'sql': 'SELECT    mappings.registration_number,\n          business_common_location.*\nFROM  business_common_location\nJOIN  mappings\nON    business_common_location.business_id = mappings.business_id'}, 'role': 'process', 'type': 'sql'}]"
675,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common,process:::business_meta_with_amount:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'market_info.json', 'options': {'sql': '    SELECT\n            business_meta.business_id,\n            business_meta.businesses.businesses.business_name AS name,\n            business_meta.classification.market_area AS kcd_classification,\n            sales_amount_with_rate.duration,\n            sales_amount_with_rate.metrics,\n            sales_amount_with_rate.prev_metrics,\n            business_location.geo_point AS location,\n            struct(\n                business_location.b_code,\n                business_location.sido,\n                business_location.sido_code,\n                business_location.sigungu,\n                business_location.sigungu_code,\n                business_location.dong,\n                business_location.h_codes,\n                business_location.full_address\n            ) AS address\n    FROM business_meta\n    LEFT OUTER JOIN sales_amount_with_rate\n    ON business_meta.business_id = sales_amount_with_rate.business_id\n    LEFT OUTER JOIN  business_location\n    ON business_meta.business_id = business_location.business_id'}, 'role': 'process', 'type': 'sql'}]"
676,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common,process:::kcd_places:::build_user_tags,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_location_common.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=common'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_user_tags.json', 'options': {'sql': ""  SELECT\n          CAST(address.business_id AS INT) AS business_id,\n          address.value AS address,\n          cate.value AS classification\n  FROM (\n      SELECT business_id, b_code AS value\n      FROM location\n      WHERE b_code is not null\n  ) AS address\n  JOIN (\n      SELECT business_id, concat(depth_1_name, '>', depth_2_name) AS value\n      FROM classification\n      WHERE depth_2_name is not null\n  ) AS cate\n  ON address.business_id = cate.business_id""}, 'role': 'process', 'type': 'sql'}]"
677,merchant,process:::merge:::merchant_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'process', 'type': 'custom'}]"
678,places,process:::merge:::merchant_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'source', 'type': 'custom'}, {'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=places', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'process', 'type': 'custom'}]"
679,places,process:::merge:::registration_number_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'source', 'type': 'custom'}, {'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=places', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'process', 'type': 'custom'}]"
680,process:::merge:::merchant_meta,s3://kcd-de-production/data_cubes/dimension/name=merchant_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number,card_issuer,merchant_number'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'merchant_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=merchant_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=merchant_meta'}, 'role': 'source', 'type': 'file'}]"
681,s3://kcd-de-production/data_cubes/dimension/name=merchant_meta,process:::merchant:::paynote_user_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=merchant_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=merchant_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'paynote_user_stat.json', 'options': {'sql': ""SELECT    registration_number, card_issuer, merchant_number,\n          named_struct(\n              'merchant', merchant.info.merchant,\n              'kakao', places.kakao.name,\n              'naver', places.naver.name\n          ) AS name,\n          classification,\n          location\nFROM      merchant_meta""}, 'role': 'process', 'type': 'sql'}]"
682,s3://kcd-de-production/test/raw/etl/snowdon/bank/bank_transactions_merged,process:::bank_transactions:::build_bank_account_balances,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_bank_account_balances.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/test/raw/etl/snowdon/bank/bank_transactions_merged'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_bank_transactions.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/test/raw/etl/snowdon/bank/bank_transactions_merged', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'build_bank_account_balances.json', 'options': {'sql': ""SELECT  *\nFROM    bank_transactions_src\nWHERE   created_at_date >= '2021-01-27'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]"
683,process:::bank_transactions:::build_bank_account_balances,process:::build_bank_account_balances:::build_bank_account_balances,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_bank_account_balances.json', 'options': {'sql': ""SELECT  *\nFROM    bank_transactions_src\nWHERE   created_at_date >= '2021-01-27'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_bank_account_balances.json', 'options': {'sql': ""SELECT  bank_account_id AS id,\n        business_id,\n        bank_name,\n        account_type,\n        account_number,\n        account_created_at AS created_at,\n        account_updated_at AS updated_at,\n        credential_id,\n        name,\n        uuid,\n        holder_name,\n        date_trunc('day', transacted_at) AS transacted_at_date,\n        balance,\n        created_at_date\nFROM    bank_transactions\nWHERE   business_id is not null\nAND     seq = 1""}, 'role': 'process', 'type': 'sql'}]"
684,process:::build_bank_account_balances:::build_bank_account_balances,s3://kcd-de-production/test/raw/etl/snowdon/bank/bank_account_balances,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_bank_account_balances.json', 'options': {'sql': ""SELECT  bank_account_id AS id,\n        business_id,\n        bank_name,\n        account_type,\n        account_number,\n        account_created_at AS created_at,\n        account_updated_at AS updated_at,\n        credential_id,\n        name,\n        uuid,\n        holder_name,\n        date_trunc('day', transacted_at) AS transacted_at_date,\n        balance,\n        created_at_date\nFROM    bank_transactions\nWHERE   business_id is not null\nAND     seq = 1""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_bank_account_balances.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/test/raw/etl/snowdon/bank/bank_account_balances', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
685,users,process:::merged_users:::cashnote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'user_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'cashnote_user_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'user_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'paynote_user_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'user_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'cashnote_user_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'user_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
686,users,process:::transform:::cashnote_user_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'user_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'cashnote_user_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'user_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'paynote_user_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'user_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'cashnote_user_stat.json', 'options': {'sql': '  SELECT    u.user_id,\n            business_stats.*\n  FROM      business_stats\n  JOIN  (\n      SELECT  *, explode(memberships.memberships) AS membership\n      FROM  users\n  ) u\n  ON    business_stats.business_id = u.membership.business_id\n'}, 'role': 'process', 'type': 'sql'}]"
687,users,process:::formatted:::paynote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'user_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'cashnote_user_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'user_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'paynote_user_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=paynote_user_id/subject=users', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'user_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'paynote_user_meta.json', 'options': {'sql': 'SELECT    user_id,\n          devices.device_type,\n          users.age_band,\n          users.gender,\n          users.plus_friends,\n          card_agreements.issuers AS agreement_issuers,\n          card_agreements.options AS agreement_options,\n          acceptance_templates\nFROM      users'}, 'role': 'process', 'type': 'sql'}]"
688,message,process:::merged_users:::cashnote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=message', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'user_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'cashnote_user_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'user_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
689,s3://kcd-de-production/service/message/custom_set/user_type=cashnote/,process:::formatted_with_custom_set:::cashnote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/custom_set/user_type=cashnote/latest'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_user_meta.json', 'options': {'sql': 'SELECT\n          formatted.*,\n          custom_set.custom_set_ids\nFROM      formatted\nLEFT OUTER JOIN   custom_set\nON    formatted.target_id = custom_set.target_id'}, 'role': 'process', 'type': 'sql'}]"
690,process:::merged_users:::cashnote_user_meta,process:::user_with_business:::cashnote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'user_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'cashnote_user_meta.json', 'options': {'sql': 'SELECT    u.users.*,\n          u.*,\n          business_meta.*\nFROM      business_meta\nJOIN  (\n        SELECT  *, explode(users.memberships.memberships) AS membership\n        FROM  merged_users\n) u\nON    business_meta.business_id = u.membership.business_id'}, 'role': 'process', 'type': 'sql'}]"
691,process:::user_with_business:::cashnote_user_meta,process:::formatted:::cashnote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'sql': 'SELECT    u.users.*,\n          u.*,\n          business_meta.*\nFROM      business_meta\nJOIN  (\n        SELECT  *, explode(users.memberships.memberships) AS membership\n        FROM  merged_users\n) u\nON    business_meta.business_id = u.membership.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_user_meta.json', 'options': {'sql': ""SELECT    *,\n          array(\n            classification.depth_1_name,\n            CONCAT(classification.depth_1_name, '>', classification.depth_2_name),\n            CONCAT(classification.depth_1_name, '>', classification.depth_2_name, '>', classification.depth_3_name)\n          ) AS classification_names,\n          array(\n            location.sido,\n            CONCAT(location.sido, '>', location.sigungu),\n            CONCAT(location.sido, '>', location.sigungu, '>', location.dong)\n          ) AS location_names\nFROM (\n        SELECT    CONCAT(user_id, '_', business_id) AS target_id,\n                  user_id,\n                  business_id,\n                  devices.device_type,\n                  demography.age_band,\n                  classification.kcd AS classification,\n                  businesses.businesses.opened_at,\n                  businesses.businesses.business_type,\n                  businesses.businesses.business_name,\n                  businesses.businesses.public_id,\n                  businesses.acceptance_templates,\n                  businesses.owner.owner_name,\n                  businesses.owner.phone_number AS owner_phone_number,\n                  location.common AS location,\n                  location.place_classification AS place_classification,\n                  businesses.credentials.types AS credential_types,\n                  IF(businesses.subscriptions IS NOT NULL, true, false) AS is_advanced_user,\n                  IF(businesses.subscriptions IS NOT NULL AND businesses.subscriptions.paid = true, true, false) AS is_paid_user,\n                  businesses.paynote.is_paynote_business,\n                  membership.role,\n                  membership.notifications,\n                  phones.blocked,\n                  phones.number AS phone_number,\n                  hometax.business_label.regular_employees_count,\n                  hometax.business_label.size_category,\n                  hometax.employee.employ_avg,\n                  bank.bank_accounts.bank_names,\n                  bank.bank_transactions.contents AS bank_contents,\n                  message.click.campaign_ids AS message_click_campaign_ids,\n                  message.click.ad_group_ids AS message_click_ad_group_ids,\n                  message.send.campaign_ids AS message_send_campaign_ids,\n                  message.send.ad_group_ids AS message_send_ad_group_ids\n        FROM      user_with_business\n)""}, 'role': 'process', 'type': 'sql'}]"
692,process:::formatted:::cashnote_user_meta,process:::formatted_with_custom_set:::cashnote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'sql': ""SELECT    *,\n          array(\n            classification.depth_1_name,\n            CONCAT(classification.depth_1_name, '>', classification.depth_2_name),\n            CONCAT(classification.depth_1_name, '>', classification.depth_2_name, '>', classification.depth_3_name)\n          ) AS classification_names,\n          array(\n            location.sido,\n            CONCAT(location.sido, '>', location.sigungu),\n            CONCAT(location.sido, '>', location.sigungu, '>', location.dong)\n          ) AS location_names\nFROM (\n        SELECT    CONCAT(user_id, '_', business_id) AS target_id,\n                  user_id,\n                  business_id,\n                  devices.device_type,\n                  demography.age_band,\n                  classification.kcd AS classification,\n                  businesses.businesses.opened_at,\n                  businesses.businesses.business_type,\n                  businesses.businesses.business_name,\n                  businesses.businesses.public_id,\n                  businesses.acceptance_templates,\n                  businesses.owner.owner_name,\n                  businesses.owner.phone_number AS owner_phone_number,\n                  location.common AS location,\n                  location.place_classification AS place_classification,\n                  businesses.credentials.types AS credential_types,\n                  IF(businesses.subscriptions IS NOT NULL, true, false) AS is_advanced_user,\n                  IF(businesses.subscriptions IS NOT NULL AND businesses.subscriptions.paid = true, true, false) AS is_paid_user,\n                  businesses.paynote.is_paynote_business,\n                  membership.role,\n                  membership.notifications,\n                  phones.blocked,\n                  phones.number AS phone_number,\n                  hometax.business_label.regular_employees_count,\n                  hometax.business_label.size_category,\n                  hometax.employee.employ_avg,\n                  bank.bank_accounts.bank_names,\n                  bank.bank_transactions.contents AS bank_contents,\n                  message.click.campaign_ids AS message_click_campaign_ids,\n                  message.click.ad_group_ids AS message_click_ad_group_ids,\n                  message.send.campaign_ids AS message_send_campaign_ids,\n                  message.send.ad_group_ids AS message_send_ad_group_ids\n        FROM      user_with_business\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_user_meta.json', 'options': {'sql': 'SELECT\n          formatted.*,\n          custom_set.custom_set_ids\nFROM      formatted\nLEFT OUTER JOIN   custom_set\nON    formatted.target_id = custom_set.target_id'}, 'role': 'process', 'type': 'sql'}]"
693,process:::formatted_with_custom_set:::cashnote_user_meta,s3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'sql': 'SELECT\n          formatted.*,\n          custom_set.custom_set_ids\nFROM      formatted\nLEFT OUTER JOIN   custom_set\nON    formatted.target_id = custom_set.target_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'common_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_send_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_common_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}]"
694,s3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta,process:::add_join_field:::cashnote_user_meta_es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'common_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_send_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_common_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_user_meta_es_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-29', 'yyyy-MM-dd') AS timestamp,\n            named_struct(\n                'name', 'meta'\n            ) AS join_field,\n            *\n  FROM      cashnote_user_meta""}, 'role': 'process', 'type': 'sql'}]"
695,s3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta,process:::flatten:::common_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'common_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_send_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_common_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'paynote_common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}, {'filename': 'common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}, {'filename': 'cashnote_user_common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}]"
696,s3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta,process:::joined:::message_send_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'common_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_send_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_common_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=cashnote_user_meta'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'message_send_stat.json', 'options': {'sql': 'SELECT\n          message_history.*,\n          cashnote_user_meta.classification,\n          cashnote_user_meta.device_type,\n          age_band,\n          business_type,\n          location,\n          credential_types,\n          is_advanced_user,\n          is_paid_user,\n          regular_employees_count,\n          size_category\nFROM      message_history\nLEFT OUTER JOIN   cashnote_user_meta\nON        message_history.user_id = cashnote_user_meta.user_id\nAND       message_history.business_id = cashnote_user_meta.business_id'}, 'role': 'process', 'type': 'sql'}]"
697,s3://kcd-de-production/raw/etl/snowdon/delivery_app_v2/delivery_app_orders,process:::delivery_app_orders:::daily_delivery_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_delivery_orders_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/delivery_app_v2/delivery_app_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'daily_delivery_orders_stat.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_src\nWHERE     created_at_date >= '2020-10-30'\nAND       created_at_date < '2021-01-29'\nAND       ordered_at >= '2020-10-30'""}, 'role': 'process', 'type': 'sql'}]"
698,process:::delivery_app_orders:::daily_delivery_orders_stat,process:::daily_delivery_orders_stat:::daily_delivery_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_delivery_orders_stat.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_src\nWHERE     created_at_date >= '2020-10-30'\nAND       created_at_date < '2021-01-29'\nAND       ordered_at >= '2020-10-30'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_delivery_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          app_name AS delivery_app,\n          shop_name,\n          shop_number,\n          date_trunc('day', ordered_at) AS date,\n          SUM(IF (closed, order_amount, 0)) AS closed_orders_amount,\n          SUM(IF (closed, 1, 0)) AS closed_orders_count,\n          SUM(IF (canceled, order_amount, 0)) AS cancelled_orders_amount,\n          SUM(IF (canceled, 1, 0)) AS cancelled_orders_count\nFROM      delivery_app_orders\nGROUP BY 1, 2, 3, 4, 5""}, 'role': 'process', 'type': 'sql'}]"
699,process:::daily_delivery_orders_stat:::daily_delivery_orders_stat,s3://kcd-de-production/raw/stat/snowdon/delivery_app_v2/daily_delivery_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_delivery_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          app_name AS delivery_app,\n          shop_name,\n          shop_number,\n          date_trunc('day', ordered_at) AS date,\n          SUM(IF (closed, order_amount, 0)) AS closed_orders_amount,\n          SUM(IF (closed, 1, 0)) AS closed_orders_count,\n          SUM(IF (canceled, order_amount, 0)) AS cancelled_orders_amount,\n          SUM(IF (canceled, 1, 0)) AS cancelled_orders_count\nFROM      delivery_app_orders\nGROUP BY 1, 2, 3, 4, 5""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_delivery_orders_stat.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/delivery_app_v2/daily_delivery_orders', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
700,process:::daily_delivery_orders_stat:::daily_delivery_orders_stat,jdbc_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_delivery_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          app_name AS delivery_app,\n          shop_name,\n          shop_number,\n          date_trunc('day', ordered_at) AS date,\n          SUM(IF (closed, order_amount, 0)) AS closed_orders_amount,\n          SUM(IF (closed, 1, 0)) AS closed_orders_count,\n          SUM(IF (canceled, order_amount, 0)) AS cancelled_orders_amount,\n          SUM(IF (canceled, 1, 0)) AS cancelled_orders_count\nFROM      delivery_app_orders\nGROUP BY 1, 2, 3, 4, 5""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'uid_type:bills_id_type,menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats_v2', 'conflictColumns': 'uid,uid_type,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus', 'conflictColumns': 'business_id,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'daily_delivery_orders_stat.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'daily_delivery_orders_stat', 'conflictColumns': 'business_id,delivery_app,shop_number,date', 'updateColumns': 'closed_orders_amount,closed_orders_count,cancelled_orders_amount,cancelled_orders_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'hometax_business_label_upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'dbtable': 'hometax_businesses', 'conflictColumns': 'business_id', 'updateColumns': 'regular_employees_count,size_category,updated_at', 'typeCastColumns': 'size_category:hometax_business_size_category'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_sdk_event.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'sdk_name,event_type, user_type', 'updateColumns': 'sdk_name,event_type,user_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'delivery_receipt_stats.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-staging.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_staging', 'user': 'plover', 'password': 'welcome!', 'operation': 'upsert', 'dbtable': 'pos_receipt_stat', 'conflictColumns': 'public_id,target_date,date_type,h3_index,h3_resolution', 'updateColumns': 'metric', 'typeCastColumns': 'metric:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats', 'conflictColumns': 'business_id,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus', 'conflictColumns': 'business_id,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_menu_top_k.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_menu_top_k', 'conflictColumns': 'business_id,order_month,time_bucket,name', 'updateColumns': 'total_amount,total_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}]"
701,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions,process:::recent_1_year:::business_id_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'card_sales_stat.json', 'options': {'sql': ""SELECT\n          business_id,\n          SUM(amount_sum) AS amount_sum,\n          AVG(amount_sum) AS amount_avg,\n          SUM(tx_count) AS tx_count_sum,\n          AVG(tx_count) AS tx_count_avg,\n          COUNT(DISTINCT(date_id)) AS date_cnt\nFROM      card_sales_transactions\nWHERE     date_id >= date_trunc('MONTH', add_months(current_date, -12))\nAND       date_id <= date_trunc('MONTH', add_months(current_date, -1))\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]"
702,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions,process:::merge:::business_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
703,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions,process:::sales_amount:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'market_info.json', 'options': {'sql': 'SELECT\n        business_id, duration, prev_duration,\n        struct(\n            amount_sum,\n            amount_avg,\n            tx_count_sum,\n            tx_count_avg,\n            unit_price\n        ) AS metrics\nFROM (\n        SELECT\n                business_id,\n                dateRange.code AS duration,\n                dateRange.prevCode AS prev_duration,\n                amount_sum,\n                ROUND(amount_sum / cnt) AS amount_avg,\n                tx_count_sum,\n                ROUND(tx_count_sum / cnt) AS tx_count_avg,\n                ROUND(amount_sum / tx_count_sum) AS unit_price\n        FROM (\n            SELECT\n                    business_id, dateRange,\n                    SUM(amount) AS amount_sum,\n                    SUM(tx_count) AS tx_count_sum,\n                    count(1) AS cnt\n            FROM (\n                SELECT\n                    business_id,\n                    explode(dateRangeCodes) AS dateRange,\n                    amount_sum AS amount,\n                    tx_count\n                FROM (\n                    SELECT\n                        business_id,\n                        dateRangeCode(timestamp) AS dateRangeCodes,\n                        amount_sum,\n                        tx_count\n                    FROM card_sales_transactions\n                )\n                WHERE size(dateRangeCodes) > 0\n            )\n            GROUP BY business_id, dateRange\n        )\n)'}, 'role': 'process', 'type': 'sql'}]"
704,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions,process:::cashnote:::registration_number_card_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""  SELECT  registration_number,\n          SUM(amount_sum) AS amount_sum,\n          SUM(tx_count) AS tx_count\n  FROM (\n          SELECT\n                  mappings.registration_number,\n                  c.*\n          FROM    (\n                      SELECT  *\n                      FROM    cashnote_cardsales\n                      WHERE   date_id between '2020-08-01' AND '2021-01-28'\n          ) c\n          JOIN    mappings\n          ON      c.business_id = mappings.business_id\n  )\n  GROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]"
705,process:::recent_1_year:::business_id_stat,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=cardsales/name=recent_1_year,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_sales_stat.json', 'options': {'sql': ""SELECT\n          business_id,\n          SUM(amount_sum) AS amount_sum,\n          AVG(amount_sum) AS amount_avg,\n          SUM(tx_count) AS tx_count_sum,\n          AVG(tx_count) AS tx_count_avg,\n          COUNT(DISTINCT(date_id)) AS date_cnt\nFROM      card_sales_transactions\nWHERE     date_id >= date_trunc('MONTH', add_months(current_date, -12))\nAND       date_id <= date_trunc('MONTH', add_months(current_date, -1))\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_sales_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=cardsales/name=recent_1_year'}, 'role': 'sink', 'type': 'file'}]"
706,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=business_label,process:::result:::hometax_business_label_upload,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_label_upload.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=business_label'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_label.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=business_label'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'hometax_business_label_upload.json', 'options': {'sql': '  SELECT  b.id,\n          b.business_id,\n          b.name,\n          b.address,\n          b.phone_number,\n          b.owner_name,\n          b.owner_birthday,\n          b.owner_nationality,\n          b.owner_email,\n          b.opened_at,\n          b.operation_status,\n          b.taxation_type,\n          b.item_name,\n          b.item_code,\n          b.login,\n          b.official_name,\n          b.official_code,\n          b.official_number,\n          b.tax_refunds_count,\n          b.created_at,\n          current_timestamp() AS updated_at,\n          l.regular_employees_count,\n          l.size_category,\n          b.owner_address,\n          b.type_name\n  FROM    hometax_businesses b LEFT OUTER JOIN business_label l\n  ON      b.business_id = l.business_id'}, 'role': 'process', 'type': 'sql'}]"
707,process:::result:::hometax_business_label_upload,jdbc_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_label_upload.json', 'options': {'sql': '  SELECT  b.id,\n          b.business_id,\n          b.name,\n          b.address,\n          b.phone_number,\n          b.owner_name,\n          b.owner_birthday,\n          b.owner_nationality,\n          b.owner_email,\n          b.opened_at,\n          b.operation_status,\n          b.taxation_type,\n          b.item_name,\n          b.item_code,\n          b.login,\n          b.official_name,\n          b.official_code,\n          b.official_number,\n          b.tax_refunds_count,\n          b.created_at,\n          current_timestamp() AS updated_at,\n          l.regular_employees_count,\n          l.size_category,\n          b.owner_address,\n          b.type_name\n  FROM    hometax_businesses b LEFT OUTER JOIN business_label l\n  ON      b.business_id = l.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'uid_type:bills_id_type,menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats_v2', 'conflictColumns': 'uid,uid_type,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus', 'conflictColumns': 'business_id,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'daily_delivery_orders_stat.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'daily_delivery_orders_stat', 'conflictColumns': 'business_id,delivery_app,shop_number,date', 'updateColumns': 'closed_orders_amount,closed_orders_count,cancelled_orders_amount,cancelled_orders_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'hometax_business_label_upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'dbtable': 'hometax_businesses', 'conflictColumns': 'business_id', 'updateColumns': 'regular_employees_count,size_category,updated_at', 'typeCastColumns': 'size_category:hometax_business_size_category'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_sdk_event.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'sdk_name,event_type, user_type', 'updateColumns': 'sdk_name,event_type,user_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'delivery_receipt_stats.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-staging.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_staging', 'user': 'plover', 'password': 'welcome!', 'operation': 'upsert', 'dbtable': 'pos_receipt_stat', 'conflictColumns': 'public_id,target_date,date_type,h3_index,h3_resolution', 'updateColumns': 'metric', 'typeCastColumns': 'metric:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats', 'conflictColumns': 'business_id,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus', 'conflictColumns': 'business_id,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_menu_top_k.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_menu_top_k', 'conflictColumns': 'business_id,order_month,time_bucket,name', 'updateColumns': 'total_amount,total_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}]"
708,s3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_cashnote_ruby/,process:::cashnote_sdk_event:::update_sdk_event,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_sdk_event.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_cashnote_ruby/created_at_date=2021-01-28'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'update_sdk_event.json', 'options': {'sql': ""  SELECT\n          'kcd_cashnote_ruby' AS sdk_name,\n          event AS event_type,\n          'cashnote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_cashnote_ruby\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_cashnote_web' AS sdk_name,\n          event AS event_type,\n          'cashnote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_cashnote_web\n  )""}, 'role': 'process', 'type': 'sql'}]"
709,s3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_cashnote_web/,process:::cashnote_sdk_event:::update_sdk_event,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_sdk_event.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_cashnote_web/created_at_date=2021-01-28'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'update_sdk_event.json', 'options': {'sql': ""  SELECT\n          'kcd_cashnote_ruby' AS sdk_name,\n          event AS event_type,\n          'cashnote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_cashnote_ruby\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_cashnote_web' AS sdk_name,\n          event AS event_type,\n          'cashnote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_cashnote_web\n  )""}, 'role': 'process', 'type': 'sql'}]"
710,s3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_redbird_ruby/,process:::paynote_sdk_event:::update_sdk_event,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_sdk_event.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_redbird_ruby/created_at_date=2021-01-28'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'update_sdk_event.json', 'options': {'sql': ""  SELECT\n          'kcd_redbird_ruby' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_redbird_ruby\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_redbird_web' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_redbird_web\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_goose_ruby' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_goose_ruby\n  )""}, 'role': 'process', 'type': 'sql'}]"
711,s3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_redbird_web/,process:::paynote_sdk_event:::update_sdk_event,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_sdk_event.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_redbird_web/created_at_date=2021-01-28'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'update_sdk_event.json', 'options': {'sql': ""  SELECT\n          'kcd_redbird_ruby' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_redbird_ruby\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_redbird_web' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_redbird_web\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_goose_ruby' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_goose_ruby\n  )""}, 'role': 'process', 'type': 'sql'}]"
712,s3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_goose_ruby/,process:::paynote_sdk_event:::update_sdk_event,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_sdk_event.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_goose_ruby/created_at_date=2021-01-28'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'update_sdk_event.json', 'options': {'sql': ""  SELECT\n          'kcd_redbird_ruby' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_redbird_ruby\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_redbird_web' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_redbird_web\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_goose_ruby' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_goose_ruby\n  )""}, 'role': 'process', 'type': 'sql'}]"
713,s3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_bluebird_web/,process:::bluebird_sdk_event:::update_sdk_event,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_sdk_event.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_bluebird_web/created_at_date=2021-01-28'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'update_sdk_event.json', 'options': {'sql': ""  SELECT\n          'kcd_bluebird_web' AS sdk_name,\n          event AS event_type,\n          'cashnote' AS user_type\n  FROM (\n          SELECT\n                  DISTINCT event\n          FROM    kcd_bluebird_web\n          WHERE   prop_cashnote_user_id IS NOT NULL\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_bluebird_web' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  DISTINCT event\n          FROM    kcd_bluebird_web\n          WHERE   prop_paynote_user_id IS NOT NULL\n  )""}, 'role': 'process', 'type': 'sql'}]"
714,process:::cashnote_sdk_event:::update_sdk_event,process:::all_sdk_event:::update_sdk_event,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_sdk_event.json', 'options': {'sql': ""  SELECT\n          'kcd_cashnote_ruby' AS sdk_name,\n          event AS event_type,\n          'cashnote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_cashnote_ruby\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_cashnote_web' AS sdk_name,\n          event AS event_type,\n          'cashnote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_cashnote_web\n  )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'update_sdk_event.json', 'options': {'sql': 'SELECT    sdk_name, event_type, user_type     FROM cashnote_sdk_event\nUNION ALL\nSELECT    sdk_name, event_type, user_type     FROM paynote_sdk_event\nUNION ALL\nSELECT    sdk_name, event_type, user_type     FROM bluebird_sdk_event'}, 'role': 'process', 'type': 'sql'}]"
715,process:::paynote_sdk_event:::update_sdk_event,process:::all_sdk_event:::update_sdk_event,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_sdk_event.json', 'options': {'sql': ""  SELECT\n          'kcd_redbird_ruby' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_redbird_ruby\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_redbird_web' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_redbird_web\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_goose_ruby' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  distinct event\n          FROM    kcd_goose_ruby\n  )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'update_sdk_event.json', 'options': {'sql': 'SELECT    sdk_name, event_type, user_type     FROM cashnote_sdk_event\nUNION ALL\nSELECT    sdk_name, event_type, user_type     FROM paynote_sdk_event\nUNION ALL\nSELECT    sdk_name, event_type, user_type     FROM bluebird_sdk_event'}, 'role': 'process', 'type': 'sql'}]"
716,process:::bluebird_sdk_event:::update_sdk_event,process:::all_sdk_event:::update_sdk_event,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_sdk_event.json', 'options': {'sql': ""  SELECT\n          'kcd_bluebird_web' AS sdk_name,\n          event AS event_type,\n          'cashnote' AS user_type\n  FROM (\n          SELECT\n                  DISTINCT event\n          FROM    kcd_bluebird_web\n          WHERE   prop_cashnote_user_id IS NOT NULL\n  )\n\n  UNION ALL\n\n  SELECT\n          'kcd_bluebird_web' AS sdk_name,\n          event AS event_type,\n          'paynote' AS user_type\n  FROM (\n          SELECT\n                  DISTINCT event\n          FROM    kcd_bluebird_web\n          WHERE   prop_paynote_user_id IS NOT NULL\n  )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'update_sdk_event.json', 'options': {'sql': 'SELECT    sdk_name, event_type, user_type     FROM cashnote_sdk_event\nUNION ALL\nSELECT    sdk_name, event_type, user_type     FROM paynote_sdk_event\nUNION ALL\nSELECT    sdk_name, event_type, user_type     FROM bluebird_sdk_event'}, 'role': 'process', 'type': 'sql'}]"
717,process:::all_sdk_event:::update_sdk_event,jdbc_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_sdk_event.json', 'options': {'sql': 'SELECT    sdk_name, event_type, user_type     FROM cashnote_sdk_event\nUNION ALL\nSELECT    sdk_name, event_type, user_type     FROM paynote_sdk_event\nUNION ALL\nSELECT    sdk_name, event_type, user_type     FROM bluebird_sdk_event'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'uid_type:bills_id_type,menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats_v2', 'conflictColumns': 'uid,uid_type,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus', 'conflictColumns': 'business_id,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'daily_delivery_orders_stat.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'daily_delivery_orders_stat', 'conflictColumns': 'business_id,delivery_app,shop_number,date', 'updateColumns': 'closed_orders_amount,closed_orders_count,cancelled_orders_amount,cancelled_orders_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'hometax_business_label_upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'dbtable': 'hometax_businesses', 'conflictColumns': 'business_id', 'updateColumns': 'regular_employees_count,size_category,updated_at', 'typeCastColumns': 'size_category:hometax_business_size_category'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_sdk_event.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'sdk_name,event_type, user_type', 'updateColumns': 'sdk_name,event_type,user_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'delivery_receipt_stats.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-staging.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_staging', 'user': 'plover', 'password': 'welcome!', 'operation': 'upsert', 'dbtable': 'pos_receipt_stat', 'conflictColumns': 'public_id,target_date,date_type,h3_index,h3_resolution', 'updateColumns': 'metric', 'typeCastColumns': 'metric:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats', 'conflictColumns': 'business_id,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus', 'conflictColumns': 'business_id,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_menu_top_k.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_menu_top_k', 'conflictColumns': 'business_id,order_month,time_bucket,name', 'updateColumns': 'total_amount,total_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}]"
718,s3://kcd-de-production/raw/db/auth/snapshot/client_user_mapping,process:::payments:::build_user_categories,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/auth/snapshot/latest/client_user_mapping'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_agreements.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/auth/snapshot/latest/client_user_mapping'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_user_categories.json', 'options': {'sql': ""SELECT a.*,\n       u.client_user_id,\n       u.gender,\n       year(current_date()) - year(u.birthday) + 1 AS age,\n       u.birthday,\n       u.plus_friends\nFROM   (\n    SELECT p.*,\n           m.location.sido,\n           m.location.sigungu,\n           m.location.dong,\n           m.location.geo_point,\n           m.classification.depth_1_name,\n           m.classification.depth_2_name,\n           m.classification.depth_3_name\n    FROM   card_payments p LEFT OUTER JOIN registration_number_meta m\n    ON     (p.registration_number = m.registration_number)\n) a, (\n  SELECT  m.client_user_id,\n          m.created,\n          u.id,\n          u.gender,\n          u.birthday,\n          u.plus_friends\n  FROM    users u, client_user_mapping m\n  WHERE   u.ci = m.ci\n  AND     m.realm_id = 'paynote'\n  AND     m.client_id = 'gsshop'\n) u\nWHERE  a.user_id = u.id""}, 'role': 'process', 'type': 'sql'}]"
719,s3://kcd-de-production/raw/db/auth/snapshot/client_user_mapping,process:::client_user_mapping_joined:::build_user_agreements,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/auth/snapshot/latest/client_user_mapping'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_agreements.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/auth/snapshot/latest/client_user_mapping'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_user_agreements.json', 'options': {'sql': ""SELECT  struct(current.*) AS current,\n        struct(prev.*) AS prev\nFROM    current_client_user_mapping current FULL OUTER JOIN prev_client_user_mapping prev\nON      current.id = prev.id\nWHERE   current.realm_id = 'paynote'\nAND     current.client_id = 'gsshop'\nAND     prev.realm_id = 'paynote'\nAND     prev.client_id = 'gsshop'\nAND     current.verified_ci = current.ci""}, 'role': 'process', 'type': 'sql'}]"
720,process:::card_payments:::build_user_categories,process:::payments:::build_user_categories,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_categories.json', 'options': {'sql': ""SELECT *\nFROM   card_payments_src\nWHERE  date_trunc('month', approved_at) >= add_months(date_trunc('month', current_date()), -2)\nAND    date_trunc('month', approved_at) < date_trunc('month', current_date())""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_user_categories.json', 'options': {'sql': ""SELECT a.*,\n       u.client_user_id,\n       u.gender,\n       year(current_date()) - year(u.birthday) + 1 AS age,\n       u.birthday,\n       u.plus_friends\nFROM   (\n    SELECT p.*,\n           m.location.sido,\n           m.location.sigungu,\n           m.location.dong,\n           m.location.geo_point,\n           m.classification.depth_1_name,\n           m.classification.depth_2_name,\n           m.classification.depth_3_name\n    FROM   card_payments p LEFT OUTER JOIN registration_number_meta m\n    ON     (p.registration_number = m.registration_number)\n) a, (\n  SELECT  m.client_user_id,\n          m.created,\n          u.id,\n          u.gender,\n          u.birthday,\n          u.plus_friends\n  FROM    users u, client_user_mapping m\n  WHERE   u.ci = m.ci\n  AND     m.realm_id = 'paynote'\n  AND     m.client_id = 'gsshop'\n) u\nWHERE  a.user_id = u.id""}, 'role': 'process', 'type': 'sql'}]"
721,process:::payments:::build_user_categories,process:::user_categories_stat:::build_user_categories,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_categories.json', 'options': {'sql': ""SELECT a.*,\n       u.client_user_id,\n       u.gender,\n       year(current_date()) - year(u.birthday) + 1 AS age,\n       u.birthday,\n       u.plus_friends\nFROM   (\n    SELECT p.*,\n           m.location.sido,\n           m.location.sigungu,\n           m.location.dong,\n           m.location.geo_point,\n           m.classification.depth_1_name,\n           m.classification.depth_2_name,\n           m.classification.depth_3_name\n    FROM   card_payments p LEFT OUTER JOIN registration_number_meta m\n    ON     (p.registration_number = m.registration_number)\n) a, (\n  SELECT  m.client_user_id,\n          m.created,\n          u.id,\n          u.gender,\n          u.birthday,\n          u.plus_friends\n  FROM    users u, client_user_mapping m\n  WHERE   u.ci = m.ci\n  AND     m.realm_id = 'paynote'\n  AND     m.client_id = 'gsshop'\n) u\nWHERE  a.user_id = u.id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_user_categories.json', 'options': {'sql': ""SELECT *,\n       row_number() OVER (PARTITION BY client_user_id, time_unit, time ORDER BY count DESC) AS rank,\n       approx_count_distinct(client_user_id) OVER (\n        PARTITION BY time_unit, time, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name\n       ) AS user_count,\n       count(client_user_id) OVER (\n        PARTITION BY time_unit, time, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name\n       ) AS total_count,\n       sum(amount) OVER (\n        PARTITION BY time_unit, time, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name\n       ) AS total_amount\nFROM   (\n    SELECT client_user_id,\n           time_unit, time, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name,\n           sum(amount) AS amount,\n           count(1) AS count,\n           AVG(CAST(approved_at AS long) - CAST(COALESCE(prev_approved_at, approved_at) AS long)) AS interval\n    FROM   (\n        SELECT  *,\n                lag(approved_at, 1) OVER (\n                  PARTITION BY client_user_id, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name ORDER BY approved_at\n                ) AS prev_approved_at\n        FROM    (\n            SELECT  *,\n                    'month' AS time_unit,\n                    date_format(date_trunc('month', approved_at), 'yyyy-MM-dd') AS time,\n                    CASE\n                        WHEN hour(approved_at) between 0 and 5 then '새벽'\n                        WHEN hour(approved_at) between 6 and 10 then '아침'\n                        WHEN hour(approved_at) between 11 and 13 then '점심'\n                        WHEN hour(approved_at) between 14 and 16 then '오후'\n                        ELSE '저녁'\n                    END AS time_bucket,\n                    dayofweek(approved_at) in (1, 7) AS is_weekend,\n                    CAST(age / 10 AS int) * 10 AS age_bucket\n            FROM    payments\n        )\n    )\n    GROUP BY client_user_id, time_unit, time, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name\n)\nORDER BY client_user_id, time_unit, time""}, 'role': 'process', 'type': 'sql'}]"
722,process:::user_categories_stat:::build_user_categories,user_categories_stat_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_categories.json', 'options': {'sql': ""SELECT *,\n       row_number() OVER (PARTITION BY client_user_id, time_unit, time ORDER BY count DESC) AS rank,\n       approx_count_distinct(client_user_id) OVER (\n        PARTITION BY time_unit, time, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name\n       ) AS user_count,\n       count(client_user_id) OVER (\n        PARTITION BY time_unit, time, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name\n       ) AS total_count,\n       sum(amount) OVER (\n        PARTITION BY time_unit, time, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name\n       ) AS total_amount\nFROM   (\n    SELECT client_user_id,\n           time_unit, time, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name,\n           sum(amount) AS amount,\n           count(1) AS count,\n           AVG(CAST(approved_at AS long) - CAST(COALESCE(prev_approved_at, approved_at) AS long)) AS interval\n    FROM   (\n        SELECT  *,\n                lag(approved_at, 1) OVER (\n                  PARTITION BY client_user_id, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name ORDER BY approved_at\n                ) AS prev_approved_at\n        FROM    (\n            SELECT  *,\n                    'month' AS time_unit,\n                    date_format(date_trunc('month', approved_at), 'yyyy-MM-dd') AS time,\n                    CASE\n                        WHEN hour(approved_at) between 0 and 5 then '새벽'\n                        WHEN hour(approved_at) between 6 and 10 then '아침'\n                        WHEN hour(approved_at) between 11 and 13 then '점심'\n                        WHEN hour(approved_at) between 14 and 16 then '오후'\n                        ELSE '저녁'\n                    END AS time_bucket,\n                    dayofweek(approved_at) in (1, 7) AS is_weekend,\n                    CAST(age / 10 AS int) * 10 AS age_bucket\n            FROM    payments\n        )\n    )\n    GROUP BY client_user_id, time_unit, time, age_bucket, gender, time_bucket, is_weekend, sido, sigungu, dong, depth_1_name, depth_2_name, depth_3_name\n)\nORDER BY client_user_id, time_unit, time""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_user_categories.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/goose/user_features/created_at_date=2020-11-17/user_categories', 'header': 'true'}, 'role': 'sink', 'type': 'custom'}]"
723,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/market_area_classification_20200916.tsv,process:::mapping:::market_area_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_area_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/market_area_classification_20200916.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'market_area_classification.json', 'options': {'sql': ""SELECT\n      c.*,\n      nvl(m.kcd_depth_1_code, c.depth_1_code) AS kcd_depth_1_code,\n      nvl(m.kcd_depth_2_code, c.depth_2_code) AS kcd_depth_2_code,\n      nvl(m.kcd_depth_3_code, c.depth_3_code) AS kcd_depth_3_code\nFROM market_area_classification AS c\nLEFT OUTER JOIN market_area_kcd_mapping AS m\nON m.depth_1_code = c.depth_1_code\nAND m.depth_2_code = c.depth_2_code\nAND nvl(m.depth_3_code, 'empty') = nvl(c.depth_3_code, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
724,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/market_area_kcd_mapping_20200916.tsv,process:::mapping:::market_area_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_area_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/market_area_kcd_mapping_20200916.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'market_area_classification.json', 'options': {'sql': ""SELECT\n      c.*,\n      nvl(m.kcd_depth_1_code, c.depth_1_code) AS kcd_depth_1_code,\n      nvl(m.kcd_depth_2_code, c.depth_2_code) AS kcd_depth_2_code,\n      nvl(m.kcd_depth_3_code, c.depth_3_code) AS kcd_depth_3_code\nFROM market_area_classification AS c\nLEFT OUTER JOIN market_area_kcd_mapping AS m\nON m.depth_1_code = c.depth_1_code\nAND m.depth_2_code = c.depth_2_code\nAND nvl(m.depth_3_code, 'empty') = nvl(c.depth_3_code, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
725,process:::mapping:::market_area_classification,process:::business_classification:::market_area_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_area_classification.json', 'options': {'sql': ""SELECT\n      c.*,\n      nvl(m.kcd_depth_1_code, c.depth_1_code) AS kcd_depth_1_code,\n      nvl(m.kcd_depth_2_code, c.depth_2_code) AS kcd_depth_2_code,\n      nvl(m.kcd_depth_3_code, c.depth_3_code) AS kcd_depth_3_code\nFROM market_area_classification AS c\nLEFT OUTER JOIN market_area_kcd_mapping AS m\nON m.depth_1_code = c.depth_1_code\nAND m.depth_2_code = c.depth_2_code\nAND nvl(m.depth_3_code, 'empty') = nvl(c.depth_3_code, 'empty')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_area_classification.json', 'options': {'sql': ""SELECT\n      business_id,\n      mapping.depth_1_code,\n      mapping.depth_1_name,\n      mapping.depth_2_code,\n      mapping.depth_2_name,\n      mapping.depth_3_code,\n      mapping.depth_3_name\nFROM kcd_classification AS kcd\nJOIN mapping\nON kcd.depth_1_code = mapping.kcd_depth_1_code\nAND kcd.depth_2_code = mapping.kcd_depth_2_code\nAND kcd.depth_3_code = nvl(mapping.kcd_depth_3_code, 'X99X99')""}, 'role': 'process', 'type': 'sql'}]"
726,process:::business_classification:::market_area_classification,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=market_area,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_area_classification.json', 'options': {'sql': ""SELECT\n      business_id,\n      mapping.depth_1_code,\n      mapping.depth_1_name,\n      mapping.depth_2_code,\n      mapping.depth_2_name,\n      mapping.depth_3_code,\n      mapping.depth_3_name\nFROM kcd_classification AS kcd\nJOIN mapping\nON kcd.depth_1_code = mapping.kcd_depth_1_code\nAND kcd.depth_2_code = mapping.kcd_depth_2_code\nAND kcd.depth_3_code = nvl(mapping.kcd_depth_3_code, 'X99X99')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_area_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=market_area'}, 'role': 'sink', 'type': 'file'}]"
727,process:::businesses:::businesses,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'businesses.json', 'options': {'sql': ""SELECT\n          *,\n          CASE\n              WHEN business_check_number BETWEEN 1 AND 79 THEN '개인과세사업자'\n              WHEN business_check_number >= 90 THEN '개인면세사업자'\n              ELSE '법인사업자'\n          END business_type\nFROM (\n      SELECT\n              id AS business_id,\n              owner_id,\n              name AS business_name,\n              registration_number,\n              public_id,\n              created_at,\n              opened_at,\n              closed_at,\n              tax_agent_id,\n              operation_status,\n              taxation_type,\n              vat_withheld,\n              card_merchant_signed_up_at,\n              crefia_owner_birthday,\n              crefia_size_code,\n              CAST(substr(registration_number, 4, 2) AS INT) AS business_check_number\n      FROM    businesses_src\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'businesses.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=businesses'}, 'role': 'source', 'type': 'file'}]"
728,process:::iamport_customers:::businesses,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=iamport_customers,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'businesses.json', 'options': {'sql': '  SELECT\n          business_id,\n          status,\n          card_name,\n          created_at\n  FROM    iamport_customers_src'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'businesses.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=iamport_customers'}, 'role': 'sink', 'type': 'file'}]"
729,process:::credentials:::businesses,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=credentials,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'businesses.json', 'options': {'sql': ""  SELECT\n          business_id,\n          collect_set(name)  AS types\n  FROM (\n          SELECT\n                  business_id,\n                  created_at,\n                  replace(type, 'Credentials::', '') AS name\n          FROM    credentials_src\n          WHERE   status != 2\n  )\n  GROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'businesses.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=credentials'}, 'role': 'sink', 'type': 'file'}]"
730,process:::subscriptions:::businesses,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=subscriptions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'businesses.json', 'options': {'sql': '  SELECT\n          business_id,\n          plan_id,\n          paid,\n          auto_renew,\n          started_at,\n          created_at,\n          canceled_at,\n          status\n  FROM    subscriptions_src\n  WHERE   status = 0'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'businesses.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=subscriptions'}, 'role': 'sink', 'type': 'file'}]"
731,process:::cards:::businesses,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=cards,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'businesses.json', 'options': {'sql': ""  SELECT  cards_src.business_id,\n          collect_set(concat(issuer, '_', card_type)) AS issuer,\n          collect_set(name) AS card_names\n  FROM    cards_src\n  JOIN    credentials_src\n  ON      cards_src.credential_id = credentials_src.id\n  WHERE   credentials_src.status != 2\n  GROUP BY cards_src.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'businesses.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=cards'}, 'role': 'sink', 'type': 'file'}]"
732,process:::owner:::businesses,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=owner,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'businesses.json', 'options': {'sql': 'SELECT\n        businesses_src.id AS business_id,\n        u.name AS owner_name,\n        u.phone_number\nFROM (\n      SELECT    users.id AS user_id,\n                users.name AS name,\n                phones.number AS phone_number\n      FROM      users\n      FULL OUTER JOIN   phones\n      ON        users.id = phones.user_id\n) AS u\nJOIN businesses_src\nON u.user_id = businesses_src.owner_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'businesses.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=owner'}, 'role': 'sink', 'type': 'file'}]"
733,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=businesses,process:::demography:::cashnote_users,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'businesses.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_users.json', 'options': {'sql': '  SELECT  *,\n          CASE\n              WHEN age < 20 THEN ""20_under""\n              WHEN age >= 20 AND age < 30 THEN ""20s""\n              WHEN age >= 30 AND age < 40 THEN ""30s""\n              WHEN age >= 40 AND age < 50 THEN ""40s""\n              WHEN age >= 50 AND age < 60 THEN ""50s""\n              WHEN age >= 60 THEN ""60_over""\n              ELSE ""none""\n          END AS age_band\n  FROM (\n          SELECT  owner_id AS user_id,\n                  year(crefia_owner_birthday) AS birth_year,\n                  month(crefia_owner_birthday) AS birth_month,\n                  date_format(crefia_owner_birthday, \'MM-dd\') AS birthday,\n                  crefia_owner_birthday,\n                  (year(current_date()) - year(crefia_owner_birthday) + 1) AS age,\n                  row_number() OVER (PARTITION BY owner_id ORDER BY created_at DESC) AS row_num\n          FROM  businesses\n          WHERE crefia_owner_birthday is not null\n  )\n  WHERE   row_num = 1'}, 'role': 'process', 'type': 'sql'}]"
734,jdbc:ad_group_event_map,process:::event_mapping:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group_event_map', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group_event_map', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': '    SELECT \tcampaign_id, ad_group_id, ad_group.user_type,\n            ad_group_event_map.event_type,\n            sdk_event.event_type AS sdk_event_type,\n            sdk_event.sdk_name\n    FROM  \tad_group, ad_group_event_map, sdk_event\n    WHERE \tad_group.id = ad_group_event_map.ad_group_id\n    AND\t \tad_group_event_map.sdk_event_id = sdk_event.id'}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': '    SELECT \tcampaign_id, ad_group_id, ad_group.user_type,\n            ad_group_event_map.event_type,\n            sdk_event.event_type AS sdk_event_type,\n            sdk_event.sdk_name\n    FROM  \tad_group, ad_group_event_map, sdk_event\n    WHERE \tad_group.id = ad_group_event_map.ad_group_id\n    AND\t \tad_group_event_map.sdk_event_id = sdk_event.id'}, 'role': 'process', 'type': 'sql'}]"
735,jdbc:sdk_event,process:::event_mapping:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'conv_log.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'skip_tx': 'true'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': '    SELECT \tcampaign_id, ad_group_id, ad_group.user_type,\n            ad_group_event_map.event_type,\n            sdk_event.event_type AS sdk_event_type,\n            sdk_event.sdk_name\n    FROM  \tad_group, ad_group_event_map, sdk_event\n    WHERE \tad_group.id = ad_group_event_map.ad_group_id\n    AND\t \tad_group_event_map.sdk_event_id = sdk_event.id'}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': '    SELECT \tcampaign_id, ad_group_id, ad_group.user_type,\n            ad_group_event_map.event_type,\n            sdk_event.event_type AS sdk_event_type,\n            sdk_event.sdk_name\n    FROM  \tad_group, ad_group_event_map, sdk_event\n    WHERE \tad_group.id = ad_group_event_map.ad_group_id\n    AND\t \tad_group_event_map.sdk_event_id = sdk_event.id'}, 'role': 'process', 'type': 'sql'}]"
736,s3://kcd-de-production/service/message/logs/click_log,process:::valid_click_log:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_messages.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'conv_log.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_init.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""    SELECT\n            timestamp,\n            user_id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            created_at_date\n    FROM    click_log\n    WHERE   created_at_date between '2020-09-01' AND '2020-10-12'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""    SELECT\n            timestamp,\n            user_id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            created_at_date\n    FROM    click_log\n    WHERE   created_at_date between '2021-01-19' AND '2021-01-29'""}, 'role': 'process', 'type': 'sql'}]"
737,s3://kcd-de-production/service/message/logs/click_log,process:::click_users:::message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_messages.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'conv_log.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_init.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_user_messages.json', 'options': {'sql': ""SELECT user_id, collect_set(campaign_id) AS campaign_ids, collect_set(ad_group_id) AS ad_group_ids\nFROM click_log\nWHERE created_at_date >= '2020-10-30'\nAND user_type = 'cashnote'\nAND status = true\nGROUP BY user_id""}, 'role': 'process', 'type': 'sql'}]"
738,s3://kcd-de-production/service/message/logs/click_log,process:::click_log_aggr:::message_stat_init,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_messages.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'conv_log.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_init.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'sql': ""SELECT  id_type, id,\n        count(1) AS click_cnt,\n        count(distinct(user_id)) AS click_user_cnt\nFROM (\n    SELECT meta.*, user_id\n    FROM (\n        SELECT  explode(meta_arr) AS meta, user_id\n        FROM (\n            SELECT  array(\n                        named_struct('id_type', 'campaign_id', 'id', campaign_id),\n                        named_struct('id_type', 'ad_group_id', 'id', ad_group_id),\n                        named_struct('id_type', 'creative_id', 'id', creative_id)\n                    ) AS meta_arr,\n                    user_id,\n                    row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n            FROM click_log\n            WHERE created_at_date between '2020-01-01' AND '2021-01-14'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': ""SELECT  id_type, id,\n        count(1) AS click_cnt,\n        count(distinct(user_id)) AS click_user_cnt\nFROM (\n    SELECT meta.*, user_id\n    FROM (\n        SELECT  explode(meta_arr) AS meta, user_id\n        FROM (\n            SELECT  array(\n                        named_struct('id_type', 'campaign_id', 'id', campaign_id),\n                        named_struct('id_type', 'ad_group_id', 'id', ad_group_id),\n                        named_struct('id_type', 'creative_id', 'id', creative_id)\n                    ) AS meta_arr,\n                    user_id,\n                    row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n            FROM click_log\n            WHERE created_at_date between '2020-01-01' AND '2021-01-16'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id""}, 'role': 'process', 'type': 'sql'}]"
739,s3://kcd-de-production/service/message/logs/click_log,process:::click_log_aggr:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'cashnote_user_messages.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'conv_log.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_init.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/click_log', 'schema': 'type STRING, timestamp LONG, _event_id STRING, campaign_id STRING, ad_group_id STRING, creative_id STRING, user_id LONG, status BOOLEAN, sdk_type STRING, user_type STRING, ad_group_type STRING'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT  id_type, id,\n        count(1) AS click_cnt,\n        count(distinct(user_id)) AS click_user_cnt\nFROM (\n    SELECT meta.*, user_id\n    FROM (\n        SELECT  explode(meta_arr) AS meta, user_id\n        FROM (\n            SELECT  array(\n                        named_struct('id_type', 'campaign_id', 'id', campaign_id),\n                        named_struct('id_type', 'ad_group_id', 'id', ad_group_id),\n                        named_struct('id_type', 'creative_id', 'id', creative_id)\n                    ) AS meta_arr,\n                    user_id,\n                    row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n            FROM click_log\n            WHERE created_at_date = '2021-01-29'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id""}, 'role': 'process', 'type': 'sql'}]"
740,s3://kcd-data/raw/catalog_v2/raw/tb=kcd_cashnote_web,process:::valid_event:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=kcd_cashnote_web'}, 'role': 'source', 'type': 'file'}, {'filename': 'click_log.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=kcd_cashnote_web', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)\nAND     created_at_date between '2020-09-01' AND '2020-10-12'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  _event_id, 'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_cashnote_ruby' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_ruby' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)""}, 'role': 'process', 'type': 'sql'}]"
741,s3://kcd-data/raw/catalog_v2/raw/tb=kcd_cashnote_web,process:::cashnote_web_click:::click_log_to_es,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=kcd_cashnote_web'}, 'role': 'source', 'type': 'file'}, {'filename': 'click_log.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=kcd_cashnote_web', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'click_log.json', 'options': {'sql': ""    SELECT  *\n    FROM (\n            SELECT\n                    'click' AS type,\n                    timestamp,\n                    parse_url(current_url, 'QUERY', 'campaign_id') AS campaign_id,\n                    parse_url(current_url, 'QUERY', 'ad_group_id') AS ad_group_id,\n                    parse_url(current_url, 'QUERY', 'creative_id') AS creative_id,\n                    user_id,\n                    true AS status,\n                    'cashnote_web' AS sdk_type\n            FROM (\n                    SELECT  timestamp,\n                            prop_user_id AS user_id,\n                            `prop_$current_url` AS current_url,\n                            row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n                    FROM    tb_kcd_cashnote_web\n                    WHERE   event = '$web_event'\n                    AND     `prop_$event_type` = 'pageview'\n                    AND     prop_user_id IS NOT NULL\n            )\n            WHERE rank = 1\n    )\n    WHERE   campaign_id IS NOT NULL\n    AND     ad_group_id IS NOT NULL\n    AND     creative_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
742,s3://kcd-data/raw/catalog_v2/raw/tb=kcd_redbird_web,process:::valid_event:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=kcd_redbird_web', 'schema': '_event_id STRING, timestamp LONG, event STRING, `prop_$event_type` STRING, prop_user_id LONG, `prop_$current_url`STRING'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)\nAND     created_at_date between '2020-09-01' AND '2020-10-12'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  _event_id, 'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_cashnote_ruby' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_ruby' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)""}, 'role': 'process', 'type': 'sql'}]"
743,s3://kcd-data/raw/catalog_v2/raw/tb=kcd_bluebird_web,process:::valid_event:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=kcd_bluebird_web', 'schema': '_event_id STRING, timestamp LONG, event STRING, `prop_$event_type` STRING, prop_cashnote_user_id LONG, prop_paynote_user_id LONG, `prop_$current_url`STRING'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)\nAND     created_at_date between '2020-09-01' AND '2020-10-12'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  _event_id, 'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_cashnote_ruby' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_ruby' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)""}, 'role': 'process', 'type': 'sql'}]"
744,process:::event_mapping:::conv_log,process:::cur_conv_log:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'sql': '    SELECT \tcampaign_id, ad_group_id, ad_group.user_type,\n            ad_group_event_map.event_type,\n            sdk_event.event_type AS sdk_event_type,\n            sdk_event.sdk_name\n    FROM  \tad_group, ad_group_event_map, sdk_event\n    WHERE \tad_group.id = ad_group_event_map.ad_group_id\n    AND\t \tad_group_event_map.sdk_event_id = sdk_event.id'}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': '    SELECT \tcampaign_id, ad_group_id, ad_group.user_type,\n            ad_group_event_map.event_type,\n            sdk_event.event_type AS sdk_event_type,\n            sdk_event.sdk_name\n    FROM  \tad_group, ad_group_event_map, sdk_event\n    WHERE \tad_group.id = ad_group_event_map.ad_group_id\n    AND\t \tad_group_event_map.sdk_event_id = sdk_event.id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  *\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY timestamp) AS rank\n        FROM (\n                SELECT\n                        valid_event.timestamp,\n                        IF(event_mapping.user_type = 'cashnote', valid_event.cashnote_user_id, valid_event.paynote_user_id) AS user_id,\n                        valid_event.event,\n                        event_mapping.campaign_id,\n                        event_mapping.ad_group_id,\n                        event_mapping.event_type,\n                        event_mapping.sdk_name\n                FROM    valid_event\n                JOIN    event_mapping\n                ON      valid_event.event = event_mapping.sdk_event_type\n                AND     valid_event.sdk_name = event_mapping.sdk_name\n        )\n)\nWHERE rank = 1""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  *\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY timestamp) AS rank\n        FROM (\n                SELECT\n                        valid_event._event_id,\n                        valid_event.timestamp,\n                        IF(event_mapping.user_type = 'cashnote', valid_event.cashnote_user_id, valid_event.paynote_user_id) AS user_id,\n                        valid_event.event,\n                        event_mapping.campaign_id,\n                        event_mapping.ad_group_id,\n                        event_mapping.event_type,\n                        event_mapping.sdk_name\n                FROM    valid_event\n                JOIN    event_mapping\n                ON      valid_event.event = event_mapping.sdk_event_type\n                AND     valid_event.sdk_name = event_mapping.sdk_name\n        )\n)\nWHERE rank = 1""}, 'role': 'process', 'type': 'sql'}]"
745,process:::valid_click_log:::conv_log,process:::conv_with_click_log:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'sql': ""    SELECT\n            timestamp,\n            user_id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            created_at_date\n    FROM    click_log\n    WHERE   created_at_date between '2020-09-01' AND '2020-10-12'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""    SELECT\n            timestamp,\n            user_id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            created_at_date\n    FROM    click_log\n    WHERE   created_at_date between '2021-01-19' AND '2021-01-29'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT\n         from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd') AS created_at_date,\n         conv.timestamp,\n         conv.event_type,\n         conv.user_id,\n         conv.sdk_name,\n         click.timestamp AS click_timestamp,\n         click.campaign_id,\n         click.ad_group_id,\n         click.creative_id,\n         (conv.timestamp - click.timestamp) AS conv_duration_millis,\n         datediff(\n             from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd'),\n             from_unixtime(click.timestamp/1000, 'yyyy-MM-dd')\n         ) AS diff_days\nFROM    valid_click_log AS click\nJOIN    cur_conv_log AS conv\nON click.campaign_id = conv.campaign_id\nAND click.ad_group_id = conv.ad_group_id\nAND click.user_id = conv.user_id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT\n         from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd') AS created_at_date,\n         conv.timestamp,\n         conv._event_id,\n         conv.event_type,\n         conv.user_id,\n         conv.sdk_name,\n         click.timestamp AS click_timestamp,\n         click.campaign_id,\n         click.ad_group_id,\n         click.creative_id,\n         (conv.timestamp - click.timestamp) AS conv_duration_millis,\n         datediff(\n             from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd'),\n             from_unixtime(click.timestamp/1000, 'yyyy-MM-dd')\n         ) AS diff_days\nFROM    valid_click_log AS click\nJOIN    valid_conv_log AS conv\nON click.campaign_id = conv.campaign_id\nAND click.ad_group_id = conv.ad_group_id\nAND click.user_id = conv.user_id""}, 'role': 'process', 'type': 'sql'}]"
746,process:::valid_event:::conv_log,process:::cur_conv_log:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)\nAND     created_at_date between '2020-09-01' AND '2020-10-12'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  _event_id, 'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_cashnote_ruby' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_ruby' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  *\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY timestamp) AS rank\n        FROM (\n                SELECT\n                        valid_event.timestamp,\n                        IF(event_mapping.user_type = 'cashnote', valid_event.cashnote_user_id, valid_event.paynote_user_id) AS user_id,\n                        valid_event.event,\n                        event_mapping.campaign_id,\n                        event_mapping.ad_group_id,\n                        event_mapping.event_type,\n                        event_mapping.sdk_name\n                FROM    valid_event\n                JOIN    event_mapping\n                ON      valid_event.event = event_mapping.sdk_event_type\n                AND     valid_event.sdk_name = event_mapping.sdk_name\n        )\n)\nWHERE rank = 1""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  *\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY timestamp) AS rank\n        FROM (\n                SELECT\n                        valid_event._event_id,\n                        valid_event.timestamp,\n                        IF(event_mapping.user_type = 'cashnote', valid_event.cashnote_user_id, valid_event.paynote_user_id) AS user_id,\n                        valid_event.event,\n                        event_mapping.campaign_id,\n                        event_mapping.ad_group_id,\n                        event_mapping.event_type,\n                        event_mapping.sdk_name\n                FROM    valid_event\n                JOIN    event_mapping\n                ON      valid_event.event = event_mapping.sdk_event_type\n                AND     valid_event.sdk_name = event_mapping.sdk_name\n        )\n)\nWHERE rank = 1""}, 'role': 'process', 'type': 'sql'}]"
747,process:::cur_conv_log:::conv_log,process:::conv_with_click_log:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  *\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY timestamp) AS rank\n        FROM (\n                SELECT\n                        valid_event.timestamp,\n                        IF(event_mapping.user_type = 'cashnote', valid_event.cashnote_user_id, valid_event.paynote_user_id) AS user_id,\n                        valid_event.event,\n                        event_mapping.campaign_id,\n                        event_mapping.ad_group_id,\n                        event_mapping.event_type,\n                        event_mapping.sdk_name\n                FROM    valid_event\n                JOIN    event_mapping\n                ON      valid_event.event = event_mapping.sdk_event_type\n                AND     valid_event.sdk_name = event_mapping.sdk_name\n        )\n)\nWHERE rank = 1""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  *\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY timestamp) AS rank\n        FROM (\n                SELECT\n                        valid_event._event_id,\n                        valid_event.timestamp,\n                        IF(event_mapping.user_type = 'cashnote', valid_event.cashnote_user_id, valid_event.paynote_user_id) AS user_id,\n                        valid_event.event,\n                        event_mapping.campaign_id,\n                        event_mapping.ad_group_id,\n                        event_mapping.event_type,\n                        event_mapping.sdk_name\n                FROM    valid_event\n                JOIN    event_mapping\n                ON      valid_event.event = event_mapping.sdk_event_type\n                AND     valid_event.sdk_name = event_mapping.sdk_name\n        )\n)\nWHERE rank = 1""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT\n         from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd') AS created_at_date,\n         conv.timestamp,\n         conv.event_type,\n         conv.user_id,\n         conv.sdk_name,\n         click.timestamp AS click_timestamp,\n         click.campaign_id,\n         click.ad_group_id,\n         click.creative_id,\n         (conv.timestamp - click.timestamp) AS conv_duration_millis,\n         datediff(\n             from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd'),\n             from_unixtime(click.timestamp/1000, 'yyyy-MM-dd')\n         ) AS diff_days\nFROM    valid_click_log AS click\nJOIN    cur_conv_log AS conv\nON click.campaign_id = conv.campaign_id\nAND click.ad_group_id = conv.ad_group_id\nAND click.user_id = conv.user_id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT\n         from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd') AS created_at_date,\n         conv.timestamp,\n         conv._event_id,\n         conv.event_type,\n         conv.user_id,\n         conv.sdk_name,\n         click.timestamp AS click_timestamp,\n         click.campaign_id,\n         click.ad_group_id,\n         click.creative_id,\n         (conv.timestamp - click.timestamp) AS conv_duration_millis,\n         datediff(\n             from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd'),\n             from_unixtime(click.timestamp/1000, 'yyyy-MM-dd')\n         ) AS diff_days\nFROM    valid_click_log AS click\nJOIN    valid_conv_log AS conv\nON click.campaign_id = conv.campaign_id\nAND click.ad_group_id = conv.ad_group_id\nAND click.user_id = conv.user_id""}, 'role': 'process', 'type': 'sql'}]"
748,process:::cur_conv_log:::conv_log,process:::valid_conv_log:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  *\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY timestamp) AS rank\n        FROM (\n                SELECT\n                        valid_event.timestamp,\n                        IF(event_mapping.user_type = 'cashnote', valid_event.cashnote_user_id, valid_event.paynote_user_id) AS user_id,\n                        valid_event.event,\n                        event_mapping.campaign_id,\n                        event_mapping.ad_group_id,\n                        event_mapping.event_type,\n                        event_mapping.sdk_name\n                FROM    valid_event\n                JOIN    event_mapping\n                ON      valid_event.event = event_mapping.sdk_event_type\n                AND     valid_event.sdk_name = event_mapping.sdk_name\n        )\n)\nWHERE rank = 1""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  *\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY timestamp) AS rank\n        FROM (\n                SELECT\n                        valid_event._event_id,\n                        valid_event.timestamp,\n                        IF(event_mapping.user_type = 'cashnote', valid_event.cashnote_user_id, valid_event.paynote_user_id) AS user_id,\n                        valid_event.event,\n                        event_mapping.campaign_id,\n                        event_mapping.ad_group_id,\n                        event_mapping.event_type,\n                        event_mapping.sdk_name\n                FROM    valid_event\n                JOIN    event_mapping\n                ON      valid_event.event = event_mapping.sdk_event_type\n                AND     valid_event.sdk_name = event_mapping.sdk_name\n        )\n)\nWHERE rank = 1""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'conv_log.json', 'options': {'sql': ""SELECT\n        cur_conv_log.*\nFROM    cur_conv_log\nLEFT OUTER JOIN (\n    SELECT  *\n    FROM  conv_log\n    WHERE   created_at_date between '2021-01-19' AND '2021-01-29'\n) AS prev_conv_log\nON  cur_conv_log.campaign_id = prev_conv_log.campaign_id\nAND cur_conv_log.ad_group_id = prev_conv_log.ad_group_id\nAND cur_conv_log.user_id = prev_conv_log.user_id\nWHERE  prev_conv_log.user_id IS NULL\n""}, 'role': 'process', 'type': 'sql'}]"
749,process:::conv_with_click_log:::conv_log,process:::attribution_window:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT\n         from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd') AS created_at_date,\n         conv.timestamp,\n         conv.event_type,\n         conv.user_id,\n         conv.sdk_name,\n         click.timestamp AS click_timestamp,\n         click.campaign_id,\n         click.ad_group_id,\n         click.creative_id,\n         (conv.timestamp - click.timestamp) AS conv_duration_millis,\n         datediff(\n             from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd'),\n             from_unixtime(click.timestamp/1000, 'yyyy-MM-dd')\n         ) AS diff_days\nFROM    valid_click_log AS click\nJOIN    cur_conv_log AS conv\nON click.campaign_id = conv.campaign_id\nAND click.ad_group_id = conv.ad_group_id\nAND click.user_id = conv.user_id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT\n         from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd') AS created_at_date,\n         conv.timestamp,\n         conv._event_id,\n         conv.event_type,\n         conv.user_id,\n         conv.sdk_name,\n         click.timestamp AS click_timestamp,\n         click.campaign_id,\n         click.ad_group_id,\n         click.creative_id,\n         (conv.timestamp - click.timestamp) AS conv_duration_millis,\n         datediff(\n             from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd'),\n             from_unixtime(click.timestamp/1000, 'yyyy-MM-dd')\n         ) AS diff_days\nFROM    valid_click_log AS click\nJOIN    valid_conv_log AS conv\nON click.campaign_id = conv.campaign_id\nAND click.ad_group_id = conv.ad_group_id\nAND click.user_id = conv.user_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': 'SELECT  *\nFROM (\n    SELECT  *,\n            row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY conv_duration_millis) AS rank\n    FROM    conv_with_click_log\n    WHERE   diff_days between 0 AND 7\n    AND     conv_duration_millis > 0\n)\nWHERE   rank = 1'}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': 'SELECT  *\nFROM (\n    SELECT  *,\n            row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY conv_duration_millis) AS rank\n    FROM    conv_with_click_log\n    WHERE   diff_days between 0 AND 7\n    AND     conv_duration_millis > 0\n)\nWHERE   rank = 1'}, 'role': 'process', 'type': 'sql'}]"
750,process:::attribution_window:::conv_log,s3://kcd-de-production/service/message/logs/conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'sql': 'SELECT  *\nFROM (\n    SELECT  *,\n            row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY conv_duration_millis) AS rank\n    FROM    conv_with_click_log\n    WHERE   diff_days between 0 AND 7\n    AND     conv_duration_millis > 0\n)\nWHERE   rank = 1'}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': 'SELECT  *\nFROM (\n    SELECT  *,\n            row_number() OVER (PARTITION BY user_id, ad_group_id ORDER BY conv_duration_millis) AS rank\n    FROM    conv_with_click_log\n    WHERE   diff_days between 0 AND 7\n    AND     conv_duration_millis > 0\n)\nWHERE   rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'conv_log_init.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/logs/conv_log', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'conv_log.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/conv_log', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'conv_log.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/service/message/logs/conv_log', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'conv_log_to_es.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/conv_log', 'partition_keys': 'created_at_date', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]"
751,s3://kcd-de-production/service/message/logs/conv_log,process:::valid_conv_log:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/logs/conv_log', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'conv_log.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/conv_log', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'conv_log.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/service/message/logs/conv_log', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'conv_log_to_es.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/conv_log', 'partition_keys': 'created_at_date', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'conv_log.json', 'options': {'sql': ""SELECT\n        cur_conv_log.*\nFROM    cur_conv_log\nLEFT OUTER JOIN (\n    SELECT  *\n    FROM  conv_log\n    WHERE   created_at_date between '2021-01-19' AND '2021-01-29'\n) AS prev_conv_log\nON  cur_conv_log.campaign_id = prev_conv_log.campaign_id\nAND cur_conv_log.ad_group_id = prev_conv_log.ad_group_id\nAND cur_conv_log.user_id = prev_conv_log.user_id\nWHERE  prev_conv_log.user_id IS NULL\n""}, 'role': 'process', 'type': 'sql'}]"
752,s3://kcd-de-production/service/message/logs/conv_log,process:::formatted_conv:::conv_log_to_es,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_init.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/logs/conv_log', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'conv_log.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/conv_log', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'conv_log.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/service/message/logs/conv_log', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'conv_log_to_es.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/conv_log', 'partition_keys': 'created_at_date', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'conv_log_to_es.json', 'options': {'sql': ""    SELECT\n            'conversion' AS type,\n            cast(timestamp/1000 as timestamp) AS timestamp,\n            _event_id,\n            click_timestamp,\n            event_type,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            user_id,\n            sdk_name AS sdk_type,\n            conv_duration_millis,\n            diff_days,\n            true AS status\n    FROM    conv_log""}, 'role': 'process', 'type': 'sql'}]"
753,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=withdraw,process:::bank_transactions:::business_bank,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=withdraw'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=withdraw', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'business_bank.json', 'options': {'sql': ""SELECT    business_id,\n          array_distinct(\n              flatten(\n                  collect_list(contents)\n              )\n          ) AS contents\nFROM (\n        SELECT    business_id, contents\n        FROM      bank_withdraw\n        WHERE     date_id     between '2020-07-31' AND '2021-01-27'\n\n        UNION     ALL\n\n        SELECT    business_id, contents\n        FROM      bank_deposit\n        WHERE     date_id     between '2020-07-31' AND '2021-01-27'\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]"
754,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=withdraw,process:::invalid_account_numbers:::business_bank,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=withdraw'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=withdraw', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'business_bank.json', 'options': {'sql': 'SELECT    business_id,\n          collect_set(account_number) account_numbers\nFROM (\n    SELECT    bank_accounts_src.business_id, bank_accounts_src.account_number\n    FROM      bank_accounts_src\n    LEFT OUTER JOIN (\n        SELECT    DISTINCT business_id, account_number\n        FROM (\n                SELECT    business_id, explode(account_numbers) AS account_number\n                FROM      bank_withdraw\n\n                UNION     ALL\n\n                SELECT    business_id, explode(account_numbers) AS account_number\n                FROM      bank_deposit\n        )\n    ) AS t\n    ON bank_accounts_src.account_number = t.account_number\n    AND bank_accounts_src.business_id = t.business_id\n    WHERE t.account_number IS NULL\n)\nGROUP BY business_id'}, 'role': 'process', 'type': 'sql'}]"
755,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=deposit,process:::bank_transactions:::business_bank,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=deposit'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=deposit', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'business_bank.json', 'options': {'sql': ""SELECT    business_id,\n          array_distinct(\n              flatten(\n                  collect_list(contents)\n              )\n          ) AS contents\nFROM (\n        SELECT    business_id, contents\n        FROM      bank_withdraw\n        WHERE     date_id     between '2020-07-31' AND '2021-01-27'\n\n        UNION     ALL\n\n        SELECT    business_id, contents\n        FROM      bank_deposit\n        WHERE     date_id     between '2020-07-31' AND '2021-01-27'\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]"
756,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=deposit,process:::invalid_account_numbers:::business_bank,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=deposit'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=deposit', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'business_bank.json', 'options': {'sql': 'SELECT    business_id,\n          collect_set(account_number) account_numbers\nFROM (\n    SELECT    bank_accounts_src.business_id, bank_accounts_src.account_number\n    FROM      bank_accounts_src\n    LEFT OUTER JOIN (\n        SELECT    DISTINCT business_id, account_number\n        FROM (\n                SELECT    business_id, explode(account_numbers) AS account_number\n                FROM      bank_withdraw\n\n                UNION     ALL\n\n                SELECT    business_id, explode(account_numbers) AS account_number\n                FROM      bank_deposit\n        )\n    ) AS t\n    ON bank_accounts_src.account_number = t.account_number\n    AND bank_accounts_src.business_id = t.business_id\n    WHERE t.account_number IS NULL\n)\nGROUP BY business_id'}, 'role': 'process', 'type': 'sql'}]"
757,process:::bank_accounts:::business_bank,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=bank/name=bank_accounts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_bank.json', 'options': {'sql': ""  SELECT  bank_accounts_src.business_id,\n          collect_set(concat(bank_name, '_', account_type)) AS bank_names\n  FROM    bank_accounts_src\n  JOIN    credentials_src\n  ON      bank_accounts_src.credential_id = credentials_src.id\n  WHERE   credentials_src.status != 2\n  GROUP BY bank_accounts_src.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_bank.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=bank/name=bank_accounts'}, 'role': 'sink', 'type': 'file'}]"
758,process:::bank_transactions:::business_bank,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=bank/name=bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_bank.json', 'options': {'sql': ""SELECT    business_id,\n          array_distinct(\n              flatten(\n                  collect_list(contents)\n              )\n          ) AS contents\nFROM (\n        SELECT    business_id, contents\n        FROM      bank_withdraw\n        WHERE     date_id     between '2020-07-31' AND '2021-01-27'\n\n        UNION     ALL\n\n        SELECT    business_id, contents\n        FROM      bank_deposit\n        WHERE     date_id     between '2020-07-31' AND '2021-01-27'\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_bank.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=bank/name=bank_transactions'}, 'role': 'sink', 'type': 'file'}]"
759,process:::invalid_account_numbers:::business_bank,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=bank/name=invalid_account_numbers,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_bank.json', 'options': {'sql': 'SELECT    business_id,\n          collect_set(account_number) account_numbers\nFROM (\n    SELECT    bank_accounts_src.business_id, bank_accounts_src.account_number\n    FROM      bank_accounts_src\n    LEFT OUTER JOIN (\n        SELECT    DISTINCT business_id, account_number\n        FROM (\n                SELECT    business_id, explode(account_numbers) AS account_number\n                FROM      bank_withdraw\n\n                UNION     ALL\n\n                SELECT    business_id, explode(account_numbers) AS account_number\n                FROM      bank_deposit\n        )\n    ) AS t\n    ON bank_accounts_src.account_number = t.account_number\n    AND bank_accounts_src.business_id = t.business_id\n    WHERE t.account_number IS NULL\n)\nGROUP BY business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_bank.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=bank/name=invalid_account_numbers'}, 'role': 'sink', 'type': 'file'}]"
760,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts,process:::hometax_sales_cash_receipts:::hometax_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_sales.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count\n  FROM (\n          SELECT\n                  business_id,\n                  date_trunc('MONTH', sold_at) AS timestamp,\n                  amount\n          FROM    hometax_sales_cash_receipts_src\n          WHERE   business_id IS NOT NULL\n          AND     sold_at between '2017-01-01' AND '2021-01-24'\n  )\n  GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
761,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
762,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices,process:::hometax_sales_invoices:::hometax_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_sales.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count,\n          collect_set(customer_business_classification) AS customer_business_classifications,\n          collect_set(customer_business_category) AS customer_business_categories,\n          collect_set(item_note) AS item_notes\n  FROM (\n          SELECT\n                  business_id,\n                  date_trunc('MONTH', issued_at) AS timestamp,\n                  amount,\n                  customer_business_classification,\n                  customer_business_category,\n                  item_note\n          FROM    hometax_sales_invoices_src\n          WHERE   business_id IS NOT NULL\n          AND     issued_at between '2017-01-01' AND '2021-01-24'\n  )\n  GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
763,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
764,process:::hometax_card_sales:::hometax_sales,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=sales_card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_sales.json', 'options': {'sql': ""  SELECT\n          month AS timestamp,\n          business_id,\n          date_format(date_trunc('MONTH', month), 'yyyy-MM-dd') AS date_id,\n          amount AS amount_sum,\n          count AS tx_count\n  FROM    hometax_card_sales_src\n  WHERE   business_id IS NOT NULL\n  AND     month between '2017-01-01' AND '2021-01-24'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=sales_card', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
765,process:::hometax_sales_cash_receipts:::hometax_sales,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=sales_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_sales.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count\n  FROM (\n          SELECT\n                  business_id,\n                  date_trunc('MONTH', sold_at) AS timestamp,\n                  amount\n          FROM    hometax_sales_cash_receipts_src\n          WHERE   business_id IS NOT NULL\n          AND     sold_at between '2017-01-01' AND '2021-01-24'\n  )\n  GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=sales_cash_receipts', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
766,process:::hometax_sales_invoices:::hometax_sales,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=sales_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_sales.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count,\n          collect_set(customer_business_classification) AS customer_business_classifications,\n          collect_set(customer_business_category) AS customer_business_categories,\n          collect_set(item_note) AS item_notes\n  FROM (\n          SELECT\n                  business_id,\n                  date_trunc('MONTH', issued_at) AS timestamp,\n                  amount,\n                  customer_business_classification,\n                  customer_business_category,\n                  item_note\n          FROM    hometax_sales_invoices_src\n          WHERE   business_id IS NOT NULL\n          AND     issued_at between '2017-01-01' AND '2021-01-24'\n  )\n  GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=sales_invoices', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
767,s3://kcd-de-production/data_cubes/fact/time_unit=DAY/name=message_send_stat/,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_send_stat_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/fact/time_unit=DAY/name=message_send_stat/date_id=2020-09-25'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
768,place_reviews,process:::merge:::business_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=place_reviews', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=place_reviews', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
769,place_comments,process:::merge:::business_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=place_comments', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=place_comments', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
770,delivery_app_comments,process:::merge:::business_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=delivery_app_comments', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=delivery_app_comments', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'business_id,date_id'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
771,process:::merge:::business_stat,s3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=business_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}, {'filename': 'business_stat.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'business_id_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=business_stats', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=business_stats'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=business_stats', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
772,s3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=business_stats,process:::transform:::cashnote_user_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_id_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=business_stats', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=business_stats'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=business_stats', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'cashnote_user_stat.json', 'options': {'sql': '  SELECT    u.user_id,\n            business_stats.*\n  FROM      business_stats\n  JOIN  (\n      SELECT  *, explode(memberships.memberships) AS membership\n      FROM  users\n  ) u\n  ON    business_stats.business_id = u.membership.business_id\n'}, 'role': 'process', 'type': 'sql'}]"
773,s3://kcd-logs-raw/dev/dumps/2019-08-27/card_sales_purchases,process:::current_purchases:::purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_initial.json', 'options': {'paths': 's3://kcd-logs-raw/dev/dumps/2019-08-27/card_sales_purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'purchases_initial.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(acquirer_name) AS acquirer_name,\n          CAST(amount AS int) AS amount,\n          trim(authorization_number) AS authorization_number,\n          CAST(base_fee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(card_number) AS card_number,\n          CAST(card_type AS int) AS card_type,\n          k.uuid AS credential_key,\n          CAST(etc_fee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(issuer_name) AS issuer_name,\n          mask_card_number(trim(card_number)) AS masked_card_number,\n          trim(merchant_number) AS merchant_number,\n          to_timestamp(unix_timestamp(paid_at , 'yyyyMMdd')) AS paid_at,\n          CAST(payment AS int) AS payment,\n          CAST(point_fee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(purchased_at , 'yyyyMMdd')) AS purchased_at,\n          CAST(null AS string) AS scraping_type,\n          to_timestamp(unix_timestamp(transacted_at , 'yyyyMMdd')) AS transacted_at,\n          CAST(vat_fee AS int) AS vat_fee,\n          a.created_at,\n          a.updated_at\n  FROM    current_purchases_raw a INNER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n)""}, 'role': 'process', 'type': 'sql'}]"
774,after_purchases_raw,process:::after_purchases:::purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-logs-raw/dev/card_sales/incremental/purchases', 'format': 'parquet', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=30,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=29,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=28,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=27,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=26,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=25,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=24,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=23,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=22,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=21,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=20,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=19,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=18,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=17,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=16,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=15,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=14,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=13,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=12,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=11,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=10,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=09,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=08,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=07,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=06,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=05,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=04,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=03,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=02,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=01,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=11/day=30', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=31,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=30,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=29,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=28,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=27,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=26,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=25,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=24,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=23,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=22', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'purchases_initial.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
775,after_purchases_raw,process:::after_purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-logs-raw/dev/card_sales/incremental/purchases', 'format': 'parquet', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=30,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=29,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=28,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=27,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=26,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=25,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=24,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=23,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=22,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=21,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=20,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=19,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=18,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=17,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=16,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=15,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=14,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=13,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=12,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=11,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=10,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=09,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=08,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=07,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=06,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=05,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=04,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=03,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=02,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=12/day=01,s3://staging-card-sales/staging-card-sales-purchases/year=2020/month=11/day=30', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=31,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=30,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=29,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=28,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=27,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=26,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=25,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=24,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=23,s3://staging-card-sales/staging-card-sales-purchases/year=2019/month=12/day=22', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n      CAST(pcaamt AS int) AS amount,\n      trim(IF (authno = '', null, authno)) AS authorization_number,\n      CAST(basicfee AS int) AS base_fee,\n      CAST(a.business_id AS int) AS business_id,\n      trim(replace(cardno, '-', '')) AS card_number,\n      CAST(trim(cardclss) AS int) AS card_type,\n      COALESCE(credential_key, k.uuid) AS credential_key,\n      CAST(etcfee AS int) AS etc_fee,\n      CAST(fee AS int) AS fee,\n      trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n      mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n      trim(IF (merno = '', null, merno)) AS merchant_number,\n      to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n      CAST(pymamt AS int) AS payment,\n      CAST(pointfee AS int) AS point_fee,\n      to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n      scraping_type,\n      to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n      CAST(vatfee AS int) AS vat_fee,\n      to_timestamp(\n       concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n      ) AS created_at,\n      to_timestamp(\n       concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n      ) AS updated_at,\n      created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
776,catalog_purchases_raw,process:::catalog_purchases_filtered:::purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_purchases', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_purchases', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_purchases', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'purchases_initial.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_purchases_raw\n WHERE    created_at_date >= '2020-12-25'\n AND      created_at_date < '2021-01-25'""}, 'role': 'process', 'type': 'sql'}]"
777,catalog_purchases_raw,process:::catalog_purchases_filtered:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_purchases', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_purchases', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_purchases', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_purchases_raw\n WHERE    created_at_date >= '2020-12-23'\n AND      created_at_date < '2020-12-31'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_purchases_raw\n WHERE    created_at_date >= '2019-12-22'\n AND      created_at_date < '2020-01-01'""}, 'role': 'process', 'type': 'sql'}]"
778,process:::current_purchases:::purchases,process:::reformat_purchases:::purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_initial.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(acquirer_name) AS acquirer_name,\n          CAST(amount AS int) AS amount,\n          trim(authorization_number) AS authorization_number,\n          CAST(base_fee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(card_number) AS card_number,\n          CAST(card_type AS int) AS card_type,\n          k.uuid AS credential_key,\n          CAST(etc_fee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(issuer_name) AS issuer_name,\n          mask_card_number(trim(card_number)) AS masked_card_number,\n          trim(merchant_number) AS merchant_number,\n          to_timestamp(unix_timestamp(paid_at , 'yyyyMMdd')) AS paid_at,\n          CAST(payment AS int) AS payment,\n          CAST(point_fee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(purchased_at , 'yyyyMMdd')) AS purchased_at,\n          CAST(null AS string) AS scraping_type,\n          to_timestamp(unix_timestamp(transacted_at , 'yyyyMMdd')) AS transacted_at,\n          CAST(vat_fee AS int) AS vat_fee,\n          a.created_at,\n          a.updated_at\n  FROM    current_purchases_raw a INNER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'purchases_initial.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      (\n  SELECT * FROM current_purchases\n\n  UNION ALL\n\n  SELECT * FROM after_purchases\n) a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}]"
779,process:::catalog_purchases_filtered:::purchases,process:::after_purchases:::purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_initial.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_purchases_raw\n WHERE    created_at_date >= '2020-12-25'\n AND      created_at_date < '2021-01-25'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'purchases_initial.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
780,process:::after_purchases:::purchases,process:::reformat_purchases:::purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_initial.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'purchases_initial.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      (\n  SELECT * FROM current_purchases\n\n  UNION ALL\n\n  SELECT * FROM after_purchases\n) a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}]"
781,process:::reformat_purchases:::purchases,process:::purchases:::purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_initial.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      (\n  SELECT * FROM current_purchases\n\n  UNION ALL\n\n  SELECT * FROM after_purchases\n) a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'purchases_initial.json', 'options': {'sql': '  SELECT    acquirer_name,\n            amount,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            etc_fee,\n            fee,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_delayed,\n            purchased_at,\n            scraping_type,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\n  FROM      (\n    SELECT    business_id,\n              credential_key,\n              authorization_number,\n              masked_card_number,\n              amount,\n              purchased_at,\n              paid_at,\n              MIN(acquirer_name) AS acquirer_name,\n              MIN(base_fee) AS base_fee,\n              MIN(card_number) AS card_number,\n              MIN(card_type) AS card_type,\n              MIN(etc_fee) AS etc_fee,\n              MIN(fee) AS fee,\n              MIN(issuer_name) AS issuer_name,\n              MIN(merchant_number) AS merchant_number,\n              MIN(payment) AS payment,\n              MIN(point_fee) AS point_fee,\n              MIN(purchase_delayed) AS purchase_delayed,\n              MIN(scraping_type) AS scraping_type,\n              MIN(transacted_at) AS transacted_at,\n              MIN(vat_fee) AS vat_fee,\n              MIN(created_at) AS created_at,\n              MIN(updated_at) AS updated_at,\n              MIN(created_at_date) AS created_at_date\n    FROM      reformat_purchases\n    GROUP BY  1, 2, 3, 4, 5, 6, 7\n  )'}, 'role': 'process', 'type': 'sql'}]"
782,process:::purchases:::purchases,s3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'purchases_initial.json', 'options': {'sql': '  SELECT    acquirer_name,\n            amount,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            etc_fee,\n            fee,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_delayed,\n            purchased_at,\n            scraping_type,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\n  FROM      (\n    SELECT    business_id,\n              credential_key,\n              authorization_number,\n              masked_card_number,\n              amount,\n              purchased_at,\n              paid_at,\n              MIN(acquirer_name) AS acquirer_name,\n              MIN(base_fee) AS base_fee,\n              MIN(card_number) AS card_number,\n              MIN(card_type) AS card_type,\n              MIN(etc_fee) AS etc_fee,\n              MIN(fee) AS fee,\n              MIN(issuer_name) AS issuer_name,\n              MIN(merchant_number) AS merchant_number,\n              MIN(payment) AS payment,\n              MIN(point_fee) AS point_fee,\n              MIN(purchase_delayed) AS purchase_delayed,\n              MIN(scraping_type) AS scraping_type,\n              MIN(transacted_at) AS transacted_at,\n              MIN(vat_fee) AS vat_fee,\n              MIN(created_at) AS created_at,\n              MIN(updated_at) AS updated_at,\n              MIN(created_at_date) AS created_at_date\n    FROM      reformat_purchases\n    GROUP BY  1, 2, 3, 4, 5, 6, 7\n  )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'add_seq_on_purchases.json', 'options': {'paths': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'purchases_initial.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/purchases', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
783,s3://kcd-data/dmp/sources/classification/kcd_places,process:::tx_with_meta:::weekly_aggr,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/dmp/sources/classification/kcd_places'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/dmp/sources/classification/kcd_places'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'weekly_aggr.json', 'options': {'sql': ""SELECT  /*+BROADCAST(p, t) */\n        tx.*,\n        kcd_classification_1_depth,\n        kcd_classification_2_depth,\n        kcd_classification_3_depth,\n        kcd_classification_4_depth,\n        kcd_classification_5_depth,\n        name,\n        type,\n        uid,\n        latitude,\n        longitude,\n        lot_address,\n        lot_address_1_depth,\n        lot_address_2_depth,\n        lot_address_3_depth\nFROM    approvals tx, places p, (\n  SELECT  business_id\n  FROM    targets_src\n  WHERE   transacted_at_month_count = 13\n) t\nWHERE   tx.business_id = p.business_id\nAND     p.business_id = t.business_id\nAND     tx.status = 0\nAND     transacted_at >= '2021-01-04' AND transacted_at < '2021-01-25'\nAND     created_at_date >= '2021-01-04' AND created_at_date < '2021-01-25'""}, 'role': 'process', 'type': 'sql'}]"
784,s3://kcd-data/dmp/sources/classification/kcd_places,process:::kcd_places:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/dmp/sources/classification/kcd_places'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/dmp/sources/classification/kcd_places'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT  business_id,\n        case\n          when coalesce(lot_address_1_depth, 'none') = '서울' then '서울특별시'\n          when coalesce(lot_address_1_depth, 'none') = '세종특별자치' then '세종특별자치시'\n          when coalesce(lot_address_1_depth, 'none') = '강원' then '강원도'\n          when coalesce(lot_address_1_depth, 'none') = '경기' then '경기도'\n          when coalesce(lot_address_1_depth, 'none') = '경남' then '경상남도'\n          when coalesce(lot_address_1_depth, 'none') = '경북' then '경상북도'\n          when coalesce(lot_address_1_depth, 'none') = '광주' then '광주광역시'\n          when coalesce(lot_address_1_depth, 'none') = '대구' then '대구광역시'\n          when coalesce(lot_address_1_depth, 'none') = '대전' then '대전광역시'\n          when coalesce(lot_address_1_depth, 'none') = '부산' then '부산광역시'\n          when coalesce(lot_address_1_depth, 'none') = '세종' then '세종특별자치시'\n          when coalesce(lot_address_1_depth, 'none') = '울산' then '울산광역시'\n          when coalesce(lot_address_1_depth, 'none') = '인천' then '인천광역시'\n          when coalesce(lot_address_1_depth, 'none') = '전남' then '전라남도'\n          when coalesce(lot_address_1_depth, 'none') = '전북' then '전라북도'\n          when coalesce(lot_address_1_depth, 'none') = '제주' then '제주특별자치도'\n          when coalesce(lot_address_1_depth, 'none') = '충남' then '충청남도'\n          when coalesce(lot_address_1_depth, 'none') = '충북' then '충청북도'\n          else coalesce(lot_address_1_depth, 'none')\n        end as lot_address_1_depth,\n        lot_address_2_depth,\n        lot_address_3_depth,\n        kcd_classification_1_depth,\n        kcd_classification_2_depth,\n        kcd_classification_3_depth\nFROM    (\n  SELECT    business_id,\n            split(kcd_classification, ' > ')[0] AS kcd_classification_1_depth,\n            split(kcd_classification, ' > ')[1] AS kcd_classification_2_depth,\n            split(kcd_classification, ' > ')[2] AS kcd_classification_3_depth,\n            split(lot_address, ' ')[0] AS lot_address_1_depth,\n            split(lot_address, ' ')[1] AS lot_address_2_depth,\n            split(lot_address, ' ')[2] AS lot_address_3_depth\n  FROM      kcd_places_src\n  WHERE     business_id is not null\n)""}, 'role': 'process', 'type': 'sql'}]"
785,s3://thrush/test/shon/corona/targets_20200331,process:::tx_with_meta:::weekly_aggr,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_semas_daily_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'weekly_aggr.json', 'options': {'sql': ""SELECT  /*+BROADCAST(p, t) */\n        tx.*,\n        kcd_classification_1_depth,\n        kcd_classification_2_depth,\n        kcd_classification_3_depth,\n        kcd_classification_4_depth,\n        kcd_classification_5_depth,\n        name,\n        type,\n        uid,\n        latitude,\n        longitude,\n        lot_address,\n        lot_address_1_depth,\n        lot_address_2_depth,\n        lot_address_3_depth\nFROM    approvals tx, places p, (\n  SELECT  business_id\n  FROM    targets_src\n  WHERE   transacted_at_month_count = 13\n) t\nWHERE   tx.business_id = p.business_id\nAND     p.business_id = t.business_id\nAND     tx.status = 0\nAND     transacted_at >= '2021-01-04' AND transacted_at < '2021-01-25'\nAND     created_at_date >= '2021-01-04' AND created_at_date < '2021-01-25'""}, 'role': 'process', 'type': 'sql'}]"
786,s3://thrush/test/shon/corona/targets_20200331,process:::weekly_txns:::build_corona_weekly_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_semas_daily_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_corona_weekly_stats.json', 'options': {'sql': ""SELECT  *,\n        weekofyear(transacted_at_week) AS week_of_year\nFROM    (\n  SELECT  st.business_id,\n          date_trunc('week', time) AS transacted_at_week,\n          SUM(card_sales_amount) AS amount_sum,\n          SUM(IF (hour(time) < 18 AND hour(time) >= 6, card_sales_amount, 0)) as day_time_amount_sum,\n          SUM(IF (hour(time) >= 18 OR hour(time) < 6, card_sales_amount, 0)) as night_time_amount_sum,\n          SUM(IF (weekday(time) > 4, card_sales_amount, 0)) as weekend_amount_sum,\n          SUM(IF (weekday(time) <= 4, card_sales_amount, 0)) as weekday_amount_sum,\n          SUM(card_sales_amount - returning_amount) as new_amount_sum,\n          SUM(returning_amount) as revisit_amount_sum,\n          SUM(card_sales_count) as tx_count,\n          MAX(st.place.lot_address_1_depth) as lot_address_1_depth,\n          MAX(st.place.lot_address_2_depth) as lot_address_2_depth,\n          MAX(st.place.lot_address_3_depth) as lot_address_3_depth,\n          MAX(st.place.kcd_classification_1_depth) as kcd_classification_1_depth,\n          MAX(st.place.kcd_classification_2_depth) as kcd_classification_2_depth,\n          MAX(st.place.kcd_classification_3_depth) as kcd_classification_3_depth\n  FROM    transactions_stat_with_meta st, targets t\n  WHERE   st.business_id = t.business_id\n  AND     t.transacted_at_month_count = 13\n  AND     st.time_unit = 'day_hour'\n  AND     weekofyear(st.time) < weekofyear(current_date())\n  GROUP BY 1, 2\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'sql': ""SELECT  *,\n        weekofyear(transacted_at_week) AS week_of_year\nFROM    (\n  SELECT  st.business_id,\n          date_trunc('week', time) AS transacted_at_week,\n          SUM(card_sales_amount) AS amount_sum,\n          SUM(IF (hour(time) < 18, card_sales_amount, 0)) as day_time_amount_sum,\n          SUM(IF (hour(time) >= 18, card_sales_amount, 0)) as night_time_amount_sum,\n          SUM(IF (weekday(time) > 4, card_sales_amount, 0)) as weekend_amount_sum,\n          SUM(IF (weekday(time) <= 4, card_sales_amount, 0)) as weekday_amount_sum,\n          SUM(card_sales_amount - returning_amount) as new_amount_sum,\n          SUM(returning_amount) as revisit_amount_sum,\n          SUM(card_sales_count) as tx_count,\n          MAX(st.place.lot_address_1_depth) as lot_address_1_depth,\n          MAX(st.place.lot_address_2_depth) as lot_address_2_depth,\n          MAX(st.place.lot_address_3_depth) as lot_address_3_depth,\n          MAX(st.place.kcd_classification_1_depth) as kcd_classification_1_depth,\n          MAX(st.place.kcd_classification_2_depth) as kcd_classification_2_depth,\n          MAX(st.place.kcd_classification_3_depth) as kcd_classification_3_depth\n  FROM    transactions_stat_with_meta st, targets t\n  WHERE   st.business_id = t.business_id\n  AND     t.transacted_at_month_count = 13\n  AND     st.time_unit = 'day_hour'\n  AND     weekofyear(st.time) < weekofyear(current_date())\n  GROUP BY 1, 2\n)""}, 'role': 'process', 'type': 'sql'}]"
787,s3://thrush/test/shon/corona/targets_20200331,process:::tx_with_meta:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_semas_daily_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(t) */\n        src.*,\n        location.sido AS sido,\n        location.sigungu AS sigungu,\n        location.dong AS dong,\n        CASE\n          WHEN classification.depth_1_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_1_name\n        END AS classification_kcd_depth_1_name,\n        CASE\n          WHEN classification.depth_2_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_2_name\n        END AS classification_kcd_depth_2_name\nFROM    tx_with_meta_src src, (\n  SELECT  *\n  FROM    targets_src\n  WHERE   transacted_at_month_count = 13\n) t\nWHERE   src.business_id = t.business_id\nAND     classification.depth_1_name is not null\nAND    (\n   (\n     time_unit = 'week' AND\n     year(time) in (2019, 2020) AND\n     weekofyear(time) < weekofyear(current_date()) AND\n     weekofyear(time) >= weekofyear(current_date()) - 8\n   ) OR\n   (\n     time_unit = 'day' AND\n     time < current_date() AND\n     time >= DATE_SUB(current_date(), 7)\n   ) OR\n   (\n     time_unit = 'week' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   ) OR\n   (\n     time_unit = 'day' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   )\n )""}, 'role': 'process', 'type': 'sql'}]"
788,s3://thrush/test/shon/corona/targets_20200331,process:::target_businesses_daily_ratio:::semas_daily_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_semas_daily_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/test/shon/corona/targets_20200331'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT  st.business_id,\n        meta.lot_address_1_depth AS sido,\n        meta.kcd_classification_1_depth AS depth_1_name,\n        meta.kcd_classification_2_depth AS depth_2_name,\n        s.semas_classification,\n        concat_ws(\n            ' ~ ',\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 - 1),\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 + 5)\n        ) as standard_period,\n        '2020-12-10' as target_date,\n        standard_amount,\n        target_amount\nFROM    target_date_standard_period_transactions st, targets t, semas_classification_mapping s\nWHERE   st.business_id = t.business_id\nAND     t.transacted_at_month_count = 13\nAND     meta.lot_address_1_depth NOT IN ('none', 'NULL', '')\nAND     meta.kcd_classification_1_depth = s.kcd_classification_depth_1\nAND     meta.kcd_classification_2_depth = s.kcd_classification_depth_2""}, 'role': 'process', 'type': 'sql'}]"
789,process:::tx_with_meta:::weekly_aggr,s3://thrush/test/shon/corona_jobs/tx_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'weekly_aggr.json', 'options': {'sql': ""SELECT  /*+BROADCAST(p, t) */\n        tx.*,\n        kcd_classification_1_depth,\n        kcd_classification_2_depth,\n        kcd_classification_3_depth,\n        kcd_classification_4_depth,\n        kcd_classification_5_depth,\n        name,\n        type,\n        uid,\n        latitude,\n        longitude,\n        lot_address,\n        lot_address_1_depth,\n        lot_address_2_depth,\n        lot_address_3_depth\nFROM    approvals tx, places p, (\n  SELECT  business_id\n  FROM    targets_src\n  WHERE   transacted_at_month_count = 13\n) t\nWHERE   tx.business_id = p.business_id\nAND     p.business_id = t.business_id\nAND     tx.status = 0\nAND     transacted_at >= '2021-01-04' AND transacted_at < '2021-01-25'\nAND     created_at_date >= '2021-01-04' AND created_at_date < '2021-01-25'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'weekly_aggr.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://thrush/test/shon/corona_jobs/tx_with_meta'}, 'role': 'sink', 'type': 'file'}]"
790,s3://kcd-de-production/raw/db/snowdon/incremental/place_reviews,process:::reviews:::places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_reviews'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/place_reviews', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_reviews'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'fact_places.json', 'options': {'sql': ""SELECT\n          r.timestamp,\n          date_format(r.timestamp, 'yyyy-MM-dd') AS date_id,\n          places.business_id,\n          r.count,\n          lower(replace(places.type, 'Places::', '')) AS name\nFROM (\n  SELECT\n          timestamp,\n          place_id,\n          COUNT(1) AS count\n  FROM (\n          SELECT\n                  place_id,\n                  date_trunc('MONTH', authored_at) AS timestamp\n          FROM    place_reviews\n          WHERE   created_at_date between '2017-01-01' AND '2020-07-20'\n  )\n  GROUP BY timestamp, place_id\n) AS r\nJOIN places\nON r.place_id = places.id""}, 'role': 'process', 'type': 'sql'}]"
791,s3://kcd-de-production/raw/db/snowdon/incremental/place_reviews,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_reviews'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/place_reviews', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_reviews'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
792,s3://kcd-de-production/raw/db/snowdon/incremental/place_comments,process:::comments:::places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'fact_places.json', 'options': {'sql': ""SELECT\n          c.timestamp,\n          date_format(c.timestamp, 'yyyy-MM-dd') AS date_id,\n          places.business_id,\n          c.count,\n          c.avg_rating,\n          lower(replace(places.type, 'Places::', '')) AS name\nFROM (\n  SELECT\n          timestamp,\n          place_id,\n          COUNT(1) AS count,\n          AVG(rating) AS avg_rating\n  FROM (\n          SELECT\n                  source_id AS place_id,\n                  date_trunc('MONTH', authored_at) AS timestamp,\n                  rating\n          FROM    place_comments\n          WHERE   created_at_date between '2017-01-01' AND '2020-07-20'\n          AND     source_type = 'Place'\n  )\n  GROUP BY timestamp, place_id\n) AS c\nJOIN places\nON c.place_id = places.id""}, 'role': 'process', 'type': 'sql'}]"
793,s3://kcd-de-production/raw/db/snowdon/incremental/place_comments,process:::comments:::delivery,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'fact_delivery.json', 'options': {'sql': ""SELECT\n          c.timestamp,\n          date_format(c.timestamp, 'yyyy-MM-dd') AS date_id,\n          delivery_apps.business_id,\n          c.count,\n          c.avg_rating,\n          lower(replace(delivery_apps.type, 'DeliveryApps::', '')) AS name\nFROM (\n  SELECT\n          timestamp,\n          delivery_app_id,\n          COUNT(1) AS count,\n          AVG(rating) AS avg_rating\n  FROM (\n          SELECT\n                  source_id AS delivery_app_id,\n                  date_trunc('MONTH', authored_at) AS timestamp,\n                  rating\n          FROM    place_comments\n          WHERE   created_at_date between '2017-01-01' AND '2020-07-20'\n          AND     source_type = 'DeliveryApp'\n  )\n  GROUP BY timestamp, delivery_app_id\n) AS c\nJOIN delivery_apps\nON c.delivery_app_id = delivery_apps.id""}, 'role': 'process', 'type': 'sql'}]"
794,s3://kcd-de-production/raw/db/snowdon/incremental/place_comments,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
795,process:::reviews:::places,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=place_reviews,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'fact_places.json', 'options': {'sql': ""SELECT\n          r.timestamp,\n          date_format(r.timestamp, 'yyyy-MM-dd') AS date_id,\n          places.business_id,\n          r.count,\n          lower(replace(places.type, 'Places::', '')) AS name\nFROM (\n  SELECT\n          timestamp,\n          place_id,\n          COUNT(1) AS count\n  FROM (\n          SELECT\n                  place_id,\n                  date_trunc('MONTH', authored_at) AS timestamp\n          FROM    place_reviews\n          WHERE   created_at_date between '2017-01-01' AND '2020-07-20'\n  )\n  GROUP BY timestamp, place_id\n) AS r\nJOIN places\nON r.place_id = places.id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'fact_places.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=place_reviews', 'evenPartitions': 'true', 'partitions': 'name,date_id'}, 'role': 'sink', 'type': 'file'}]"
796,process:::comments:::places,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=place_comments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'fact_places.json', 'options': {'sql': ""SELECT\n          c.timestamp,\n          date_format(c.timestamp, 'yyyy-MM-dd') AS date_id,\n          places.business_id,\n          c.count,\n          c.avg_rating,\n          lower(replace(places.type, 'Places::', '')) AS name\nFROM (\n  SELECT\n          timestamp,\n          place_id,\n          COUNT(1) AS count,\n          AVG(rating) AS avg_rating\n  FROM (\n          SELECT\n                  source_id AS place_id,\n                  date_trunc('MONTH', authored_at) AS timestamp,\n                  rating\n          FROM    place_comments\n          WHERE   created_at_date between '2017-01-01' AND '2020-07-20'\n          AND     source_type = 'Place'\n  )\n  GROUP BY timestamp, place_id\n) AS c\nJOIN places\nON c.place_id = places.id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'fact_places.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=place_comments', 'evenPartitions': 'true', 'partitions': 'name,date_id'}, 'role': 'sink', 'type': 'file'}]"
797,s3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics,process:::daily_stat_with_demo:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT    agg.*,\n          (agg.card_sales_amount * st.percentage_male / 100) AS card_sales_amount_gender_male,\n          (agg.card_sales_amount * st.percentage_female / 100) AS card_sales_amount_gender_female,\n          (agg.card_sales_amount * st.percentage_under_20 / 100) AS card_sales_amount_age_under_20,\n          (agg.card_sales_amount * st.percentage_20 / 100) AS card_sales_amount_age_20,\n          (agg.card_sales_amount * st.percentage_30 / 100) AS card_sales_amount_age_30,\n          (agg.card_sales_amount * st.percentage_40 / 100) AS card_sales_amount_age_40,\n          (agg.card_sales_amount * st.percentage_50 / 100) AS card_sales_amount_age_50,\n          (agg.card_sales_amount * st.percentage_over_60 / 100) AS card_sales_amount_age_over_60\nFROM      (\n  SELECT    *\n  FROM      transactions_stat\n  WHERE     time_unit = 'day'\n) agg LEFT OUTER JOIN shinhancard_customer_statistics st\nON  (\n  agg.business_id = st.business_id AND\n  agg.time = st.date\n)""}, 'role': 'process', 'type': 'sql'}]"
798,s3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
799,s3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat,process:::day_hour_stat_with_demo:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT    agg.*,\n          CAST(null AS bigint) AS card_sales_amount_gender_male,\n          CAST(null AS bigint) AS card_sales_amount_gender_female,\n          CAST(null AS bigint) AS card_sales_amount_age_under_20,\n          CAST(null AS bigint) AS card_sales_amount_age_20,\n          CAST(null AS bigint) AS card_sales_amount_age_30,\n          CAST(null AS bigint) AS card_sales_amount_age_40,\n          CAST(null AS bigint) AS card_sales_amount_age_50,\n          CAST(null AS bigint) AS card_sales_amount_age_over_60\nFROM      transactions_stat agg\nWHERE     time_unit = 'day_hour'""}, 'role': 'process', 'type': 'sql'}]"
800,s3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat,process:::daily_stat_with_demo:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT    agg.*,\n          (agg.card_sales_amount * st.percentage_male / 100) AS card_sales_amount_gender_male,\n          (agg.card_sales_amount * st.percentage_female / 100) AS card_sales_amount_gender_female,\n          (agg.card_sales_amount * st.percentage_under_20 / 100) AS card_sales_amount_age_under_20,\n          (agg.card_sales_amount * st.percentage_20 / 100) AS card_sales_amount_age_20,\n          (agg.card_sales_amount * st.percentage_30 / 100) AS card_sales_amount_age_30,\n          (agg.card_sales_amount * st.percentage_40 / 100) AS card_sales_amount_age_40,\n          (agg.card_sales_amount * st.percentage_50 / 100) AS card_sales_amount_age_50,\n          (agg.card_sales_amount * st.percentage_over_60 / 100) AS card_sales_amount_age_over_60\nFROM      (\n  SELECT    *\n  FROM      transactions_stat\n  WHERE     time_unit = 'day'\n) agg LEFT OUTER JOIN shinhancard_customer_statistics st\nON  (\n  agg.business_id = st.business_id AND\n  agg.time = st.date\n)""}, 'role': 'process', 'type': 'sql'}]"
801,s3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat,process:::transactions_stat:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      transactions_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
802,s3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_orders_stat,process:::joined:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_orders_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'delivery_app_orders_stat.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_orders_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT    stat.*,\n          struct(d.*) AS delivery\nFROM      stat_union_meta stat LEFT OUTER JOIN delivery_app_orders_stat d\nON (\n  stat.business_id = d.business_id AND\n  stat.time_unit = d.time_unit AND\n  stat.time = d.time\n)'}, 'role': 'process', 'type': 'sql'}]"
803,process:::kcd_places:::merge_stats_with_meta,process:::stat_union_meta:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT  business_id,\n        case\n          when coalesce(lot_address_1_depth, 'none') = '서울' then '서울특별시'\n          when coalesce(lot_address_1_depth, 'none') = '세종특별자치' then '세종특별자치시'\n          when coalesce(lot_address_1_depth, 'none') = '강원' then '강원도'\n          when coalesce(lot_address_1_depth, 'none') = '경기' then '경기도'\n          when coalesce(lot_address_1_depth, 'none') = '경남' then '경상남도'\n          when coalesce(lot_address_1_depth, 'none') = '경북' then '경상북도'\n          when coalesce(lot_address_1_depth, 'none') = '광주' then '광주광역시'\n          when coalesce(lot_address_1_depth, 'none') = '대구' then '대구광역시'\n          when coalesce(lot_address_1_depth, 'none') = '대전' then '대전광역시'\n          when coalesce(lot_address_1_depth, 'none') = '부산' then '부산광역시'\n          when coalesce(lot_address_1_depth, 'none') = '세종' then '세종특별자치시'\n          when coalesce(lot_address_1_depth, 'none') = '울산' then '울산광역시'\n          when coalesce(lot_address_1_depth, 'none') = '인천' then '인천광역시'\n          when coalesce(lot_address_1_depth, 'none') = '전남' then '전라남도'\n          when coalesce(lot_address_1_depth, 'none') = '전북' then '전라북도'\n          when coalesce(lot_address_1_depth, 'none') = '제주' then '제주특별자치도'\n          when coalesce(lot_address_1_depth, 'none') = '충남' then '충청남도'\n          when coalesce(lot_address_1_depth, 'none') = '충북' then '충청북도'\n          else coalesce(lot_address_1_depth, 'none')\n        end as lot_address_1_depth,\n        lot_address_2_depth,\n        lot_address_3_depth,\n        kcd_classification_1_depth,\n        kcd_classification_2_depth,\n        kcd_classification_3_depth\nFROM    (\n  SELECT    business_id,\n            split(kcd_classification, ' > ')[0] AS kcd_classification_1_depth,\n            split(kcd_classification, ' > ')[1] AS kcd_classification_2_depth,\n            split(kcd_classification, ' > ')[2] AS kcd_classification_3_depth,\n            split(lot_address, ' ')[0] AS lot_address_1_depth,\n            split(lot_address, ' ')[1] AS lot_address_2_depth,\n            split(lot_address, ' ')[2] AS lot_address_3_depth\n  FROM      kcd_places_src\n  WHERE     business_id is not null\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT    stat.*,\n          meta.location AS location,\n          meta.classification AS classification,\n          struct(place.*) AS place\nFROM      stat_union stat LEFT OUTER JOIN (\n  SELECT  business_id,\n          location.common AS location,\n          classification.kcd AS classification\n  FROM    business_meta\n) meta\nON (stat.business_id = meta.business_id) LEFT OUTER JOIN (\n  SELECT  business_id,\n          lot_address_1_depth,\n          lot_address_2_depth,\n          lot_address_3_depth,\n          kcd_classification_1_depth,\n          kcd_classification_2_depth,\n          kcd_classification_3_depth\n  FROM    kcd_places\n) place\nON (stat.business_id = place.business_id)'}, 'role': 'process', 'type': 'sql'}]"
804,process:::day_hour_stat_with_demo:::merge_stats_with_meta,process:::stat_union:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT    agg.*,\n          CAST(null AS bigint) AS card_sales_amount_gender_male,\n          CAST(null AS bigint) AS card_sales_amount_gender_female,\n          CAST(null AS bigint) AS card_sales_amount_age_under_20,\n          CAST(null AS bigint) AS card_sales_amount_age_20,\n          CAST(null AS bigint) AS card_sales_amount_age_30,\n          CAST(null AS bigint) AS card_sales_amount_age_40,\n          CAST(null AS bigint) AS card_sales_amount_age_50,\n          CAST(null AS bigint) AS card_sales_amount_age_over_60\nFROM      transactions_stat agg\nWHERE     time_unit = 'day_hour'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT * FROM day_hour_stat_with_demo\nUNION ALL\nSELECT * FROM daily_stat_with_demo\nUNION ALL\nSELECT * FROM weekly_stat_with_demo\nUNION ALL\nSELECT * FROM monthly_stat_with_demo'}, 'role': 'process', 'type': 'sql'}]"
805,process:::daily_stat_with_demo:::merge_stats_with_meta,process:::weekly_stat_with_demo:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT    agg.*,\n          (agg.card_sales_amount * st.percentage_male / 100) AS card_sales_amount_gender_male,\n          (agg.card_sales_amount * st.percentage_female / 100) AS card_sales_amount_gender_female,\n          (agg.card_sales_amount * st.percentage_under_20 / 100) AS card_sales_amount_age_under_20,\n          (agg.card_sales_amount * st.percentage_20 / 100) AS card_sales_amount_age_20,\n          (agg.card_sales_amount * st.percentage_30 / 100) AS card_sales_amount_age_30,\n          (agg.card_sales_amount * st.percentage_40 / 100) AS card_sales_amount_age_40,\n          (agg.card_sales_amount * st.percentage_50 / 100) AS card_sales_amount_age_50,\n          (agg.card_sales_amount * st.percentage_over_60 / 100) AS card_sales_amount_age_over_60\nFROM      (\n  SELECT    *\n  FROM      transactions_stat\n  WHERE     time_unit = 'day'\n) agg LEFT OUTER JOIN shinhancard_customer_statistics st\nON  (\n  agg.business_id = st.business_id AND\n  agg.time = st.date\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT    business_id,\n          credential_key,\n          date_trunc('week', time) AS time,\n          'week' AS time_unit,\n          SUM(card_sales_amount) AS card_sales_amount,\n          SUM(card_sales_count) AS card_sales_count,\n          SUM(card_sales_fee) AS card_sales_fee,\n          SUM(card_sales_vat_fee) AS card_sales_vat_fee,\n          SUM(card_sales_payment) AS card_sales_payment,\n          SUM(returning_amount) AS returning_amount,\n          SUM(returning_count) AS returning_count,\n          SUM(card_sales_amount_gender_male) AS card_sales_amount_gender_male,\n          SUM(card_sales_amount_gender_female) AS card_sales_amount_gender_female,\n          SUM(card_sales_amount_age_under_20) AS card_sales_amount_age_under_20,\n          SUM(card_sales_amount_age_20) AS card_sales_amount_age_20,\n          SUM(card_sales_amount_age_30) AS card_sales_amount_age_30,\n          SUM(card_sales_amount_age_40) AS card_sales_amount_age_40,\n          SUM(card_sales_amount_age_50) AS card_sales_amount_age_50,\n          SUM(card_sales_amount_age_over_60) AS card_sales_amount_age_over_60\nFROM      daily_stat_with_demo\nGROUP BY  1,2,3""}, 'role': 'process', 'type': 'sql'}]"
806,process:::daily_stat_with_demo:::merge_stats_with_meta,process:::monthly_stat_with_demo:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT    agg.*,\n          (agg.card_sales_amount * st.percentage_male / 100) AS card_sales_amount_gender_male,\n          (agg.card_sales_amount * st.percentage_female / 100) AS card_sales_amount_gender_female,\n          (agg.card_sales_amount * st.percentage_under_20 / 100) AS card_sales_amount_age_under_20,\n          (agg.card_sales_amount * st.percentage_20 / 100) AS card_sales_amount_age_20,\n          (agg.card_sales_amount * st.percentage_30 / 100) AS card_sales_amount_age_30,\n          (agg.card_sales_amount * st.percentage_40 / 100) AS card_sales_amount_age_40,\n          (agg.card_sales_amount * st.percentage_50 / 100) AS card_sales_amount_age_50,\n          (agg.card_sales_amount * st.percentage_over_60 / 100) AS card_sales_amount_age_over_60\nFROM      (\n  SELECT    *\n  FROM      transactions_stat\n  WHERE     time_unit = 'day'\n) agg LEFT OUTER JOIN shinhancard_customer_statistics st\nON  (\n  agg.business_id = st.business_id AND\n  agg.time = st.date\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT    business_id,\n          credential_key,\n          date_trunc('month', time) AS time,\n          'month' AS time_unit,\n          SUM(card_sales_amount) AS card_sales_amount,\n          SUM(card_sales_count) AS card_sales_count,\n          SUM(card_sales_fee) AS card_sales_fee,\n          SUM(card_sales_vat_fee) AS card_sales_vat_fee,\n          SUM(card_sales_payment) AS card_sales_payment,\n          SUM(returning_amount) AS returning_amount,\n          SUM(returning_count) AS returning_count,\n          SUM(card_sales_amount_gender_male) AS card_sales_amount_gender_male,\n          SUM(card_sales_amount_gender_female) AS card_sales_amount_gender_female,\n          SUM(card_sales_amount_age_under_20) AS card_sales_amount_age_under_20,\n          SUM(card_sales_amount_age_20) AS card_sales_amount_age_20,\n          SUM(card_sales_amount_age_30) AS card_sales_amount_age_30,\n          SUM(card_sales_amount_age_40) AS card_sales_amount_age_40,\n          SUM(card_sales_amount_age_50) AS card_sales_amount_age_50,\n          SUM(card_sales_amount_age_over_60) AS card_sales_amount_age_over_60\nFROM      daily_stat_with_demo\nGROUP BY  1,2,3""}, 'role': 'process', 'type': 'sql'}]"
807,process:::daily_stat_with_demo:::merge_stats_with_meta,process:::stat_union:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT    agg.*,\n          (agg.card_sales_amount * st.percentage_male / 100) AS card_sales_amount_gender_male,\n          (agg.card_sales_amount * st.percentage_female / 100) AS card_sales_amount_gender_female,\n          (agg.card_sales_amount * st.percentage_under_20 / 100) AS card_sales_amount_age_under_20,\n          (agg.card_sales_amount * st.percentage_20 / 100) AS card_sales_amount_age_20,\n          (agg.card_sales_amount * st.percentage_30 / 100) AS card_sales_amount_age_30,\n          (agg.card_sales_amount * st.percentage_40 / 100) AS card_sales_amount_age_40,\n          (agg.card_sales_amount * st.percentage_50 / 100) AS card_sales_amount_age_50,\n          (agg.card_sales_amount * st.percentage_over_60 / 100) AS card_sales_amount_age_over_60\nFROM      (\n  SELECT    *\n  FROM      transactions_stat\n  WHERE     time_unit = 'day'\n) agg LEFT OUTER JOIN shinhancard_customer_statistics st\nON  (\n  agg.business_id = st.business_id AND\n  agg.time = st.date\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT * FROM day_hour_stat_with_demo\nUNION ALL\nSELECT * FROM daily_stat_with_demo\nUNION ALL\nSELECT * FROM weekly_stat_with_demo\nUNION ALL\nSELECT * FROM monthly_stat_with_demo'}, 'role': 'process', 'type': 'sql'}]"
808,process:::weekly_stat_with_demo:::merge_stats_with_meta,process:::stat_union:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT    business_id,\n          credential_key,\n          date_trunc('week', time) AS time,\n          'week' AS time_unit,\n          SUM(card_sales_amount) AS card_sales_amount,\n          SUM(card_sales_count) AS card_sales_count,\n          SUM(card_sales_fee) AS card_sales_fee,\n          SUM(card_sales_vat_fee) AS card_sales_vat_fee,\n          SUM(card_sales_payment) AS card_sales_payment,\n          SUM(returning_amount) AS returning_amount,\n          SUM(returning_count) AS returning_count,\n          SUM(card_sales_amount_gender_male) AS card_sales_amount_gender_male,\n          SUM(card_sales_amount_gender_female) AS card_sales_amount_gender_female,\n          SUM(card_sales_amount_age_under_20) AS card_sales_amount_age_under_20,\n          SUM(card_sales_amount_age_20) AS card_sales_amount_age_20,\n          SUM(card_sales_amount_age_30) AS card_sales_amount_age_30,\n          SUM(card_sales_amount_age_40) AS card_sales_amount_age_40,\n          SUM(card_sales_amount_age_50) AS card_sales_amount_age_50,\n          SUM(card_sales_amount_age_over_60) AS card_sales_amount_age_over_60\nFROM      daily_stat_with_demo\nGROUP BY  1,2,3""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT * FROM day_hour_stat_with_demo\nUNION ALL\nSELECT * FROM daily_stat_with_demo\nUNION ALL\nSELECT * FROM weekly_stat_with_demo\nUNION ALL\nSELECT * FROM monthly_stat_with_demo'}, 'role': 'process', 'type': 'sql'}]"
809,process:::monthly_stat_with_demo:::merge_stats_with_meta,process:::stat_union:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': ""SELECT    business_id,\n          credential_key,\n          date_trunc('month', time) AS time,\n          'month' AS time_unit,\n          SUM(card_sales_amount) AS card_sales_amount,\n          SUM(card_sales_count) AS card_sales_count,\n          SUM(card_sales_fee) AS card_sales_fee,\n          SUM(card_sales_vat_fee) AS card_sales_vat_fee,\n          SUM(card_sales_payment) AS card_sales_payment,\n          SUM(returning_amount) AS returning_amount,\n          SUM(returning_count) AS returning_count,\n          SUM(card_sales_amount_gender_male) AS card_sales_amount_gender_male,\n          SUM(card_sales_amount_gender_female) AS card_sales_amount_gender_female,\n          SUM(card_sales_amount_age_under_20) AS card_sales_amount_age_under_20,\n          SUM(card_sales_amount_age_20) AS card_sales_amount_age_20,\n          SUM(card_sales_amount_age_30) AS card_sales_amount_age_30,\n          SUM(card_sales_amount_age_40) AS card_sales_amount_age_40,\n          SUM(card_sales_amount_age_50) AS card_sales_amount_age_50,\n          SUM(card_sales_amount_age_over_60) AS card_sales_amount_age_over_60\nFROM      daily_stat_with_demo\nGROUP BY  1,2,3""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT * FROM day_hour_stat_with_demo\nUNION ALL\nSELECT * FROM daily_stat_with_demo\nUNION ALL\nSELECT * FROM weekly_stat_with_demo\nUNION ALL\nSELECT * FROM monthly_stat_with_demo'}, 'role': 'process', 'type': 'sql'}]"
810,process:::stat_union:::merge_stats_with_meta,process:::stat_union_meta:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT * FROM day_hour_stat_with_demo\nUNION ALL\nSELECT * FROM daily_stat_with_demo\nUNION ALL\nSELECT * FROM weekly_stat_with_demo\nUNION ALL\nSELECT * FROM monthly_stat_with_demo'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT    stat.*,\n          meta.location AS location,\n          meta.classification AS classification,\n          struct(place.*) AS place\nFROM      stat_union stat LEFT OUTER JOIN (\n  SELECT  business_id,\n          location.common AS location,\n          classification.kcd AS classification\n  FROM    business_meta\n) meta\nON (stat.business_id = meta.business_id) LEFT OUTER JOIN (\n  SELECT  business_id,\n          lot_address_1_depth,\n          lot_address_2_depth,\n          lot_address_3_depth,\n          kcd_classification_1_depth,\n          kcd_classification_2_depth,\n          kcd_classification_3_depth\n  FROM    kcd_places\n) place\nON (stat.business_id = place.business_id)'}, 'role': 'process', 'type': 'sql'}]"
811,process:::stat_union_meta:::merge_stats_with_meta,process:::joined:::merge_stats_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT    stat.*,\n          meta.location AS location,\n          meta.classification AS classification,\n          struct(place.*) AS place\nFROM      stat_union stat LEFT OUTER JOIN (\n  SELECT  business_id,\n          location.common AS location,\n          classification.kcd AS classification\n  FROM    business_meta\n) meta\nON (stat.business_id = meta.business_id) LEFT OUTER JOIN (\n  SELECT  business_id,\n          lot_address_1_depth,\n          lot_address_2_depth,\n          lot_address_3_depth,\n          kcd_classification_1_depth,\n          kcd_classification_2_depth,\n          kcd_classification_3_depth\n  FROM    kcd_places\n) place\nON (stat.business_id = place.business_id)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT    stat.*,\n          struct(d.*) AS delivery\nFROM      stat_union_meta stat LEFT OUTER JOIN delivery_app_orders_stat d\nON (\n  stat.business_id = d.business_id AND\n  stat.time_unit = d.time_unit AND\n  stat.time = d.time\n)'}, 'role': 'process', 'type': 'sql'}]"
812,process:::joined:::merge_stats_with_meta,s3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merge_stats_with_meta.json', 'options': {'sql': 'SELECT    stat.*,\n          struct(d.*) AS delivery\nFROM      stat_union_meta stat LEFT OUTER JOIN delivery_app_orders_stat d\nON (\n  stat.business_id = d.business_id AND\n  stat.time_unit = d.time_unit AND\n  stat.time = d.time\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'merge_stats_with_meta.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_corona_weekly_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_semas_daily_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat_with_meta'}, 'role': 'source', 'type': 'file'}]"
813,s3://kcd-data/raw/catalog_v3/raw/tb=owl_db_baemin_orders,process:::baemin_orders_raw:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_orders.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v3/raw/tb=owl_db_baemin_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  accepted_at,\n        amount,\n        arrived_at,\n        created_at,\n        delivery_tip,\n        delivery_type,\n        discount,\n        items,\n        order_number,\n        ordered_at,\n        payment,\n        payment_method,\n        reserved,\n        service_type,\n        shop_category,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        takeout_discount,\n        updated_at\nFROM    baemin_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(accepted_at) AS accepted_at,\n        MAX(amount) AS amount,\n        MAX(arrived_at) AS arrived_at,\n        MAX(created_at) AS created_at,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(delivery_type) AS delivery_type,\n        MAX(discount) AS discount,\n        MAX(items) AS items,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment) AS payment,\n        MAX(payment_method) AS payment_method,\n        MAX(reserved) AS reserved,\n        MAX(service_type) AS service_type,\n        MAX(shop_category) AS shop_category,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(takeout_discount) AS takeout_discount,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  to_timestamp(accepted_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS accepted_at,\n          CAST(amount AS int) AS amount,\n          to_timestamp(arrived_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS arrived_at,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          CAST(delivery_tip AS int) AS delivery_tip,\n          delivery_type,\n          CAST(discount AS int) AS discount,\n          items,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          CAST(payment AS int) AS payment,\n          payment_method,\n          reserved,\n          service_type,\n          shop_category,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          CAST(takeout_discount AS int) AS takeout_discount,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    baemin_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)\nGROUP BY shop_id, order_number, status""}, 'role': 'process', 'type': 'sql'}]"
814,s3://kcd-data/raw/catalog_v3/raw/tb=owl_db_baemin_sales_vats,process:::baemin_sales_vats_raw:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_orders.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v3/raw/tb=owl_db_baemin_sales_vats'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  amount,\n        created_at,\n        order_number,\n        order_type,\n        ordered_at,\n        payment,\n        payment_method,\n        shop_id,\n        updated_at,\n        vat\nFROM    baemin_sales_vats_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        ordered_at,\n        order_number,\n        collect_list(struct(order_type, payment_method, payment, vat, amount)) AS sales_vats\nFROM    (\n  SELECT  CAST(amount AS int) AS amount,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          order_number,\n          order_type,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          CAST(payment AS int) AS payment,\n          payment_method,\n          shop_id,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          CAST(vat AS int) AS vat,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    baemin_sales_vats_src\n)\nGROUP BY shop_id, ordered_at, order_number""}, 'role': 'process', 'type': 'sql'}]"
815,s3://kcd-data/raw/catalog_v3/raw/tb=owl_db_yogiyo_orders,process:::yogiyo_orders_raw:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_orders.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v3/raw/tb=owl_db_yogiyo_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  amount,\n        created_at,\n        delivery_addesss,\n        delivery_tip,\n        franchise_discount,\n        order_number,\n        ordered_at,\n        payment_method,\n        shop_discount,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        updated_at\nFROM    yogiyo_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(amount) AS amount,\n        MAX(created_at) AS created_at,\n        MAX(delivery_addesss) AS delivery_addesss,\n        MAX(delivery_tip) AS delivery_tip,\n        MAX(franchise_discount) AS franchise_discount,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment_method) AS payment_method,\n        MAX(shop_discount) AS shop_discount,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  CAST(amount AS int) AS amount,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          delivery_addesss,\n          CAST(delivery_tip AS int) AS delivery_tip,\n          CAST(franchise_discount AS int) AS franchise_discount,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          payment_method,\n          CAST(shop_discount AS int) AS shop_discount,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    yogiyo_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)\nGROUP BY  shop_id, order_number, status""}, 'role': 'process', 'type': 'sql'}]"
816,s3://kcd-data/raw/catalog_v3/raw/tb=owl_db_baedaltong_orders,process:::baedaltong_orders_raw:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_orders.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v3/raw/tb=owl_db_baedaltong_orders'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  amount,\n        created_at,\n        CAST(fee_rate AS double) AS fee_rate,\n        order_method,\n        order_number,\n        ordered_at,\n        payment,\n        payment_method,\n        shop_id,\n        shop_name,\n        shop_number,\n        status,\n        updated_at\nFROM    baedaltong_orders_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  shop_id,\n        order_number,\n        status,\n        MAX(amount) AS amount,\n        MAX(created_at) AS created_at,\n        MAX(fee_rate) AS fee_rate,\n        MAX(order_method) AS order_method,\n        MAX(ordered_at) AS ordered_at,\n        MAX(payment) AS payment,\n        MAX(payment_method) AS payment_method,\n        MAX(shop_name) AS shop_name,\n        MAX(shop_number) AS shop_number,\n        MAX(updated_at) AS updated_at\nFROM    (\n  SELECT  CAST(amount AS int) AS amount,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          CAST(fee_rate AS double) AS fee_rate,\n          order_method,\n          order_number,\n          to_timestamp(ordered_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS ordered_at,\n          CAST(payment AS int) AS payment,\n          payment_method,\n          shop_id,\n          shop_name,\n          shop_number,\n          status,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at\n  FROM    baedaltong_orders_src\n  WHERE   created_at_date >= '2020-10-09'\n  AND     created_at_date < '2020-10-13'\n)""}, 'role': 'process', 'type': 'sql'}]"
817,process:::prev_baemin_orders_raw:::build_delivery_app_orders,process:::baemin_orders_unique:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_orders_src\nWHERE   app_name = 'baemin'\nAND     created_at_date >= '2020-10-02'\nAND     created_at_date < '2020-10-09'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baemin_orders_raw prev RIGHT OUTER JOIN baemin_orders_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.order_number = current.order_number AND\n  prev.status = current.status\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
818,process:::baemin_orders_unique:::build_delivery_app_orders,process:::baemin_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baemin_orders_raw prev RIGHT OUTER JOIN baemin_orders_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.order_number = current.order_number AND\n  prev.status = current.status\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT  a.business_id,\n        a.accepted_at,\n        a.amount,\n        a.arrived_at,\n        a.created_at,\n        a.delivery_addesss,\n        a.delivery_tip,\n        a.delivery_type,\n        a.discount,\n        a.fee_rate,\n        a.franchise_discount,\n        a.items,\n        a.order_method,\n        a.order_number,\n        v.order_type,\n        a.ordered_at,\n        a.payment,\n        a.payment_method,\n        v.payment_method AS payment_type,\n        a.reserved,\n        a.service_type,\n        a.shop_category,\n        a.shop_discount,\n        a.shop_id,\n        a.shop_name,\n        a.shop_number,\n        a.status,\n        a.takeout_discount,\n        a.updated_at,\n        a.order_amount,\n        a.paid_online,\n        a.paid_offline,\n        a.vat_returnable,\n        a.closed,\n        a.canceled,\n        a.app_name\nFROM    (\n  SELECT  a.business_id,\n          o.*,\n          'baemin' AS app_name\n  FROM    (\n      SELECT    accepted_at,\n                amount,\n                arrived_at,\n                created_at,\n                CAST(null AS string) AS delivery_addesss,\n                delivery_tip,\n                delivery_type,\n                discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                ordered_at,\n                payment,\n                payment_method,\n                reserved,\n                service_type,\n                shop_category,\n                CAST(null AS bigint) AS shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('BARO', 'RIDER') AS paid_online,\n                payment_method in ('MEET') AS paid_offline,\n                CAST(null AS boolean) AS vat_returnable,\n                status = 'CLOSED' AS closed,\n                status = 'CANCELLED' AS canceled\n      FROM      baemin_orders_raw\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id\n) a LEFT OUTER JOIN baemin_sales_vats_raw v\nON  (\n  a.shop_id = v.shop_id  AND\n  CAST(a.ordered_at AS DATE) = CAST(v.ordered_at AS DATE) AND\n  a.order_number = v.order_number\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  a.business_id,\n        a.accepted_at,\n        a.amount,\n        a.arrived_at,\n        a.created_at,\n        a.delivery_addesss,\n        a.delivery_tip,\n        a.delivery_type,\n        a.discount,\n        a.fee_rate,\n        a.franchise_discount,\n        a.id,\n        a.items,\n        a.order_method,\n        a.order_number,\n        a.ordered_at,\n        a.payment,\n        a.payment_method,\n        a.reserved,\n        v.sales_vats,\n        a.service_type,\n        a.shop_category,\n        a.shop_discount,\n        a.shop_id,\n        a.shop_name,\n        a.shop_number,\n        a.status,\n        a.takeout_discount,\n        a.updated_at,\n        a.order_amount,\n        a.paid_online,\n        a.paid_offline,\n        a.vat_returnable,\n        a.closed,\n        a.canceled,\n        a.app_name\nFROM    (\n  SELECT  a.business_id,\n          o.*,\n          'baemin' AS app_name\n  FROM    (\n      SELECT    accepted_at,\n                amount,\n                arrived_at,\n                created_at,\n                CAST(null AS string) AS delivery_addesss,\n                delivery_tip,\n                delivery_type,\n                discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                id,\n                items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                ordered_at,\n                payment,\n                payment_method,\n                reserved,\n                service_type,\n                shop_category,\n                CAST(null AS bigint) AS shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('BARO', 'RIDER') AS paid_online,\n                payment_method in ('MEET') AS paid_offline,\n                CAST(null AS boolean) AS vat_returnable,\n                status = 'CLOSED' AS closed,\n                status = 'CANCELLED' AS canceled\n      FROM      baemin_orders_unique\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id\n) a LEFT OUTER JOIN baemin_sales_vats_raw v\nON  (\n  a.shop_id = v.shop_id  AND\n  CAST(a.ordered_at AS DATE) = CAST(v.ordered_at AS DATE) AND\n  a.order_number = v.order_number\n)""}, 'role': 'process', 'type': 'sql'}]"
819,process:::prev_yogiyo_orders_raw:::build_delivery_app_orders,process:::yogiyo_orders_unique:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_orders_src\nWHERE   app_name = 'yogiyo'\nAND     created_at_date >= '2020-10-02'\nAND     created_at_date < '2020-10-09'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_yogiyo_orders_raw prev RIGHT OUTER JOIN yogiyo_orders_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.order_number = current.order_number AND\n  prev.status = current.status\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
820,process:::yogiyo_orders_unique:::build_delivery_app_orders,process:::yogiyo_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_yogiyo_orders_raw prev RIGHT OUTER JOIN yogiyo_orders_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.order_number = current.order_number AND\n  prev.status = current.status\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  a.business_id,\n          o.*,\n          'yogiyo' AS app_name\n  FROM    (\n      SELECT    CAST(null AS timestamp) AS accepted_at,\n                amount,\n                CAST(null AS timestamp) AS arrived_at,\n                created_at,\n                delivery_addesss,\n                delivery_tip,\n                CAST(null AS string) AS delivery_type,\n                CAST(null AS bigint) AS discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                CAST(null AS string) AS items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                payment_method AS order_type,\n                ordered_at,\n                CAST(null AS bigint) AS payment,\n                payment_method,\n                CAST(null AS string) AS payment_type,\n                CAST(null AS boolean) AS reserved,\n                CAST(null AS string) AS service_type,\n                CAST(null AS string) AS shop_category,\n                shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                CAST(null AS bigint) AS takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('온라인 결제') AS paid_online,\n                CAST(null AS boolean) AS vat_returnable,\n                payment_method in ('현금', '신용카드') AS paid_offline,\n                status = '성공' AS closed,\n                status = '취소' AS canceled\n      FROM      yogiyo_orders_raw\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""  SELECT  a.business_id,\n          o.*,\n          'yogiyo' AS app_name\n  FROM    (\n      SELECT    CAST(null AS timestamp) AS accepted_at,\n                amount,\n                CAST(null AS timestamp) AS arrived_at,\n                created_at,\n                delivery_addesss,\n                delivery_tip,\n                CAST(null AS string) AS delivery_type,\n                CAST(null AS bigint) AS discount,\n                CAST(null AS double) AS fee_rate,\n                CAST(null AS bigint) AS franchise_discount,\n                id,\n                CAST(null AS string) AS items,\n                CAST(null AS string) AS order_method,\n                order_number,\n                payment_method AS order_type,\n                ordered_at,\n                CAST(null AS bigint) AS payment,\n                payment_method,\n                CAST(null AS string) AS payment_type,\n                CAST(null AS boolean) AS reserved,\n                CAST(null AS string) AS service_type,\n                CAST(null AS string) AS shop_category,\n                shop_discount,\n                shop_id,\n                shop_name,\n                shop_number,\n                status,\n                CAST(null AS bigint) AS takeout_discount,\n                updated_at,\n                amount + delivery_tip AS order_amount,\n                payment_method in ('온라인 결제') AS paid_online,\n                CAST(null AS boolean) AS vat_returnable,\n                payment_method in ('현금', '신용카드') AS paid_offline,\n                status = '성공' AS closed,\n                status = '취소' AS canceled\n      FROM      yogiyo_orders_unique\n  ) o, delivery_apps a\n  WHERE   o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
821,process:::prev_baedaltong_orders_raw:::build_delivery_app_orders,process:::baedaltong_orders_unique:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT  *\nFROM    prev_delivery_app_orders_src\nWHERE   app_name = 'baedaltong'\nAND     created_at_date >= '2020-10-02'\nAND     created_at_date < '2020-10-09'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baedaltong_orders_raw prev RIGHT OUTER JOIN baedaltong_orders_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.order_number = current.order_number AND\n  prev.status = current.status\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]"
822,process:::baedaltong_orders_unique:::build_delivery_app_orders,process:::baedaltong_orders:::build_delivery_app_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_delivery_app_orders.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_baedaltong_orders_raw prev RIGHT OUTER JOIN baedaltong_orders_raw current\nON      (\n  prev.shop_id = current.shop_id AND\n  prev.order_number = current.order_number AND\n  prev.status = current.status\n)\nWHERE   prev.shop_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'sql': ""SELECT    a.business_id,\n          o.*,\n          'baedaltong' AS app_name\nFROM      (\n  SELECT    CAST(null AS timestamp) AS accepted_at,\n            amount,\n            CAST(null AS timestamp) AS arrived_at,\n            created_at,\n            CAST(null AS string) AS delivery_addesss,\n            CAST(null AS bigint) AS delivery_tip,\n            CAST(null AS string) AS delivery_type,\n            CAST(null AS bigint) AS discount,\n            CAST(null AS double) AS fee_rate,\n            CAST(null AS bigint) AS franchise_discount,\n            CAST(null AS string) AS items,\n            order_method,\n            order_number,\n            CAST(null AS string) AS order_type,\n            ordered_at,\n            payment,\n            payment_method,\n            payment_method AS payment_type,\n            CAST(null AS boolean) AS reserved,\n            CAST(null AS string) AS service_type,\n            CAST(null AS integer) AS shop_category,\n            CAST(null AS bigint) AS shop_discount,\n            shop_id,\n            shop_name,\n            shop_number,\n            status,\n            CAST(null AS bigint) AS takeout_discount,\n            updated_at,\n            amount AS order_amount,\n            payment_method not in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_online,\n            payment_method in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_offline,\n            payment_method not in (\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS vat_returnable,\n            status = '결제' AS closed,\n            status = '취소' AS canceled\n  FROM      baedaltong_orders_raw\n) o, delivery_apps a\nWHERE     o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_delivery_app_orders.json', 'options': {'sql': ""SELECT    a.business_id,\n          o.*,\n          'baedaltong' AS app_name\nFROM      (\n  SELECT    CAST(null AS timestamp) AS accepted_at,\n            amount,\n            CAST(null AS timestamp) AS arrived_at,\n            created_at,\n            CAST(null AS string) AS delivery_addesss,\n            CAST(null AS bigint) AS delivery_tip,\n            CAST(null AS string) AS delivery_type,\n            CAST(null AS bigint) AS discount,\n            CAST(null AS double) AS fee_rate,\n            CAST(null AS bigint) AS franchise_discount,\n            id,\n            CAST(null AS string) AS items,\n            order_method,\n            order_number,\n            CAST(null AS string) AS order_type,\n            ordered_at,\n            payment,\n            payment_method,\n            payment_method AS payment_type,\n            CAST(null AS boolean) AS reserved,\n            CAST(null AS string) AS service_type,\n            CAST(null AS integer) AS shop_category,\n            CAST(null AS bigint) AS shop_discount,\n            shop_id,\n            shop_name,\n            shop_number,\n            status,\n            CAST(null AS bigint) AS takeout_discount,\n            updated_at,\n            amount AS order_amount,\n            payment_method not in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_online,\n            payment_method in (\n              '배달원에게 현금결제',\n              '배달원에게 현금결제(결제완료)',\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS paid_offline,\n            payment_method not in (\n              '배달원에게 신용카드결제',\n              '배달원에게 신용카드결제(결제완료)'\n            ) AS vat_returnable,\n            status = '결제' AS closed,\n            status = '취소' AS canceled\n  FROM      baedaltong_orders_unique\n) o, delivery_apps a\nWHERE     o.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
823,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=shinhancard,process:::shinhancard:::card_classification_business_id,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=shinhancard'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=shinhancard'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id, classification_code, classification_name\nFROM      shinhancard_business_classification AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]"
824,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard,process:::bccard:::card_classification_business_id,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id,\n          depth_1_code, depth_1_name,\n          depth_2_code, depth_2_name,\n          depth_3_code, depth_3_name\nFROM      bccard_business_classification AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]"
825,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=hyundaicard,process:::hyundaicard:::card_classification_business_id,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=hyundaicard'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=hyundaicard'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id, classification_code, classification_name\nFROM      hyundai_business_classification AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]"
826,process:::mappings:::card_classification_business_id,process:::shinhancard:::card_classification_business_id,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    registration_number, id AS business_id\nFROM      businesses'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id, classification_code, classification_name\nFROM      shinhancard_business_classification AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]"
827,process:::mappings:::card_classification_business_id,process:::bccard:::card_classification_business_id,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    registration_number, id AS business_id\nFROM      businesses'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id,\n          depth_1_code, depth_1_name,\n          depth_2_code, depth_2_name,\n          depth_3_code, depth_3_name\nFROM      bccard_business_classification AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]"
828,process:::mappings:::card_classification_business_id,process:::bccard_new:::card_classification_business_id,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    registration_number, id AS business_id\nFROM      businesses'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id,\n          depth_1_code, depth_1_name,\n          depth_2_code, depth_2_name,\n          depth_3_code, depth_3_name\nFROM      bccard_business_classification_new AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]"
829,process:::mappings:::card_classification_business_id,process:::hyundaicard:::card_classification_business_id,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    registration_number, id AS business_id\nFROM      businesses'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id, classification_code, classification_name\nFROM      hyundai_business_classification AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]"
830,process:::shinhancard:::card_classification_business_id,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=shinhancard,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id, classification_code, classification_name\nFROM      shinhancard_business_classification AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=shinhancard'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=shinhancard'}, 'role': 'sink', 'type': 'file'}]"
831,process:::bccard:::card_classification_business_id,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=bccard,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id,\n          depth_1_code, depth_1_name,\n          depth_2_code, depth_2_name,\n          depth_3_code, depth_3_name\nFROM      bccard_business_classification AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=bccard'}, 'role': 'sink', 'type': 'file'}]"
832,process:::bccard_new:::card_classification_business_id,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=bccard_new,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id,\n          depth_1_code, depth_1_name,\n          depth_2_code, depth_2_name,\n          depth_3_code, depth_3_name\nFROM      bccard_business_classification_new AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=bccard_new'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=bccard_new'}, 'role': 'sink', 'type': 'file'}]"
833,process:::hyundaicard:::card_classification_business_id,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hyundaicard,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification_business_id.json', 'options': {'sql': 'SELECT    mappings.business_id, classification_code, classification_name\nFROM      hyundai_business_classification AS card_classification\nJOIN      mappings\nON        card_classification.registration_number = mappings.registration_number'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hyundaicard'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hyundaicard'}, 'role': 'sink', 'type': 'file'}]"
834,process:::transactions_approved:::add_visit_orders_approved,process:::visits_approved:::add_visit_orders_approved,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'add_visit_orders_approved.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '1999-09-10'\nAND     transacted_at >= '1999-09-10'\nAND     (\n  (purchased_at is not null AND purchase_canceled_at is null) OR\n  (purchased_at is null AND approval_canceled_at is null)\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'add_visit_orders_approved.json', 'options': {'sql': ""SELECT  tx.acquirer_name,\n        tx.amount,\n        tx.approval_canceled_at,\n        tx.approval_seq,\n        tx.authorization_number,\n        tx.base_fee,\n        tx.business_id,\n        tx.card_number,\n        tx.card_type,\n        tx.credential_key,\n        tx.encrypted_card_number,\n        tx.estimated_paid_at,\n        tx.etc_fee,\n        tx.fee,\n        tx.installment,\n        tx.issuer_name,\n        tx.masked_card_number,\n        tx.merchant_number,\n        tx.paid_at,\n        tx.payment,\n        tx.point_fee,\n        tx.purchase_cancel_seq,\n        tx.purchase_canceled_at,\n        tx.purchase_delayed,\n        tx.purchase_seq,\n        tx.purchased_at,\n        tx.scraping_type,\n        tx.status,\n        tx.transacted_at,\n        tx.vat_fee,\n        tx.visit_order,\n        tx.created_at,\n        tx.updated_at,\n        tx.created_at_date\nFROM    (\n  SELECT  explode(append_visit_count(histories)) AS tx\n  FROM    (\n    SELECT  key,\n            business_id,\n            credential_key,\n            collect_list(struct(*)) AS histories\n    FROM    (\n       SELECT acquirer_name,\n              amount,\n              approval_canceled_at,\n              approval_seq,\n              authorization_number,\n              base_fee,\n              business_id,\n              card_number,\n              card_type,\n              credential_key,\n              encrypted_card_number,\n              estimated_paid_at,\n              etc_fee,\n              fee,\n              installment,\n              issuer_name,\n              masked_card_number,\n              merchant_number,\n              paid_at,\n              payment,\n              point_fee,\n              purchase_cancel_seq,\n              purchase_canceled_at,\n              purchase_delayed,\n              purchase_seq,\n              purchased_at,\n              scraping_type,\n              status,\n              transacted_at,\n              vat_fee,\n              created_at,\n              updated_at,\n              date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n              COALESCE(encrypted_card_number, CONCAT_WS('_', issuer_name, card_number)) AS key\n       FROM   transactions_approved\n    )\n    GROUP BY key, business_id, credential_key\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
835,process:::visits_approved:::add_visit_orders_approved,s3://kcd-de-production/raw/etl/snowdon/card_sales/visits_approved,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'add_visit_orders_approved.json', 'options': {'sql': ""SELECT  tx.acquirer_name,\n        tx.amount,\n        tx.approval_canceled_at,\n        tx.approval_seq,\n        tx.authorization_number,\n        tx.base_fee,\n        tx.business_id,\n        tx.card_number,\n        tx.card_type,\n        tx.credential_key,\n        tx.encrypted_card_number,\n        tx.estimated_paid_at,\n        tx.etc_fee,\n        tx.fee,\n        tx.installment,\n        tx.issuer_name,\n        tx.masked_card_number,\n        tx.merchant_number,\n        tx.paid_at,\n        tx.payment,\n        tx.point_fee,\n        tx.purchase_cancel_seq,\n        tx.purchase_canceled_at,\n        tx.purchase_delayed,\n        tx.purchase_seq,\n        tx.purchased_at,\n        tx.scraping_type,\n        tx.status,\n        tx.transacted_at,\n        tx.vat_fee,\n        tx.visit_order,\n        tx.created_at,\n        tx.updated_at,\n        tx.created_at_date\nFROM    (\n  SELECT  explode(append_visit_count(histories)) AS tx\n  FROM    (\n    SELECT  key,\n            business_id,\n            credential_key,\n            collect_list(struct(*)) AS histories\n    FROM    (\n       SELECT acquirer_name,\n              amount,\n              approval_canceled_at,\n              approval_seq,\n              authorization_number,\n              base_fee,\n              business_id,\n              card_number,\n              card_type,\n              credential_key,\n              encrypted_card_number,\n              estimated_paid_at,\n              etc_fee,\n              fee,\n              installment,\n              issuer_name,\n              masked_card_number,\n              merchant_number,\n              paid_at,\n              payment,\n              point_fee,\n              purchase_cancel_seq,\n              purchase_canceled_at,\n              purchase_delayed,\n              purchase_seq,\n              purchased_at,\n              scraping_type,\n              status,\n              transacted_at,\n              vat_fee,\n              created_at,\n              updated_at,\n              date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n              COALESCE(encrypted_card_number, CONCAT_WS('_', issuer_name, card_number)) AS key\n       FROM   transactions_approved\n    )\n    GROUP BY key, business_id, credential_key\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'add_visit_orders_approved.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits_approved', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
836,s3://kcd-de-production/service/message/logs/send_log,process:::send_users:::message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_messages.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_init.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_user_messages.json', 'options': {'sql': ""SELECT user_id, collect_set(campaign_id) AS campaign_ids, collect_set(ad_group_id) AS ad_group_ids\nFROM send_log\nWHERE created_at_date >= '2020-10-30'\nAND user_type = 'cashnote'\nAND status = true\nGROUP BY user_id""}, 'role': 'process', 'type': 'sql'}]"
837,s3://kcd-de-production/service/message/logs/send_log,process:::send_log_by_status:::message_stat_init,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_messages.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_init.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'sql': ""SELECT id_type, id, campaign_id, ad_group_id, creative_id, status,\n        min(timestamp) AS min_ts, max(timestamp) AS max_ts,\n        count(1) AS send_cnt,\n        count(distinct(user_id)) AS send_user_cnt\nFROM (\n    SELECT meta.*, status, user_id, timestamp\n    FROM (\n        SELECT  explode(meta_arr) AS meta, status, user_id, timestamp\n        FROM (\n                SELECT  array(\n                            named_struct('id_type', 'campaign_id', 'id', campaign_id, 'campaign_id', campaign_id, 'ad_group_id', 'n/a', 'creative_id', 'n/a'),\n                            named_struct('id_type', 'ad_group_id', 'id', ad_group_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', 'n/a'),\n                            named_struct('id_type', 'creative_id', 'id', creative_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', creative_id)\n                        ) AS meta_arr,\n                        status, user_id, timestamp,\n                        row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n                FROM send_log\n                WHERE created_at_date between '2020-01-01' AND '2021-01-14'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id, campaign_id, ad_group_id, creative_id, status""}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': ""SELECT id_type, id, campaign_id, ad_group_id, creative_id, status,\n        min(timestamp) AS min_ts, max(timestamp) AS max_ts,\n        count(1) AS send_cnt,\n        count(distinct(user_id)) AS send_user_cnt\nFROM (\n    SELECT meta.*, status, user_id, timestamp\n    FROM (\n        SELECT  explode(meta_arr) AS meta, status, user_id, timestamp\n        FROM (\n                SELECT  array(\n                            named_struct('id_type', 'campaign_id', 'id', campaign_id, 'campaign_id', campaign_id, 'ad_group_id', 'n/a', 'creative_id', 'n/a'),\n                            named_struct('id_type', 'ad_group_id', 'id', ad_group_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', 'n/a'),\n                            named_struct('id_type', 'creative_id', 'id', creative_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', creative_id)\n                        ) AS meta_arr,\n                        status, user_id, timestamp,\n                        row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n                FROM send_log\n                WHERE created_at_date between '2020-01-01' AND '2021-01-16'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id, campaign_id, ad_group_id, creative_id, status""}, 'role': 'process', 'type': 'sql'}]"
838,s3://kcd-de-production/service/message/logs/send_log,process:::send_log_by_status:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_messages.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat_init.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/logs/send_log'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT id_type, id, campaign_id, ad_group_id, creative_id, status,\n        min(timestamp) AS min_ts, max(timestamp) AS max_ts,\n        count(1) AS send_cnt,\n        count(distinct(user_id)) AS send_user_cnt\nFROM (\n    SELECT meta.*, status, user_id, timestamp\n    FROM (\n        SELECT  explode(meta_arr) AS meta, status, user_id, timestamp\n        FROM (\n                SELECT  array(\n                            named_struct('id_type', 'campaign_id', 'id', campaign_id, 'campaign_id', campaign_id, 'ad_group_id', 'n/a', 'creative_id', 'n/a'),\n                            named_struct('id_type', 'ad_group_id', 'id', ad_group_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', 'n/a'),\n                            named_struct('id_type', 'creative_id', 'id', creative_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', creative_id)\n                        ) AS meta_arr,\n                        status, user_id, timestamp,\n                        row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n                FROM send_log\n                WHERE created_at_date = '2021-01-29'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id, campaign_id, ad_group_id, creative_id, status""}, 'role': 'process', 'type': 'sql'}]"
839,process:::click_users:::message,s3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=message/name=click,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_messages.json', 'options': {'sql': ""SELECT user_id, collect_set(campaign_id) AS campaign_ids, collect_set(ad_group_id) AS ad_group_ids\nFROM click_log\nWHERE created_at_date >= '2020-10-30'\nAND user_type = 'cashnote'\nAND status = true\nGROUP BY user_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_user_messages.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=message/name=click'}, 'role': 'sink', 'type': 'file'}]"
840,process:::send_users:::message,s3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=message/name=send,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_messages.json', 'options': {'sql': ""SELECT user_id, collect_set(campaign_id) AS campaign_ids, collect_set(ad_group_id) AS ad_group_ids\nFROM send_log\nWHERE created_at_date >= '2020-10-30'\nAND user_type = 'cashnote'\nAND status = true\nGROUP BY user_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_user_messages.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=message/name=send'}, 'role': 'sink', 'type': 'file'}]"
841,s3://kcd-de-staging/raw/etl/pos/receipt,process:::add_h3:::delivery_receipt_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_receipt_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/raw/etl/pos/receipt'}, 'role': 'source', 'type': 'file'}, {'filename': 'parse_receipt.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/pos/receipt', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT    business_id, h3.index AS h3_index, h3.resolution AS h3_resolution,\n          order_amount,\n          day, week, month\nFROM (\n        SELECT    *, explode(h3_arr) AS h3\n        FROM (\n                SELECT\n                          business_id, app_name, total_amount, order_amount,\n                          array(\n                              named_struct('index', toH3Index(pos_x, pos_y, 9), 'resolution', 9),\n                              named_struct('index', toH3Index(pos_x, pos_y, 10), 'resolution', 10)\n                          ) AS h3_arr,\n                          date_trunc('DAY',order_time) AS day,\n                          date_trunc('WEEK', order_time) AS week,\n                          date_trunc('MONTH', order_time) AS month\n                FROM      receipts\n                WHERE     app_name in ('baemin', 'yogiyo')\n                AND       created_at_date between '2020-12-21' AND '2020-12-21'\n                AND       order_time is not null\n        )\n)""}, 'role': 'process', 'type': 'sql'}]"
842,process:::add_h3:::delivery_receipt_stats,process:::order_by_day:::delivery_receipt_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT    business_id, h3.index AS h3_index, h3.resolution AS h3_resolution,\n          order_amount,\n          day, week, month\nFROM (\n        SELECT    *, explode(h3_arr) AS h3\n        FROM (\n                SELECT\n                          business_id, app_name, total_amount, order_amount,\n                          array(\n                              named_struct('index', toH3Index(pos_x, pos_y, 9), 'resolution', 9),\n                              named_struct('index', toH3Index(pos_x, pos_y, 10), 'resolution', 10)\n                          ) AS h3_arr,\n                          date_trunc('DAY',order_time) AS day,\n                          date_trunc('WEEK', order_time) AS week,\n                          date_trunc('MONTH', order_time) AS month\n                FROM      receipts\n                WHERE     app_name in ('baemin', 'yogiyo')\n                AND       created_at_date between '2020-12-21' AND '2020-12-21'\n                AND       order_time is not null\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT\n          business_id, day AS target_date,\n          'day' AS date_type,\n          h3_index, h3_resolution,\n          SUM(order_amount) AS order_amount_sum,\n          COUNT(1) AS order_cnt\nFROM  add_h3\nGROUP BY business_id, day, h3_index, h3_resolution""}, 'role': 'process', 'type': 'sql'}]"
843,process:::add_h3:::delivery_receipt_stats,process:::order_by_week:::delivery_receipt_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT    business_id, h3.index AS h3_index, h3.resolution AS h3_resolution,\n          order_amount,\n          day, week, month\nFROM (\n        SELECT    *, explode(h3_arr) AS h3\n        FROM (\n                SELECT\n                          business_id, app_name, total_amount, order_amount,\n                          array(\n                              named_struct('index', toH3Index(pos_x, pos_y, 9), 'resolution', 9),\n                              named_struct('index', toH3Index(pos_x, pos_y, 10), 'resolution', 10)\n                          ) AS h3_arr,\n                          date_trunc('DAY',order_time) AS day,\n                          date_trunc('WEEK', order_time) AS week,\n                          date_trunc('MONTH', order_time) AS month\n                FROM      receipts\n                WHERE     app_name in ('baemin', 'yogiyo')\n                AND       created_at_date between '2020-12-21' AND '2020-12-21'\n                AND       order_time is not null\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT\n          business_id, week AS target_date,\n          'week' AS date_type,\n          h3_index, h3_resolution,\n          SUM(order_amount) AS order_amount_sum,\n          COUNT(1) AS order_cnt\nFROM  add_h3\nGROUP BY business_id, week, h3_index, h3_resolution""}, 'role': 'process', 'type': 'sql'}]"
844,process:::add_h3:::delivery_receipt_stats,process:::order_by_month:::delivery_receipt_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT    business_id, h3.index AS h3_index, h3.resolution AS h3_resolution,\n          order_amount,\n          day, week, month\nFROM (\n        SELECT    *, explode(h3_arr) AS h3\n        FROM (\n                SELECT\n                          business_id, app_name, total_amount, order_amount,\n                          array(\n                              named_struct('index', toH3Index(pos_x, pos_y, 9), 'resolution', 9),\n                              named_struct('index', toH3Index(pos_x, pos_y, 10), 'resolution', 10)\n                          ) AS h3_arr,\n                          date_trunc('DAY',order_time) AS day,\n                          date_trunc('WEEK', order_time) AS week,\n                          date_trunc('MONTH', order_time) AS month\n                FROM      receipts\n                WHERE     app_name in ('baemin', 'yogiyo')\n                AND       created_at_date between '2020-12-21' AND '2020-12-21'\n                AND       order_time is not null\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT\n          business_id, month AS target_date,\n          'month' AS date_type,\n          h3_index, h3_resolution,\n          SUM(order_amount) AS order_amount_sum,\n          COUNT(1) AS order_cnt\nFROM  add_h3\nGROUP BY business_id, month, h3_index, h3_resolution""}, 'role': 'process', 'type': 'sql'}]"
845,process:::order_by_day:::delivery_receipt_stats,process:::merged:::delivery_receipt_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT\n          business_id, day AS target_date,\n          'day' AS date_type,\n          h3_index, h3_resolution,\n          SUM(order_amount) AS order_amount_sum,\n          COUNT(1) AS order_cnt\nFROM  add_h3\nGROUP BY business_id, day, h3_index, h3_resolution""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT\n          business_id AS public_id, target_date, date_type, h3_index, h3_resolution,\n          to_json(named_struct(\n              'order_amount_sum', order_amount_sum,\n              'order_cnt', order_cnt\n          )) AS metric\nFROM (\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_day\n\n      UNION ALL\n\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_week\n\n      UNION ALL\n\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_month\n)""}, 'role': 'process', 'type': 'sql'}]"
846,process:::order_by_week:::delivery_receipt_stats,process:::merged:::delivery_receipt_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT\n          business_id, week AS target_date,\n          'week' AS date_type,\n          h3_index, h3_resolution,\n          SUM(order_amount) AS order_amount_sum,\n          COUNT(1) AS order_cnt\nFROM  add_h3\nGROUP BY business_id, week, h3_index, h3_resolution""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT\n          business_id AS public_id, target_date, date_type, h3_index, h3_resolution,\n          to_json(named_struct(\n              'order_amount_sum', order_amount_sum,\n              'order_cnt', order_cnt\n          )) AS metric\nFROM (\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_day\n\n      UNION ALL\n\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_week\n\n      UNION ALL\n\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_month\n)""}, 'role': 'process', 'type': 'sql'}]"
847,process:::order_by_month:::delivery_receipt_stats,process:::merged:::delivery_receipt_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT\n          business_id, month AS target_date,\n          'month' AS date_type,\n          h3_index, h3_resolution,\n          SUM(order_amount) AS order_amount_sum,\n          COUNT(1) AS order_cnt\nFROM  add_h3\nGROUP BY business_id, month, h3_index, h3_resolution""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT\n          business_id AS public_id, target_date, date_type, h3_index, h3_resolution,\n          to_json(named_struct(\n              'order_amount_sum', order_amount_sum,\n              'order_cnt', order_cnt\n          )) AS metric\nFROM (\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_day\n\n      UNION ALL\n\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_week\n\n      UNION ALL\n\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_month\n)""}, 'role': 'process', 'type': 'sql'}]"
848,process:::merged:::delivery_receipt_stats,s3://kcd-de-staging/raw/etl/pos/receipt_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT\n          business_id AS public_id, target_date, date_type, h3_index, h3_resolution,\n          to_json(named_struct(\n              'order_amount_sum', order_amount_sum,\n              'order_cnt', order_cnt\n          )) AS metric\nFROM (\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_day\n\n      UNION ALL\n\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_week\n\n      UNION ALL\n\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_month\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_receipt_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/pos/receipt_stats'}, 'role': 'sink', 'type': 'file'}]"
849,process:::merged:::delivery_receipt_stats,jdbc_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_receipt_stats.json', 'options': {'sql': ""SELECT\n          business_id AS public_id, target_date, date_type, h3_index, h3_resolution,\n          to_json(named_struct(\n              'order_amount_sum', order_amount_sum,\n              'order_cnt', order_cnt\n          )) AS metric\nFROM (\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_day\n\n      UNION ALL\n\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_week\n\n      UNION ALL\n\n      SELECT  business_id, target_date, date_type, h3_index, h3_resolution, order_amount_sum, order_cnt\n      FROM    order_by_month\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'uid_type:bills_id_type,menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats_v2', 'conflictColumns': 'uid,uid_type,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus', 'conflictColumns': 'business_id,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'daily_delivery_orders_stat.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'daily_delivery_orders_stat', 'conflictColumns': 'business_id,delivery_app,shop_number,date', 'updateColumns': 'closed_orders_amount,closed_orders_count,cancelled_orders_amount,cancelled_orders_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'hometax_business_label_upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'dbtable': 'hometax_businesses', 'conflictColumns': 'business_id', 'updateColumns': 'regular_employees_count,size_category,updated_at', 'typeCastColumns': 'size_category:hometax_business_size_category'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_sdk_event.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'sdk_name,event_type, user_type', 'updateColumns': 'sdk_name,event_type,user_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'delivery_receipt_stats.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-staging.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_staging', 'user': 'plover', 'password': 'welcome!', 'operation': 'upsert', 'dbtable': 'pos_receipt_stat', 'conflictColumns': 'public_id,target_date,date_type,h3_index,h3_resolution', 'updateColumns': 'metric', 'typeCastColumns': 'metric:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats', 'conflictColumns': 'business_id,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus', 'conflictColumns': 'business_id,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_menu_top_k.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_menu_top_k', 'conflictColumns': 'business_id,order_month,time_bucket,name', 'updateColumns': 'total_amount,total_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}]"
850,process:::cashnote_web_click:::click_log_to_es,process:::add_ad_group_meta:::click_log_to_es,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'click_log.json', 'options': {'sql': ""    SELECT  *\n    FROM (\n            SELECT\n                    'click' AS type,\n                    timestamp,\n                    parse_url(current_url, 'QUERY', 'campaign_id') AS campaign_id,\n                    parse_url(current_url, 'QUERY', 'ad_group_id') AS ad_group_id,\n                    parse_url(current_url, 'QUERY', 'creative_id') AS creative_id,\n                    user_id,\n                    true AS status,\n                    'cashnote_web' AS sdk_type\n            FROM (\n                    SELECT  timestamp,\n                            prop_user_id AS user_id,\n                            `prop_$current_url` AS current_url,\n                            row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n                    FROM    tb_kcd_cashnote_web\n                    WHERE   event = '$web_event'\n                    AND     `prop_$event_type` = 'pageview'\n                    AND     prop_user_id IS NOT NULL\n            )\n            WHERE rank = 1\n    )\n    WHERE   campaign_id IS NOT NULL\n    AND     ad_group_id IS NOT NULL\n    AND     creative_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'click_log.json', 'options': {'sql': 'SELECT\n        cashnote_web_click.*,\n        ad_group.user_type AS user_type,\n        ad_group.type AS ad_group_type\nFROM    cashnote_web_click\nLEFT OUTER JOIN ad_group\nON      cashnote_web_click.ad_group_id = ad_group.id'}, 'role': 'process', 'type': 'sql'}]"
851,process:::add_ad_group_meta:::click_log_to_es,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'click_log.json', 'options': {'sql': 'SELECT\n        cashnote_web_click.*,\n        ad_group.user_type AS user_type,\n        ad_group.type AS ad_group_type\nFROM    cashnote_web_click\nLEFT OUTER JOIN ad_group\nON      cashnote_web_click.ad_group_id = ad_group.id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
852,process:::transform:::cashnote_user_stat,process:::filtered:::cashnote_user_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_stat.json', 'options': {'sql': '  SELECT    u.user_id,\n            business_stats.*\n  FROM      business_stats\n  JOIN  (\n      SELECT  *, explode(memberships.memberships) AS membership\n      FROM  users\n  ) u\n  ON    business_stats.business_id = u.membership.business_id\n'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_user_stat.json', 'options': {'sql': ""SELECT\n          date_id,\n          CAST(date_id AS timestamp) AS timestamp,\n          CONCAT(user_id, '_', business_id) AS target_id,\n          user_id,\n          business_id,\n          card_sales_transactions.amount_sum AS card_sales_amount_sum,\n          card_sales_transactions.tx_count AS card_sales_tx_count\nFROM      transform""}, 'role': 'process', 'type': 'sql'}]"
853,process:::filtered:::cashnote_user_stat,s3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=cashnote_user_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_stat.json', 'options': {'sql': ""SELECT\n          date_id,\n          CAST(date_id AS timestamp) AS timestamp,\n          CONCAT(user_id, '_', business_id) AS target_id,\n          user_id,\n          business_id,\n          card_sales_transactions.amount_sum AS card_sales_amount_sum,\n          card_sales_transactions.tx_count AS card_sales_tx_count\nFROM      transform""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_user_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=cashnote_user_stats', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=cashnote_user_stats'}, 'role': 'source', 'type': 'file'}]"
854,s3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=cashnote_user_stats,process:::add_join_field:::cashnote_user_stats_es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=cashnote_user_stats', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=cashnote_user_stats'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'cashnote_user_stat_es_sink.json', 'options': {'sql': ""  SELECT\n            named_struct(\n                'name', 'stat',\n                'parent', target_id\n            ) AS join_field,\n            *\n  FROM      cashnote_user_stats\n  WHERE     user_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
855,s3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_cashnote_web,process:::valid_event:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_cashnote_web', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)\nAND     created_at_date between '2020-09-01' AND '2020-10-12'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  _event_id, 'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_cashnote_ruby' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_ruby' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)""}, 'role': 'process', 'type': 'sql'}]"
856,s3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_cashnote_ruby,process:::valid_event:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_cashnote_ruby', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)\nAND     created_at_date between '2020-09-01' AND '2020-10-12'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  _event_id, 'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_cashnote_ruby' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_ruby' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)""}, 'role': 'process', 'type': 'sql'}]"
857,s3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_redbird_web,process:::valid_event:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_redbird_web', 'schema': '_event_id STRING, timestamp LONG, event STRING, `prop_$event_type` STRING, prop_user_id LONG, `prop_$current_url`STRING', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)\nAND     created_at_date between '2020-09-01' AND '2020-10-12'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  _event_id, 'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_cashnote_ruby' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_ruby' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)""}, 'role': 'process', 'type': 'sql'}]"
858,s3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_redbird_ruby,process:::valid_event:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_redbird_ruby', 'schema': '_event_id STRING, timestamp LONG, event STRING, `prop_$event_type` STRING, prop_user_id LONG, `prop_$current_url`STRING', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)\nAND     created_at_date between '2020-09-01' AND '2020-10-12'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  _event_id, 'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_cashnote_ruby' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_ruby' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)""}, 'role': 'process', 'type': 'sql'}]"
859,s3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_bluebird_web,process:::valid_event:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=kcd_bluebird_web', 'schema': '_event_id STRING, timestamp LONG, event STRING, `prop_$event_type` STRING, prop_cashnote_user_id LONG, prop_paynote_user_id LONG, `prop_$current_url`STRING', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT  'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\nAND     created_at_date between '2020-09-01' AND '2020-10-12'\n\nUNION ALL\n\nSELECT  'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)\nAND     created_at_date between '2020-09-01' AND '2020-10-12'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT  _event_id, 'kcd_cashnote_web' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_cashnote_ruby' AS sdk_name, timestamp,  prop_user_id AS cashnote_user_id,  null AS paynote_user_id,  event\nFROM    kcd_cashnote_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_web' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_web\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_redbird_ruby' AS sdk_name, timestamp,  null AS cashnote_user_id,    prop_user_id AS paynote_user_id,    event\nFROM    kcd_redbird_ruby\nWHERE   event != '$web_event'\nAND     prop_user_id IS NOT NULL\n\nUNION ALL\n\nSELECT  _event_id, 'kcd_bluebird_web' AS sdk_name, timestamp,  prop_cashnote_user_id AS cashnote_user_id, prop_paynote_user_id AS paynote_user_id, event\nFROM    kcd_bluebird_web\nWHERE   event != '$web_event'\nAND     (prop_cashnote_user_id IS NOT NULL OR prop_paynote_user_id IS NOT NULL)""}, 'role': 'process', 'type': 'sql'}]"
860,process:::valid_conv_log:::conv_log,process:::conv_with_click_log:::conv_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log.json', 'options': {'sql': ""SELECT\n        cur_conv_log.*\nFROM    cur_conv_log\nLEFT OUTER JOIN (\n    SELECT  *\n    FROM  conv_log\n    WHERE   created_at_date between '2021-01-19' AND '2021-01-29'\n) AS prev_conv_log\nON  cur_conv_log.campaign_id = prev_conv_log.campaign_id\nAND cur_conv_log.ad_group_id = prev_conv_log.ad_group_id\nAND cur_conv_log.user_id = prev_conv_log.user_id\nWHERE  prev_conv_log.user_id IS NULL\n""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'conv_log_init.json', 'options': {'sql': ""SELECT\n         from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd') AS created_at_date,\n         conv.timestamp,\n         conv.event_type,\n         conv.user_id,\n         conv.sdk_name,\n         click.timestamp AS click_timestamp,\n         click.campaign_id,\n         click.ad_group_id,\n         click.creative_id,\n         (conv.timestamp - click.timestamp) AS conv_duration_millis,\n         datediff(\n             from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd'),\n             from_unixtime(click.timestamp/1000, 'yyyy-MM-dd')\n         ) AS diff_days\nFROM    valid_click_log AS click\nJOIN    cur_conv_log AS conv\nON click.campaign_id = conv.campaign_id\nAND click.ad_group_id = conv.ad_group_id\nAND click.user_id = conv.user_id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'conv_log.json', 'options': {'sql': ""SELECT\n         from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd') AS created_at_date,\n         conv.timestamp,\n         conv._event_id,\n         conv.event_type,\n         conv.user_id,\n         conv.sdk_name,\n         click.timestamp AS click_timestamp,\n         click.campaign_id,\n         click.ad_group_id,\n         click.creative_id,\n         (conv.timestamp - click.timestamp) AS conv_duration_millis,\n         datediff(\n             from_unixtime(conv.timestamp/1000, 'yyyy-MM-dd'),\n             from_unixtime(click.timestamp/1000, 'yyyy-MM-dd')\n         ) AS diff_days\nFROM    valid_click_log AS click\nJOIN    valid_conv_log AS conv\nON click.campaign_id = conv.campaign_id\nAND click.ad_group_id = conv.ad_group_id\nAND click.user_id = conv.user_id""}, 'role': 'process', 'type': 'sql'}]"
861,s3://kcd-de-production/service/message/target_messages,process:::user_message_history_cur:::user_message_history,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_message_history.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/target_messages'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'user_message_history.json', 'options': {'sql': ""  SELECT  DISTINCT\n          meta_user_id AS user_id,\n          meta_business_id AS business_id,\n          meta_ad_group_id AS ad_group_id,\n          meta_user_type AS user_type\n  FROM    dmp_message_result_stat\n  WHERE   meta_user_id IS NOT NULL\n  AND     status = true\n  AND     created_at_date BETWEEN '2021-01-28' AND '2021-01-29'\n  AND     meta_campaign_id != 2\n\n  UNION ALL\n\n  SELECT  DISTINCT\n          meta.user_id,\n          meta.business_id,\n          meta.ad_group_id,\n          meta.user_type\n  FROM    target_messages\n  WHERE   date_id BETWEEN '2021-01-28' AND '2021-01-29'\n  AND     meta.campaign_id = 2""}, 'role': 'process', 'type': 'sql'}]"
862,s3://kcd-de-production/raw/catalog_v2/raw/tb=dmp_message_result_stat,process:::user_message_history_cur:::user_message_history,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_message_history.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=dmp_message_result_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'user_message_history.json', 'options': {'sql': ""  SELECT  DISTINCT\n          meta_user_id AS user_id,\n          meta_business_id AS business_id,\n          meta_ad_group_id AS ad_group_id,\n          meta_user_type AS user_type\n  FROM    dmp_message_result_stat\n  WHERE   meta_user_id IS NOT NULL\n  AND     status = true\n  AND     created_at_date BETWEEN '2021-01-28' AND '2021-01-29'\n  AND     meta_campaign_id != 2\n\n  UNION ALL\n\n  SELECT  DISTINCT\n          meta.user_id,\n          meta.business_id,\n          meta.ad_group_id,\n          meta.user_type\n  FROM    target_messages\n  WHERE   date_id BETWEEN '2021-01-28' AND '2021-01-29'\n  AND     meta.campaign_id = 2""}, 'role': 'process', 'type': 'sql'}]"
863,process:::user_message_history_cur:::user_message_history,process:::user_message_history:::user_message_history,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_message_history.json', 'options': {'sql': ""  SELECT  DISTINCT\n          meta_user_id AS user_id,\n          meta_business_id AS business_id,\n          meta_ad_group_id AS ad_group_id,\n          meta_user_type AS user_type\n  FROM    dmp_message_result_stat\n  WHERE   meta_user_id IS NOT NULL\n  AND     status = true\n  AND     created_at_date BETWEEN '2021-01-28' AND '2021-01-29'\n  AND     meta_campaign_id != 2\n\n  UNION ALL\n\n  SELECT  DISTINCT\n          meta.user_id,\n          meta.business_id,\n          meta.ad_group_id,\n          meta.user_type\n  FROM    target_messages\n  WHERE   date_id BETWEEN '2021-01-28' AND '2021-01-29'\n  AND     meta.campaign_id = 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'user_message_history.json', 'options': {'sql': 'SELECT    m.*\nFROM (\n    SELECT\n              IF(prev.user_id IS NOT NULL, struct(prev.*), struct(cur.*)) AS m\n    FROM      user_message_history_prev AS prev\n    FULL OUTER JOIN   user_message_history_cur AS cur\n    ON    prev.business_id = cur.business_id\n    AND   prev.user_id = cur.user_id\n    AND   prev.ad_group_id = cur.ad_group_id\n    AND   prev.user_type = cur.user_type\n)'}, 'role': 'process', 'type': 'sql'}]"
864,process:::user_message_history:::user_message_history,s3://kcd-de-production/service/message/user_history/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_message_history.json', 'options': {'sql': 'SELECT    m.*\nFROM (\n    SELECT\n              IF(prev.user_id IS NOT NULL, struct(prev.*), struct(cur.*)) AS m\n    FROM      user_message_history_prev AS prev\n    FULL OUTER JOIN   user_message_history_cur AS cur\n    ON    prev.business_id = cur.business_id\n    AND   prev.user_id = cur.user_id\n    AND   prev.ad_group_id = cur.ad_group_id\n    AND   prev.user_type = cur.user_type\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'source', 'type': 'file'}, {'filename': 'user_message_history.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}, {'filename': 'user_message_history.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'sink', 'type': 'file'}, {'filename': 'transform_message.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/user_history/date_id=2021-01-29'}, 'role': 'source', 'type': 'file'}]"
865,s3://kcd-de-production/service/message/target_group/ts=08_15,process:::valid_ad_group:::update_extract_result,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_extract_result.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/target_group/date_id=2021-01-29/ts=08_15'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'update_extract_result.json', 'options': {'sql': 'SELECT  ad_group.*\nFROM (\n        SELECT DISTINCT meta.ad_group_id AS ad_group_id\n        FROM   target_group\n) AS t\nJOIN ad_group\nON t.ad_group_id = ad_group.id'}, 'role': 'process', 'type': 'sql'}]"
866,s3://kcd-de-production/service/message/target_messages/ts=08_15,process:::update_ad_group:::update_extract_result,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_extract_result.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=08_15'}, 'role': 'source', 'type': 'file'}, {'filename': 'update_ad_history.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=08_15'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'update_extract_result.json', 'options': {'sql': ""SELECT\n        valid_ad_group.id,\n        valid_ad_group.campaign_id,\n        valid_ad_group.name,\n        valid_ad_group.description,\n        valid_ad_group.type,\n        valid_ad_group.target,\n        valid_ad_group.target_type,\n        'EXTRACT_COMPLETE' AS status,\n        valid_ad_group.path,\n        valid_ad_group.population,\n        valid_ad_group.frequency_cap,\n        valid_ad_group.enabled,\n        valid_ad_group.created_at,\n        current_timestamp() AS updated_at,\n        valid_ad_group.use_today_data,\n        valid_ad_group.report_name,\n        IF(valid_messages.cnt IS NULL, null,\n            CONCAT('s3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=08_15/ad_group_id=',  valid_ad_group.id)\n        ) AS extract_path,\n        IF(valid_messages.cnt IS NULL, 0, valid_messages.cnt) AS target_count\nFROM    valid_ad_group\nLEFT OUTER JOIN (\n    SELECT\n            meta.ad_group_id,\n            count(1) AS cnt\n    FROM  target_messages\n    WHERE status.valid = true\n    GROUP BY meta.ad_group_id\n) AS valid_messages\nON valid_ad_group.id = valid_messages.ad_group_id""}, 'role': 'process', 'type': 'sql'}]"
867,s3://kcd-de-production/service/message/target_messages/ts=08_15,process:::update_ad_history:::target_extract_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_extract_result.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=08_15'}, 'role': 'source', 'type': 'file'}, {'filename': 'update_ad_history.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=08_15'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'update_ad_history.json', 'options': {'sql': ""  SELECT\n          n.message_id,\n          n.campaign_id,\n          n.ad_group_id,\n          n.creative_id,\n          n.business_id,\n          n.user_id,\n          n.step,\n          n.status,\n          n.message,\n          n.error_detail,\n          current_timestamp() AS created_at,\n          current_timestamp() AS updated_at\n  FROM (\n          SELECT\n                  CONCAT(\n                      meta.campaign_id, meta.ad_group_id, meta.creative_id,\n                      '_',\n                      meta.business_id, meta.user_id\n                  ) AS message_id,\n                  CAST(meta.campaign_id AS INT) AS campaign_id,\n                  CAST(meta.ad_group_id AS INT) AS ad_group_id,\n                  CAST(meta.creative_id AS INT) AS creative_id,\n                  CAST(meta.business_id AS INT) AS business_id,\n                  CAST(meta.user_id AS INT) AS user_id,\n                  'EXTRACT' AS step,\n                  IF(status.valid = true, 'SUCCESS', 'FAIL') AS status,\n                  status.error AS message,\n                  '' AS error_detail\n          FROM    target_messages\n          WHERE   meta.campaign_id = 2\n  ) AS n\n  LEFT OUTER JOIN ad_history\n  ON  n.message_id = ad_history.message_id\n  WHERE   ad_history.message_id IS NULL""}, 'role': 'process', 'type': 'sql'}]"
868,process:::valid_ad_group:::update_extract_result,process:::update_ad_group:::update_extract_result,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_extract_result.json', 'options': {'sql': 'SELECT  ad_group.*\nFROM (\n        SELECT DISTINCT meta.ad_group_id AS ad_group_id\n        FROM   target_group\n) AS t\nJOIN ad_group\nON t.ad_group_id = ad_group.id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'update_extract_result.json', 'options': {'sql': ""SELECT\n        valid_ad_group.id,\n        valid_ad_group.campaign_id,\n        valid_ad_group.name,\n        valid_ad_group.description,\n        valid_ad_group.type,\n        valid_ad_group.target,\n        valid_ad_group.target_type,\n        'EXTRACT_COMPLETE' AS status,\n        valid_ad_group.path,\n        valid_ad_group.population,\n        valid_ad_group.frequency_cap,\n        valid_ad_group.enabled,\n        valid_ad_group.created_at,\n        current_timestamp() AS updated_at,\n        valid_ad_group.use_today_data,\n        valid_ad_group.report_name,\n        IF(valid_messages.cnt IS NULL, null,\n            CONCAT('s3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=08_15/ad_group_id=',  valid_ad_group.id)\n        ) AS extract_path,\n        IF(valid_messages.cnt IS NULL, 0, valid_messages.cnt) AS target_count\nFROM    valid_ad_group\nLEFT OUTER JOIN (\n    SELECT\n            meta.ad_group_id,\n            count(1) AS cnt\n    FROM  target_messages\n    WHERE status.valid = true\n    GROUP BY meta.ad_group_id\n) AS valid_messages\nON valid_ad_group.id = valid_messages.ad_group_id""}, 'role': 'process', 'type': 'sql'}]"
869,process:::update_ad_group:::update_extract_result,update_ad_group_db_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_extract_result.json', 'options': {'sql': ""SELECT\n        valid_ad_group.id,\n        valid_ad_group.campaign_id,\n        valid_ad_group.name,\n        valid_ad_group.description,\n        valid_ad_group.type,\n        valid_ad_group.target,\n        valid_ad_group.target_type,\n        'EXTRACT_COMPLETE' AS status,\n        valid_ad_group.path,\n        valid_ad_group.population,\n        valid_ad_group.frequency_cap,\n        valid_ad_group.enabled,\n        valid_ad_group.created_at,\n        current_timestamp() AS updated_at,\n        valid_ad_group.use_today_data,\n        valid_ad_group.report_name,\n        IF(valid_messages.cnt IS NULL, null,\n            CONCAT('s3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=08_15/ad_group_id=',  valid_ad_group.id)\n        ) AS extract_path,\n        IF(valid_messages.cnt IS NULL, 0, valid_messages.cnt) AS target_count\nFROM    valid_ad_group\nLEFT OUTER JOIN (\n    SELECT\n            meta.ad_group_id,\n            count(1) AS cnt\n    FROM  target_messages\n    WHERE status.valid = true\n    GROUP BY meta.ad_group_id\n) AS valid_messages\nON valid_ad_group.id = valid_messages.ad_group_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'id', 'updateColumns': 'extract_path,target_count,updated_at'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'target_download.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'id', 'updateColumns': 'status,path,population,updated_at'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_extract_result.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_group', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'id', 'updateColumns': 'status,extract_path,target_count,updated_at'}, 'role': 'sink', 'type': 'jdbc'}]"
870,process:::mappings:::registration_number_common_location,process:::business_location:::registration_number_common_location,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_common_location.json', 'options': {'sql': 'SELECT    registration_number, id AS business_id\nFROM      businesses'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_common_location.json', 'options': {'sql': 'SELECT    mappings.registration_number,\n          business_common_location.*\nFROM  business_common_location\nJOIN  mappings\nON    business_common_location.business_id = mappings.business_id'}, 'role': 'process', 'type': 'sql'}]"
871,process:::business_location:::registration_number_common_location,process:::merged_location:::registration_number_common_location,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_common_location.json', 'options': {'sql': 'SELECT    mappings.registration_number,\n          business_common_location.*\nFROM  business_common_location\nJOIN  mappings\nON    business_common_location.business_id = mappings.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_common_location.json', 'options': {'sql': ""SELECT\n         registration_number,\n         location.*,\n         array_except(candidates, array(location)) AS candidates\nFROM (\n        SELECT\n                  nvl(business_location.registration_number, merchant_location.registration_number) AS registration_number,\n                  CASE\n                      WHEN   business_location.registration_number IS NOT NULL THEN struct(\n                                                                                        business_location.geo_point,\n                                                                                        business_location.full_address,\n                                                                                        business_location.b_code,\n                                                                                        business_location.sido,\n                                                                                        business_location.sido_code,\n                                                                                        business_location.sigungu,\n                                                                                        business_location.sigungu_code,\n                                                                                        business_location.dong,\n                                                                                        business_location.h_codes\n                                                                                    )\n                      ELSE   named_struct(\n                                'geo_point',    merchant_location.candidates[0].geo_point,\n                                'full_address', merchant_location.candidates[0].full_address,\n                                'b_code',       merchant_location.candidates[0].b_code,\n                                'sido',         merchant_location.candidates[0].sido,\n                                'sido_code',    merchant_location.candidates[0].sido_code,\n                                'sigungu',      merchant_location.candidates[0].sigungu,\n                                'sigungu_code', merchant_location.candidates[0].sigungu_code,\n                                'dong',         merchant_location.candidates[0].dong,\n                                'h_codes',      merchant_location.candidates[0].h_codes\n                            )\n                  END  AS location,\n                  candidates\n        FROM      business_location\n        FULL OUTER JOIN   merchant_location\n        ON        business_location.registration_number = merchant_location.registration_number\n)""}, 'role': 'process', 'type': 'sql'}]"
872,process:::merchant_location:::registration_number_common_location,process:::merged_location:::registration_number_common_location,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_common_location.json', 'options': {'sql': 'SELECT\n      registration_number,\n      candidates\nFROM (\n      SELECT\n              registration_number,\n              collect_set(struct(\n                geo_point,\n                full_address,\n                b_code,\n                sido,\n                sido_code,\n                sigungu,\n                sigungu_code,\n                dong,\n                h_codes\n              )) AS candidates\n      FROM  merchant_common_location\n      GROUP BY registration_number\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_common_location.json', 'options': {'sql': ""SELECT\n         registration_number,\n         location.*,\n         array_except(candidates, array(location)) AS candidates\nFROM (\n        SELECT\n                  nvl(business_location.registration_number, merchant_location.registration_number) AS registration_number,\n                  CASE\n                      WHEN   business_location.registration_number IS NOT NULL THEN struct(\n                                                                                        business_location.geo_point,\n                                                                                        business_location.full_address,\n                                                                                        business_location.b_code,\n                                                                                        business_location.sido,\n                                                                                        business_location.sido_code,\n                                                                                        business_location.sigungu,\n                                                                                        business_location.sigungu_code,\n                                                                                        business_location.dong,\n                                                                                        business_location.h_codes\n                                                                                    )\n                      ELSE   named_struct(\n                                'geo_point',    merchant_location.candidates[0].geo_point,\n                                'full_address', merchant_location.candidates[0].full_address,\n                                'b_code',       merchant_location.candidates[0].b_code,\n                                'sido',         merchant_location.candidates[0].sido,\n                                'sido_code',    merchant_location.candidates[0].sido_code,\n                                'sigungu',      merchant_location.candidates[0].sigungu,\n                                'sigungu_code', merchant_location.candidates[0].sigungu_code,\n                                'dong',         merchant_location.candidates[0].dong,\n                                'h_codes',      merchant_location.candidates[0].h_codes\n                            )\n                  END  AS location,\n                  candidates\n        FROM      business_location\n        FULL OUTER JOIN   merchant_location\n        ON        business_location.registration_number = merchant_location.registration_number\n)""}, 'role': 'process', 'type': 'sql'}]"
873,process:::merged_location:::registration_number_common_location,process:::with_candidates:::registration_number_common_location,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_common_location.json', 'options': {'sql': ""SELECT\n         registration_number,\n         location.*,\n         array_except(candidates, array(location)) AS candidates\nFROM (\n        SELECT\n                  nvl(business_location.registration_number, merchant_location.registration_number) AS registration_number,\n                  CASE\n                      WHEN   business_location.registration_number IS NOT NULL THEN struct(\n                                                                                        business_location.geo_point,\n                                                                                        business_location.full_address,\n                                                                                        business_location.b_code,\n                                                                                        business_location.sido,\n                                                                                        business_location.sido_code,\n                                                                                        business_location.sigungu,\n                                                                                        business_location.sigungu_code,\n                                                                                        business_location.dong,\n                                                                                        business_location.h_codes\n                                                                                    )\n                      ELSE   named_struct(\n                                'geo_point',    merchant_location.candidates[0].geo_point,\n                                'full_address', merchant_location.candidates[0].full_address,\n                                'b_code',       merchant_location.candidates[0].b_code,\n                                'sido',         merchant_location.candidates[0].sido,\n                                'sido_code',    merchant_location.candidates[0].sido_code,\n                                'sigungu',      merchant_location.candidates[0].sigungu,\n                                'sigungu_code', merchant_location.candidates[0].sigungu_code,\n                                'dong',         merchant_location.candidates[0].dong,\n                                'h_codes',      merchant_location.candidates[0].h_codes\n                            )\n                  END  AS location,\n                  candidates\n        FROM      business_location\n        FULL OUTER JOIN   merchant_location\n        ON        business_location.registration_number = merchant_location.registration_number\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_common_location.json', 'options': {'sql': '  SELECT  *,\n          size(candidates) AS candidate_size\n  FROM    merged_location'}, 'role': 'process', 'type': 'sql'}]"
874,process:::with_candidates:::registration_number_common_location,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=location/name=common,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_common_location.json', 'options': {'sql': '  SELECT  *,\n          size(candidates) AS candidate_size\n  FROM    merged_location'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=location/name=common'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=location/name=common'}, 'role': 'source', 'type': 'file'}]"
875,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=location/name=common,process:::merge:::registration_number_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_common_location.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=location/name=common'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=location/name=common'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'process', 'type': 'custom'}]"
876,s3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta,process:::flatten:::common_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_common_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'paynote_common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}, {'filename': 'common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}, {'filename': 'cashnote_user_common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}]"
877,s3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta,process:::add_join_field:::paynote_user_meta_es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_common_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'paynote_user_meta_es_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-29', 'yyyy-MM-dd') AS timestamp,\n            named_struct(\n                'name', 'meta'\n            ) AS join_field,\n            *\n  FROM      paynote_user_meta""}, 'role': 'process', 'type': 'sql'}]"
878,process:::flatten:::common_reports,s3://kcd-de-production/service/message/reports/user_type=paynote/report_name=common,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}, {'filename': 'common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}, {'filename': 'cashnote_user_common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_common_reports.json', 'options': {'format': 'text', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/reports/user_type=paynote/date_id=2021-01-29/report_name=common'}, 'role': 'sink', 'type': 'file'}]"
879,process:::flatten:::common_reports,s3://kcd-de-production/service/message/reports/user_type=cashnote/report_name=common,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}, {'filename': 'common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}, {'filename': 'cashnote_user_common_reports.json', 'options': {'sql': '  SELECT  to_json(flattenMap(struct(*))) AS json\n  FROM    meta\n'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'bulkload_cashnote_user_meta_common.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/service/message/reports/user_type=cashnote/latest/report_name=common'}, 'role': 'source', 'type': 'file'}, {'filename': 'common_reports.json', 'options': {'format': 'text', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/reports/user_type=cashnote/date_id=2020-08-10/report_name=common'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_user_common_reports.json', 'options': {'format': 'text', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/reports/user_type=cashnote/date_id=2021-01-29/report_name=common'}, 'role': 'sink', 'type': 'file'}]"
880,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax_old,process:::new_hometax_business_classification:::new_hometax_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'new_hometax_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax_old'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax_old'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'new_hometax_classification.json', 'options': {'sql': 'SELECT    *\nFROM (\n        SELECT\n                  hometax_business_classification.business_id,\n                  hometax_business_classification.registration_number,\n                  mapping.hometax_new_code AS classification_code,\n                  mapping.depth_1_name,\n                  mapping.depth_2_name,\n                  mapping.depth_3_name,\n                  mapping.depth_4_name\n        FROM      hometax_business_classification\n        JOIN      mapping\n        ON        hometax_business_classification.code = mapping.hometax_old_code\n)\nWHERE     classification_code IS NOT NULL'}, 'role': 'process', 'type': 'sql'}]"
881,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/name=hometax_new_old_mapping,process:::mapping:::new_hometax_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'new_hometax_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/name=hometax_new_old_mapping'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'new_hometax_classification.json', 'options': {'sql': 'SELECT\n          mapping.*,\n          new_hometax_classification.depth_1_name,\n          new_hometax_classification.depth_2_name,\n          new_hometax_classification.depth_3_name,\n          new_hometax_classification.depth_4_name\nFROM      hometax_new_old_mapping AS mapping\nJOIN      new_hometax_classification\nON        new_hometax_classification.classification_code = mapping.hometax_new_code\n'}, 'role': 'process', 'type': 'sql'}]"
882,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/hometax_new_clasification.tsv,process:::mapping:::new_hometax_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'new_hometax_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hometax_new_clasification.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'new_hometax_classification.json', 'options': {'sql': 'SELECT\n          mapping.*,\n          new_hometax_classification.depth_1_name,\n          new_hometax_classification.depth_2_name,\n          new_hometax_classification.depth_3_name,\n          new_hometax_classification.depth_4_name\nFROM      hometax_new_old_mapping AS mapping\nJOIN      new_hometax_classification\nON        new_hometax_classification.classification_code = mapping.hometax_new_code\n'}, 'role': 'process', 'type': 'sql'}]"
883,process:::mapping:::new_hometax_classification,process:::new_hometax_business_classification:::new_hometax_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'new_hometax_classification.json', 'options': {'sql': 'SELECT\n          mapping.*,\n          new_hometax_classification.depth_1_name,\n          new_hometax_classification.depth_2_name,\n          new_hometax_classification.depth_3_name,\n          new_hometax_classification.depth_4_name\nFROM      hometax_new_old_mapping AS mapping\nJOIN      new_hometax_classification\nON        new_hometax_classification.classification_code = mapping.hometax_new_code\n'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'new_hometax_classification.json', 'options': {'sql': 'SELECT    *\nFROM (\n        SELECT\n                  hometax_business_classification.business_id,\n                  hometax_business_classification.registration_number,\n                  mapping.hometax_new_code AS classification_code,\n                  mapping.depth_1_name,\n                  mapping.depth_2_name,\n                  mapping.depth_3_name,\n                  mapping.depth_4_name\n        FROM      hometax_business_classification\n        JOIN      mapping\n        ON        hometax_business_classification.code = mapping.hometax_old_code\n)\nWHERE     classification_code IS NOT NULL'}, 'role': 'process', 'type': 'sql'}]"
884,process:::new_hometax_business_classification:::new_hometax_classification,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'new_hometax_classification.json', 'options': {'sql': 'SELECT    *\nFROM (\n        SELECT\n                  hometax_business_classification.business_id,\n                  hometax_business_classification.registration_number,\n                  mapping.hometax_new_code AS classification_code,\n                  mapping.depth_1_name,\n                  mapping.depth_2_name,\n                  mapping.depth_3_name,\n                  mapping.depth_4_name\n        FROM      hometax_business_classification\n        JOIN      mapping\n        ON        hometax_business_classification.code = mapping.hometax_old_code\n)\nWHERE     classification_code IS NOT NULL'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax'}, 'role': 'source', 'type': 'file'}, {'filename': 'new_hometax_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax'}, 'role': 'sink', 'type': 'file'}]"
885,s3://kcd-de-production/service/market_area/analysis/visit_with_duration,process:::snapshots:::snapshot_user_history,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'snapshot_user_history.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/visit_with_duration'}, 'role': 'source', 'type': 'file'}, {'filename': 'visit_with_duration.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/visit_with_duration'}, 'role': 'sink', 'type': 'file'}, {'filename': 'snapshot_business_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/visit_with_duration'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'snapshot_user_history.json', 'options': {'sql': ""SELECT    encrypted_card_number,\n          min(transacted_at_month) AS month,\n          '3_month' AS type,\n          collect_set(business_id) AS business_ids\nFROM      visit_with_duration\nWHERE     within_3_month = true\nGROUP BY  1\n\nUNION ALL\n\nSELECT    encrypted_card_number,\n          min(transacted_at_month) AS month,\n          '6_month' AS type,\n          collect_set(business_id) AS business_ids\nFROM      visit_with_duration\nWHERE     within_6_month = true\nGROUP BY  1\n\nUNION ALL\n\nSELECT    encrypted_card_number,\n          min(transacted_at_month) AS month,\n          '9_month' AS type,\n          collect_set(business_id) AS business_ids\nFROM      visit_with_duration\nWHERE     within_9_month = true\nGROUP BY  1\n\nUNION ALL\n\nSELECT    encrypted_card_number,\n          min(transacted_at_month) AS month,\n          '12_month' AS type,\n          collect_set(business_id) AS business_ids\nFROM      visit_with_duration\nWHERE     within_12_month = true\nGROUP BY  1\n\nUNION ALL\n\nSELECT    encrypted_card_number,\n          transacted_at_month AS month,\n          'month' AS type,\n          collect_set(business_id) AS business_ids\nFROM      visit_with_duration\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]"
886,s3://kcd-de-production/service/market_area/analysis/visit_with_duration,process:::visits:::snapshot_business_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'snapshot_user_history.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/visit_with_duration'}, 'role': 'source', 'type': 'file'}, {'filename': 'visit_with_duration.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/visit_with_duration'}, 'role': 'sink', 'type': 'file'}, {'filename': 'snapshot_business_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/visit_with_duration'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'snapshot_business_stat.json', 'options': {'sql': ""SELECT  *,\n        CASE\n          WHEN visit_order = 1 THEN '1회'\n          WHEN visit_order = 2 THEN '2회'\n          WHEN visit_order >= 3 AND visit_order < 10 THEN '3~9회'\n          ELSE '10회이상'\n        END AS visit_count\nFROM    visit_with_duration""}, 'role': 'process', 'type': 'sql'}]"
887,process:::snapshots:::snapshot_user_history,s3://kcd-de-production/service/market_area/analysis/snapshot_user_history,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'snapshot_user_history.json', 'options': {'sql': ""SELECT    encrypted_card_number,\n          min(transacted_at_month) AS month,\n          '3_month' AS type,\n          collect_set(business_id) AS business_ids\nFROM      visit_with_duration\nWHERE     within_3_month = true\nGROUP BY  1\n\nUNION ALL\n\nSELECT    encrypted_card_number,\n          min(transacted_at_month) AS month,\n          '6_month' AS type,\n          collect_set(business_id) AS business_ids\nFROM      visit_with_duration\nWHERE     within_6_month = true\nGROUP BY  1\n\nUNION ALL\n\nSELECT    encrypted_card_number,\n          min(transacted_at_month) AS month,\n          '9_month' AS type,\n          collect_set(business_id) AS business_ids\nFROM      visit_with_duration\nWHERE     within_9_month = true\nGROUP BY  1\n\nUNION ALL\n\nSELECT    encrypted_card_number,\n          min(transacted_at_month) AS month,\n          '12_month' AS type,\n          collect_set(business_id) AS business_ids\nFROM      visit_with_duration\nWHERE     within_12_month = true\nGROUP BY  1\n\nUNION ALL\n\nSELECT    encrypted_card_number,\n          transacted_at_month AS month,\n          'month' AS type,\n          collect_set(business_id) AS business_ids\nFROM      visit_with_duration\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'snapshot_user_history.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/snapshot_user_history', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/snapshot_user_history'}, 'role': 'source', 'type': 'file'}]"
888,s3://kcd-de-production/service/market_area/analysis/snapshot_user_history,process:::user_tags:::build_user_tags,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'snapshot_user_history.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/snapshot_user_history', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/snapshot_user_history'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_user_tags.json', 'options': {'class': 'com.kcd.thrush.analysis.spark.tasks.BuildUserTagsProcess', 'places': 'kcd_places', 'transactions': 'snapshots'}, 'role': 'process', 'type': 'custom'}]"
889,process:::visits_filtered:::visit_with_duration,process:::reformat:::visit_with_duration,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'visit_with_duration.json', 'options': {'sql': ""SELECT    *\nFROM      visits\nWHERE     encrypted_card_number is not null\nAND       purchase_canceled_at is null\nAND       created_at_date >= '2020-01-01'\nAND       transacted_at >= '2020-01-01'\nAND       transacted_at < '2021-01-01'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'visit_with_duration.json', 'options': {'sql': ""SELECT    *,\n          IF (add_months(current_month, -3) <= transacted_at_month and\n              transacted_at_month < current_month, true, false) AS within_3_month,\n          IF (add_months(current_month, -6) <= transacted_at_month and\n              transacted_at_month < current_month, true, false) AS within_6_month,\n          IF (add_months(current_month, -9) <= transacted_at_month and\n              transacted_at_month < current_month, true, false) AS within_9_month,\n          IF (add_months(current_month, -12) <= transacted_at_month and\n              transacted_at_month < current_month, true, false) AS within_12_month\nFROM      (\n    SELECT    *,\n              date_trunc('month', transacted_at) AS transacted_at_month,\n              date_trunc('month', current_timestamp()) AS current_month\n    FROM      visits_filtered\n)""}, 'role': 'process', 'type': 'sql'}]"
890,process:::reformat:::visit_with_duration,s3://kcd-de-production/service/market_area/analysis/visit_with_duration,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'visit_with_duration.json', 'options': {'sql': ""SELECT    *,\n          IF (add_months(current_month, -3) <= transacted_at_month and\n              transacted_at_month < current_month, true, false) AS within_3_month,\n          IF (add_months(current_month, -6) <= transacted_at_month and\n              transacted_at_month < current_month, true, false) AS within_6_month,\n          IF (add_months(current_month, -9) <= transacted_at_month and\n              transacted_at_month < current_month, true, false) AS within_9_month,\n          IF (add_months(current_month, -12) <= transacted_at_month and\n              transacted_at_month < current_month, true, false) AS within_12_month\nFROM      (\n    SELECT    *,\n              date_trunc('month', transacted_at) AS transacted_at_month,\n              date_trunc('month', current_timestamp()) AS current_month\n    FROM      visits_filtered\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'snapshot_user_history.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/visit_with_duration'}, 'role': 'source', 'type': 'file'}, {'filename': 'visit_with_duration.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/visit_with_duration'}, 'role': 'sink', 'type': 'file'}, {'filename': 'snapshot_business_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/visit_with_duration'}, 'role': 'source', 'type': 'file'}]"
891,card_sales_approvals_raw,process:::current_approvals_raw:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=12,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=13,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=14,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=15,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=16,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=17,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=18,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=19,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=20,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=21,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=22,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=24/hour=23,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=25/hour=00,s3://staging-card-sales/staging-card-sales-approvals/year=2021/month=01/day=25/hour=01', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    business_id,\n          credential_key,\n          transacted_at,\n          authorization_number,\n          amount,\n          MIN(acquirer_name) AS acquirer_name,\n          MIN(card_number) AS card_number,\n          MIN(card_type) AS card_type,\n          MIN(encrypted_card_number) AS encrypted_card_number,\n          MIN(installment) AS installment,\n          MIN(issuer_name) AS issuer_name,\n          MIN(masked_card_number) AS masked_card_number,\n          MIN(merchant_number) AS merchant_number,\n          MIN(scraping_type) AS scraping_type,\n          MIN(status) AS status,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(created_at_date) AS created_at_date\nFROM      (\n   SELECT   *, date_format(created_at, 'yyyy-MM-dd') AS created_at_date\n   FROM (\n           SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n                    CAST(authAmt AS int) AS amount,\n                    trim(IF (authNo = '', null, authNo)) AS authorization_number,\n                    CAST(a.business_id AS int) AS business_id,\n                    trim(replace(cardNo, '', '')) AS card_number,\n                    CAST(trim(cardKnd) AS int) AS card_type,\n                    COALESCE(credential_key, k.uuid) AS credential_key,\n                    trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n                    IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n                    trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n                    mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n                    trim(IF (merNo = '', null, merNo)) AS merchant_number,\n                    scraping_type,\n                    IF (authClassNm = '승인', 0, 1) AS status,\n                    to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n                    to_timestamp(\n                     concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n                    ) AS created_at,\n                    to_timestamp(\n                     concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n                    ) AS updated_at\n           FROM     card_sales_approvals_raw a LEFT OUTER JOIN credential_keys k\n           ON       a.business_id = k.business_id\n           WHERE    cardNo is not null\n   )\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null\nGROUP BY  business_id, credential_key, transacted_at, authorization_number, amount"", 'old_sql': ""UNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n FROM     catalog_approvals_raw a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
892,card_sales_purchases_raw,process:::current_purchases_raw:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=12,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=13,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=14,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=15,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=16,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=17,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=18,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=19,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=20,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=21,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=22,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=24/hour=23,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=25/hour=00,s3://staging-card-sales/staging-card-sales-purchases/year=2021/month=01/day=25/hour=01', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    card_sales_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)"", 'old_sql': ""UNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_raw a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
893,s3://kcd-de-staging/raw/etl/snowdon/card_sales/visits,process:::prev_transactions:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/visits', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    p.*\nFROM  (\n          SELECT DISTINCT business_id, credential_key\n          FROM    current_transactions\n) AS c\nJOIN (\n          SELECT  *\n          FROM    prev_transactions_raw\n          WHERE   created_at_date >= '2020-12-15'\n          AND     created_at_date < '2021-01-25'\n\n) AS p\nON    (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key\n)""}, 'role': 'process', 'type': 'sql'}]"
894,process:::current_approvals_raw:::build_card_sales_all,process:::prev_approvals:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    business_id,\n          credential_key,\n          transacted_at,\n          authorization_number,\n          amount,\n          MIN(acquirer_name) AS acquirer_name,\n          MIN(card_number) AS card_number,\n          MIN(card_type) AS card_type,\n          MIN(encrypted_card_number) AS encrypted_card_number,\n          MIN(installment) AS installment,\n          MIN(issuer_name) AS issuer_name,\n          MIN(masked_card_number) AS masked_card_number,\n          MIN(merchant_number) AS merchant_number,\n          MIN(scraping_type) AS scraping_type,\n          MIN(status) AS status,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(created_at_date) AS created_at_date\nFROM      (\n   SELECT   *, date_format(created_at, 'yyyy-MM-dd') AS created_at_date\n   FROM (\n           SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n                    CAST(authAmt AS int) AS amount,\n                    trim(IF (authNo = '', null, authNo)) AS authorization_number,\n                    CAST(a.business_id AS int) AS business_id,\n                    trim(replace(cardNo, '', '')) AS card_number,\n                    CAST(trim(cardKnd) AS int) AS card_type,\n                    COALESCE(credential_key, k.uuid) AS credential_key,\n                    trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n                    IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n                    trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n                    mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n                    trim(IF (merNo = '', null, merNo)) AS merchant_number,\n                    scraping_type,\n                    IF (authClassNm = '승인', 0, 1) AS status,\n                    to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n                    to_timestamp(\n                     concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n                    ) AS created_at,\n                    to_timestamp(\n                     concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n                    ) AS updated_at\n           FROM     card_sales_approvals_raw a LEFT OUTER JOIN credential_keys k\n           ON       a.business_id = k.business_id\n           WHERE    cardNo is not null\n   )\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null\nGROUP BY  business_id, credential_key, transacted_at, authorization_number, amount"", 'old_sql': ""UNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n FROM     catalog_approvals_raw a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': "" SELECT   p.*\n FROM (\n          SELECT  DISTINCT business_id, credential_key, authorization_number\n          FROM    current_approvals_raw\n ) AS c\n JOIN (\n         SELECT   *\n         FROM     prev_approvals_raw\n         WHERE    created_at_date >= '2020-12-15'\n         AND      created_at_date < '2021-01-25'\n ) AS p\n ON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.authorization_number = c.authorization_number\n)""}, 'role': 'process', 'type': 'sql'}]"
895,process:::current_approvals_raw:::build_card_sales_all,process:::current_approvals_dedup:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    business_id,\n          credential_key,\n          transacted_at,\n          authorization_number,\n          amount,\n          MIN(acquirer_name) AS acquirer_name,\n          MIN(card_number) AS card_number,\n          MIN(card_type) AS card_type,\n          MIN(encrypted_card_number) AS encrypted_card_number,\n          MIN(installment) AS installment,\n          MIN(issuer_name) AS issuer_name,\n          MIN(masked_card_number) AS masked_card_number,\n          MIN(merchant_number) AS merchant_number,\n          MIN(scraping_type) AS scraping_type,\n          MIN(status) AS status,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(created_at_date) AS created_at_date\nFROM      (\n   SELECT   *, date_format(created_at, 'yyyy-MM-dd') AS created_at_date\n   FROM (\n           SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n                    CAST(authAmt AS int) AS amount,\n                    trim(IF (authNo = '', null, authNo)) AS authorization_number,\n                    CAST(a.business_id AS int) AS business_id,\n                    trim(replace(cardNo, '', '')) AS card_number,\n                    CAST(trim(cardKnd) AS int) AS card_type,\n                    COALESCE(credential_key, k.uuid) AS credential_key,\n                    trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n                    IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n                    trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n                    mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n                    trim(IF (merNo = '', null, merNo)) AS merchant_number,\n                    scraping_type,\n                    IF (authClassNm = '승인', 0, 1) AS status,\n                    to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n                    to_timestamp(\n                     concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n                    ) AS created_at,\n                    to_timestamp(\n                     concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n                    ) AS updated_at\n           FROM     card_sales_approvals_raw a LEFT OUTER JOIN credential_keys k\n           ON       a.business_id = k.business_id\n           WHERE    cardNo is not null\n   )\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null\nGROUP BY  business_id, credential_key, transacted_at, authorization_number, amount"", 'old_sql': ""UNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n FROM     catalog_approvals_raw a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    c.*\nFROM      current_approvals_raw AS c\nLEFT ANTI JOIN prev_approvals p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.transacted_at = c.transacted_at AND\n  p.authorization_number = c.authorization_number AND\n  p.amount = c.amount AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]"
896,process:::prev_approvals:::build_card_sales_all,process:::current_approvals_dedup:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': "" SELECT   p.*\n FROM (\n          SELECT  DISTINCT business_id, credential_key, authorization_number\n          FROM    current_approvals_raw\n ) AS c\n JOIN (\n         SELECT   *\n         FROM     prev_approvals_raw\n         WHERE    created_at_date >= '2020-12-15'\n         AND      created_at_date < '2021-01-25'\n ) AS p\n ON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.authorization_number = c.authorization_number\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    c.*\nFROM      current_approvals_raw AS c\nLEFT ANTI JOIN prev_approvals p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.transacted_at = c.transacted_at AND\n  p.authorization_number = c.authorization_number AND\n  p.amount = c.amount AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]"
897,process:::prev_approvals:::build_card_sales_all,process:::prev_approval_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': "" SELECT   p.*\n FROM (\n          SELECT  DISTINCT business_id, credential_key, authorization_number\n          FROM    current_approvals_raw\n ) AS c\n JOIN (\n         SELECT   *\n         FROM     prev_approvals_raw\n         WHERE    created_at_date >= '2020-12-15'\n         AND      created_at_date < '2021-01-25'\n ) AS p\n ON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.authorization_number = c.authorization_number\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': '  SELECT    /*+ BROADCAST(canceled) */\n            struct(approved.*) AS approved,\n            struct(canceled.*) AS canceled,\n            COALESCE(approved.created_at_date, canceled.created_at_date) AS created_at_date\n  FROM      (\n    SELECT  *\n    FROM    prev_approvals\n    WHERE   status = 0\n  ) approved INNER JOIN (\n    SELECT  canceled.*\n    FROM    current_approval_candidates\n    WHERE   approved.business_id is null\n  ) canceled\n  ON (\n    approved.business_id = canceled.business_id AND\n    approved.credential_key = canceled.credential_key AND\n    approved.amount = -canceled.amount AND\n    approved.masked_card_number = canceled.masked_card_number AND\n    approved.authorization_number = canceled.authorization_number\n  )'}, 'role': 'process', 'type': 'sql'}]"
898,process:::current_approvals_dedup:::build_card_sales_all,process:::current_approvals:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    c.*\nFROM      current_approvals_raw AS c\nLEFT ANTI JOIN prev_approvals p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.transacted_at = c.transacted_at AND\n  p.authorization_number = c.authorization_number AND\n  p.amount = c.amount AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals_dedup a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
899,process:::current_approvals:::build_card_sales_all,process:::current_approval_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals_dedup a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    struct(approved.*) AS approved,\n          struct(canceled.*) AS canceled,\n          COALESCE(\n            date_format(approved.created_at, 'yyyy-MM-dd'),\n            date_format(canceled.created_at, 'yyyy-MM-dd')\n          ) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 0\n) approved FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 1\n) canceled\nON (\n  approved.business_id = canceled.business_id AND\n  approved.credential_key = canceled.credential_key AND\n  approved.amount = -canceled.amount AND\n  approved.masked_card_number = canceled.masked_card_number AND\n  approved.authorization_number = canceled.authorization_number AND\n  CAST(approved.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n  approved.approval_seq = canceled.approval_seq\n)""}, 'role': 'process', 'type': 'sql'}]"
900,process:::current_approvals:::build_card_sales_all,s3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/approvals/ts=09_50,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals_dedup a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/approvals/date_id=2021-01-27/ts=09_50', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
901,process:::current_purchases_raw:::build_card_sales_all,process:::current_purchases_reformat:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    card_sales_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)"", 'old_sql': ""UNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_raw a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    business_id,\n        credential_key,\n        authorization_number,\n        masked_card_number,\n        amount,\n        purchased_at,\n        paid_at,\n        MIN(acquirer_name) AS acquirer_name,\n        MIN(base_fee) AS base_fee,\n        MIN(card_number) AS card_number,\n        MIN(card_type) AS card_type,\n        MIN(etc_fee) AS etc_fee,\n        MIN(fee) AS fee,\n        MIN(issuer_name) AS issuer_name,\n        MIN(merchant_number) AS merchant_number,\n        MIN(payment) AS payment,\n        MIN(point_fee) AS point_fee,\n        MIN(purchase_delayed) AS purchase_delayed,\n        MIN(scraping_type) AS scraping_type,\n        MIN(transacted_at) AS transacted_at,\n        MIN(vat_fee) AS vat_fee,\n        MIN(created_at) AS created_at,\n        MIN(updated_at) AS updated_at,\n        MIN(created_at_date) AS created_at_date\nFROM (\n        SELECT    a.acquirer_name,\n                  a.amount,\n                  a.authorization_number,\n                  a.base_fee,\n                  a.business_id,\n                  a.card_number,\n                  a.card_type,\n                  a.credential_key,\n                  a.etc_fee,\n                  a.fee,\n                  a.issuer_name,\n                  a.masked_card_number,\n                  a.merchant_number,\n                  COALESCE(a.paid_at,\n                      estimate_paid_at(\n                          a.issuer_name,\n                          c.bank_name,\n                          a.transacted_at,\n                          COALESCE(c.calculated_purchase_period, 1),\n                          COALESCE(c.calculated_payment_period, c.payment_period),\n                          c.paid_on_weekends\n                      )\n                  ) AS paid_at,\n                  a.payment,\n                  a.point_fee,\n                  purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n                  a.purchased_at,\n                  a.scraping_type,\n                  a.transacted_at,\n                  a.vat_fee,\n                  a.created_at,\n                  a.updated_at,\n                  a.created_at_date\n        FROM      current_purchases_raw a, card_merchants c\n        WHERE     a.business_id is not null\n        AND       a.issuer_name is not null\n        AND       a.card_number is not null\n        AND       a.purchased_at is not null\n        AND       a.business_id = c.business_id\n        AND       a.issuer_name = c.issuer_name\n        AND       a.merchant_number = c.merchant_number\n)\nGROUP BY  1, 2, 3, 4, 5, 6, 7'}, 'role': 'process', 'type': 'sql'}]"
902,process:::current_purchases_reformat:::build_card_sales_all,process:::prev_purchases:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    business_id,\n        credential_key,\n        authorization_number,\n        masked_card_number,\n        amount,\n        purchased_at,\n        paid_at,\n        MIN(acquirer_name) AS acquirer_name,\n        MIN(base_fee) AS base_fee,\n        MIN(card_number) AS card_number,\n        MIN(card_type) AS card_type,\n        MIN(etc_fee) AS etc_fee,\n        MIN(fee) AS fee,\n        MIN(issuer_name) AS issuer_name,\n        MIN(merchant_number) AS merchant_number,\n        MIN(payment) AS payment,\n        MIN(point_fee) AS point_fee,\n        MIN(purchase_delayed) AS purchase_delayed,\n        MIN(scraping_type) AS scraping_type,\n        MIN(transacted_at) AS transacted_at,\n        MIN(vat_fee) AS vat_fee,\n        MIN(created_at) AS created_at,\n        MIN(updated_at) AS updated_at,\n        MIN(created_at_date) AS created_at_date\nFROM (\n        SELECT    a.acquirer_name,\n                  a.amount,\n                  a.authorization_number,\n                  a.base_fee,\n                  a.business_id,\n                  a.card_number,\n                  a.card_type,\n                  a.credential_key,\n                  a.etc_fee,\n                  a.fee,\n                  a.issuer_name,\n                  a.masked_card_number,\n                  a.merchant_number,\n                  COALESCE(a.paid_at,\n                      estimate_paid_at(\n                          a.issuer_name,\n                          c.bank_name,\n                          a.transacted_at,\n                          COALESCE(c.calculated_purchase_period, 1),\n                          COALESCE(c.calculated_payment_period, c.payment_period),\n                          c.paid_on_weekends\n                      )\n                  ) AS paid_at,\n                  a.payment,\n                  a.point_fee,\n                  purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n                  a.purchased_at,\n                  a.scraping_type,\n                  a.transacted_at,\n                  a.vat_fee,\n                  a.created_at,\n                  a.updated_at,\n                  a.created_at_date\n        FROM      current_purchases_raw a, card_merchants c\n        WHERE     a.business_id is not null\n        AND       a.issuer_name is not null\n        AND       a.card_number is not null\n        AND       a.purchased_at is not null\n        AND       a.business_id = c.business_id\n        AND       a.issuer_name = c.issuer_name\n        AND       a.merchant_number = c.merchant_number\n)\nGROUP BY  1, 2, 3, 4, 5, 6, 7'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT   p.*\nFROM  (\n      SELECT  DISTINCT business_id, credential_key, masked_card_number\n      FROM    current_purchases_reformat\n) AS c\nJOIN (\n     SELECT   *\n     FROM     prev_purchases_raw\n     WHERE    created_at_date >= '2020-12-15'\n     AND      created_at_date < '2021-01-25'\n) AS p\nON        (\n  p.business_id = c.business_id AND\n  p.masked_card_number = c.masked_card_number AND\n  p.credential_key = c.credential_key\n)""}, 'role': 'process', 'type': 'sql'}]"
903,process:::current_purchases_reformat:::build_card_sales_all,process:::current_purchases_dedup:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    business_id,\n        credential_key,\n        authorization_number,\n        masked_card_number,\n        amount,\n        purchased_at,\n        paid_at,\n        MIN(acquirer_name) AS acquirer_name,\n        MIN(base_fee) AS base_fee,\n        MIN(card_number) AS card_number,\n        MIN(card_type) AS card_type,\n        MIN(etc_fee) AS etc_fee,\n        MIN(fee) AS fee,\n        MIN(issuer_name) AS issuer_name,\n        MIN(merchant_number) AS merchant_number,\n        MIN(payment) AS payment,\n        MIN(point_fee) AS point_fee,\n        MIN(purchase_delayed) AS purchase_delayed,\n        MIN(scraping_type) AS scraping_type,\n        MIN(transacted_at) AS transacted_at,\n        MIN(vat_fee) AS vat_fee,\n        MIN(created_at) AS created_at,\n        MIN(updated_at) AS updated_at,\n        MIN(created_at_date) AS created_at_date\nFROM (\n        SELECT    a.acquirer_name,\n                  a.amount,\n                  a.authorization_number,\n                  a.base_fee,\n                  a.business_id,\n                  a.card_number,\n                  a.card_type,\n                  a.credential_key,\n                  a.etc_fee,\n                  a.fee,\n                  a.issuer_name,\n                  a.masked_card_number,\n                  a.merchant_number,\n                  COALESCE(a.paid_at,\n                      estimate_paid_at(\n                          a.issuer_name,\n                          c.bank_name,\n                          a.transacted_at,\n                          COALESCE(c.calculated_purchase_period, 1),\n                          COALESCE(c.calculated_payment_period, c.payment_period),\n                          c.paid_on_weekends\n                      )\n                  ) AS paid_at,\n                  a.payment,\n                  a.point_fee,\n                  purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n                  a.purchased_at,\n                  a.scraping_type,\n                  a.transacted_at,\n                  a.vat_fee,\n                  a.created_at,\n                  a.updated_at,\n                  a.created_at_date\n        FROM      current_purchases_raw a, card_merchants c\n        WHERE     a.business_id is not null\n        AND       a.issuer_name is not null\n        AND       a.card_number is not null\n        AND       a.purchased_at is not null\n        AND       a.business_id = c.business_id\n        AND       a.issuer_name = c.issuer_name\n        AND       a.merchant_number = c.merchant_number\n)\nGROUP BY  1, 2, 3, 4, 5, 6, 7'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    c.*\nFROM      current_purchases_reformat AS c\nLEFT ANTI JOIN prev_purchases p\nON        (\n  p.business_id = c.business_id AND\n  p.authorization_number = c.authorization_number AND\n  p.masked_card_number = c.masked_card_number AND\n  p.amount = c.amount AND\n  p.purchased_at = c.purchased_at AND\n  p.paid_at = c.paid_at AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]"
904,process:::prev_purchases:::build_card_sales_all,process:::current_purchases_dedup:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT   p.*\nFROM  (\n      SELECT  DISTINCT business_id, credential_key, masked_card_number\n      FROM    current_purchases_reformat\n) AS c\nJOIN (\n     SELECT   *\n     FROM     prev_purchases_raw\n     WHERE    created_at_date >= '2020-12-15'\n     AND      created_at_date < '2021-01-25'\n) AS p\nON        (\n  p.business_id = c.business_id AND\n  p.masked_card_number = c.masked_card_number AND\n  p.credential_key = c.credential_key\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    c.*\nFROM      current_purchases_reformat AS c\nLEFT ANTI JOIN prev_purchases p\nON        (\n  p.business_id = c.business_id AND\n  p.authorization_number = c.authorization_number AND\n  p.masked_card_number = c.masked_card_number AND\n  p.amount = c.amount AND\n  p.purchased_at = c.purchased_at AND\n  p.paid_at = c.paid_at AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]"
905,process:::prev_purchases:::build_card_sales_all,process:::prev_purchase_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT   p.*\nFROM  (\n      SELECT  DISTINCT business_id, credential_key, masked_card_number\n      FROM    current_purchases_reformat\n) AS c\nJOIN (\n     SELECT   *\n     FROM     prev_purchases_raw\n     WHERE    created_at_date >= '2020-12-15'\n     AND      created_at_date < '2021-01-25'\n) AS p\nON        (\n  p.business_id = c.business_id AND\n  p.masked_card_number = c.masked_card_number AND\n  p.credential_key = c.credential_key\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    /*+ BROADCAST(canceled) */\n          struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    prev_purchases\n  WHERE   amount > 0\n) purchased INNER JOIN (\n  SELECT  canceled.*\n  FROM    current_purchase_candidates\n  WHERE   purchased.business_id is null\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]"
906,process:::current_purchases_dedup:::build_card_sales_all,process:::current_purchases:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    c.*\nFROM      current_purchases_reformat AS c\nLEFT ANTI JOIN prev_purchases p\nON        (\n  p.business_id = c.business_id AND\n  p.authorization_number = c.authorization_number AND\n  p.masked_card_number = c.masked_card_number AND\n  p.amount = c.amount AND\n  p.purchased_at = c.purchased_at AND\n  p.paid_at = c.paid_at AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, transacted_at, masked_card_number, amount\n              ORDER BY purchased_at DESC, authorization_number\n          ) AS purchase_cancel_seq,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), authorization_number, masked_card_number, amount\n              ORDER BY purchased_at ASC\n          ) AS purchase_seq,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      current_purchases_dedup'}, 'role': 'process', 'type': 'sql'}]"
907,process:::current_purchases:::build_card_sales_all,process:::current_purchase_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, transacted_at, masked_card_number, amount\n              ORDER BY purchased_at DESC, authorization_number\n          ) AS purchase_cancel_seq,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), authorization_number, masked_card_number, amount\n              ORDER BY purchased_at ASC\n          ) AS purchase_seq,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      current_purchases_dedup'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount > 0\n) purchased FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount < 0\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]"
908,process:::current_purchases:::build_card_sales_all,s3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/purchases/ts=09_50,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, transacted_at, masked_card_number, amount\n              ORDER BY purchased_at DESC, authorization_number\n          ) AS purchase_cancel_seq,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), authorization_number, masked_card_number, amount\n              ORDER BY purchased_at ASC\n          ) AS purchase_seq,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      current_purchases_dedup'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/purchases/date_id=2021-01-27/ts=09_50', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
909,process:::current_approval_candidates:::build_card_sales_all,process:::prev_approval_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    struct(approved.*) AS approved,\n          struct(canceled.*) AS canceled,\n          COALESCE(\n            date_format(approved.created_at, 'yyyy-MM-dd'),\n            date_format(canceled.created_at, 'yyyy-MM-dd')\n          ) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 0\n) approved FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 1\n) canceled\nON (\n  approved.business_id = canceled.business_id AND\n  approved.credential_key = canceled.credential_key AND\n  approved.amount = -canceled.amount AND\n  approved.masked_card_number = canceled.masked_card_number AND\n  approved.authorization_number = canceled.authorization_number AND\n  CAST(approved.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n  approved.approval_seq = canceled.approval_seq\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': '  SELECT    /*+ BROADCAST(canceled) */\n            struct(approved.*) AS approved,\n            struct(canceled.*) AS canceled,\n            COALESCE(approved.created_at_date, canceled.created_at_date) AS created_at_date\n  FROM      (\n    SELECT  *\n    FROM    prev_approvals\n    WHERE   status = 0\n  ) approved INNER JOIN (\n    SELECT  canceled.*\n    FROM    current_approval_candidates\n    WHERE   approved.business_id is null\n  ) canceled\n  ON (\n    approved.business_id = canceled.business_id AND\n    approved.credential_key = canceled.credential_key AND\n    approved.amount = -canceled.amount AND\n    approved.masked_card_number = canceled.masked_card_number AND\n    approved.authorization_number = canceled.authorization_number\n  )'}, 'role': 'process', 'type': 'sql'}]"
910,process:::current_approval_candidates:::build_card_sales_all,process:::approval_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    struct(approved.*) AS approved,\n          struct(canceled.*) AS canceled,\n          COALESCE(\n            date_format(approved.created_at, 'yyyy-MM-dd'),\n            date_format(canceled.created_at, 'yyyy-MM-dd')\n          ) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 0\n) approved FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_approvals\n  WHERE   status = 1\n) canceled\nON (\n  approved.business_id = canceled.business_id AND\n  approved.credential_key = canceled.credential_key AND\n  approved.amount = -canceled.amount AND\n  approved.masked_card_number = canceled.masked_card_number AND\n  approved.authorization_number = canceled.authorization_number AND\n  CAST(approved.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n  approved.approval_seq = canceled.approval_seq\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    approved.*,\n          IF(canceled.business_id IS NULL,\n              CAST(null AS TIMESTAMP),\n              canceled.transacted_at\n          ) AS approval_canceled_at,\n\n          IF(canceled.business_id IS NULL,\n              'approved',\n              'cancel'\n          ) AS type\nFROM (\n    SELECT * FROM current_approval_candidates\n\n    UNION ALL\n\n    SELECT * FROM prev_approval_candidates\n)\nWHERE approved.business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
911,process:::prev_approval_candidates:::build_card_sales_all,process:::approval_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': '  SELECT    /*+ BROADCAST(canceled) */\n            struct(approved.*) AS approved,\n            struct(canceled.*) AS canceled,\n            COALESCE(approved.created_at_date, canceled.created_at_date) AS created_at_date\n  FROM      (\n    SELECT  *\n    FROM    prev_approvals\n    WHERE   status = 0\n  ) approved INNER JOIN (\n    SELECT  canceled.*\n    FROM    current_approval_candidates\n    WHERE   approved.business_id is null\n  ) canceled\n  ON (\n    approved.business_id = canceled.business_id AND\n    approved.credential_key = canceled.credential_key AND\n    approved.amount = -canceled.amount AND\n    approved.masked_card_number = canceled.masked_card_number AND\n    approved.authorization_number = canceled.authorization_number\n  )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    approved.*,\n          IF(canceled.business_id IS NULL,\n              CAST(null AS TIMESTAMP),\n              canceled.transacted_at\n          ) AS approval_canceled_at,\n\n          IF(canceled.business_id IS NULL,\n              'approved',\n              'cancel'\n          ) AS type\nFROM (\n    SELECT * FROM current_approval_candidates\n\n    UNION ALL\n\n    SELECT * FROM prev_approval_candidates\n)\nWHERE approved.business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
912,process:::approval_candidates:::build_card_sales_all,process:::transaction_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    approved.*,\n          IF(canceled.business_id IS NULL,\n              CAST(null AS TIMESTAMP),\n              canceled.transacted_at\n          ) AS approval_canceled_at,\n\n          IF(canceled.business_id IS NULL,\n              'approved',\n              'cancel'\n          ) AS type\nFROM (\n    SELECT * FROM current_approval_candidates\n\n    UNION ALL\n\n    SELECT * FROM prev_approval_candidates\n)\nWHERE approved.business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      approval_candidates a FULL OUTER JOIN purchase_candidates p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        a.masked_card_number = p.masked_card_number AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
913,process:::current_purchase_candidates:::build_card_sales_all,process:::prev_purchase_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount > 0\n) purchased FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount < 0\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    /*+ BROADCAST(canceled) */\n          struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    prev_purchases\n  WHERE   amount > 0\n) purchased INNER JOIN (\n  SELECT  canceled.*\n  FROM    current_purchase_candidates\n  WHERE   purchased.business_id is null\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]"
914,process:::current_purchase_candidates:::build_card_sales_all,process:::purchase_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount > 0\n) purchased FULL OUTER JOIN (\n  SELECT  *\n  FROM    current_purchases\n  WHERE   amount < 0\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    purchased.*,\n          IF(canceled.business_id IS NULL,\n              CAST(null AS TIMESTAMP),\n              canceled.purchased_at) AS purchase_canceled_at,\n\n          IF(canceled.business_id IS NULL,\n          'purchased',\n           'purchase_cancel') AS type\nFROM (\n    SELECT * FROM current_purchase_candidates\n    UNION ALL\n    SELECT * FROM prev_purchase_candidates\n)\nWHERE purchased.business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
915,process:::prev_purchase_candidates:::build_card_sales_all,process:::purchase_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    /*+ BROADCAST(canceled) */\n          struct(purchased.*) AS purchased,\n          struct(canceled.*) AS canceled,\n          COALESCE(purchased.created_at_date, canceled.created_at_date) AS created_at_date\nFROM      (\n  SELECT  *\n  FROM    prev_purchases\n  WHERE   amount > 0\n) purchased INNER JOIN (\n  SELECT  canceled.*\n  FROM    current_purchase_candidates\n  WHERE   purchased.business_id is null\n) canceled\nON  (\n  purchased.business_id = canceled.business_id AND\n  purchased.credential_key = canceled.credential_key AND\n  purchased.amount = -canceled.amount AND\n  purchased.masked_card_number = canceled.masked_card_number AND\n  (\n      purchased.card_type = 4 AND\n      purchased.authorization_number = canceled.authorization_number OR\n      (\n          purchased.card_type != 4 AND\n          CAST(purchased.transacted_at AS DATE) = CAST(canceled.transacted_at AS DATE) AND\n          purchased.purchase_cancel_seq = canceled.purchase_cancel_seq\n      )\n  )\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    purchased.*,\n          IF(canceled.business_id IS NULL,\n              CAST(null AS TIMESTAMP),\n              canceled.purchased_at) AS purchase_canceled_at,\n\n          IF(canceled.business_id IS NULL,\n          'purchased',\n           'purchase_cancel') AS type\nFROM (\n    SELECT * FROM current_purchase_candidates\n    UNION ALL\n    SELECT * FROM prev_purchase_candidates\n)\nWHERE purchased.business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
916,process:::purchase_candidates:::build_card_sales_all,process:::transaction_candidates:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    purchased.*,\n          IF(canceled.business_id IS NULL,\n              CAST(null AS TIMESTAMP),\n              canceled.purchased_at) AS purchase_canceled_at,\n\n          IF(canceled.business_id IS NULL,\n          'purchased',\n           'purchase_cancel') AS type\nFROM (\n    SELECT * FROM current_purchase_candidates\n    UNION ALL\n    SELECT * FROM prev_purchase_candidates\n)\nWHERE purchased.business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      approval_candidates a FULL OUTER JOIN purchase_candidates p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        a.masked_card_number = p.masked_card_number AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
917,process:::transaction_candidates:::build_card_sales_all,process:::current_transactions:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    struct(a.*) as approval,\n          struct(p.*) as purchase,\n          COALESCE(a.created_at_date, p.created_at_date) AS created_at_date\nFROM      approval_candidates a FULL OUTER JOIN purchase_candidates p\nON    (\n  a.business_id = p.business_id AND\n  a.credential_key = p.credential_key AND\n  a.authorization_number = p.authorization_number AND\n  CAST(a.transacted_at AS DATE) = CAST(p.transacted_at AS DATE) AND\n  a.issuer_name = p.issuer_name AND\n  a.amount = p.amount AND\n  (\n      p.issuer_name = '비씨'\n      OR (\n        a.masked_card_number = p.masked_card_number AND\n        a.approval_seq = p.purchase_seq\n      )\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    DISTINCT\n            acquirer_name,\n            amount,\n            approval_canceled_at,\n            approval_seq,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            encrypted_card_number,\n            estimated_paid_at,\n            etc_fee,\n            fee,\n            installment,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_cancel_seq,\n            purchase_canceled_at,\n            purchase_delayed,\n            purchase_seq,\n            purchased_at,\n            scraping_type,\n            status,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\nFROM        (\n  SELECT    IF(approval.business_id IS NOT NULL, approval.acquirer_name, purchase.acquirer_name) AS acquirer_name,\n            IF(approval.business_id IS NOT NULL, approval.amount, purchase.amount) AS amount,\n            IF(approval.business_id IS NOT NULL, CAST(approval.approval_seq AS integer), CAST(null AS integer)) AS approval_seq,\n            IF(approval.business_id IS NOT NULL, approval.authorization_number, purchase.authorization_number) AS authorization_number,\n\n            IF(purchase.business_id IS NOT NULL, purchase.base_fee, CAST(null AS integer)) AS base_fee,\n            IF(purchase.business_id IS NOT NULL, purchase.etc_fee, CAST(null AS integer)) AS etc_fee,\n            IF(purchase.business_id IS NOT NULL, purchase.fee, approval.fee) AS fee,\n            IF(purchase.business_id IS NOT NULL, purchase.vat_fee, approval.vat_fee) AS vat_fee,\n\n            IF(approval.business_id IS NOT NULL, approval.business_id, purchase.business_id) AS business_id,\n            IF(approval.business_id IS NOT NULL, approval.card_number, purchase.card_number) AS card_number,\n            IF(approval.business_id IS NOT NULL, approval.card_type, purchase.card_type) AS card_type,\n            IF(approval.business_id IS NOT NULL, approval.credential_key, purchase.credential_key) AS credential_key,\n            IF(approval.business_id IS NOT NULL, approval.encrypted_card_number, CAST(null AS string)) AS encrypted_card_number,\n            IF(approval.business_id IS NOT NULL, approval.estimated_paid_at, CAST(null AS timestamp)) AS estimated_paid_at,\n            IF(approval.business_id IS NOT NULL, approval.installment, CAST(null AS integer)) AS installment,\n            IF(approval.business_id IS NOT NULL, approval.issuer_name, purchase.issuer_name) AS issuer_name,\n            IF(approval.business_id IS NOT NULL, approval.masked_card_number, purchase.masked_card_number) AS masked_card_number,\n            IF(approval.business_id IS NOT NULL, approval.merchant_number, purchase.merchant_number) AS merchant_number,\n\n            IF(purchase.business_id IS NOT NULL, purchase.paid_at, CAST(null AS timestamp)) AS paid_at,\n            IF(purchase.business_id IS NOT NULL, purchase.payment, approval.payment) AS payment,\n            IF(purchase.business_id IS NOT NULL, purchase.point_fee, CAST(null AS integer)) AS point_fee,\n            IF(purchase.business_id IS NOT NULL, CAST(purchase.purchase_cancel_seq AS integer), CAST(null AS integer)) AS purchase_cancel_seq,\n            IF(purchase.business_id IS NOT NULL, purchase.purchase_canceled_at, CAST(null AS timestamp)) AS purchase_canceled_at,\n            IF(purchase.business_id IS NOT NULL, purchase.purchase_delayed, CAST(null AS boolean)) AS purchase_delayed,\n            IF(purchase.business_id IS NOT NULL, CAST(purchase.purchase_seq AS integer), CAST(null AS integer)) AS purchase_seq,\n            IF(purchase.business_id IS NOT NULL, purchase.purchased_at, CAST(null AS timestamp)) AS purchased_at,\n\n            IF(approval.business_id IS NOT NULL, approval.scraping_type, purchase.scraping_type) AS scraping_type,\n            IF(approval.business_id IS NOT NULL, approval.status, CAST(null AS integer)) AS status,\n            IF(approval.business_id IS NOT NULL, approval.transacted_at, purchase.transacted_at) AS transacted_at,\n            IF(approval.business_id IS NOT NULL, approval.approval_canceled_at, CAST(null AS timestamp)) AS approval_canceled_at,\n            IF(approval.business_id IS NOT NULL, approval.created_at, purchase.created_at) AS created_at,\n            IF(approval.business_id IS NOT NULL, approval.updated_at, purchase.updated_at) AS updated_at,\n            IF(approval.business_id IS NOT NULL, date_format(approval.created_at, 'yyyy-MM-dd'), date_format(purchase.created_at, 'yyyy-MM-dd')) AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is not null OR purchase.business_id is not null\n)""}, 'role': 'process', 'type': 'sql'}]"
918,process:::current_transactions:::build_card_sales_all,process:::prev_transactions:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    DISTINCT\n            acquirer_name,\n            amount,\n            approval_canceled_at,\n            approval_seq,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            encrypted_card_number,\n            estimated_paid_at,\n            etc_fee,\n            fee,\n            installment,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_cancel_seq,\n            purchase_canceled_at,\n            purchase_delayed,\n            purchase_seq,\n            purchased_at,\n            scraping_type,\n            status,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\nFROM        (\n  SELECT    IF(approval.business_id IS NOT NULL, approval.acquirer_name, purchase.acquirer_name) AS acquirer_name,\n            IF(approval.business_id IS NOT NULL, approval.amount, purchase.amount) AS amount,\n            IF(approval.business_id IS NOT NULL, CAST(approval.approval_seq AS integer), CAST(null AS integer)) AS approval_seq,\n            IF(approval.business_id IS NOT NULL, approval.authorization_number, purchase.authorization_number) AS authorization_number,\n\n            IF(purchase.business_id IS NOT NULL, purchase.base_fee, CAST(null AS integer)) AS base_fee,\n            IF(purchase.business_id IS NOT NULL, purchase.etc_fee, CAST(null AS integer)) AS etc_fee,\n            IF(purchase.business_id IS NOT NULL, purchase.fee, approval.fee) AS fee,\n            IF(purchase.business_id IS NOT NULL, purchase.vat_fee, approval.vat_fee) AS vat_fee,\n\n            IF(approval.business_id IS NOT NULL, approval.business_id, purchase.business_id) AS business_id,\n            IF(approval.business_id IS NOT NULL, approval.card_number, purchase.card_number) AS card_number,\n            IF(approval.business_id IS NOT NULL, approval.card_type, purchase.card_type) AS card_type,\n            IF(approval.business_id IS NOT NULL, approval.credential_key, purchase.credential_key) AS credential_key,\n            IF(approval.business_id IS NOT NULL, approval.encrypted_card_number, CAST(null AS string)) AS encrypted_card_number,\n            IF(approval.business_id IS NOT NULL, approval.estimated_paid_at, CAST(null AS timestamp)) AS estimated_paid_at,\n            IF(approval.business_id IS NOT NULL, approval.installment, CAST(null AS integer)) AS installment,\n            IF(approval.business_id IS NOT NULL, approval.issuer_name, purchase.issuer_name) AS issuer_name,\n            IF(approval.business_id IS NOT NULL, approval.masked_card_number, purchase.masked_card_number) AS masked_card_number,\n            IF(approval.business_id IS NOT NULL, approval.merchant_number, purchase.merchant_number) AS merchant_number,\n\n            IF(purchase.business_id IS NOT NULL, purchase.paid_at, CAST(null AS timestamp)) AS paid_at,\n            IF(purchase.business_id IS NOT NULL, purchase.payment, approval.payment) AS payment,\n            IF(purchase.business_id IS NOT NULL, purchase.point_fee, CAST(null AS integer)) AS point_fee,\n            IF(purchase.business_id IS NOT NULL, CAST(purchase.purchase_cancel_seq AS integer), CAST(null AS integer)) AS purchase_cancel_seq,\n            IF(purchase.business_id IS NOT NULL, purchase.purchase_canceled_at, CAST(null AS timestamp)) AS purchase_canceled_at,\n            IF(purchase.business_id IS NOT NULL, purchase.purchase_delayed, CAST(null AS boolean)) AS purchase_delayed,\n            IF(purchase.business_id IS NOT NULL, CAST(purchase.purchase_seq AS integer), CAST(null AS integer)) AS purchase_seq,\n            IF(purchase.business_id IS NOT NULL, purchase.purchased_at, CAST(null AS timestamp)) AS purchased_at,\n\n            IF(approval.business_id IS NOT NULL, approval.scraping_type, purchase.scraping_type) AS scraping_type,\n            IF(approval.business_id IS NOT NULL, approval.status, CAST(null AS integer)) AS status,\n            IF(approval.business_id IS NOT NULL, approval.transacted_at, purchase.transacted_at) AS transacted_at,\n            IF(approval.business_id IS NOT NULL, approval.approval_canceled_at, CAST(null AS timestamp)) AS approval_canceled_at,\n            IF(approval.business_id IS NOT NULL, approval.created_at, purchase.created_at) AS created_at,\n            IF(approval.business_id IS NOT NULL, approval.updated_at, purchase.updated_at) AS updated_at,\n            IF(approval.business_id IS NOT NULL, date_format(approval.created_at, 'yyyy-MM-dd'), date_format(purchase.created_at, 'yyyy-MM-dd')) AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is not null OR purchase.business_id is not null\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    p.*\nFROM  (\n          SELECT DISTINCT business_id, credential_key\n          FROM    current_transactions\n) AS c\nJOIN (\n          SELECT  *\n          FROM    prev_transactions_raw\n          WHERE   created_at_date >= '2020-12-15'\n          AND     created_at_date < '2021-01-25'\n\n) AS p\nON    (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key\n)""}, 'role': 'process', 'type': 'sql'}]"
919,process:::current_transactions:::build_card_sales_all,process:::merged_transactions:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    DISTINCT\n            acquirer_name,\n            amount,\n            approval_canceled_at,\n            approval_seq,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            encrypted_card_number,\n            estimated_paid_at,\n            etc_fee,\n            fee,\n            installment,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_cancel_seq,\n            purchase_canceled_at,\n            purchase_delayed,\n            purchase_seq,\n            purchased_at,\n            scraping_type,\n            status,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\nFROM        (\n  SELECT    IF(approval.business_id IS NOT NULL, approval.acquirer_name, purchase.acquirer_name) AS acquirer_name,\n            IF(approval.business_id IS NOT NULL, approval.amount, purchase.amount) AS amount,\n            IF(approval.business_id IS NOT NULL, CAST(approval.approval_seq AS integer), CAST(null AS integer)) AS approval_seq,\n            IF(approval.business_id IS NOT NULL, approval.authorization_number, purchase.authorization_number) AS authorization_number,\n\n            IF(purchase.business_id IS NOT NULL, purchase.base_fee, CAST(null AS integer)) AS base_fee,\n            IF(purchase.business_id IS NOT NULL, purchase.etc_fee, CAST(null AS integer)) AS etc_fee,\n            IF(purchase.business_id IS NOT NULL, purchase.fee, approval.fee) AS fee,\n            IF(purchase.business_id IS NOT NULL, purchase.vat_fee, approval.vat_fee) AS vat_fee,\n\n            IF(approval.business_id IS NOT NULL, approval.business_id, purchase.business_id) AS business_id,\n            IF(approval.business_id IS NOT NULL, approval.card_number, purchase.card_number) AS card_number,\n            IF(approval.business_id IS NOT NULL, approval.card_type, purchase.card_type) AS card_type,\n            IF(approval.business_id IS NOT NULL, approval.credential_key, purchase.credential_key) AS credential_key,\n            IF(approval.business_id IS NOT NULL, approval.encrypted_card_number, CAST(null AS string)) AS encrypted_card_number,\n            IF(approval.business_id IS NOT NULL, approval.estimated_paid_at, CAST(null AS timestamp)) AS estimated_paid_at,\n            IF(approval.business_id IS NOT NULL, approval.installment, CAST(null AS integer)) AS installment,\n            IF(approval.business_id IS NOT NULL, approval.issuer_name, purchase.issuer_name) AS issuer_name,\n            IF(approval.business_id IS NOT NULL, approval.masked_card_number, purchase.masked_card_number) AS masked_card_number,\n            IF(approval.business_id IS NOT NULL, approval.merchant_number, purchase.merchant_number) AS merchant_number,\n\n            IF(purchase.business_id IS NOT NULL, purchase.paid_at, CAST(null AS timestamp)) AS paid_at,\n            IF(purchase.business_id IS NOT NULL, purchase.payment, approval.payment) AS payment,\n            IF(purchase.business_id IS NOT NULL, purchase.point_fee, CAST(null AS integer)) AS point_fee,\n            IF(purchase.business_id IS NOT NULL, CAST(purchase.purchase_cancel_seq AS integer), CAST(null AS integer)) AS purchase_cancel_seq,\n            IF(purchase.business_id IS NOT NULL, purchase.purchase_canceled_at, CAST(null AS timestamp)) AS purchase_canceled_at,\n            IF(purchase.business_id IS NOT NULL, purchase.purchase_delayed, CAST(null AS boolean)) AS purchase_delayed,\n            IF(purchase.business_id IS NOT NULL, CAST(purchase.purchase_seq AS integer), CAST(null AS integer)) AS purchase_seq,\n            IF(purchase.business_id IS NOT NULL, purchase.purchased_at, CAST(null AS timestamp)) AS purchased_at,\n\n            IF(approval.business_id IS NOT NULL, approval.scraping_type, purchase.scraping_type) AS scraping_type,\n            IF(approval.business_id IS NOT NULL, approval.status, CAST(null AS integer)) AS status,\n            IF(approval.business_id IS NOT NULL, approval.transacted_at, purchase.transacted_at) AS transacted_at,\n            IF(approval.business_id IS NOT NULL, approval.approval_canceled_at, CAST(null AS timestamp)) AS approval_canceled_at,\n            IF(approval.business_id IS NOT NULL, approval.created_at, purchase.created_at) AS created_at,\n            IF(approval.business_id IS NOT NULL, approval.updated_at, purchase.updated_at) AS updated_at,\n            IF(approval.business_id IS NOT NULL, date_format(approval.created_at, 'yyyy-MM-dd'), date_format(purchase.created_at, 'yyyy-MM-dd')) AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is not null OR purchase.business_id is not null\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    IF(current.business_id IS NOT NULL, true, false) AS is_current,\n          IF(current.business_id IS NOT NULL, current.acquirer_name, prev.acquirer_name) AS acquirer_name,\n          IF(current.business_id IS NOT NULL, current.amount, prev.amount) AS amount,\n          IF(current.business_id IS NOT NULL, current.authorization_number, prev.authorization_number) AS authorization_number,\n          CAST(COALESCE(current.approval_seq, prev.approval_seq) AS integer) AS approval_seq,\n          COALESCE(current.base_fee, prev.base_fee) AS base_fee,\n          IF(current.business_id IS NOT NULL, current.business_id, prev.business_id) AS business_id,\n          IF(current.business_id IS NOT NULL, current.card_number, prev.card_number) AS card_number,\n          COALESCE(current.card_type, prev.card_type) AS card_type,\n          COALESCE(current.credential_key, prev.credential_key) AS credential_key,\n          COALESCE(current.encrypted_card_number, prev.encrypted_card_number) AS encrypted_card_number,\n          COALESCE(current.estimated_paid_at, prev.estimated_paid_at) AS estimated_paid_at,\n          COALESCE(current.etc_fee, prev.etc_fee) AS etc_fee,\n          COALESCE(current.fee, prev.fee) AS fee,\n          COALESCE(current.installment, prev.installment) AS installment,\n          COALESCE(current.issuer_name, prev.issuer_name) AS issuer_name,\n          COALESCE(current.masked_card_number, prev.masked_card_number) AS masked_card_number,\n          COALESCE(current.merchant_number, prev.merchant_number) AS merchant_number,\n          COALESCE(current.paid_at, prev.paid_at) AS paid_at,\n          COALESCE(current.payment, prev.payment) AS payment,\n          COALESCE(current.point_fee, prev.point_fee) AS point_fee,\n          CAST(COALESCE(current.purchase_cancel_seq, prev.purchase_cancel_seq) AS integer) AS purchase_cancel_seq,\n          COALESCE(current.purchase_canceled_at, prev.purchase_canceled_at) AS purchase_canceled_at,\n          COALESCE(current.purchase_delayed, prev.purchase_delayed) AS purchase_delayed,\n          CAST(COALESCE(current.purchase_seq, prev.purchase_seq) AS integer) AS purchase_seq,\n          COALESCE(current.purchased_at, prev.purchased_at) AS purchased_at,\n          COALESCE(current.scraping_type, prev.scraping_type) AS scraping_type,\n          COALESCE(current.status, prev.status) AS status,\n          COALESCE(current.approval_canceled_at, prev.approval_canceled_at) AS approval_canceled_at,\n          COALESCE(current.vat_fee, prev.vat_fee) AS vat_fee,\n          IF(current.business_id IS NOT NULL, COALESCE(prev.visit_order, 0) + 1, prev.visit_order) AS visit_order,\n          IF(prev.business_id IS NULL OR current.transacted_at > prev.transacted_at, current.transacted_at, prev.transacted_at) AS transacted_at,\n          IF(prev.business_id IS NULL OR current.created_at < prev.created_at, current.created_at, prev.created_at) AS created_at,\n          IF(prev.business_id IS NULL OR current.updated_at > prev.updated_at, current.updated_at, prev.updated_at) AS updated_at,\n          IF(prev.business_id IS NULL OR current.created_at_date < prev.created_at_date, current.created_at_date, prev.created_at_date) AS created_at_date\nFROM      prev_transactions prev\nFULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq) AND\n        CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE)\n      )\n  )\n)"", 'old_sql': 'CAST(COALESCE(prev.purchased_at, prev.transacted_at) AS DATE) = CAST(COALESCE(current.purchased_at, current.transacted_at) AS DATE)'}, 'role': 'process', 'type': 'sql'}]"
920,process:::prev_transactions:::build_card_sales_all,process:::merged_transactions:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    p.*\nFROM  (\n          SELECT DISTINCT business_id, credential_key\n          FROM    current_transactions\n) AS c\nJOIN (\n          SELECT  *\n          FROM    prev_transactions_raw\n          WHERE   created_at_date >= '2020-12-15'\n          AND     created_at_date < '2021-01-25'\n\n) AS p\nON    (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    IF(current.business_id IS NOT NULL, true, false) AS is_current,\n          IF(current.business_id IS NOT NULL, current.acquirer_name, prev.acquirer_name) AS acquirer_name,\n          IF(current.business_id IS NOT NULL, current.amount, prev.amount) AS amount,\n          IF(current.business_id IS NOT NULL, current.authorization_number, prev.authorization_number) AS authorization_number,\n          CAST(COALESCE(current.approval_seq, prev.approval_seq) AS integer) AS approval_seq,\n          COALESCE(current.base_fee, prev.base_fee) AS base_fee,\n          IF(current.business_id IS NOT NULL, current.business_id, prev.business_id) AS business_id,\n          IF(current.business_id IS NOT NULL, current.card_number, prev.card_number) AS card_number,\n          COALESCE(current.card_type, prev.card_type) AS card_type,\n          COALESCE(current.credential_key, prev.credential_key) AS credential_key,\n          COALESCE(current.encrypted_card_number, prev.encrypted_card_number) AS encrypted_card_number,\n          COALESCE(current.estimated_paid_at, prev.estimated_paid_at) AS estimated_paid_at,\n          COALESCE(current.etc_fee, prev.etc_fee) AS etc_fee,\n          COALESCE(current.fee, prev.fee) AS fee,\n          COALESCE(current.installment, prev.installment) AS installment,\n          COALESCE(current.issuer_name, prev.issuer_name) AS issuer_name,\n          COALESCE(current.masked_card_number, prev.masked_card_number) AS masked_card_number,\n          COALESCE(current.merchant_number, prev.merchant_number) AS merchant_number,\n          COALESCE(current.paid_at, prev.paid_at) AS paid_at,\n          COALESCE(current.payment, prev.payment) AS payment,\n          COALESCE(current.point_fee, prev.point_fee) AS point_fee,\n          CAST(COALESCE(current.purchase_cancel_seq, prev.purchase_cancel_seq) AS integer) AS purchase_cancel_seq,\n          COALESCE(current.purchase_canceled_at, prev.purchase_canceled_at) AS purchase_canceled_at,\n          COALESCE(current.purchase_delayed, prev.purchase_delayed) AS purchase_delayed,\n          CAST(COALESCE(current.purchase_seq, prev.purchase_seq) AS integer) AS purchase_seq,\n          COALESCE(current.purchased_at, prev.purchased_at) AS purchased_at,\n          COALESCE(current.scraping_type, prev.scraping_type) AS scraping_type,\n          COALESCE(current.status, prev.status) AS status,\n          COALESCE(current.approval_canceled_at, prev.approval_canceled_at) AS approval_canceled_at,\n          COALESCE(current.vat_fee, prev.vat_fee) AS vat_fee,\n          IF(current.business_id IS NOT NULL, COALESCE(prev.visit_order, 0) + 1, prev.visit_order) AS visit_order,\n          IF(prev.business_id IS NULL OR current.transacted_at > prev.transacted_at, current.transacted_at, prev.transacted_at) AS transacted_at,\n          IF(prev.business_id IS NULL OR current.created_at < prev.created_at, current.created_at, prev.created_at) AS created_at,\n          IF(prev.business_id IS NULL OR current.updated_at > prev.updated_at, current.updated_at, prev.updated_at) AS updated_at,\n          IF(prev.business_id IS NULL OR current.created_at_date < prev.created_at_date, current.created_at_date, prev.created_at_date) AS created_at_date\nFROM      prev_transactions prev\nFULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq) AND\n        CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE)\n      )\n  )\n)"", 'old_sql': 'CAST(COALESCE(prev.purchased_at, prev.transacted_at) AS DATE) = CAST(COALESCE(current.purchased_at, current.transacted_at) AS DATE)'}, 'role': 'process', 'type': 'sql'}]"
921,process:::merged_transactions:::build_card_sales_all,process:::transactions_updated:::build_card_sales_all,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    IF(current.business_id IS NOT NULL, true, false) AS is_current,\n          IF(current.business_id IS NOT NULL, current.acquirer_name, prev.acquirer_name) AS acquirer_name,\n          IF(current.business_id IS NOT NULL, current.amount, prev.amount) AS amount,\n          IF(current.business_id IS NOT NULL, current.authorization_number, prev.authorization_number) AS authorization_number,\n          CAST(COALESCE(current.approval_seq, prev.approval_seq) AS integer) AS approval_seq,\n          COALESCE(current.base_fee, prev.base_fee) AS base_fee,\n          IF(current.business_id IS NOT NULL, current.business_id, prev.business_id) AS business_id,\n          IF(current.business_id IS NOT NULL, current.card_number, prev.card_number) AS card_number,\n          COALESCE(current.card_type, prev.card_type) AS card_type,\n          COALESCE(current.credential_key, prev.credential_key) AS credential_key,\n          COALESCE(current.encrypted_card_number, prev.encrypted_card_number) AS encrypted_card_number,\n          COALESCE(current.estimated_paid_at, prev.estimated_paid_at) AS estimated_paid_at,\n          COALESCE(current.etc_fee, prev.etc_fee) AS etc_fee,\n          COALESCE(current.fee, prev.fee) AS fee,\n          COALESCE(current.installment, prev.installment) AS installment,\n          COALESCE(current.issuer_name, prev.issuer_name) AS issuer_name,\n          COALESCE(current.masked_card_number, prev.masked_card_number) AS masked_card_number,\n          COALESCE(current.merchant_number, prev.merchant_number) AS merchant_number,\n          COALESCE(current.paid_at, prev.paid_at) AS paid_at,\n          COALESCE(current.payment, prev.payment) AS payment,\n          COALESCE(current.point_fee, prev.point_fee) AS point_fee,\n          CAST(COALESCE(current.purchase_cancel_seq, prev.purchase_cancel_seq) AS integer) AS purchase_cancel_seq,\n          COALESCE(current.purchase_canceled_at, prev.purchase_canceled_at) AS purchase_canceled_at,\n          COALESCE(current.purchase_delayed, prev.purchase_delayed) AS purchase_delayed,\n          CAST(COALESCE(current.purchase_seq, prev.purchase_seq) AS integer) AS purchase_seq,\n          COALESCE(current.purchased_at, prev.purchased_at) AS purchased_at,\n          COALESCE(current.scraping_type, prev.scraping_type) AS scraping_type,\n          COALESCE(current.status, prev.status) AS status,\n          COALESCE(current.approval_canceled_at, prev.approval_canceled_at) AS approval_canceled_at,\n          COALESCE(current.vat_fee, prev.vat_fee) AS vat_fee,\n          IF(current.business_id IS NOT NULL, COALESCE(prev.visit_order, 0) + 1, prev.visit_order) AS visit_order,\n          IF(prev.business_id IS NULL OR current.transacted_at > prev.transacted_at, current.transacted_at, prev.transacted_at) AS transacted_at,\n          IF(prev.business_id IS NULL OR current.created_at < prev.created_at, current.created_at, prev.created_at) AS created_at,\n          IF(prev.business_id IS NULL OR current.updated_at > prev.updated_at, current.updated_at, prev.updated_at) AS updated_at,\n          IF(prev.business_id IS NULL OR current.created_at_date < prev.created_at_date, current.created_at_date, prev.created_at_date) AS created_at_date\nFROM      prev_transactions prev\nFULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq) AND\n        CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE)\n      )\n  )\n)"", 'old_sql': 'CAST(COALESCE(prev.purchased_at, prev.transacted_at) AS DATE) = CAST(COALESCE(current.purchased_at, current.transacted_at) AS DATE)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          approval_canceled_at,\n          approval_seq,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_paid_at,\n          etc_fee,\n          fee,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_cancel_seq,\n          purchase_canceled_at,\n          purchase_delayed,\n          purchase_seq,\n          purchased_at,\n          scraping_type,\n          status,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      merged_transactions\nWHERE     is_current = true'}, 'role': 'process', 'type': 'sql'}]"
922,process:::merged_transactions:::build_card_sales_all,s3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/transactions_merged/ts=09_50,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': ""SELECT    IF(current.business_id IS NOT NULL, true, false) AS is_current,\n          IF(current.business_id IS NOT NULL, current.acquirer_name, prev.acquirer_name) AS acquirer_name,\n          IF(current.business_id IS NOT NULL, current.amount, prev.amount) AS amount,\n          IF(current.business_id IS NOT NULL, current.authorization_number, prev.authorization_number) AS authorization_number,\n          CAST(COALESCE(current.approval_seq, prev.approval_seq) AS integer) AS approval_seq,\n          COALESCE(current.base_fee, prev.base_fee) AS base_fee,\n          IF(current.business_id IS NOT NULL, current.business_id, prev.business_id) AS business_id,\n          IF(current.business_id IS NOT NULL, current.card_number, prev.card_number) AS card_number,\n          COALESCE(current.card_type, prev.card_type) AS card_type,\n          COALESCE(current.credential_key, prev.credential_key) AS credential_key,\n          COALESCE(current.encrypted_card_number, prev.encrypted_card_number) AS encrypted_card_number,\n          COALESCE(current.estimated_paid_at, prev.estimated_paid_at) AS estimated_paid_at,\n          COALESCE(current.etc_fee, prev.etc_fee) AS etc_fee,\n          COALESCE(current.fee, prev.fee) AS fee,\n          COALESCE(current.installment, prev.installment) AS installment,\n          COALESCE(current.issuer_name, prev.issuer_name) AS issuer_name,\n          COALESCE(current.masked_card_number, prev.masked_card_number) AS masked_card_number,\n          COALESCE(current.merchant_number, prev.merchant_number) AS merchant_number,\n          COALESCE(current.paid_at, prev.paid_at) AS paid_at,\n          COALESCE(current.payment, prev.payment) AS payment,\n          COALESCE(current.point_fee, prev.point_fee) AS point_fee,\n          CAST(COALESCE(current.purchase_cancel_seq, prev.purchase_cancel_seq) AS integer) AS purchase_cancel_seq,\n          COALESCE(current.purchase_canceled_at, prev.purchase_canceled_at) AS purchase_canceled_at,\n          COALESCE(current.purchase_delayed, prev.purchase_delayed) AS purchase_delayed,\n          CAST(COALESCE(current.purchase_seq, prev.purchase_seq) AS integer) AS purchase_seq,\n          COALESCE(current.purchased_at, prev.purchased_at) AS purchased_at,\n          COALESCE(current.scraping_type, prev.scraping_type) AS scraping_type,\n          COALESCE(current.status, prev.status) AS status,\n          COALESCE(current.approval_canceled_at, prev.approval_canceled_at) AS approval_canceled_at,\n          COALESCE(current.vat_fee, prev.vat_fee) AS vat_fee,\n          IF(current.business_id IS NOT NULL, COALESCE(prev.visit_order, 0) + 1, prev.visit_order) AS visit_order,\n          IF(prev.business_id IS NULL OR current.transacted_at > prev.transacted_at, current.transacted_at, prev.transacted_at) AS transacted_at,\n          IF(prev.business_id IS NULL OR current.created_at < prev.created_at, current.created_at, prev.created_at) AS created_at,\n          IF(prev.business_id IS NULL OR current.updated_at > prev.updated_at, current.updated_at, prev.updated_at) AS updated_at,\n          IF(prev.business_id IS NULL OR current.created_at_date < prev.created_at_date, current.created_at_date, prev.created_at_date) AS created_at_date\nFROM      prev_transactions prev\nFULL OUTER JOIN current_transactions current\nON        (\n  prev.business_id = current.business_id AND\n  prev.credential_key = current.credential_key AND\n  prev.authorization_number = current.authorization_number AND\n  CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE) AND\n  prev.issuer_name = current.issuer_name AND\n  prev.amount = current.amount AND\n  (\n      current.issuer_name = '비씨' OR\n      (\n        prev.masked_card_number = current.masked_card_number AND\n        COALESCE(prev.approval_seq, prev.purchase_seq) = COALESCE(current.approval_seq, current.purchase_seq) AND\n        CAST(prev.transacted_at AS DATE) = CAST(current.transacted_at AS DATE)\n      )\n  )\n)"", 'old_sql': 'CAST(COALESCE(prev.purchased_at, prev.transacted_at) AS DATE) = CAST(COALESCE(current.purchased_at, current.transacted_at) AS DATE)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/transactions_merged/date_id=2021-01-27/ts=09_50', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
923,process:::transactions_updated:::build_card_sales_all,s3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/transactions_updated/ts=09_50,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_sales_all.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          approval_canceled_at,\n          approval_seq,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_paid_at,\n          etc_fee,\n          fee,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_cancel_seq,\n          purchase_canceled_at,\n          purchase_delayed,\n          purchase_seq,\n          purchased_at,\n          scraping_type,\n          status,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      merged_transactions\nWHERE     is_current = true'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_sales_all.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales_incremental/transactions_updated/date_id=2021-01-27/ts=09_50', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
924,process:::add_timestamp:::registration_number_meta_es_sink,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_meta_es_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-29', 'yyyy-MM-dd') AS timestamp,\n            *\n  FROM      registration_number_meta\n  WHERE     registration_number IS NOT NULL AND registration_number != ''""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
925,process:::approvals_with_cancel:::match_to_approvals,process:::merged_approvals:::match_to_approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'match_to_approvals.json', 'options': {'sql': ""SELECT    approved.*,\n          canceled.transacted_at AS approval_canceled_at,\n          'cancel' AS type\nFROM      approval_candidates\nWHERE     approved.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'match_to_approvals.json', 'options': {'sql': 'SELECT  * FROM approvals_without_cancel\nUNION ALL\nSELECT  * FROM approvals_with_cancel\nUNION ALL\nSELECT  * FROM approvals_with_late_cancel'}, 'role': 'process', 'type': 'sql'}]"
926,process:::approvals_with_late_cancel:::match_to_approvals,process:::approvals_without_cancel:::match_to_approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'match_to_approvals.json', 'options': {'sql': ""SELECT    p.*,\n          c.transacted_at AS approval_canceled_at,\n          'late_cancel' AS type\nFROM      (\n    SELECT    approved.*\n    FROM      approval_candidates\n    WHERE     canceled.business_id is null\n) p, (\n    SELECT    canceled.*\n    FROM      approval_candidates\n    WHERE     approved.business_id is null\n) c\nWHERE     p.business_id = c.business_id\nAND       p.credential_key = c.credential_key\nAND       p.amount = -c.amount\nAND       p.card_number = c.card_number\nAND       p.authorization_number = c.authorization_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'match_to_approvals.json', 'options': {'sql': ""SELECT    /*+ BROADCAST(c) */\n          p.approved.*,\n          CAST(null AS TIMESTAMP) AS approval_canceled_at,\n          'approved' AS type\nFROM      approval_candidates p LEFT ANTI JOIN approvals_with_late_cancel c\nON (\n  p.approved.business_id = c.business_id AND\n  p.approved.credential_key = c.credential_key AND\n  abs(p.approved.amount) = abs(c.amount) AND\n  p.approved.card_number = c.card_number AND\n  p.approved.authorization_number = c.authorization_number AND\n  c.approval_canceled_at is not null\n)\nWHERE     p.canceled.business_id is null""}, 'role': 'process', 'type': 'sql'}]"
927,process:::approvals_with_late_cancel:::match_to_approvals,process:::merged_approvals:::match_to_approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'match_to_approvals.json', 'options': {'sql': ""SELECT    p.*,\n          c.transacted_at AS approval_canceled_at,\n          'late_cancel' AS type\nFROM      (\n    SELECT    approved.*\n    FROM      approval_candidates\n    WHERE     canceled.business_id is null\n) p, (\n    SELECT    canceled.*\n    FROM      approval_candidates\n    WHERE     approved.business_id is null\n) c\nWHERE     p.business_id = c.business_id\nAND       p.credential_key = c.credential_key\nAND       p.amount = -c.amount\nAND       p.card_number = c.card_number\nAND       p.authorization_number = c.authorization_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'match_to_approvals.json', 'options': {'sql': 'SELECT  * FROM approvals_without_cancel\nUNION ALL\nSELECT  * FROM approvals_with_cancel\nUNION ALL\nSELECT  * FROM approvals_with_late_cancel'}, 'role': 'process', 'type': 'sql'}]"
928,process:::approvals_without_cancel:::match_to_approvals,process:::merged_approvals:::match_to_approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'match_to_approvals.json', 'options': {'sql': ""SELECT    /*+ BROADCAST(c) */\n          p.approved.*,\n          CAST(null AS TIMESTAMP) AS approval_canceled_at,\n          'approved' AS type\nFROM      approval_candidates p LEFT ANTI JOIN approvals_with_late_cancel c\nON (\n  p.approved.business_id = c.business_id AND\n  p.approved.credential_key = c.credential_key AND\n  abs(p.approved.amount) = abs(c.amount) AND\n  p.approved.card_number = c.card_number AND\n  p.approved.authorization_number = c.authorization_number AND\n  c.approval_canceled_at is not null\n)\nWHERE     p.canceled.business_id is null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'match_to_approvals.json', 'options': {'sql': 'SELECT  * FROM approvals_without_cancel\nUNION ALL\nSELECT  * FROM approvals_with_cancel\nUNION ALL\nSELECT  * FROM approvals_with_late_cancel'}, 'role': 'process', 'type': 'sql'}]"
929,process:::merged_approvals:::match_to_approvals,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/approvals_current,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'match_to_approvals.json', 'options': {'sql': 'SELECT  * FROM approvals_without_cancel\nUNION ALL\nSELECT  * FROM approvals_with_cancel\nUNION ALL\nSELECT  * FROM approvals_with_late_cancel'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_transaction_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/approvals_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'match_to_approvals.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/approvals_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
930,s3://kcd-de-production/raw/db/goose/snapshot/places,process:::place_name:::registration_number_places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/places'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_places.json', 'options': {'sql': 'SELECT    registration_number, merchant_name\nFROM (\n        SELECT    registration_number, name AS merchant_name,\n                  row_number() OVER (PARTITION BY registration_number ORDER BY updated_at DESC) AS rank\n        FROM      places\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
931,s3://kcd-de-production/raw/db/goose/snapshot/places,process:::reviews_stat:::registration_number_places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/places'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_places.json', 'options': {'sql': ""SELECT\n        registration_number,\n        count(distinct(place_uid)) AS place_cnt,\n        count(distinct(review_type)) AS review_type_cnt,\n        SUM(review_cnt) AS total_review_cnt,\n        AVG(avg_rating) AS total_avg_rating,\n        collect_list(\n            struct(place_uid, review_type, review_cnt,avg_rating)\n        ) AS ls\nFROM (\n        SELECT\n                registration_number,\n                place_uid,\n                review_type,\n                count(1) AS review_cnt,\n                avg(rating) AS avg_rating\n        FROM (\n                SELECT\n                        places.registration_number,\n                        reviews.*\n                FROM (\n                        SELECT\n                                place_uid,\n                                review_type,\n                                rating\n                        FROM (\n                            SELECT *, to_date(written_at) AS written_date\n                            FROM place_reviews\n                        )\n                        WHERE   written_date between '2020-10-30' AND '2021-01-28'\n                ) AS reviews\n                JOIN places\n                ON reviews.place_uid = places.uid\n        )\n        GROUP BY registration_number, place_uid, review_type\n)\nGROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]"
932,s3://kcd-de-production/raw/db/goose/snapshot/places,process:::merchant_places:::merchant_places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/places'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/places'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_places.json', 'options': {'sql': 'SELECT    *\nFROM (\n          SELECT\n                  issuer AS card_issuer, merchant_number,\n                  places.*,\n                  row_number() OVER (PARTITION BY place_merchants.registration_number, issuer, merchant_number, type ORDER BY places.updated_at DESC ) AS rank\n          FROM      place_merchants\n          JOIN      places\n          ON        place_merchants.place_id = places.id\n          AND       place_merchants.registration_number = places.registration_number\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
933,s3://kcd-data/place_table/place_reviews,process:::reviews_stat:::registration_number_places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_reviews'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_reviews', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_reviews'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_places.json', 'options': {'sql': ""SELECT\n        registration_number,\n        count(distinct(place_uid)) AS place_cnt,\n        count(distinct(review_type)) AS review_type_cnt,\n        SUM(review_cnt) AS total_review_cnt,\n        AVG(avg_rating) AS total_avg_rating,\n        collect_list(\n            struct(place_uid, review_type, review_cnt,avg_rating)\n        ) AS ls\nFROM (\n        SELECT\n                registration_number,\n                place_uid,\n                review_type,\n                count(1) AS review_cnt,\n                avg(rating) AS avg_rating\n        FROM (\n                SELECT\n                        places.registration_number,\n                        reviews.*\n                FROM (\n                        SELECT\n                                place_uid,\n                                review_type,\n                                rating\n                        FROM (\n                            SELECT *, to_date(written_at) AS written_date\n                            FROM place_reviews\n                        )\n                        WHERE   written_date between '2020-10-30' AND '2021-01-28'\n                ) AS reviews\n                JOIN places\n                ON reviews.place_uid = places.uid\n        )\n        GROUP BY registration_number, place_uid, review_type\n)\nGROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]"
934,s3://kcd-data/place_table/place_reviews,process:::place_reviews_union_distinct:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_reviews'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_reviews', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_reviews'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        (SELECT\n            *,\n            row_number() OVER (PARTITION BY place_uid, place_type, unique_key, review_type ORDER BY _scrap_id DESC) AS rownum\n        FROM\n            (SELECT\n               CASE WHEN url IS null OR trim(url) = '' THEN review_id ELSE url END as unique_key,\n               *\n             FROM\n               (SELECT\n                   timestamp,\n                   place_uid,\n                   place_type,\n                   review_type,\n                   review_id,\n                   author,\n                   title,\n                   contents,\n                   url,\n                   image,\n                   rating,\n                   written_at,\n                   _scrap_id\n                FROM place_reviews\n\n                UNION ALl\n\n                SELECT\n                   timestamp,\n                   place_uid,\n                   place_type,\n                   review_type,\n                   review_id,\n                   author,\n                   title,\n                   contents,\n                   url,\n                   image,\n                   rating,\n                   written_at,\n                   _scrap_id\n                 FROM place_reviews_snapshot)\n            )\n        )\n    WHERE rownum = 1""}, 'role': 'process', 'type': 'sql'}]"
935,s3://kcd-data/place_table/place_reviews,process:::place_reviews_graph_format:::place_table_graph_format,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_reviews'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_reviews', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_reviews'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_graph_format.json', 'options': {'sql': ""    SELECT\n        timestamp,\n        concat(place_uid, '_', place_type) AS from,\n        concat(review_id, '_', review_type) AS to,\n        'place_reviews' as label,\n        to_json(struct(\n            author,\n            contents,\n            image,\n            place_type,\n            place_uid,\n            rating,\n            review_id,\n            review_type,\n            title,\n            written_at\n        )) AS props\n    FROM\n         place_reviews""}, 'role': 'process', 'type': 'sql'}]"
936,process:::place_name:::registration_number_places,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=places/name=places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_places.json', 'options': {'sql': 'SELECT    registration_number, merchant_name\nFROM (\n        SELECT    registration_number, name AS merchant_name,\n                  row_number() OVER (PARTITION BY registration_number ORDER BY updated_at DESC) AS rank\n        FROM      places\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_places.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=places/name=places'}, 'role': 'sink', 'type': 'file'}]"
937,process:::reviews_stat:::registration_number_places,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=places/name=reviews,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_places.json', 'options': {'sql': ""SELECT\n        registration_number,\n        count(distinct(place_uid)) AS place_cnt,\n        count(distinct(review_type)) AS review_type_cnt,\n        SUM(review_cnt) AS total_review_cnt,\n        AVG(avg_rating) AS total_avg_rating,\n        collect_list(\n            struct(place_uid, review_type, review_cnt,avg_rating)\n        ) AS ls\nFROM (\n        SELECT\n                registration_number,\n                place_uid,\n                review_type,\n                count(1) AS review_cnt,\n                avg(rating) AS avg_rating\n        FROM (\n                SELECT\n                        places.registration_number,\n                        reviews.*\n                FROM (\n                        SELECT\n                                place_uid,\n                                review_type,\n                                rating\n                        FROM (\n                            SELECT *, to_date(written_at) AS written_date\n                            FROM place_reviews\n                        )\n                        WHERE   written_date between '2020-10-30' AND '2021-01-28'\n                ) AS reviews\n                JOIN places\n                ON reviews.place_uid = places.uid\n        )\n        GROUP BY registration_number, place_uid, review_type\n)\nGROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_places.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=places/name=reviews'}, 'role': 'sink', 'type': 'file'}]"
938,process:::target_group:::transform_message,process:::valid_filter:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_message.json', 'options': {'sql': ""  SELECT\n          named_struct(\n              'campaign_id',      a.campaign_id,\n              'ad_group_id',      c.ad_group_id,\n              'creative_id',      c.id,\n              'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),\n              'user_type',        a.user_type,\n              'type',             a.type,\n              'target_type',      a.target_type,\n              'path',             a.path,\n              'frequency_cap',    a.frequency_cap,\n              'message_type',     c.message_type,\n              'template_code',    c.template_code,\n              'exclude_sent_user', a.exclude_sent_user,\n              'test_mode',        a.test_mode,\n              'limit',            a.limit,\n              'test_sequence',    a.test_sequence,\n              'template',         named_struct(\n                                      'title',        c.title,\n                                      'message',      c.template,\n                                      'attachment',   c.attachment\n                                  ),\n              'report_name',      a.report_name\n          ) AS meta,\n\n           named_struct(\n              'title',        CAST(null as STRING),\n              'message',      CAST(null as STRING),\n              'attachment',   named_struct('button', array(\n                                                          named_struct(\n                                                              'name',         CAST(null as STRING),\n                                                              'type',         CAST(null as STRING),\n                                                              'url_mobile',   CAST(null as STRING),\n                                                              'target',       CAST(null as STRING)\n                                                          )\n                                                       ),\n                                            'image', named_struct(\n                                                          'img_url', CAST(null AS STRING),\n                                                          'img_link', CAST(null AS STRING)\n                                                      )\n                                           )\n          ) AS result,\n          named_struct(\n              'valid', true,\n              'error', CAST(null as STRING)\n          ) AS status\n  FROM (\n          SELECT  *\n          FROM    ad_group\n          WHERE   status = 'RUNNING'\n  ) AS a\n  JOIN    (\n          SELECT *\n          FROM    creative\n          WHERE   creative.type = 'MESSAGE_TEMPLATE'\n          AND     enabled = true\n  ) AS c\n  ON      a.id = c.ad_group_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_message.json', 'options': {'sql': 'SELECT    user_message_history.*\nFROM      (\n              SELECT * FROM target_group WHERE meta.exclude_sent_user = true\n) AS t\nJOIN      user_message_history\nON        t.meta.user_type = user_message_history.user_type\nAND       t.meta.ad_group_id = user_message_history.ad_group_id'}, 'role': 'process', 'type': 'sql'}]"
939,process:::target_group:::transform_message,process:::target_messages:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_message.json', 'options': {'sql': ""  SELECT\n          named_struct(\n              'campaign_id',      a.campaign_id,\n              'ad_group_id',      c.ad_group_id,\n              'creative_id',      c.id,\n              'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),\n              'user_type',        a.user_type,\n              'type',             a.type,\n              'target_type',      a.target_type,\n              'path',             a.path,\n              'frequency_cap',    a.frequency_cap,\n              'message_type',     c.message_type,\n              'template_code',    c.template_code,\n              'exclude_sent_user', a.exclude_sent_user,\n              'test_mode',        a.test_mode,\n              'limit',            a.limit,\n              'test_sequence',    a.test_sequence,\n              'template',         named_struct(\n                                      'title',        c.title,\n                                      'message',      c.template,\n                                      'attachment',   c.attachment\n                                  ),\n              'report_name',      a.report_name\n          ) AS meta,\n\n           named_struct(\n              'title',        CAST(null as STRING),\n              'message',      CAST(null as STRING),\n              'attachment',   named_struct('button', array(\n                                                          named_struct(\n                                                              'name',         CAST(null as STRING),\n                                                              'type',         CAST(null as STRING),\n                                                              'url_mobile',   CAST(null as STRING),\n                                                              'target',       CAST(null as STRING)\n                                                          )\n                                                       ),\n                                            'image', named_struct(\n                                                          'img_url', CAST(null AS STRING),\n                                                          'img_link', CAST(null AS STRING)\n                                                      )\n                                           )\n          ) AS result,\n          named_struct(\n              'valid', true,\n              'error', CAST(null as STRING)\n          ) AS status\n  FROM (\n          SELECT  *\n          FROM    ad_group\n          WHERE   status = 'RUNNING'\n  ) AS a\n  JOIN    (\n          SELECT *\n          FROM    creative\n          WHERE   creative.type = 'MESSAGE_TEMPLATE'\n          AND     enabled = true\n  ) AS c\n  ON      a.id = c.ad_group_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_message.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetExtractProcess', 'reportDir': 's3://kcd-de-production/service/message/reports'}, 'role': 'process', 'type': 'custom'}]"
940,process:::target_group:::transform_message,s3://kcd-de-production/service/message/target_group/ts=08_25,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_message.json', 'options': {'sql': ""  SELECT\n          named_struct(\n              'campaign_id',      a.campaign_id,\n              'ad_group_id',      c.ad_group_id,\n              'creative_id',      c.id,\n              'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),\n              'user_type',        a.user_type,\n              'type',             a.type,\n              'target_type',      a.target_type,\n              'path',             a.path,\n              'frequency_cap',    a.frequency_cap,\n              'message_type',     c.message_type,\n              'template_code',    c.template_code,\n              'exclude_sent_user', a.exclude_sent_user,\n              'test_mode',        a.test_mode,\n              'limit',            a.limit,\n              'test_sequence',    a.test_sequence,\n              'template',         named_struct(\n                                      'title',        c.title,\n                                      'message',      c.template,\n                                      'attachment',   c.attachment\n                                  ),\n              'report_name',      a.report_name\n          ) AS meta,\n\n           named_struct(\n              'title',        CAST(null as STRING),\n              'message',      CAST(null as STRING),\n              'attachment',   named_struct('button', array(\n                                                          named_struct(\n                                                              'name',         CAST(null as STRING),\n                                                              'type',         CAST(null as STRING),\n                                                              'url_mobile',   CAST(null as STRING),\n                                                              'target',       CAST(null as STRING)\n                                                          )\n                                                       ),\n                                            'image', named_struct(\n                                                          'img_url', CAST(null AS STRING),\n                                                          'img_link', CAST(null AS STRING)\n                                                      )\n                                           )\n          ) AS result,\n          named_struct(\n              'valid', true,\n              'error', CAST(null as STRING)\n          ) AS status\n  FROM (\n          SELECT  *\n          FROM    ad_group\n          WHERE   status = 'RUNNING'\n  ) AS a\n  JOIN    (\n          SELECT *\n          FROM    creative\n          WHERE   creative.type = 'MESSAGE_TEMPLATE'\n          AND     enabled = true\n  ) AS c\n  ON      a.id = c.ad_group_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_message.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/target_group/date_id=2021-01-29/ts=08_25', 'numPartitions': '1'}, 'role': 'sink', 'type': 'file'}]"
941,process:::valid_filter:::transform_message,process:::filtered_message:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_message.json', 'options': {'sql': 'SELECT    user_message_history.*\nFROM      (\n              SELECT * FROM target_group WHERE meta.exclude_sent_user = true\n) AS t\nJOIN      user_message_history\nON        t.meta.user_type = user_message_history.user_type\nAND       t.meta.ad_group_id = user_message_history.ad_group_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_message.json', 'options': {'sql': '  SELECT  t.target_id,\n          t.user_id,\n          t.business_id,\n          t.meta,\n          t.result,\n          CASE\n              WHEN    valid_filter.ad_group_id IS NOT NULL THEN named_struct(\'valid\', false, \'error\', \'EXCLUDED_SENT_USER\')\n              ELSE    t.status\n          END AS status\n  FROM    (\n              SELECT  target_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[0], target_id) AS user_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[1], null) AS business_id,\n                      targetGroup.meta,\n                      targetGroup.status,\n                      targetGroup.result\n              FROM    target_messages\n  ) AS t\n  LEFT OUTER JOIN     valid_filter\n  ON      t.meta.user_type = valid_filter.user_type\n  AND     t.meta.ad_group_id = valid_filter.ad_group_id\n  AND     t.user_id = valid_filter.user_id\n  AND     nvl(t.business_id, \'empty\') = nvl(valid_filter.business_id, \'empty\')'}, 'role': 'process', 'type': 'sql'}]"
942,process:::target_messages:::transform_message,process:::filtered_message:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_message.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetExtractProcess', 'reportDir': 's3://kcd-de-production/service/message/reports'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'transform_message.json', 'options': {'sql': '  SELECT  t.target_id,\n          t.user_id,\n          t.business_id,\n          t.meta,\n          t.result,\n          CASE\n              WHEN    valid_filter.ad_group_id IS NOT NULL THEN named_struct(\'valid\', false, \'error\', \'EXCLUDED_SENT_USER\')\n              ELSE    t.status\n          END AS status\n  FROM    (\n              SELECT  target_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[0], target_id) AS user_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[1], null) AS business_id,\n                      targetGroup.meta,\n                      targetGroup.status,\n                      targetGroup.result\n              FROM    target_messages\n  ) AS t\n  LEFT OUTER JOIN     valid_filter\n  ON      t.meta.user_type = valid_filter.user_type\n  AND     t.meta.ad_group_id = valid_filter.ad_group_id\n  AND     t.user_id = valid_filter.user_id\n  AND     nvl(t.business_id, \'empty\') = nvl(valid_filter.business_id, \'empty\')'}, 'role': 'process', 'type': 'sql'}]"
943,process:::filtered_message:::transform_message,process:::filtered_message_with_public_id:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_message.json', 'options': {'sql': '  SELECT  t.target_id,\n          t.user_id,\n          t.business_id,\n          t.meta,\n          t.result,\n          CASE\n              WHEN    valid_filter.ad_group_id IS NOT NULL THEN named_struct(\'valid\', false, \'error\', \'EXCLUDED_SENT_USER\')\n              ELSE    t.status\n          END AS status\n  FROM    (\n              SELECT  target_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[0], target_id) AS user_id,\n                      IF(targetGroup.meta.user_type = \'cashnote\', split(target_id, ""_"")[1], null) AS business_id,\n                      targetGroup.meta,\n                      targetGroup.status,\n                      targetGroup.result\n              FROM    target_messages\n  ) AS t\n  LEFT OUTER JOIN     valid_filter\n  ON      t.meta.user_type = valid_filter.user_type\n  AND     t.meta.ad_group_id = valid_filter.ad_group_id\n  AND     t.user_id = valid_filter.user_id\n  AND     nvl(t.business_id, \'empty\') = nvl(valid_filter.business_id, \'empty\')'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_message.json', 'options': {'sql': ""  SELECT  filtered_message.*,\n          id_mapping.public_business_id,\n          id_mapping.public_user_id\n  FROM    filtered_message\n  LEFT OUTER JOIN id_mapping\n  ON      filtered_message.user_id = id_mapping.user_id\n  AND     filtered_message.meta.user_type = id_mapping.user_type\n  AND     nvl(filtered_message.business_id, 'empty') = nvl(id_mapping.business_id, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
944,process:::id_mapping:::transform_message,process:::filtered_message_with_public_id:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_message.json', 'options': {'sql': ""SELECT\n        b.id AS business_id,\n        b.public_id AS public_business_id,\n        u.id AS user_id,\n        u.uuid AS public_user_id,\n        'cashnote' AS user_type\nFROM cashnote_users AS u, cashnote_memberships AS m, cashnote_businesses AS b\nWHERE u.id = m.user_id\nAND m.business_id = b.id\n\nUNION ALL\n\nSELECT  null AS business_id,\n        null AS public_business_id,\n        id AS user_id,\n        uid AS public_user_id,\n        'paynote' AS user_type\nFROM paynote_users""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_message.json', 'options': {'sql': ""  SELECT  filtered_message.*,\n          id_mapping.public_business_id,\n          id_mapping.public_user_id\n  FROM    filtered_message\n  LEFT OUTER JOIN id_mapping\n  ON      filtered_message.user_id = id_mapping.user_id\n  AND     filtered_message.meta.user_type = id_mapping.user_type\n  AND     nvl(filtered_message.business_id, 'empty') = nvl(id_mapping.business_id, 'empty')""}, 'role': 'process', 'type': 'sql'}]"
945,process:::filtered_message_with_public_id:::transform_message,process:::formatted:::transform_message,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_message.json', 'options': {'sql': ""  SELECT  filtered_message.*,\n          id_mapping.public_business_id,\n          id_mapping.public_user_id\n  FROM    filtered_message\n  LEFT OUTER JOIN id_mapping\n  ON      filtered_message.user_id = id_mapping.user_id\n  AND     filtered_message.meta.user_type = id_mapping.user_type\n  AND     nvl(filtered_message.business_id, 'empty') = nvl(id_mapping.business_id, 'empty')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_message.json', 'options': {'sql': ""SELECT\n          to_timestamp('2021-01-29 08_25', 'yyyy-MM-dd HH_mm') AS sent_at,\n          CONCAT(\n              replace('2021-01-29', '-', ''), '-', '08_25',\n              '_',\n              meta.campaign_id, meta.ad_group_id, meta.creative_id,\n              '_',\n              target_id\n          ) AS id,\n          meta.ad_group_id AS ad_group_id,\n          named_struct(\n              'campaign_id',  CAST(meta.campaign_id AS STRING),\n              'ad_group_id',  CAST(meta.ad_group_id AS STRING),\n              'creative_id',  CAST(meta.creative_id AS STRING),\n              'user_id',      CAST(user_id AS STRING),\n              'business_id',  CAST(business_id AS STRING),\n              'public_user_id',       CAST(public_user_id AS STRING),\n              'public_business_id',   CAST(public_business_id AS STRING),\n              'type',         meta.`type`,\n              'user_type',    meta.user_type,\n              'test_mode',    meta.test_mode\n          ) AS meta,\n          status,\n          named_struct(\n              'message_type',     meta.message_type,\n              'template_code',    meta.template_code,\n              'title',            result.title,\n              'message',          result.message,\n              'ad_flag',          IF(array_contains(array('EXTERNAL_AD', 'INTERNAL_AD'), meta.`type`), 'Y', 'N'),\n              'attachment',       result.attachment\n          ) AS message\nFROM      filtered_message_with_public_id""}, 'role': 'process', 'type': 'sql'}]"
946,process:::formatted:::transform_message,s3://kcd-de-production/service/message/target_messages/ts=08_25,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'transform_message.json', 'options': {'sql': ""SELECT\n          to_timestamp('2021-01-29 08_25', 'yyyy-MM-dd HH_mm') AS sent_at,\n          CONCAT(\n              replace('2021-01-29', '-', ''), '-', '08_25',\n              '_',\n              meta.campaign_id, meta.ad_group_id, meta.creative_id,\n              '_',\n              target_id\n          ) AS id,\n          meta.ad_group_id AS ad_group_id,\n          named_struct(\n              'campaign_id',  CAST(meta.campaign_id AS STRING),\n              'ad_group_id',  CAST(meta.ad_group_id AS STRING),\n              'creative_id',  CAST(meta.creative_id AS STRING),\n              'user_id',      CAST(user_id AS STRING),\n              'business_id',  CAST(business_id AS STRING),\n              'public_user_id',       CAST(public_user_id AS STRING),\n              'public_business_id',   CAST(public_business_id AS STRING),\n              'type',         meta.`type`,\n              'user_type',    meta.user_type,\n              'test_mode',    meta.test_mode\n          ) AS meta,\n          status,\n          named_struct(\n              'message_type',     meta.message_type,\n              'template_code',    meta.template_code,\n              'title',            result.title,\n              'message',          result.message,\n              'ad_flag',          IF(array_contains(array('EXTERNAL_AD', 'INTERNAL_AD'), meta.`type`), 'Y', 'N'),\n              'attachment',       result.attachment\n          ) AS message\nFROM      filtered_message_with_public_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_message.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/target_messages/date_id=2021-01-29/ts=08_25', 'partitions': 'ad_group_id'}, 'role': 'sink', 'type': 'file'}]"
947,process:::cashnote_businesses:::registration_number_businesses,process:::joined:::registration_number_businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_businesses.json', 'options': {'sql': ""  SELECT  business_id, registration_number,\n          collect_set(merchant) AS merchants,\n          collect_set(card_issuer) card_issuers\n  FROM (\n          SELECT\n                  business_id,\n                  registration_number,\n                  CASE\n                      WHEN merchant_number IS NOT NULL THEN struct(card_issuer,merchant_number)\n                      ELSE null\n                  END AS merchant,\n                  card_issuer\n          FROM (\n                  SELECT  businesses.id AS business_id,\n                          businesses.registration_number,\n                          IF(m.issuer_name == '하나(구 외환)', '하나', m.issuer_name) AS card_issuer,\n                          m.merchant_number\n                  FROM    businesses\n                  LEFT OUTER JOIN (\n                          SELECT  *\n                          FROM    card_merchants\n                          WHERE   current = true\n                          AND     affiliated = false\n                  ) AS m\n                  ON businesses.id = m.business_id\n          )\n  )\n  GROUP BY business_id, registration_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_businesses.json', 'options': {'sql': 'SELECT\n          *, size(merchants) AS merchant_size\nFROM (\n        SELECT\n                  nvl(cashnote_businesses.registration_number, paynote_business.registration_number) AS registration_number,\n                  cashnote_businesses.business_id,\n                  IF(cashnote_businesses.registration_number IS NOT NULL, true, false) AS is_cashnote_business,\n                  IF(paynote_business.registration_number IS NOT NULL, true, false) AS is_paynote_business,\n                  array_distinct(\n                      array_except(\n                          array_union(\n                              nvl(cashnote_businesses.merchants, array(null)),\n                              nvl(paynote_business.merchants, array(null))\n                          ),\n                          array(null)\n                      )\n                   ) AS merchants,\n                  array_distinct(\n                      array_except(\n                          array_union(\n                              nvl(cashnote_businesses.card_issuers, array(null)),\n                              nvl(paynote_business.card_issuers, array(null))\n                          ),\n                          array(null)\n                      )\n                   ) AS card_issuers\n        FROM  cashnote_businesses\n        FULL OUTER JOIN paynote_business\n        ON    cashnote_businesses.registration_number = paynote_business.registration_number\n  )'}, 'role': 'process', 'type': 'sql'}]"
948,process:::paynote_business:::registration_number_businesses,process:::joined:::registration_number_businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_businesses.json', 'options': {'sql': ""SELECT    registration_number,\n          collect_set(struct(card_issuer, merchant_number)) AS merchants,\n          collect_set(card_issuer) AS card_issuers\nFROM (\n        SELECT\n                registration_number, merchant_number,\n                CASE\n                    WHEN card_issuer = 'bc' THEN '비씨'\n                    WHEN card_issuer = 'shinhan' THEN '신한'\n                    WHEN card_issuer = 'hyundai' THEN '현대'\n                    ELSE card_issuer\n                END AS card_issuer\n        FROM (\n            SELECT DISTINCT registration_number, merchant_number, card_issuer\n            FROM  card_payments\n            WHERE card_issuer is not null\n        )\n)\nGROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_businesses.json', 'options': {'sql': 'SELECT\n          *, size(merchants) AS merchant_size\nFROM (\n        SELECT\n                  nvl(cashnote_businesses.registration_number, paynote_business.registration_number) AS registration_number,\n                  cashnote_businesses.business_id,\n                  IF(cashnote_businesses.registration_number IS NOT NULL, true, false) AS is_cashnote_business,\n                  IF(paynote_business.registration_number IS NOT NULL, true, false) AS is_paynote_business,\n                  array_distinct(\n                      array_except(\n                          array_union(\n                              nvl(cashnote_businesses.merchants, array(null)),\n                              nvl(paynote_business.merchants, array(null))\n                          ),\n                          array(null)\n                      )\n                   ) AS merchants,\n                  array_distinct(\n                      array_except(\n                          array_union(\n                              nvl(cashnote_businesses.card_issuers, array(null)),\n                              nvl(paynote_business.card_issuers, array(null))\n                          ),\n                          array(null)\n                      )\n                   ) AS card_issuers\n        FROM  cashnote_businesses\n        FULL OUTER JOIN paynote_business\n        ON    cashnote_businesses.registration_number = paynote_business.registration_number\n  )'}, 'role': 'process', 'type': 'sql'}]"
949,process:::joined:::registration_number_businesses,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=businesses/name=businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_businesses.json', 'options': {'sql': 'SELECT\n          *, size(merchants) AS merchant_size\nFROM (\n        SELECT\n                  nvl(cashnote_businesses.registration_number, paynote_business.registration_number) AS registration_number,\n                  cashnote_businesses.business_id,\n                  IF(cashnote_businesses.registration_number IS NOT NULL, true, false) AS is_cashnote_business,\n                  IF(paynote_business.registration_number IS NOT NULL, true, false) AS is_paynote_business,\n                  array_distinct(\n                      array_except(\n                          array_union(\n                              nvl(cashnote_businesses.merchants, array(null)),\n                              nvl(paynote_business.merchants, array(null))\n                          ),\n                          array(null)\n                      )\n                   ) AS merchants,\n                  array_distinct(\n                      array_except(\n                          array_union(\n                              nvl(cashnote_businesses.card_issuers, array(null)),\n                              nvl(paynote_business.card_issuers, array(null))\n                          ),\n                          array(null)\n                      )\n                   ) AS card_issuers\n        FROM  cashnote_businesses\n        FULL OUTER JOIN paynote_business\n        ON    cashnote_businesses.registration_number = paynote_business.registration_number\n  )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=businesses/name=businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=businesses/name=businesses'}, 'role': 'source', 'type': 'file'}]"
950,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=businesses/name=businesses,process:::merge:::registration_number_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=businesses/name=businesses'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=businesses/name=businesses'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'process', 'type': 'custom'}]"
951,process:::add_join_field:::paynote_user_meta_es_sink,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_user_meta_es_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-29', 'yyyy-MM-dd') AS timestamp,\n            named_struct(\n                'name', 'meta'\n            ) AS join_field,\n            *\n  FROM      paynote_user_meta""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
952,s3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions,process:::bank_withdraw:::bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'bank_transactions.json', 'options': {'sql': ""SELECT\n      timestamp,\n      business_id,\n      date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n      SUM(withdrawal) AS amount_sum,\n      COUNT(1) AS tx_count,\n      collect_set(content) AS contents,\n      collect_set(account_number) AS account_numbers\nFROM (\n\n      SELECT\n              bank_accounts.business_id,\n              bank_accounts.account_number,\n              bank_tx_withdrawal.*\n      FROM bank_accounts\n      JOIN (\n          SELECT\n                  bank_account_id,\n                  date_trunc('MONTH', transacted_at) AS timestamp,\n                  withdrawal,\n                  content\n          FROM    bank_transactions\n          WHERE   withdrawal != 0\n          AND     transacted_at between '2017-01-01' AND '2021-01-24'\n      ) bank_tx_withdrawal\n      ON bank_accounts.id = bank_tx_withdrawal.bank_account_id\n      WHERE   business_id IS NOT NULL\n)\nGROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
953,s3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions,process:::bank_deposit:::bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'bank_transactions.json', 'options': {'sql': ""SELECT\n      timestamp,\n      business_id,\n      date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n      SUM(deposit) AS amount_sum,\n      COUNT(1) AS tx_count,\n      collect_set(content) AS contents,\n      collect_set(account_number) AS account_numbers\nFROM (\n\n      SELECT\n              bank_accounts.business_id,\n              bank_accounts.account_number,\n              bank_tx_deposit.*\n      FROM bank_accounts\n      JOIN (\n          SELECT\n                  bank_account_id,\n                  date_trunc('MONTH', transacted_at) AS timestamp,\n                  deposit,\n                  content\n          FROM    bank_transactions\n          WHERE   deposit != 0\n          AND     transacted_at between '2017-01-01' AND '2021-01-24'\n      ) bank_tx_deposit\n      ON bank_accounts.id = bank_tx_deposit.bank_account_id\n      WHERE   business_id IS NOT NULL\n)\nGROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
954,s3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
955,process:::bank_withdraw:::bank_transactions,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=withdraw,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bank_transactions.json', 'options': {'sql': ""SELECT\n      timestamp,\n      business_id,\n      date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n      SUM(withdrawal) AS amount_sum,\n      COUNT(1) AS tx_count,\n      collect_set(content) AS contents,\n      collect_set(account_number) AS account_numbers\nFROM (\n\n      SELECT\n              bank_accounts.business_id,\n              bank_accounts.account_number,\n              bank_tx_withdrawal.*\n      FROM bank_accounts\n      JOIN (\n          SELECT\n                  bank_account_id,\n                  date_trunc('MONTH', transacted_at) AS timestamp,\n                  withdrawal,\n                  content\n          FROM    bank_transactions\n          WHERE   withdrawal != 0\n          AND     transacted_at between '2017-01-01' AND '2021-01-24'\n      ) bank_tx_withdrawal\n      ON bank_accounts.id = bank_tx_withdrawal.bank_account_id\n      WHERE   business_id IS NOT NULL\n)\nGROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=withdraw'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=withdraw', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
956,process:::bank_deposit:::bank_transactions,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=deposit,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bank_transactions.json', 'options': {'sql': ""SELECT\n      timestamp,\n      business_id,\n      date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n      SUM(deposit) AS amount_sum,\n      COUNT(1) AS tx_count,\n      collect_set(content) AS contents,\n      collect_set(account_number) AS account_numbers\nFROM (\n\n      SELECT\n              bank_accounts.business_id,\n              bank_accounts.account_number,\n              bank_tx_deposit.*\n      FROM bank_accounts\n      JOIN (\n          SELECT\n                  bank_account_id,\n                  date_trunc('MONTH', transacted_at) AS timestamp,\n                  deposit,\n                  content\n          FROM    bank_transactions\n          WHERE   deposit != 0\n          AND     transacted_at between '2017-01-01' AND '2021-01-24'\n      ) bank_tx_deposit\n      ON bank_accounts.id = bank_tx_deposit.bank_account_id\n      WHERE   business_id IS NOT NULL\n)\nGROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'business_bank.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=deposit'}, 'role': 'source', 'type': 'file'}, {'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=bank/name=deposit', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
957,s3://kcd-de-production/service/market_area/analysis/visit_pairs,process:::visit_pairs_with_user_type:::build_cohort,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_cohort.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/visit_pairs'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_visit_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/visit_pairs'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'build_cohort.json', 'options': {'sql': ""SELECT\n        visit_pairs.*,\n        IF(revisit_users.business_id IS NULL, 'new', 'revisit') AS user_type\nFROM visit_pairs\nLEFT OUTER JOIN revisit_users\nON visit_pairs.business_id = revisit_users.business_id\nAND visit_pairs.encrypted_card_number =  revisit_users.encrypted_card_number\nAND visit_pairs.start_date = revisit_users.date""}, 'role': 'process', 'type': 'sql'}]"
958,s3://kcd-de-production/service/market_area/analysis/visit_user_type/user_type=revisit,process:::visit_pairs_with_user_type:::build_cohort,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_cohort.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/visit_user_type/user_type=revisit'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_cohort.json', 'options': {'sql': ""SELECT\n        visit_pairs.*,\n        IF(revisit_users.business_id IS NULL, 'new', 'revisit') AS user_type\nFROM visit_pairs\nLEFT OUTER JOIN revisit_users\nON visit_pairs.business_id = revisit_users.business_id\nAND visit_pairs.encrypted_card_number =  revisit_users.encrypted_card_number\nAND visit_pairs.start_date = revisit_users.date""}, 'role': 'process', 'type': 'sql'}]"
959,process:::visit_pairs_with_user_type:::build_cohort,process:::cohort:::build_cohort,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_cohort.json', 'options': {'sql': ""SELECT\n        visit_pairs.*,\n        IF(revisit_users.business_id IS NULL, 'new', 'revisit') AS user_type\nFROM visit_pairs\nLEFT OUTER JOIN revisit_users\nON visit_pairs.business_id = revisit_users.business_id\nAND visit_pairs.encrypted_card_number =  revisit_users.encrypted_card_number\nAND visit_pairs.start_date = revisit_users.date""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_cohort.json', 'options': {'sql': 'SELECT    business_id,\n          user_type,\n          start_date,\n          end_date,\n          count(distinct encrypted_card_number) as user_count\nFROM      visit_pairs_with_user_type\nGROUP BY  business_id, user_type, start_date, end_date'}, 'role': 'process', 'type': 'sql'}]"
960,process:::cohort:::build_cohort,s3://kcd-de-production/service/market_area/analysis/cohort,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_cohort.json', 'options': {'sql': 'SELECT    business_id,\n          user_type,\n          start_date,\n          end_date,\n          count(distinct encrypted_card_number) as user_count\nFROM      visit_pairs_with_user_type\nGROUP BY  business_id, user_type, start_date, end_date'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/cohort'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_cohort.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/cohort'}, 'role': 'sink', 'type': 'file'}]"
961,process:::pos_sales_source:::pos_sales_amount_daily,process:::pos_sales_daily_process:::pos_sales_amount_daily,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_sales_amount_daily.json', 'options': {'sql': '    SELECT\n        *,\n        date_format(paid_at, ""yyyy-MM-dd"") AS date_id\n    FROM\n        pos_sales_source_raw\n    WHERE\n        created_at_date >= \'2020-10-19\''}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_sales_amount_daily.json', 'options': {'sql': ""   SELECT * FROM\n     (SELECT\n         business_id,\n         date_id,\n         sum(card_amount) AS total_amount,\n         sum(case when card_amount > 0 then 1 else -1 end) AS total_count,\n         '카드' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source\n         WHERE\n             card_amount != 0\n         )\n     GROUP BY\n         business_id, date_id\n\n     UNION ALL\n\n     SELECT\n         business_id,\n         date_id,\n         sum(cash_amount) AS total_amount,\n         sum(case when cash_amount > 0 then 1 else -1 end) AS total_count,\n         '현금' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source\n         WHERE\n             cash_amount != 0\n         )\n     GROUP BY\n         business_id, date_id\n\n     UNION ALL\n\n     SELECT\n         business_id,\n         date_id,\n         sum(total_amount) - (sum(cash_amount) + sum(card_amount)) AS total_amount,\n         sum(count_src) AS total_count,\n         '기타' as paid_type\n     FROM\n         (\n         SELECT\n             *,\n             CASE WHEN total_amount - (cash_amount + card_amount) > 0 THEN 1 ELSE -1 END AS count_src\n         FROM\n             pos_sales_source\n         WHERE\n             total_amount != (cash_amount + card_amount) AND total_amount != 0\n         )\n     GROUP BY\n         business_id, date_id\n     )""}, 'role': 'process', 'type': 'sql'}]"
962,process:::pos_sales_daily_process:::pos_sales_amount_daily,process:::pos_sales_daily_process_jdbc:::pos_sales_amount_daily,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_sales_amount_daily.json', 'options': {'sql': ""   SELECT * FROM\n     (SELECT\n         business_id,\n         date_id,\n         sum(card_amount) AS total_amount,\n         sum(case when card_amount > 0 then 1 else -1 end) AS total_count,\n         '카드' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source\n         WHERE\n             card_amount != 0\n         )\n     GROUP BY\n         business_id, date_id\n\n     UNION ALL\n\n     SELECT\n         business_id,\n         date_id,\n         sum(cash_amount) AS total_amount,\n         sum(case when cash_amount > 0 then 1 else -1 end) AS total_count,\n         '현금' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source\n         WHERE\n             cash_amount != 0\n         )\n     GROUP BY\n         business_id, date_id\n\n     UNION ALL\n\n     SELECT\n         business_id,\n         date_id,\n         sum(total_amount) - (sum(cash_amount) + sum(card_amount)) AS total_amount,\n         sum(count_src) AS total_count,\n         '기타' as paid_type\n     FROM\n         (\n         SELECT\n             *,\n             CASE WHEN total_amount - (cash_amount + card_amount) > 0 THEN 1 ELSE -1 END AS count_src\n         FROM\n             pos_sales_source\n         WHERE\n             total_amount != (cash_amount + card_amount) AND total_amount != 0\n         )\n     GROUP BY\n         business_id, date_id\n     )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_sales_amount_daily.json', 'options': {'sql': ""   SELECT\n     business_id,\n     to_date(date_id, 'yyyy-MM-dd') as date_id,\n     total_amount,\n     total_count,\n     paid_type\n   FROM\n     pos_sales_daily_process""}, 'role': 'process', 'type': 'sql'}]"
963,process:::pos_sales_daily_process:::pos_sales_amount_daily,s3://kcd-de-production/raw/etl/pos/pos_bills_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_sales_amount_daily.json', 'options': {'sql': ""   SELECT * FROM\n     (SELECT\n         business_id,\n         date_id,\n         sum(card_amount) AS total_amount,\n         sum(case when card_amount > 0 then 1 else -1 end) AS total_count,\n         '카드' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source\n         WHERE\n             card_amount != 0\n         )\n     GROUP BY\n         business_id, date_id\n\n     UNION ALL\n\n     SELECT\n         business_id,\n         date_id,\n         sum(cash_amount) AS total_amount,\n         sum(case when cash_amount > 0 then 1 else -1 end) AS total_count,\n         '현금' as paid_type\n     FROM\n         (\n         SELECT\n             *\n         FROM\n             pos_sales_source\n         WHERE\n             cash_amount != 0\n         )\n     GROUP BY\n         business_id, date_id\n\n     UNION ALL\n\n     SELECT\n         business_id,\n         date_id,\n         sum(total_amount) - (sum(cash_amount) + sum(card_amount)) AS total_amount,\n         sum(count_src) AS total_count,\n         '기타' as paid_type\n     FROM\n         (\n         SELECT\n             *,\n             CASE WHEN total_amount - (cash_amount + card_amount) > 0 THEN 1 ELSE -1 END AS count_src\n         FROM\n             pos_sales_source\n         WHERE\n             total_amount != (cash_amount + card_amount) AND total_amount != 0\n         )\n     GROUP BY\n         business_id, date_id\n     )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_sales_amount_daily.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/pos/pos_bills_stats', 'format': 'parquet', 'partitions': 'date_id', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}]"
964,process:::pos_sales_daily_process_jdbc:::pos_sales_amount_daily,jdbc_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_sales_amount_daily.json', 'options': {'sql': ""   SELECT\n     business_id,\n     to_date(date_id, 'yyyy-MM-dd') as date_id,\n     total_amount,\n     total_count,\n     paid_type\n   FROM\n     pos_sales_daily_process""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'uid_type:bills_id_type,menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats_v2', 'conflictColumns': 'uid,uid_type,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus', 'conflictColumns': 'business_id,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'daily_delivery_orders_stat.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'daily_delivery_orders_stat', 'conflictColumns': 'business_id,delivery_app,shop_number,date', 'updateColumns': 'closed_orders_amount,closed_orders_count,cancelled_orders_amount,cancelled_orders_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'hometax_business_label_upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'dbtable': 'hometax_businesses', 'conflictColumns': 'business_id', 'updateColumns': 'regular_employees_count,size_category,updated_at', 'typeCastColumns': 'size_category:hometax_business_size_category'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_sdk_event.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'sdk_name,event_type, user_type', 'updateColumns': 'sdk_name,event_type,user_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'delivery_receipt_stats.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-staging.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_staging', 'user': 'plover', 'password': 'welcome!', 'operation': 'upsert', 'dbtable': 'pos_receipt_stat', 'conflictColumns': 'public_id,target_date,date_type,h3_index,h3_resolution', 'updateColumns': 'metric', 'typeCastColumns': 'metric:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats', 'conflictColumns': 'business_id,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus', 'conflictColumns': 'business_id,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_menu_top_k.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_menu_top_k', 'conflictColumns': 'business_id,order_month,time_bucket,name', 'updateColumns': 'total_amount,total_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}]"
965,process:::merchant_info:::merchant_info,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_info.json', 'options': {'sql': 'SELECT    *\nFROM (\n        SELECT    DISTINCT registration_number, card_issuer, merchant_number,\n                  merchant, classification_code, merchant_code_name, merchant_address,\n                  row_number() OVER (PARTITION BY registration_number, card_issuer, merchant_number ORDER BY updated_at DESC) AS rank\n        FROM      card_payments\n        WHERE     card_issuer is not null\n        AND       registration_number is not null\n)\nWHERE   rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_card.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=merchant/name=info'}, 'role': 'source', 'type': 'file'}]"
966,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts,process:::hometax_purchases_cash_receipts:::hometax_purchase,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_purchase.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count\n  FROM (\n          SELECT\n                  business_id,\n                  date_trunc('MONTH', purchased_at) AS timestamp,\n                  amount\n          FROM    hometax_purchases_cash_receipts_src\n          WHERE   business_id IS NOT NULL\n          AND     purchased_at between '2017-01-01' AND '2021-01-24'\n  )\n  GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
967,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
968,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices,process:::hometax_purchases_invoices:::hometax_purchase,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_purchase.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count,\n          collect_set(vendor_business_classification) AS vendor_business_classifications,\n          collect_set(vendor_business_category) AS vendor_business_categories,\n          collect_set(item_name) AS item_names\n  FROM (\n          SELECT\n                  business_id,\n                  date_trunc('MONTH', issued_at) AS timestamp,\n                  amount,\n                  vendor_business_classification,\n                  vendor_business_category,\n                  item_name\n          FROM    hometax_purchases_invoices_src\n          WHERE   business_id IS NOT NULL\n          AND     issued_at between '2017-01-01' AND '2021-01-24'\n  )\n  GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]"
969,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
970,process:::hometax_card_purchases:::hometax_purchase,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=purchases_card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_purchase.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count,\n          collect_set(vendor_business_category) AS vendor_business_categories,\n          collect_set(vendor_business_classification_code) AS vendor_business_classification_codes,\n          collect_set(vendor_taxation_type) AS vendor_taxation_types\n  FROM (\n          SELECT\n                  business_id,\n                  date_trunc('MONTH', purchased_at) AS timestamp,\n                  amount,\n                  vendor_business_category,\n                  vendor_business_classification_code,\n                  vendor_taxation_type\n          FROM    hometax_card_purchases_src\n          WHERE   business_id IS NOT NULL\n          AND     purchased_at between '2017-01-01' AND '2021-01-24'\n  )\n  GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=purchases_card', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
971,process:::hometax_purchases_cash_receipts:::hometax_purchase,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=purchases_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_purchase.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count\n  FROM (\n          SELECT\n                  business_id,\n                  date_trunc('MONTH', purchased_at) AS timestamp,\n                  amount\n          FROM    hometax_purchases_cash_receipts_src\n          WHERE   business_id IS NOT NULL\n          AND     purchased_at between '2017-01-01' AND '2021-01-24'\n  )\n  GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=purchases_cash_receipts', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
972,process:::hometax_purchases_invoices:::hometax_purchase,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=purchases_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_purchase.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count,\n          collect_set(vendor_business_classification) AS vendor_business_classifications,\n          collect_set(vendor_business_category) AS vendor_business_categories,\n          collect_set(item_name) AS item_names\n  FROM (\n          SELECT\n                  business_id,\n                  date_trunc('MONTH', issued_at) AS timestamp,\n                  amount,\n                  vendor_business_classification,\n                  vendor_business_category,\n                  item_name\n          FROM    hometax_purchases_invoices_src\n          WHERE   business_id IS NOT NULL\n          AND     issued_at between '2017-01-01' AND '2021-01-24'\n  )\n  GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=hometax/name=purchases_invoices', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
973,process:::comments:::delivery,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=delivery_app_comments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'fact_delivery.json', 'options': {'sql': ""SELECT\n          c.timestamp,\n          date_format(c.timestamp, 'yyyy-MM-dd') AS date_id,\n          delivery_apps.business_id,\n          c.count,\n          c.avg_rating,\n          lower(replace(delivery_apps.type, 'DeliveryApps::', '')) AS name\nFROM (\n  SELECT\n          timestamp,\n          delivery_app_id,\n          COUNT(1) AS count,\n          AVG(rating) AS avg_rating\n  FROM (\n          SELECT\n                  source_id AS delivery_app_id,\n                  date_trunc('MONTH', authored_at) AS timestamp,\n                  rating\n          FROM    place_comments\n          WHERE   created_at_date between '2017-01-01' AND '2020-07-20'\n          AND     source_type = 'DeliveryApp'\n  )\n  GROUP BY timestamp, delivery_app_id\n) AS c\nJOIN delivery_apps\nON c.delivery_app_id = delivery_apps.id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=delivery_app_comments', 'evenPartitions': 'true', 'partitions': 'name,date_id'}, 'role': 'sink', 'type': 'file'}]"
974,s3://kcd-de-production/raw/db/snowdon/incremental/report_logs/,process:::add_target_id:::daily_reports_wo_card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports_wo_card.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/report_logs/created_at_date=2020-08-22'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'daily_reports_wo_card.json', 'options': {'sql': ""SELECT\n        target_id,\n        business_id, user_id, text,\n        nvl(title, '') AS title,\n        attachment,\n        get_json_object(attachment, '$.button[0].url_mobile') AS url_mobile,\n        template_code\nFROM (\n    SELECT  CONCAT(user_id, '_', business_id) AS target_id,\n            business_id, user_id,\n            text,\n            get_json_object(bzm_payload, '$.title') AS title,\n            get_json_object(bzm_payload, '$.attachment') AS attachment,\n            get_json_object(bzm_payload, '$.template_code') AS template_code\n    FROM  report_logs\n    WHERE report_type = 'daily'\n    AND group_id = '00f17e38-9b89-4d30-becf-697a4b794f34'\n)""}, 'role': 'process', 'type': 'sql'}]"
975,process:::add_target_id:::daily_reports_wo_card,s3://kcd-de-production/service/message/reports/user_type=cashnote/report_name=daily_reports_wo_card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_reports_wo_card.json', 'options': {'sql': ""SELECT\n        target_id,\n        business_id, user_id, text,\n        nvl(title, '') AS title,\n        attachment,\n        get_json_object(attachment, '$.button[0].url_mobile') AS url_mobile,\n        template_code\nFROM (\n    SELECT  CONCAT(user_id, '_', business_id) AS target_id,\n            business_id, user_id,\n            text,\n            get_json_object(bzm_payload, '$.title') AS title,\n            get_json_object(bzm_payload, '$.attachment') AS attachment,\n            get_json_object(bzm_payload, '$.template_code') AS template_code\n    FROM  report_logs\n    WHERE report_type = 'daily'\n    AND group_id = '00f17e38-9b89-4d30-becf-697a4b794f34'\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_reports_wo_card.json', 'options': {'format': 'json', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/reports/user_type=cashnote/date_id=2020-08-22/report_name=daily_reports_wo_card'}, 'role': 'sink', 'type': 'file'}]"
976,s3://kcd-de-production/raw/db/bluebird/snapshot/survey_monkey_responses,process:::joined:::survey_monkey,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/survey_monkey_responses'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_bluebird.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/bluebird/snapshot/date_id=2021-01-29/survey_monkey_responses'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'survey_monkey.json', 'options': {'sql': 'SELECT    businesses.id AS business_id,\n          survey.survey_monkey_ids\nFROM (\n        SELECT    business_id, collect_set(survey_monkey_id) survey_monkey_ids\n        FROM      survey_monkey_responses\n        WHERE     business_id IS NOT NULL\n        GROUP BY  business_id\n) survey\nJOIN  businesses\nON    survey.business_id = businesses.public_id'}, 'role': 'process', 'type': 'sql'}]"
977,process:::joined:::survey_monkey,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=survey_monkey,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'survey_monkey.json', 'options': {'sql': 'SELECT    businesses.id AS business_id,\n          survey.survey_monkey_ids\nFROM (\n        SELECT    business_id, collect_set(survey_monkey_id) survey_monkey_ids\n        FROM      survey_monkey_responses\n        WHERE     business_id IS NOT NULL\n        GROUP BY  business_id\n) survey\nJOIN  businesses\nON    survey.business_id = businesses.public_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=survey_monkey'}, 'role': 'sink', 'type': 'file'}]"
978,s3://kcd-de-staging/work/ryan/corona_weekly/44/weekly_txns,process:::weekly_txns:::build_corona_weekly_stats_ratio_adhoc,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/corona_weekly/44/weekly_txns'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     week_of_year >= weekofyear(current_date()) - 3\nAND       year(transacted_at_week) in (2019, 2020)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}]"
979,s3://kcd-de-staging/work/ryan/misc/kcd_places_with_gyeongnam_classifications.csv,process:::gyeongnam_weekly_txns:::build_corona_weekly_stats_ratio_adhoc,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'format': 'csv', 'paths': 's3://kcd-de-staging/work/ryan/misc/kcd_places_with_gyeongnam_classifications.csv', 'columns': 'kcd_classification_2_depth,shinhan_classification_2_depth,gyeongnam_classification'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT    t.*,\n          c.shinhan_classification_2_depth,\n          c.gyeongnam_classification\nFROM      weekly_txns t, kcd_places_with_gyeongnam_classifications c\nWHERE     t.kcd_classification_2_depth = c.kcd_classification_2_depth\nAND       t.lot_address_1_depth = '경상남도'""}, 'role': 'process', 'type': 'sql'}]"
980,process:::weekly_txns:::build_corona_weekly_stats_ratio_adhoc,process:::gyeongnam_weekly_txns:::build_corona_weekly_stats_ratio_adhoc,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     week_of_year >= weekofyear(current_date()) - 3\nAND       year(transacted_at_week) in (2019, 2020)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT    t.*,\n          c.shinhan_classification_2_depth,\n          c.gyeongnam_classification\nFROM      weekly_txns t, kcd_places_with_gyeongnam_classifications c\nWHERE     t.kcd_classification_2_depth = c.kcd_classification_2_depth\nAND       t.lot_address_1_depth = '경상남도'""}, 'role': 'process', 'type': 'sql'}]"
981,process:::gyeongnam_weekly_txns:::build_corona_weekly_stats_ratio_adhoc,process:::gyeongnam_shinhan_classification_ratio:::build_corona_weekly_stats_ratio_adhoc,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT    t.*,\n          c.shinhan_classification_2_depth,\n          c.gyeongnam_classification\nFROM      weekly_txns t, kcd_places_with_gyeongnam_classifications c\nWHERE     t.kcd_classification_2_depth = c.kcd_classification_2_depth\nAND       t.lot_address_1_depth = '경상남도'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              coalesce(shinhan_classification_2_depth, '업종정보없음') as shinhan_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              '업종(전체)' as shinhan_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              coalesce(shinhan_classification_2_depth, '업종정보없음') as shinhan_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              '업종(전체)' as shinhan_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n) a""}, 'role': 'process', 'type': 'sql'}]"
982,process:::gyeongnam_weekly_txns:::build_corona_weekly_stats_ratio_adhoc,process:::gyeongnam_classification_ratio:::build_corona_weekly_stats_ratio_adhoc,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT    t.*,\n          c.shinhan_classification_2_depth,\n          c.gyeongnam_classification\nFROM      weekly_txns t, kcd_places_with_gyeongnam_classifications c\nWHERE     t.kcd_classification_2_depth = c.kcd_classification_2_depth\nAND       t.lot_address_1_depth = '경상남도'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              coalesce(gyeongnam_classification, '업종정보없음') as gyeongnam_classification,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              '업종(전체)' as gyeongnam_classification,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              coalesce(gyeongnam_classification, '업종정보없음') as gyeongnam_classification,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              '업종(전체)' as gyeongnam_classification,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n) a""}, 'role': 'process', 'type': 'sql'}]"
983,process:::gyeongnam_weekly_txns:::build_corona_weekly_stats_ratio_adhoc,process:::gyeongnam_kcd_classification_ratio:::build_corona_weekly_stats_ratio_adhoc,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT    t.*,\n          c.shinhan_classification_2_depth,\n          c.gyeongnam_classification\nFROM      weekly_txns t, kcd_places_with_gyeongnam_classifications c\nWHERE     t.kcd_classification_2_depth = c.kcd_classification_2_depth\nAND       t.lot_address_1_depth = '경상남도'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              coalesce(kcd_classification_1_depth, '대분류_업종정보없음') as kcd_classification_1_depth,\n              coalesce(kcd_classification_2_depth, '중분류_업종정보없음') as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3, 4\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              '대분류_업종(전체)' as kcd_classification_1_depth,\n              '중분류_업종(전체)' as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3, 4\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              coalesce(kcd_classification_1_depth, '대분류_업종정보없음') as kcd_classification_1_depth,\n              coalesce(kcd_classification_2_depth, '중분류_업종정보없음') as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3, 4\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              '대분류_업종(전체)' as kcd_classification_1_depth,\n              '중분류_업종(전체)' as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3, 4\n) a""}, 'role': 'process', 'type': 'sql'}]"
984,process:::gyeongnam_shinhan_classification_ratio:::build_corona_weekly_stats_ratio_adhoc,process:::gyeongnam_shinhan_classification_ratio_pivot:::build_corona_weekly_stats_ratio_adhoc,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              coalesce(shinhan_classification_2_depth, '업종정보없음') as shinhan_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              '업종(전체)' as shinhan_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              coalesce(shinhan_classification_2_depth, '업종정보없음') as shinhan_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              '업종(전체)' as shinhan_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n) a""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_2_depth,shinhan_classification_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]"
985,process:::gyeongnam_shinhan_classification_ratio_pivot:::build_corona_weekly_stats_ratio_adhoc,s3://kcd-de-staging/work/ryan/corona_weekly/44/gyeongnam/shinhan_classification_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_2_depth,shinhan_classification_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/44/gyeongnam/shinhan_classification_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
986,process:::gyeongnam_classification_ratio:::build_corona_weekly_stats_ratio_adhoc,process:::gyeongnam_classification_ratio_pivot:::build_corona_weekly_stats_ratio_adhoc,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              coalesce(gyeongnam_classification, '업종정보없음') as gyeongnam_classification,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              '업종(전체)' as gyeongnam_classification,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              coalesce(gyeongnam_classification, '업종정보없음') as gyeongnam_classification,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              '업종(전체)' as gyeongnam_classification,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3\n) a""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_2_depth,gyeongnam_classification', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]"
987,process:::gyeongnam_classification_ratio_pivot:::build_corona_weekly_stats_ratio_adhoc,s3://kcd-de-staging/work/ryan/corona_weekly/44/gyeongnam/gyeongnam_classification_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_2_depth,gyeongnam_classification', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/44/gyeongnam/gyeongnam_classification_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
988,process:::gyeongnam_kcd_classification_ratio:::build_corona_weekly_stats_ratio_adhoc,process:::gyeongnam_kcd_classification_ratio_pivot:::build_corona_weekly_stats_ratio_adhoc,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'sql': ""SELECT  *,\n        CAST(a.2020_year_amount AS double) / CAST(a.2019_year_amount AS double) AS ratio\nFROM (\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              coalesce(kcd_classification_1_depth, '대분류_업종정보없음') as kcd_classification_1_depth,\n              coalesce(kcd_classification_2_depth, '중분류_업종정보없음') as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3, 4\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              lot_address_2_depth,\n              '대분류_업종(전체)' as kcd_classification_1_depth,\n              '중분류_업종(전체)' as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3, 4\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              coalesce(kcd_classification_1_depth, '대분류_업종정보없음') as kcd_classification_1_depth,\n              coalesce(kcd_classification_2_depth, '중분류_업종정보없음') as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3, 4\n\n      UNION ALL\n\n      SELECT  weekofyear(transacted_at_week) AS time,\n              '경상남도(전체)' as lot_address_2_depth,\n              '대분류_업종(전체)' as kcd_classification_1_depth,\n              '중분류_업종(전체)' as kcd_classification_2_depth,\n              sum(IF (year(transacted_at_week) = 2020, amount_sum, 0)) as 2020_year_amount,\n              sum(IF (year(transacted_at_week) = 2019, amount_sum, 0)) as 2019_year_amount,\n              count(distinct business_id) as business_id_count\n      FROM    gyeongnam_weekly_txns\n      GROUP BY 1, 2, 3, 4\n) a""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_2_depth,kcd_classification_1_depth,kcd_classification_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]"
989,process:::gyeongnam_kcd_classification_ratio_pivot:::build_corona_weekly_stats_ratio_adhoc,s3://kcd-de-staging/work/ryan/corona_weekly/44/gyeongnam/kcd_classification_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.processes.Pivot', 'group_by': 'lot_address_2_depth,kcd_classification_1_depth,kcd_classification_2_depth', 'pivot': 'time', 'agg': 'first(ratio) as ratio,first(business_id_count) as business_id_count'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_stats_ratio_adhoc.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/44/gyeongnam/kcd_classification_ratio', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
990,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=hometax,process:::merge:::hometax_business_label,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_label.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=hometax'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=hometax'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'hometax_business_label.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
991,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=employee,process:::merge:::hometax_business_label,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_label.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=employee'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=employee'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'hometax_business_label.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
992,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=amount,process:::merge:::hometax_business_label,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_label.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=amount'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=amount'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'hometax_business_label.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
993,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=ksic,process:::merge:::hometax_business_label,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_label.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=ksic'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=ksic'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'hometax_business_label.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
994,process:::merge:::hometax_business_label,process:::business_meta_filtered:::hometax_business_label,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_label.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'hometax_business_label.json', 'options': {'sql': 'SELECT\n        business_id,\n        ksic_classification.depth_1_code AS standard_classification_code_1_depth,\n        ksic_classification.depth_1_2_code AS standard_classification_code_1_2_depth,\n        hometax_hometax.opend_at,\n        hometax_hometax.taxation_type,\n        coalesce(hometax_amount.amount_avg, 0.0) AS amount_avg,\n        coalesce(hometax_employee.employ_avg, 0.0) AS employ_avg\nFROM  merge\nWHERE hometax_hometax.opend_at is not null'}, 'role': 'process', 'type': 'sql'}]"
995,process:::business_meta_filtered:::hometax_business_label,process:::hometax_business_label:::hometax_business_label,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_label.json', 'options': {'sql': 'SELECT\n        business_id,\n        ksic_classification.depth_1_code AS standard_classification_code_1_depth,\n        ksic_classification.depth_1_2_code AS standard_classification_code_1_2_depth,\n        hometax_hometax.opend_at,\n        hometax_hometax.taxation_type,\n        coalesce(hometax_amount.amount_avg, 0.0) AS amount_avg,\n        coalesce(hometax_employee.employ_avg, 0.0) AS employ_avg\nFROM  merge\nWHERE hometax_hometax.opend_at is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_business_label.json', 'options': {'sql': ""SELECT\n            business_id,\n            employ_avg AS regular_employees_count,\n            CASE\n                WHEN    is_small_size = true AND size(intersect(standard_classification_code_1_depth, array('C', 'F', 'H', 'B'))) > 0 AND employ_avg < 10 THEN '소상공인'\n                WHEN    is_small_size = true AND employ_avg < 5 THEN '소상공인'\n                WHEN    is_small_size = true  THEN '소기업'\n                ELSE    null\n            END AS size_category\n  FROM (\n    SELECT\n            business_id,\n            standard_classification_code_1_depth,\n            standard_classification_code_1_2_depth,\n            opend_at,\n            amount_avg,\n            employ_avg,\n            CASE\n                WHEN    taxation_type = '간이과세자' THEN true\n                WHEN    opend_at < '2016-01-01' OR  opend_at >= '2019-01-01' THEN true\n                WHEN    standard_classification_code_1_depth is null OR standard_classification_code_1_2_depth IS NULL OR amount_avg IS NULL THEN false\n                WHEN    size(\n                            intersect(\n                                standard_classification_code_1_2_depth,\n                                array('C10', 'C11', 'C14', 'C15', 'C19', 'C20', 'C21', 'C23', 'C24', 'C25', 'C26', 'C28', 'C29', 'C30', 'C32', 'E36')\n                            )\n                        ) > 0  AND  amount_avg <= 12000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_depth, array('D'))) > 0  AND  amount_avg <= 12000000000    THEN true\n                WHEN    size(\n                            intersect(\n                                standard_classification_code_1_2_depth,\n                                array('C12', 'C13', 'C16', 'C17', 'C18', 'C22', 'C27', 'C31', 'C33')\n                            )\n                        ) > 0  AND  amount_avg <= 8000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_depth, array('A', 'B', 'F', 'H', 'K'))) > 0  AND  amount_avg <= 8000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_depth, array('G', 'J'))) > 0  AND  amount_avg <= 5000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_depth, array('E', 'L', 'M', 'N', 'R'))) > 0\n                        AND  size(intersect(standard_classification_code_1_2_depth, array('E36'))) = 0\n                        AND  amount_avg <= 3000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_depth, array('I', 'P', 'Q', 'S'))) > 0  AND  amount_avg <= 1000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_2_depth, array('C34'))) > 0  AND  amount_avg <= 1000000000    THEN true\n                ELSE    false\n            END AS is_small_size\n    FROM business_meta_filtered\n )""}, 'role': 'process', 'type': 'sql'}]"
996,process:::hometax_business_label:::hometax_business_label,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=business_label,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_label.json', 'options': {'sql': ""SELECT\n            business_id,\n            employ_avg AS regular_employees_count,\n            CASE\n                WHEN    is_small_size = true AND size(intersect(standard_classification_code_1_depth, array('C', 'F', 'H', 'B'))) > 0 AND employ_avg < 10 THEN '소상공인'\n                WHEN    is_small_size = true AND employ_avg < 5 THEN '소상공인'\n                WHEN    is_small_size = true  THEN '소기업'\n                ELSE    null\n            END AS size_category\n  FROM (\n    SELECT\n            business_id,\n            standard_classification_code_1_depth,\n            standard_classification_code_1_2_depth,\n            opend_at,\n            amount_avg,\n            employ_avg,\n            CASE\n                WHEN    taxation_type = '간이과세자' THEN true\n                WHEN    opend_at < '2016-01-01' OR  opend_at >= '2019-01-01' THEN true\n                WHEN    standard_classification_code_1_depth is null OR standard_classification_code_1_2_depth IS NULL OR amount_avg IS NULL THEN false\n                WHEN    size(\n                            intersect(\n                                standard_classification_code_1_2_depth,\n                                array('C10', 'C11', 'C14', 'C15', 'C19', 'C20', 'C21', 'C23', 'C24', 'C25', 'C26', 'C28', 'C29', 'C30', 'C32', 'E36')\n                            )\n                        ) > 0  AND  amount_avg <= 12000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_depth, array('D'))) > 0  AND  amount_avg <= 12000000000    THEN true\n                WHEN    size(\n                            intersect(\n                                standard_classification_code_1_2_depth,\n                                array('C12', 'C13', 'C16', 'C17', 'C18', 'C22', 'C27', 'C31', 'C33')\n                            )\n                        ) > 0  AND  amount_avg <= 8000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_depth, array('A', 'B', 'F', 'H', 'K'))) > 0  AND  amount_avg <= 8000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_depth, array('G', 'J'))) > 0  AND  amount_avg <= 5000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_depth, array('E', 'L', 'M', 'N', 'R'))) > 0\n                        AND  size(intersect(standard_classification_code_1_2_depth, array('E36'))) = 0\n                        AND  amount_avg <= 3000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_depth, array('I', 'P', 'Q', 'S'))) > 0  AND  amount_avg <= 1000000000    THEN true\n                WHEN    size(intersect(standard_classification_code_1_2_depth, array('C34'))) > 0  AND  amount_avg <= 1000000000    THEN true\n                ELSE    false\n            END AS is_small_size\n    FROM business_meta_filtered\n )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_business_label_upload.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=business_label'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_label.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=business_label'}, 'role': 'sink', 'type': 'file'}]"
997,process:::devices:::cashnote_users,s3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users/name=devices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_users.json', 'options': {'sql': '  SELECT\n          user_id,\n          collect_set(device_type) device_type\n  FROM    devices_src\n  WHERE   user_id IS NOT NULL\n  GROUP BY user_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users/name=devices'}, 'role': 'sink', 'type': 'file'}]"
998,process:::memberships:::cashnote_users,s3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users/name=memberships,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_users.json', 'options': {'sql': '  SELECT\n          user_id,\n          collect_list(struct(business_id, role, notifications)) AS memberships\n  FROM (\n          SELECT\n                  user_id,\n                  business_id,\n                  role,\n                  filterJsonTrue(notification_preferences) AS notifications\n          FROM    memberships_src\n          WHERE   user_id IS NOT NULL\n  )\n  GROUP BY user_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users/name=memberships'}, 'role': 'sink', 'type': 'file'}]"
999,process:::phones:::cashnote_users,s3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users/name=phones,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_users.json', 'options': {'sql': '  SELECT\n          user_id,\n          number,\n          blocked\n  FROM    phones_src\n  WHERE   user_id IS NOT NULL'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users/name=phones'}, 'role': 'sink', 'type': 'file'}]"
1000,process:::demography:::cashnote_users,s3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users/name=demography,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_users.json', 'options': {'sql': '  SELECT  *,\n          CASE\n              WHEN age < 20 THEN ""20_under""\n              WHEN age >= 20 AND age < 30 THEN ""20s""\n              WHEN age >= 30 AND age < 40 THEN ""30s""\n              WHEN age >= 40 AND age < 50 THEN ""40s""\n              WHEN age >= 50 AND age < 60 THEN ""50s""\n              WHEN age >= 60 THEN ""60_over""\n              ELSE ""none""\n          END AS age_band\n  FROM (\n          SELECT  owner_id AS user_id,\n                  year(crefia_owner_birthday) AS birth_year,\n                  month(crefia_owner_birthday) AS birth_month,\n                  date_format(crefia_owner_birthday, \'MM-dd\') AS birthday,\n                  crefia_owner_birthday,\n                  (year(current_date()) - year(crefia_owner_birthday) + 1) AS age,\n                  row_number() OVER (PARTITION BY owner_id ORDER BY created_at DESC) AS row_num\n          FROM  businesses\n          WHERE crefia_owner_birthday is not null\n  )\n  WHERE   row_num = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_users.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=cashnote_user_id/subject=users/name=demography'}, 'role': 'sink', 'type': 'file'}]"
1001,process:::transactions_stat:::card_sales_transactions,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'sales_transactions.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount_sum) AS amount_sum,\n          SUM(tx_count) AS tx_count,\n          map_from_entries(collect_list(struct(issuer_name, amount_sum))) AS issuer_amount_sum,\n          map_from_entries(collect_list(struct(issuer_name, tx_count))) AS issuer_tx_count\n  FROM (\n          SELECT\n                  timestamp,\n                  business_id,\n                  issuer_name,\n                  SUM(amount) AS amount_sum,\n                  COUNT(1) AS tx_count\n          FROM (\n                  SELECT\n                          business_id,\n                          date_trunc('MONTH', transacted_at) AS timestamp,\n                          amount,\n                          issuer_name\n                  FROM    transactions\n                  WHERE   business_id IS NOT NULL\n                  AND     approval_canceled_at IS NULL AND purchase_canceled_at IS NULL\n                  AND     transacted_at between '2019-01-01' AND '2021-01-24'\n          )\n          GROUP BY business_id, issuer_name, timestamp\n ) GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_sales_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_id_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'sales_transactions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'business_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions'}, 'role': 'source', 'type': 'file'}]"
1002,s3://kcd-data/raw/firehose/plover/kcd-data/raw/firehose/plover/kcd-data/raw/firehose/plover/kcd-data/raw/firehose/plover/kcd-data/raw/firehose/plover/kcd-data/raw/firehose/plover/kcd-data/raw/firehose/plover/,process:::plover:::partition_prod_back_fill,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'partition_prod_back_fill.json', 'options': {'paths': 's3://kcd-data/raw/firehose/plover/year=2020/month=12/day=31,s3://kcd-data/raw/firehose/plover/year=2020/month=12/day=30,s3://kcd-data/raw/firehose/plover/year=2020/month=12/day=29,s3://kcd-data/raw/firehose/plover/year=2020/month=12/day=28,s3://kcd-data/raw/firehose/plover/year=2020/month=12/day=27,s3://kcd-data/raw/firehose/plover/year=2020/month=12/day=26,s3://kcd-data/raw/firehose/plover/year=2020/month=12/day=25', 'format': 'json', 'read': '{""basePath"":""s3://kcd-de-production/raw/firehose/plover_compact""}'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'partition_prod_back_fill.json', 'options': {'sql': ""SELECT\n  table_name,\n  text_dvs,\n  from_unixtime((timestamp + (60 * 60 * 9 * 1000)) / 1000) AS ts,\n  year,\n  month,\n  day\nFROM    (\n  SELECT  timestamp,\n          CONCAT(service_name, '_', label_name) AS table_name,\n          row_to_json(struct(*)) AS text_dvs,\n          year,\n          month,\n          day\n  FROM\n          plover_src\n  WHERE\n          content IS NOT NULL\n)""}, 'role': 'process', 'type': 'sql'}]"
1003,s3://kcd-pos-data/dev/kcd-pos-data/dev/kcd-pos-data/dev/kcd-pos-data/dev/kcd-pos-data/dev/kcd-pos-data/dev/kcd-pos-data/dev/,process:::pos:::partition_prod_back_fill,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'partition_prod_back_fill.json', 'options': {'paths': 's3://kcd-pos-data/dev/year=2020/month=12/day=31,s3://kcd-pos-data/dev/year=2020/month=12/day=30,s3://kcd-pos-data/dev/year=2020/month=12/day=29,s3://kcd-pos-data/dev/year=2020/month=12/day=28,s3://kcd-pos-data/dev/year=2020/month=12/day=27,s3://kcd-pos-data/dev/year=2020/month=12/day=26,s3://kcd-pos-data/dev/year=2020/month=12/day=25', 'format': 'json', 'read': '{""basePath"":""s3://kcd-pos-data/dev""}'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'partition_prod_back_fill.json', 'options': {'sql': ""SELECT\n  table_name,\n  text_dvs,\n  from_unixtime(((unix_timestamp() * 1000) + (60 * 60 * 9 * 1000)) / 1000) AS ts,\n  year(from_unixtime(unix_timestamp(), 'yyyy-MM-dd')) as year,\n  month(from_unixtime(unix_timestamp(), 'yyyy-MM-dd')) as month,\n  day(from_unixtime(unix_timestamp(), 'yyyy-MM-dd')) as day\nFROM    (\n  SELECT  CONCAT(service_name, '_', label_name) AS table_name,\n          row_to_json(struct(*)) AS text_dvs\n  FROM    (\n    SELECT  source AS label_name,\n            'pos' AS service_name,\n            to_json(struct(*)) AS content\n    FROM\n            pos_src\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
1004,process:::plover:::partition_prod_back_fill,process:::union_v3:::partition_prod_back_fill,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'partition_prod_back_fill.json', 'options': {'sql': ""SELECT\n  table_name,\n  text_dvs,\n  from_unixtime((timestamp + (60 * 60 * 9 * 1000)) / 1000) AS ts,\n  year,\n  month,\n  day\nFROM    (\n  SELECT  timestamp,\n          CONCAT(service_name, '_', label_name) AS table_name,\n          row_to_json(struct(*)) AS text_dvs,\n          year,\n          month,\n          day\n  FROM\n          plover_src\n  WHERE\n          content IS NOT NULL\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'partition_prod_back_fill.json', 'options': {'sql': ""SELECT\n  lower(table_name) AS tb,\n  concat_ws('-',\n    format_string('%04d', year),\n    format_string('%02d', month),\n    format_string('%02d', day)\n  ) AS created_at_date,\n  text_dvs.text AS value\nFROM (\n  SELECT * FROM plover\n\n  UNION ALL\n\n  SELECT * FROM pos\n)""}, 'role': 'process', 'type': 'sql'}]"
1005,process:::pos:::partition_prod_back_fill,process:::union_v3:::partition_prod_back_fill,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'partition_prod_back_fill.json', 'options': {'sql': ""SELECT\n  table_name,\n  text_dvs,\n  from_unixtime(((unix_timestamp() * 1000) + (60 * 60 * 9 * 1000)) / 1000) AS ts,\n  year(from_unixtime(unix_timestamp(), 'yyyy-MM-dd')) as year,\n  month(from_unixtime(unix_timestamp(), 'yyyy-MM-dd')) as month,\n  day(from_unixtime(unix_timestamp(), 'yyyy-MM-dd')) as day\nFROM    (\n  SELECT  CONCAT(service_name, '_', label_name) AS table_name,\n          row_to_json(struct(*)) AS text_dvs\n  FROM    (\n    SELECT  source AS label_name,\n            'pos' AS service_name,\n            to_json(struct(*)) AS content\n    FROM\n            pos_src\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'partition_prod_back_fill.json', 'options': {'sql': ""SELECT\n  lower(table_name) AS tb,\n  concat_ws('-',\n    format_string('%04d', year),\n    format_string('%02d', month),\n    format_string('%02d', day)\n  ) AS created_at_date,\n  text_dvs.text AS value\nFROM (\n  SELECT * FROM plover\n\n  UNION ALL\n\n  SELECT * FROM pos\n)""}, 'role': 'process', 'type': 'sql'}]"
1006,process:::union_v3:::partition_prod_back_fill,s3://kcd-de-production/raw/catalog_v3,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'partition_prod_back_fill.json', 'options': {'sql': ""SELECT\n  lower(table_name) AS tb,\n  concat_ws('-',\n    format_string('%04d', year),\n    format_string('%02d', month),\n    format_string('%02d', day)\n  ) AS created_at_date,\n  text_dvs.text AS value\nFROM (\n  SELECT * FROM plover\n\n  UNION ALL\n\n  SELECT * FROM pos\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'partition_prod_back_fill.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'format': 'text', 'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/catalog_v3', 'partitions': 'tb,created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '100000'}, 'role': 'sink', 'type': 'custom'}]"
1007,s3://kcd-de-staging/work/elric/data/issuers,process:::outdated_issuers:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/elric/data/issuers'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': ""  SELECT\n          IF(cnt > 0, true, false) AS crefia_delayed,\n          IF(cnt = 8, true, false) AS all_crefia_delayed\n  FROM (\n          SELECT COUNT(DISTINCT(name)) AS cnt\n          FROM issuers\n          WHERE approvals_up_to <  '2021-01-01'\n  )""}, 'role': 'process', 'type': 'sql'}]"
1008,s3://kcd-de-staging/raw/report/snowdon/daily_report/,process:::merged:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'test_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/raw/report/snowdon/daily_report/date_id=2021-01-01'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/report/snowdon/daily_report/date_id=2021-01-01', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT    *,\n          (hourly_sales_0_6_amount + hourly_sales_6_11_amount + hourly_sales_11_14_amount + hourly_sales_14_17_amount + hourly_sales_17_24_amount + hourly_sales_etc_amount) AS hourly_sales_amount_sum\nFROM (\nSELECT    target_id, business_id, user_id, title, template_code, url_mobile,\n          NVL(card_sales_amount, 0) AS card_sales_amount,\n          NVL(card_sales_count, 0) AS card_sales_count,\n          NVL(card_sales_fee, 0) AS card_sales_fee,\n          NVL(card_sales_vat_fee, 0) AS card_sales_vat_fee,\n          NVL(card_sales_payment, 0) AS card_sales_payment,\n          NVL(card_sales_new_amount, 0) AS card_sales_new_amount,\n          NVL(card_sales_returning_amount, 0) AS card_sales_returning_amount,\n          NVL(card_sales_monthly_amount, 0) AS card_sales_monthly_amount,\n          NVL(hourly_sales_0_6_amount, 0) AS hourly_sales_0_6_amount,\n          NVL(hourly_sales_6_11_amount, 0) AS hourly_sales_6_11_amount,\n          NVL(hourly_sales_11_14_amount, 0) AS hourly_sales_11_14_amount,\n          NVL(hourly_sales_14_17_amount, 0) AS hourly_sales_14_17_amount,\n          NVL(hourly_sales_17_24_amount, 0) AS hourly_sales_17_24_amount,\n          NVL(hourly_sales_etc_amount, 0) AS hourly_sales_etc_amount,\n          NVL(delivery_app_sales_monthly_amount, 0) AS delivery_app_sales_monthly_amount,\n          NVL(card_purchases_monthly_amount, 0) AS card_purchases_monthly_amount,\n          NVL(hometax_sales_monthly_invoice_amount, 0) AS hometax_sales_monthly_invoice_amount,\n          NVL(hometax_sales_monthly_cash_amount, 0) AS hometax_sales_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_cash_amount, 0) AS hometax_purchases_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_invoice_amount, 0) AS hometax_purchases_monthly_invoice_amount,\n          NVL(delivery_app_sales_baemin_amount, 0) AS delivery_app_sales_baemin_amount,\n          NVL(delivery_app_sales_yogiyo_amount, 0) AS delivery_app_sales_yogiyo_amount,\n          NVL(delivery_app_sales_baedaltong_amount, 0) AS delivery_app_sales_baedaltong_amount,\n          array(\n              named_struct('issuer_name', 'KB', 'amount', nvl(today_payments_kb, 0L)),\n              named_struct('issuer_name', '농협NH', 'amount', nvl(today_payments_nh, 0L)),\n              named_struct('issuer_name', '롯데', 'amount', nvl(today_payments_lotte, 0L)),\n              named_struct('issuer_name', '비씨', 'amount', nvl(today_payments_bc, 0L)),\n              named_struct('issuer_name', '삼성', 'amount', nvl(today_payments_samsung, 0L)),\n              named_struct('issuer_name', '신한', 'amount', nvl(today_payments_shinhan, 0L)),\n              named_struct('issuer_name', '하나', 'amount', nvl(today_payments_hana, 0L)),\n              named_struct('issuer_name', '현대', 'amount', nvl(today_payments_hyundai, 0L)),\n              named_struct('issuer_name', '배달의민족', 'amount', nvl(today_payments_baemin, 0L)),\n              named_struct('issuer_name', '요기요', 'amount', nvl(today_payments_yogiyo, 0L)),\n              named_struct('issuer_name', '배달통', 'amount', nvl(today_payments_baedaltong, 0L))\n          ) AS today_payments_arr,\n          array(\n              named_struct('app_name', '배달의민족', 'amount', delivery_app_sales_baemin_amount),\n              named_struct('app_name', '요기요', 'amount', delivery_app_sales_yogiyo_amount),\n              named_struct('app_name', '배달통', 'amount', delivery_app_sales_baedaltong_amount)\n          ) AS delivery_app_sales_arr,\n          future_payments_arr,\n          bank_accounts_arr,\n          today_card_purchases_arr\nFROM (\n        SELECT\n                  o.target_id, o.business_id, o.user_id, o.title, o.template_code, o.url_mobile,\n\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_amount'),           n.card_sales_amount, o.card_sales_amount) AS card_sales_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_count'),            n.card_sales_count, o.card_sales_count) AS card_sales_count,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_fee'),              n.card_sales_fee, o.card_sales_fee) AS card_sales_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_vat_fee'),          n.card_sales_vat_fee, o.card_sales_vat_fee) AS card_sales_vat_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_payment'),          n.card_sales_payment, o.card_sales_payment) AS card_sales_payment,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_new_amount'),       n.card_sales_new_amount, o.card_sales_new_amount) AS card_sales_new_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_returning_amount'), n.card_sales_returning_amount, o.card_sales_returning_amount) AS card_sales_returning_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_monthly_amount'),   n.card_sales_monthly_amount, o.card_sales_monthly_amount) AS card_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_0_6_amount'),     n.hourly_sales_0_6_amount, o.hourly_sales_0_6_amount) AS hourly_sales_0_6_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_6_11_amount'),    n.hourly_sales_6_11_amount, o.hourly_sales_6_11_amount) AS hourly_sales_6_11_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_11_14_amount'),   n.hourly_sales_11_14_amount, o.hourly_sales_11_14_amount) AS hourly_sales_11_14_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_14_17_amount'),   n.hourly_sales_14_17_amount, o.hourly_sales_14_17_amount) AS hourly_sales_14_17_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_17_24_amount'),   n.hourly_sales_17_24_amount, o.hourly_sales_17_24_amount) AS hourly_sales_17_24_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_kb'),           n.today_payments_kb, o.today_payments_kb) AS today_payments_kb,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_nh'),           n.today_payments_nh, o.today_payments_nh) AS today_payments_nh,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_lotte'),        n.today_payments_lotte, o.today_payments_lotte) AS today_payments_lotte,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baemin'),       n.today_payments_baemin, o.today_payments_baemin) AS today_payments_baemin,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_bc'),           n.today_payments_bc, o.today_payments_bc) AS today_payments_bc,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_samsung'),      n.today_payments_samsung, o.today_payments_samsung) AS today_payments_samsung,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_shinhan'),      n.today_payments_shinhan, o.today_payments_shinhan) AS today_payments_shinhan,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hana'),         n.today_payments_hana, o.today_payments_hana) AS today_payments_hana,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hyundai'),      n.today_payments_hyundai, o.today_payments_hyundai) AS today_payments_hyundai,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_yogiyo'),       n.today_payments_yogiyo, o.today_payments_yogiyo) AS today_payments_yogiyo,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baedaltong'),   n.today_payments_baedaltong, o.today_payments_baedaltong) AS today_payments_baedaltong,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baemin_amount'),        n.delivery_app_sales_baemin_amount, o.delivery_app_sales_baemin_amount) AS delivery_app_sales_baemin_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_yogiyo_amount'),        n.delivery_app_sales_yogiyo_amount, o.delivery_app_sales_yogiyo_amount) AS delivery_app_sales_yogiyo_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baedaltong_amount'),    n.delivery_app_sales_baedaltong_amount, o.delivery_app_sales_baedaltong_amount) AS delivery_app_sales_baedaltong_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_monthly_amount'),       n.delivery_app_sales_monthly_amount, o.delivery_app_sales_monthly_amount) AS delivery_app_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_purchases_monthly_amount'),           n.card_purchases_monthly_amount, o.card_purchases_monthly_amount) AS card_purchases_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_invoice_amount'),    n.hometax_sales_monthly_invoice_amount, o.hometax_sales_monthly_invoice_amount) AS hometax_sales_monthly_invoice_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_cash_amount'),       n.hometax_sales_monthly_cash_amount, o.hometax_sales_monthly_cash_amount) AS hometax_sales_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_cash_amount'),   n.hometax_purchases_monthly_cash_amount, o.hometax_purchases_monthly_cash_amount) AS hometax_purchases_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_invoice_amount'),n.hometax_purchases_monthly_invoice_amount, o.hometax_purchases_monthly_invoice_amount) AS hometax_purchases_monthly_invoice_amount,\n                  o.hourly_sales_etc_amount,\n                  o.future_payments_arr,\n                  o.bank_accounts_arr,\n                  o.today_card_purchases_arr\n        FROM      formatted_report_logs AS o\n        LEFT OUTER JOIN   formatted_daily_report AS n\n        ON        o.business_id = n.business_id\n)\n)""}, 'role': 'process', 'type': 'sql'}]"
1009,process:::outdated_issuers:::test_daily_reports,process:::with_businesses:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'test_daily_reports.json', 'options': {'sql': ""  SELECT\n          IF(cnt > 0, true, false) AS crefia_delayed,\n          IF(cnt = 8, true, false) AS all_crefia_delayed\n  FROM (\n          SELECT COUNT(DISTINCT(name)) AS cnt\n          FROM issuers\n          WHERE approvals_up_to <  '2021-01-01'\n  )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    calc_additional_columns.*,\n                  b.*,\n                  IF(c.confirmed, 'daily_reports', 'daily_reports_wo_crefia') AS report_name\n        FROM      calc_additional_columns\n        LEFT OUTER JOIN   businesses_info AS b\n        ON        calc_additional_columns.business_id = b.id\n        LEFT OUTER JOIN   crefia_credential AS c\n        ON        calc_additional_columns.business_id = c.business_id\n) r\nCROSS JOIN outdated_issuers""}, 'role': 'process', 'type': 'sql'}]"
1010,process:::crefia_credential:::test_daily_reports,process:::with_businesses:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT business_id, collect_set(c)[0] AS confirmed\nFROM (\n    SELECT  business_id, IF(status = 1, true, false) AS c\n    FROM credentials\n    WHERE type in ('Credentials::CrefiaBusiness', 'Credentials::Crefia')\n)\nGROUP BY business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    calc_additional_columns.*,\n                  b.*,\n                  IF(c.confirmed, 'daily_reports', 'daily_reports_wo_crefia') AS report_name\n        FROM      calc_additional_columns\n        LEFT OUTER JOIN   businesses_info AS b\n        ON        calc_additional_columns.business_id = b.id\n        LEFT OUTER JOIN   crefia_credential AS c\n        ON        calc_additional_columns.business_id = c.business_id\n) r\nCROSS JOIN outdated_issuers""}, 'role': 'process', 'type': 'sql'}]"
1011,process:::businesses_info:::test_daily_reports,process:::with_businesses:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'test_daily_reports.json', 'options': {'sql': 'SELECT    businesses.id,\n          businesses.name AS report_business_name,\n          NVL(c.has_delivery_app_credentials, false) AS has_delivery_app_credentials,\n          NVL(c.has_baemin_credential, false) AS has_baemin_credential,\n          NVL(c.has_yogiyo_credential, false) AS has_yogiyo_credential,\n          NVL(c.has_baedaltong_credential, false) AS has_baedaltong_credential,\n          NVL(c.has_hometax_credentials, false) AS has_hometax_credentials\nFROM businesses\nLEFT OUTER JOIN (\n    SELECT\n            business_id,\n            IF(size(delivery_app_credentials) > 0, true, false) AS has_delivery_app_credentials,\n            IF(array_contains(delivery_app_credentials, \'baemin\'), true, false) AS has_baemin_credential,\n            IF(array_contains(delivery_app_credentials, \'yogiyo\'), true, false) AS has_yogiyo_credential,\n            IF(array_contains(delivery_app_credentials, \'baedaltong\'), true, false) AS has_baedaltong_credential,\n            IF(size(hometax_credentials) > 0, true, false) AS has_hometax_credentials\n\n    FROM (\n        SELECT  business_id,\n                collect_list(hometax_credential) AS hometax_credentials,\n                collect_list(delivery_app_credential) AS delivery_app_credentials\n        FROM (\n            SELECT  credentials.business_id,\n                    IF(\n                        credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS hometax_credential,\n                    IF(\n                        credentials.type not in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\'),\n                        lower(replace(credentials.type, ""Credentials::"", """")),\n                        null\n                    ) AS delivery_app_credential\n            FROM credentials\n            JOIN scrapings\n            ON scrapings.credential_id = credentials.id\n            where credentials.status = 1\n            AND scrapings.status = 1\n            AND (\n                scrapings.tag in (\'BaeminShop\', \'YogiyoShop\', \'BaedaltongShop\') OR\n                credentials.type in (\'Credentials::HometaxCertificate\', \'Credentials::HometaxLogin\')\n            )\n        )\n        GROUP BY business_id\n    )\n) AS c\nON businesses.id = c.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    calc_additional_columns.*,\n                  b.*,\n                  IF(c.confirmed, 'daily_reports', 'daily_reports_wo_crefia') AS report_name\n        FROM      calc_additional_columns\n        LEFT OUTER JOIN   businesses_info AS b\n        ON        calc_additional_columns.business_id = b.id\n        LEFT OUTER JOIN   crefia_credential AS c\n        ON        calc_additional_columns.business_id = c.business_id\n) r\nCROSS JOIN outdated_issuers""}, 'role': 'process', 'type': 'sql'}]"
1012,process:::merged:::test_daily_reports,process:::calc_additional_columns:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT    *,\n          (hourly_sales_0_6_amount + hourly_sales_6_11_amount + hourly_sales_11_14_amount + hourly_sales_14_17_amount + hourly_sales_17_24_amount + hourly_sales_etc_amount) AS hourly_sales_amount_sum\nFROM (\nSELECT    target_id, business_id, user_id, title, template_code, url_mobile,\n          NVL(card_sales_amount, 0) AS card_sales_amount,\n          NVL(card_sales_count, 0) AS card_sales_count,\n          NVL(card_sales_fee, 0) AS card_sales_fee,\n          NVL(card_sales_vat_fee, 0) AS card_sales_vat_fee,\n          NVL(card_sales_payment, 0) AS card_sales_payment,\n          NVL(card_sales_new_amount, 0) AS card_sales_new_amount,\n          NVL(card_sales_returning_amount, 0) AS card_sales_returning_amount,\n          NVL(card_sales_monthly_amount, 0) AS card_sales_monthly_amount,\n          NVL(hourly_sales_0_6_amount, 0) AS hourly_sales_0_6_amount,\n          NVL(hourly_sales_6_11_amount, 0) AS hourly_sales_6_11_amount,\n          NVL(hourly_sales_11_14_amount, 0) AS hourly_sales_11_14_amount,\n          NVL(hourly_sales_14_17_amount, 0) AS hourly_sales_14_17_amount,\n          NVL(hourly_sales_17_24_amount, 0) AS hourly_sales_17_24_amount,\n          NVL(hourly_sales_etc_amount, 0) AS hourly_sales_etc_amount,\n          NVL(delivery_app_sales_monthly_amount, 0) AS delivery_app_sales_monthly_amount,\n          NVL(card_purchases_monthly_amount, 0) AS card_purchases_monthly_amount,\n          NVL(hometax_sales_monthly_invoice_amount, 0) AS hometax_sales_monthly_invoice_amount,\n          NVL(hometax_sales_monthly_cash_amount, 0) AS hometax_sales_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_cash_amount, 0) AS hometax_purchases_monthly_cash_amount,\n          NVL(hometax_purchases_monthly_invoice_amount, 0) AS hometax_purchases_monthly_invoice_amount,\n          NVL(delivery_app_sales_baemin_amount, 0) AS delivery_app_sales_baemin_amount,\n          NVL(delivery_app_sales_yogiyo_amount, 0) AS delivery_app_sales_yogiyo_amount,\n          NVL(delivery_app_sales_baedaltong_amount, 0) AS delivery_app_sales_baedaltong_amount,\n          array(\n              named_struct('issuer_name', 'KB', 'amount', nvl(today_payments_kb, 0L)),\n              named_struct('issuer_name', '농협NH', 'amount', nvl(today_payments_nh, 0L)),\n              named_struct('issuer_name', '롯데', 'amount', nvl(today_payments_lotte, 0L)),\n              named_struct('issuer_name', '비씨', 'amount', nvl(today_payments_bc, 0L)),\n              named_struct('issuer_name', '삼성', 'amount', nvl(today_payments_samsung, 0L)),\n              named_struct('issuer_name', '신한', 'amount', nvl(today_payments_shinhan, 0L)),\n              named_struct('issuer_name', '하나', 'amount', nvl(today_payments_hana, 0L)),\n              named_struct('issuer_name', '현대', 'amount', nvl(today_payments_hyundai, 0L)),\n              named_struct('issuer_name', '배달의민족', 'amount', nvl(today_payments_baemin, 0L)),\n              named_struct('issuer_name', '요기요', 'amount', nvl(today_payments_yogiyo, 0L)),\n              named_struct('issuer_name', '배달통', 'amount', nvl(today_payments_baedaltong, 0L))\n          ) AS today_payments_arr,\n          array(\n              named_struct('app_name', '배달의민족', 'amount', delivery_app_sales_baemin_amount),\n              named_struct('app_name', '요기요', 'amount', delivery_app_sales_yogiyo_amount),\n              named_struct('app_name', '배달통', 'amount', delivery_app_sales_baedaltong_amount)\n          ) AS delivery_app_sales_arr,\n          future_payments_arr,\n          bank_accounts_arr,\n          today_card_purchases_arr\nFROM (\n        SELECT\n                  o.target_id, o.business_id, o.user_id, o.title, o.template_code, o.url_mobile,\n\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_amount'),           n.card_sales_amount, o.card_sales_amount) AS card_sales_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_count'),            n.card_sales_count, o.card_sales_count) AS card_sales_count,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_fee'),              n.card_sales_fee, o.card_sales_fee) AS card_sales_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_vat_fee'),          n.card_sales_vat_fee, o.card_sales_vat_fee) AS card_sales_vat_fee,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_payment'),          n.card_sales_payment, o.card_sales_payment) AS card_sales_payment,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_new_amount'),       n.card_sales_new_amount, o.card_sales_new_amount) AS card_sales_new_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_returning_amount'), n.card_sales_returning_amount, o.card_sales_returning_amount) AS card_sales_returning_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_sales_monthly_amount'),   n.card_sales_monthly_amount, o.card_sales_monthly_amount) AS card_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_0_6_amount'),     n.hourly_sales_0_6_amount, o.hourly_sales_0_6_amount) AS hourly_sales_0_6_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_6_11_amount'),    n.hourly_sales_6_11_amount, o.hourly_sales_6_11_amount) AS hourly_sales_6_11_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_11_14_amount'),   n.hourly_sales_11_14_amount, o.hourly_sales_11_14_amount) AS hourly_sales_11_14_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_14_17_amount'),   n.hourly_sales_14_17_amount, o.hourly_sales_14_17_amount) AS hourly_sales_14_17_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hourly_sales_17_24_amount'),   n.hourly_sales_17_24_amount, o.hourly_sales_17_24_amount) AS hourly_sales_17_24_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_kb'),           n.today_payments_kb, o.today_payments_kb) AS today_payments_kb,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_nh'),           n.today_payments_nh, o.today_payments_nh) AS today_payments_nh,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_lotte'),        n.today_payments_lotte, o.today_payments_lotte) AS today_payments_lotte,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baemin'),       n.today_payments_baemin, o.today_payments_baemin) AS today_payments_baemin,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_bc'),           n.today_payments_bc, o.today_payments_bc) AS today_payments_bc,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_samsung'),      n.today_payments_samsung, o.today_payments_samsung) AS today_payments_samsung,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_shinhan'),      n.today_payments_shinhan, o.today_payments_shinhan) AS today_payments_shinhan,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hana'),         n.today_payments_hana, o.today_payments_hana) AS today_payments_hana,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_hyundai'),      n.today_payments_hyundai, o.today_payments_hyundai) AS today_payments_hyundai,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_yogiyo'),       n.today_payments_yogiyo, o.today_payments_yogiyo) AS today_payments_yogiyo,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'today_payments_baedaltong'),   n.today_payments_baedaltong, o.today_payments_baedaltong) AS today_payments_baedaltong,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baemin_amount'),        n.delivery_app_sales_baemin_amount, o.delivery_app_sales_baemin_amount) AS delivery_app_sales_baemin_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_yogiyo_amount'),        n.delivery_app_sales_yogiyo_amount, o.delivery_app_sales_yogiyo_amount) AS delivery_app_sales_yogiyo_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_baedaltong_amount'),    n.delivery_app_sales_baedaltong_amount, o.delivery_app_sales_baedaltong_amount) AS delivery_app_sales_baedaltong_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'delivery_app_sales_monthly_amount'),       n.delivery_app_sales_monthly_amount, o.delivery_app_sales_monthly_amount) AS delivery_app_sales_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'card_purchases_monthly_amount'),           n.card_purchases_monthly_amount, o.card_purchases_monthly_amount) AS card_purchases_monthly_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_invoice_amount'),    n.hometax_sales_monthly_invoice_amount, o.hometax_sales_monthly_invoice_amount) AS hometax_sales_monthly_invoice_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_sales_monthly_cash_amount'),       n.hometax_sales_monthly_cash_amount, o.hometax_sales_monthly_cash_amount) AS hometax_sales_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_cash_amount'),   n.hometax_purchases_monthly_cash_amount, o.hometax_purchases_monthly_cash_amount) AS hometax_purchases_monthly_cash_amount,\n                  IF(array_contains(array('card_sales_amount', 'card_sales_count', 'card_sales_fee', 'card_sales_vat_fee'), 'hometax_purchases_monthly_invoice_amount'),n.hometax_purchases_monthly_invoice_amount, o.hometax_purchases_monthly_invoice_amount) AS hometax_purchases_monthly_invoice_amount,\n                  o.hourly_sales_etc_amount,\n                  o.future_payments_arr,\n                  o.bank_accounts_arr,\n                  o.today_card_purchases_arr\n        FROM      formatted_report_logs AS o\n        LEFT OUTER JOIN   formatted_daily_report AS n\n        ON        o.business_id = n.business_id\n)\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT    *,\n          date_format('2021-01-01', 'M월') AS report_month,\n          date_format('2021-01-01', 'M월 d일') AS report_date,\n          dayofweek_kor('2021-01-01') AS report_day_of_week,\n          date_format('2021-01-02', 'M월 d일') AS today_date,\n          dayofweek_kor('2021-01-02') AS today_day_of_week,\n\n          IF(bank_account_etc_count > 0, true, false) AS bank_account_etc_exists,\n          IF(today_card_purchases_etc_count > 0, true, false) AS today_card_purchases_etc_exists,\n          IF(size(delivery_app_sales) > 0, true, false) AS delivery_app_sales_exists,\n          IF(size(today_payments) > 0, true, false) AS today_payments_exists,\n          IF(size(future_payments) > 0, true, false) AS future_payments_exists\nFROM (\n        SELECT    target_id, business_id, user_id, title, template_code, url_mobile,\n\n                  FORMAT_NUMBER(card_sales_amount, 0) AS card_sales_amount,\n                  FORMAT_NUMBER(card_sales_count, 0) AS card_sales_count,\n                  FORMAT_NUMBER(card_sales_fee, 0) AS card_sales_fee,\n                  FORMAT_NUMBER(card_sales_vat_fee, 0) AS card_sales_vat_fee,\n                  IF(card_sales_vat_fee > 0, true, false) AS card_sales_vat_fee_exists,\n                  FORMAT_NUMBER(card_sales_payment, 0) AS card_sales_payment,\n                  FORMAT_NUMBER(card_sales_new_amount, 0) AS card_sales_new_amount,\n                  FORMAT_NUMBER(card_sales_returning_amount, 0) AS card_sales_returning_amount,\n                  FORMAT_NUMBER(card_sales_monthly_amount, 0) AS card_sales_monthly_amount,\n                  FORMAT_NUMBER(delivery_app_sales_monthly_amount, 0) AS delivery_app_sales_monthly_amount,\n                  FORMAT_NUMBER(card_purchases_monthly_amount, 0) AS card_purchases_monthly_amount,\n                  FORMAT_NUMBER(hometax_sales_monthly_invoice_amount, 0) AS hometax_sales_monthly_invoice_amount,\n                  FORMAT_NUMBER(hometax_sales_monthly_cash_amount, 0) AS hometax_sales_monthly_cash_amount,\n                  FORMAT_NUMBER(hometax_purchases_monthly_cash_amount, 0) AS hometax_purchases_monthly_cash_amount,\n                  FORMAT_NUMBER(hometax_purchases_monthly_invoice_amount, 0) AS hometax_purchases_monthly_invoice_amount,\n\n                  NVL(FORMAT_NUMBER(FLOOR(card_sales_amount / card_sales_count), 0), '0') AS card_sales_unit_price,\n                  NVL(FORMAT_NUMBER(ROUND(card_sales_new_amount / card_sales_amount * 100), 0), '0') AS card_sales_new_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(card_sales_returning_amount / card_sales_amount * 100), 0), '0') AS card_sales_returning_amount_percent,\n                  IF(card_sales_amount > 0, true, false) AS card_sales_amount_exists,\n\n                  FORMAT_NUMBER(hourly_sales_0_6_amount, 0) AS hourly_sales_0_6_amount,\n                  FORMAT_NUMBER(hourly_sales_6_11_amount, 0) AS hourly_sales_6_11_amount,\n                  FORMAT_NUMBER(hourly_sales_11_14_amount, 0) AS hourly_sales_11_14_amount,\n                  FORMAT_NUMBER(hourly_sales_14_17_amount, 0) AS hourly_sales_14_17_amount,\n                  FORMAT_NUMBER(hourly_sales_17_24_amount, 0) AS hourly_sales_17_24_amount,\n                  FORMAT_NUMBER(hourly_sales_etc_amount, 0) AS hourly_sales_etc_amount,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_0_6_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_0_6_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_6_11_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_6_11_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_11_14_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_11_14_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_14_17_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_14_17_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_17_24_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_17_24_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_etc_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_etc_amount_percent,\n                  IF(hourly_sales_etc_amount > 0, true, false) AS hourly_sales_etc_amount_exists,\n                  IF(hourly_sales_amount_sum > 0, true, false) AS hourly_sales_exists,\n\n                  FORMAT_NUMBER(delivery_app_sales_baemin_amount, 0) AS delivery_app_sales_baemin_amount,\n                  FORMAT_NUMBER(delivery_app_sales_yogiyo_amount, 0) AS delivery_app_sales_yogiyo_amount,\n                  FORMAT_NUMBER(delivery_app_sales_baedaltong_amount, 0) AS delivery_app_sales_baedaltong_amount,\n\n                  filter(today_payments_arr, d -> d.amount > 0) AS today_payments,\n                  aggregate(today_payments_arr, 0L, (acc, d) -> acc + d.amount) AS today_payments_sum_amount,\n\n                  future_payments_arr AS future_payments,\n                  aggregate(future_payments_arr, 0L, (acc, d) -> acc + d.amount) AS future_payments_sum_amount,\n\n                  slice(bank_accounts_arr, 1, 5) AS bank_accounts,\n                  IF(size(bank_accounts_arr) > 5, size(bank_accounts_arr) - 5, 0) AS bank_account_etc_count,\n\n                  slice(today_card_purchases_arr, 1, 5) AS today_card_purchases,\n                  IF(size(today_card_purchases_arr) > 5, size(today_card_purchases_arr) - 5, 0) AS today_card_purchases_etc_count,\n\n                  filter(delivery_app_sales_arr, d -> d.amount > 0) AS delivery_app_sales,\n\n                  (\n                      card_sales_monthly_amount +\n                      delivery_app_sales_monthly_amount +\n                      hometax_sales_monthly_invoice_amount +\n                      hometax_sales_monthly_cash_amount\n                  ) AS monthly_sales_sum,\n                  (\n                      card_purchases_monthly_amount +\n                      hometax_purchases_monthly_cash_amount +\n                      hometax_purchases_monthly_invoice_amount\n                  ) AS monthly_purchases_sum\n        FROM      merged\n)""}, 'role': 'process', 'type': 'sql'}]"
1013,process:::calc_additional_columns:::test_daily_reports,process:::with_businesses:::test_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT    *,\n          date_format('2021-01-01', 'M월') AS report_month,\n          date_format('2021-01-01', 'M월 d일') AS report_date,\n          dayofweek_kor('2021-01-01') AS report_day_of_week,\n          date_format('2021-01-02', 'M월 d일') AS today_date,\n          dayofweek_kor('2021-01-02') AS today_day_of_week,\n\n          IF(bank_account_etc_count > 0, true, false) AS bank_account_etc_exists,\n          IF(today_card_purchases_etc_count > 0, true, false) AS today_card_purchases_etc_exists,\n          IF(size(delivery_app_sales) > 0, true, false) AS delivery_app_sales_exists,\n          IF(size(today_payments) > 0, true, false) AS today_payments_exists,\n          IF(size(future_payments) > 0, true, false) AS future_payments_exists\nFROM (\n        SELECT    target_id, business_id, user_id, title, template_code, url_mobile,\n\n                  FORMAT_NUMBER(card_sales_amount, 0) AS card_sales_amount,\n                  FORMAT_NUMBER(card_sales_count, 0) AS card_sales_count,\n                  FORMAT_NUMBER(card_sales_fee, 0) AS card_sales_fee,\n                  FORMAT_NUMBER(card_sales_vat_fee, 0) AS card_sales_vat_fee,\n                  IF(card_sales_vat_fee > 0, true, false) AS card_sales_vat_fee_exists,\n                  FORMAT_NUMBER(card_sales_payment, 0) AS card_sales_payment,\n                  FORMAT_NUMBER(card_sales_new_amount, 0) AS card_sales_new_amount,\n                  FORMAT_NUMBER(card_sales_returning_amount, 0) AS card_sales_returning_amount,\n                  FORMAT_NUMBER(card_sales_monthly_amount, 0) AS card_sales_monthly_amount,\n                  FORMAT_NUMBER(delivery_app_sales_monthly_amount, 0) AS delivery_app_sales_monthly_amount,\n                  FORMAT_NUMBER(card_purchases_monthly_amount, 0) AS card_purchases_monthly_amount,\n                  FORMAT_NUMBER(hometax_sales_monthly_invoice_amount, 0) AS hometax_sales_monthly_invoice_amount,\n                  FORMAT_NUMBER(hometax_sales_monthly_cash_amount, 0) AS hometax_sales_monthly_cash_amount,\n                  FORMAT_NUMBER(hometax_purchases_monthly_cash_amount, 0) AS hometax_purchases_monthly_cash_amount,\n                  FORMAT_NUMBER(hometax_purchases_monthly_invoice_amount, 0) AS hometax_purchases_monthly_invoice_amount,\n\n                  NVL(FORMAT_NUMBER(FLOOR(card_sales_amount / card_sales_count), 0), '0') AS card_sales_unit_price,\n                  NVL(FORMAT_NUMBER(ROUND(card_sales_new_amount / card_sales_amount * 100), 0), '0') AS card_sales_new_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(card_sales_returning_amount / card_sales_amount * 100), 0), '0') AS card_sales_returning_amount_percent,\n                  IF(card_sales_amount > 0, true, false) AS card_sales_amount_exists,\n\n                  FORMAT_NUMBER(hourly_sales_0_6_amount, 0) AS hourly_sales_0_6_amount,\n                  FORMAT_NUMBER(hourly_sales_6_11_amount, 0) AS hourly_sales_6_11_amount,\n                  FORMAT_NUMBER(hourly_sales_11_14_amount, 0) AS hourly_sales_11_14_amount,\n                  FORMAT_NUMBER(hourly_sales_14_17_amount, 0) AS hourly_sales_14_17_amount,\n                  FORMAT_NUMBER(hourly_sales_17_24_amount, 0) AS hourly_sales_17_24_amount,\n                  FORMAT_NUMBER(hourly_sales_etc_amount, 0) AS hourly_sales_etc_amount,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_0_6_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_0_6_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_6_11_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_6_11_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_11_14_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_11_14_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_14_17_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_14_17_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_17_24_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_17_24_amount_percent,\n                  NVL(FORMAT_NUMBER(ROUND(hourly_sales_etc_amount / hourly_sales_amount_sum * 100), 0), '0') AS hourly_sales_etc_amount_percent,\n                  IF(hourly_sales_etc_amount > 0, true, false) AS hourly_sales_etc_amount_exists,\n                  IF(hourly_sales_amount_sum > 0, true, false) AS hourly_sales_exists,\n\n                  FORMAT_NUMBER(delivery_app_sales_baemin_amount, 0) AS delivery_app_sales_baemin_amount,\n                  FORMAT_NUMBER(delivery_app_sales_yogiyo_amount, 0) AS delivery_app_sales_yogiyo_amount,\n                  FORMAT_NUMBER(delivery_app_sales_baedaltong_amount, 0) AS delivery_app_sales_baedaltong_amount,\n\n                  filter(today_payments_arr, d -> d.amount > 0) AS today_payments,\n                  aggregate(today_payments_arr, 0L, (acc, d) -> acc + d.amount) AS today_payments_sum_amount,\n\n                  future_payments_arr AS future_payments,\n                  aggregate(future_payments_arr, 0L, (acc, d) -> acc + d.amount) AS future_payments_sum_amount,\n\n                  slice(bank_accounts_arr, 1, 5) AS bank_accounts,\n                  IF(size(bank_accounts_arr) > 5, size(bank_accounts_arr) - 5, 0) AS bank_account_etc_count,\n\n                  slice(today_card_purchases_arr, 1, 5) AS today_card_purchases,\n                  IF(size(today_card_purchases_arr) > 5, size(today_card_purchases_arr) - 5, 0) AS today_card_purchases_etc_count,\n\n                  filter(delivery_app_sales_arr, d -> d.amount > 0) AS delivery_app_sales,\n\n                  (\n                      card_sales_monthly_amount +\n                      delivery_app_sales_monthly_amount +\n                      hometax_sales_monthly_invoice_amount +\n                      hometax_sales_monthly_cash_amount\n                  ) AS monthly_sales_sum,\n                  (\n                      card_purchases_monthly_amount +\n                      hometax_purchases_monthly_cash_amount +\n                      hometax_purchases_monthly_invoice_amount\n                  ) AS monthly_purchases_sum\n        FROM      merged\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    calc_additional_columns.*,\n                  b.*,\n                  IF(c.confirmed, 'daily_reports', 'daily_reports_wo_crefia') AS report_name\n        FROM      calc_additional_columns\n        LEFT OUTER JOIN   businesses_info AS b\n        ON        calc_additional_columns.business_id = b.id\n        LEFT OUTER JOIN   crefia_credential AS c\n        ON        calc_additional_columns.business_id = c.business_id\n) r\nCROSS JOIN outdated_issuers""}, 'role': 'process', 'type': 'sql'}]"
1014,process:::with_businesses:::test_daily_reports,s3://kcd-de-staging/service/message/reports/user_type=cashnote/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'test_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    calc_additional_columns.*,\n                  b.*,\n                  IF(c.confirmed, 'daily_reports', 'daily_reports_wo_crefia') AS report_name\n        FROM      calc_additional_columns\n        LEFT OUTER JOIN   businesses_info AS b\n        ON        calc_additional_columns.business_id = b.id\n        LEFT OUTER JOIN   crefia_credential AS c\n        ON        calc_additional_columns.business_id = c.business_id\n) r\nCROSS JOIN outdated_issuers""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'test_daily_reports.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/service/message/reports/user_type=cashnote/date_id=2021-01-02', 'format': 'json', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'report_name'}, 'role': 'sink', 'type': 'custom'}]"
1015,s3://kcd-de-production/raw/db/goose/incremental/access_logs,process:::latest_ids:::get_latest_ids_goose,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/access_logs'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/access_logs', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'get_latest_ids_goose.json', 'options': {'sql': ""  SELECT  'card_payments' AS table, max(id) AS latest_id\n  FROM    card_payments\n  WHERE   created_at > (SELECT max(created_at_date) FROM card_payments)\n\n  UNION ALL\n\n  SELECT  'access_logs' AS table, max(id) AS latest_id\n  FROM    access_logs\n  WHERE   created_at > (SELECT max(created_at_date) FROM access_logs)\n\n  UNION ALL\n\n  SELECT  'user_events' AS table, max(id) AS latest_id\n  FROM    user_events\n  WHERE   created_at > (SELECT max(created_at_date) FROM user_events)""}, 'role': 'process', 'type': 'sql'}]"
1016,s3://kcd-de-production/raw/db/goose/incremental/user_events,process:::latest_ids:::get_latest_ids_goose,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/user_events'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/user_events', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'get_latest_ids_goose.json', 'options': {'sql': ""  SELECT  'card_payments' AS table, max(id) AS latest_id\n  FROM    card_payments\n  WHERE   created_at > (SELECT max(created_at_date) FROM card_payments)\n\n  UNION ALL\n\n  SELECT  'access_logs' AS table, max(id) AS latest_id\n  FROM    access_logs\n  WHERE   created_at > (SELECT max(created_at_date) FROM access_logs)\n\n  UNION ALL\n\n  SELECT  'user_events' AS table, max(id) AS latest_id\n  FROM    user_events\n  WHERE   created_at > (SELECT max(created_at_date) FROM user_events)""}, 'role': 'process', 'type': 'sql'}]"
1017,process:::latest_ids:::get_latest_ids_goose,s3://kcd-de-production/misc/db_dump/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'get_latest_ids_goose.json', 'options': {'sql': ""  SELECT  'card_payments' AS table, max(id) AS latest_id\n  FROM    card_payments\n  WHERE   created_at > (SELECT max(created_at_date) FROM card_payments)\n\n  UNION ALL\n\n  SELECT  'access_logs' AS table, max(id) AS latest_id\n  FROM    access_logs\n  WHERE   created_at > (SELECT max(created_at_date) FROM access_logs)\n\n  UNION ALL\n\n  SELECT  'user_events' AS table, max(id) AS latest_id\n  FROM    user_events\n  WHERE   created_at > (SELECT max(created_at_date) FROM user_events)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'get_latest_ids_goose.json', 'options': {'format': 'json', 'mode': 'overwrite', 'path': 's3://kcd-de-production/misc/db_dump/dump_latest_ids_goose', 'numPartitions': '1'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'json', 'mode': 'overwrite', 'path': 's3://kcd-de-production/misc/db_dump/dump_latest_ids_snowdon', 'numPartitions': '1'}, 'role': 'sink', 'type': 'file'}]"
1018,jdbc:campaign,process:::meta:::message_stat_init,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'campaign', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'campaign', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'campaign', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}]"
1019,jdbc:campaign,process:::meta:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat_with_meta.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'campaign', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'campaign', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'message_stat_init.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'campaign', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}]"
1020,process:::meta:::message_stat_init,process:::current_stat:::message_stat_init,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat_with_meta.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}]"
1021,process:::send_log_by_status:::message_stat_init,process:::send_log_aggr:::message_stat_init,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat_with_meta.json', 'options': {'sql': ""SELECT id_type, id, campaign_id, ad_group_id, creative_id, status,\n        min(timestamp) AS min_ts, max(timestamp) AS max_ts,\n        count(1) AS send_cnt,\n        count(distinct(user_id)) AS send_user_cnt\nFROM (\n    SELECT meta.*, status, user_id, timestamp\n    FROM (\n        SELECT  explode(meta_arr) AS meta, status, user_id, timestamp\n        FROM (\n                SELECT  array(\n                            named_struct('id_type', 'campaign_id', 'id', campaign_id, 'campaign_id', campaign_id, 'ad_group_id', 'n/a', 'creative_id', 'n/a'),\n                            named_struct('id_type', 'ad_group_id', 'id', ad_group_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', 'n/a'),\n                            named_struct('id_type', 'creative_id', 'id', creative_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', creative_id)\n                        ) AS meta_arr,\n                        status, user_id, timestamp,\n                        row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n                FROM send_log\n                WHERE created_at_date between '2020-01-01' AND '2021-01-14'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id, campaign_id, ad_group_id, creative_id, status""}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': ""SELECT id_type, id, campaign_id, ad_group_id, creative_id, status,\n        min(timestamp) AS min_ts, max(timestamp) AS max_ts,\n        count(1) AS send_cnt,\n        count(distinct(user_id)) AS send_user_cnt\nFROM (\n    SELECT meta.*, status, user_id, timestamp\n    FROM (\n        SELECT  explode(meta_arr) AS meta, status, user_id, timestamp\n        FROM (\n                SELECT  array(\n                            named_struct('id_type', 'campaign_id', 'id', campaign_id, 'campaign_id', campaign_id, 'ad_group_id', 'n/a', 'creative_id', 'n/a'),\n                            named_struct('id_type', 'ad_group_id', 'id', ad_group_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', 'n/a'),\n                            named_struct('id_type', 'creative_id', 'id', creative_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', creative_id)\n                        ) AS meta_arr,\n                        status, user_id, timestamp,\n                        row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n                FROM send_log\n                WHERE created_at_date between '2020-01-01' AND '2021-01-16'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id, campaign_id, ad_group_id, creative_id, status""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'sql': 'SELECT\n        id_type, id, campaign_id, ad_group_id, creative_id,\n        IF(success_min_ts < fail_min_ts, success_min_ts, fail_min_ts) AS min_ts,\n        IF(success_max_ts > fail_max_ts, success_max_ts, fail_max_ts) AS max_ts,\n        success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt\nFROM (\n    SELECT\n            nvl(success_log.id_type, fail_log.id_type) AS id_type,\n            nvl(success_log.id, fail_log.id) AS id,\n            nvl(success_log.campaign_id, fail_log.campaign_id) AS campaign_id,\n            nvl(success_log.ad_group_id, fail_log.ad_group_id) AS ad_group_id,\n            nvl(success_log.creative_id, fail_log.creative_id) AS creative_id,\n            nvl(fail_log.min_ts, unix_timestamp()* 1000) AS fail_min_ts,\n            nvl(success_log.min_ts, unix_timestamp()* 1000) AS success_min_ts,\n            nvl(fail_log.max_ts, 0L) AS fail_max_ts,\n            nvl(success_log.max_ts, 0L) AS success_max_ts,\n            nvl(success_log.send_cnt, 0L) AS success_send_cnt,\n            nvl(success_log.send_user_cnt, 0L) AS success_send_user_cnt,\n            nvl(fail_log.send_cnt, 0L) AS fail_send_cnt,\n            nvl(fail_log.send_user_cnt, 0L) AS fail_send_user_cnt\n    FROM (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = true\n    ) AS success_log\n    FULL OUTER JOIN\n    (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = false\n    ) AS fail_log\n    ON success_log.id_type = fail_log.id_type\n    AND success_log.id = fail_log.id\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': 'SELECT\n        id_type, id, campaign_id, ad_group_id, creative_id,\n        IF(success_min_ts < fail_min_ts, success_min_ts, fail_min_ts) AS min_ts,\n        IF(success_max_ts > fail_max_ts, success_max_ts, fail_max_ts) AS max_ts,\n        success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt\nFROM (\n    SELECT\n            nvl(success_log.id_type, fail_log.id_type) AS id_type,\n            nvl(success_log.id, fail_log.id) AS id,\n            nvl(success_log.campaign_id, fail_log.campaign_id) AS campaign_id,\n            nvl(success_log.ad_group_id, fail_log.ad_group_id) AS ad_group_id,\n            nvl(success_log.creative_id, fail_log.creative_id) AS creative_id,\n            nvl(fail_log.min_ts, unix_timestamp()* 1000) AS fail_min_ts,\n            nvl(success_log.min_ts, unix_timestamp()* 1000) AS success_min_ts,\n            nvl(fail_log.max_ts, 0L) AS fail_max_ts,\n            nvl(success_log.max_ts, 0L) AS success_max_ts,\n            nvl(success_log.send_cnt, 0L) AS success_send_cnt,\n            nvl(success_log.send_user_cnt, 0L) AS success_send_user_cnt,\n            nvl(fail_log.send_cnt, 0L) AS fail_send_cnt,\n            nvl(fail_log.send_user_cnt, 0L) AS fail_send_user_cnt\n    FROM (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = true\n    ) AS success_log\n    FULL OUTER JOIN\n    (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = false\n    ) AS fail_log\n    ON success_log.id_type = fail_log.id_type\n    AND success_log.id = fail_log.id\n)'}, 'role': 'process', 'type': 'sql'}]"
1022,process:::send_log_aggr:::message_stat_init,process:::current_stat:::message_stat_init,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat_with_meta.json', 'options': {'sql': 'SELECT\n        id_type, id, campaign_id, ad_group_id, creative_id,\n        IF(success_min_ts < fail_min_ts, success_min_ts, fail_min_ts) AS min_ts,\n        IF(success_max_ts > fail_max_ts, success_max_ts, fail_max_ts) AS max_ts,\n        success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt\nFROM (\n    SELECT\n            nvl(success_log.id_type, fail_log.id_type) AS id_type,\n            nvl(success_log.id, fail_log.id) AS id,\n            nvl(success_log.campaign_id, fail_log.campaign_id) AS campaign_id,\n            nvl(success_log.ad_group_id, fail_log.ad_group_id) AS ad_group_id,\n            nvl(success_log.creative_id, fail_log.creative_id) AS creative_id,\n            nvl(fail_log.min_ts, unix_timestamp()* 1000) AS fail_min_ts,\n            nvl(success_log.min_ts, unix_timestamp()* 1000) AS success_min_ts,\n            nvl(fail_log.max_ts, 0L) AS fail_max_ts,\n            nvl(success_log.max_ts, 0L) AS success_max_ts,\n            nvl(success_log.send_cnt, 0L) AS success_send_cnt,\n            nvl(success_log.send_user_cnt, 0L) AS success_send_user_cnt,\n            nvl(fail_log.send_cnt, 0L) AS fail_send_cnt,\n            nvl(fail_log.send_user_cnt, 0L) AS fail_send_user_cnt\n    FROM (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = true\n    ) AS success_log\n    FULL OUTER JOIN\n    (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = false\n    ) AS fail_log\n    ON success_log.id_type = fail_log.id_type\n    AND success_log.id = fail_log.id\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': 'SELECT\n        id_type, id, campaign_id, ad_group_id, creative_id,\n        IF(success_min_ts < fail_min_ts, success_min_ts, fail_min_ts) AS min_ts,\n        IF(success_max_ts > fail_max_ts, success_max_ts, fail_max_ts) AS max_ts,\n        success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt\nFROM (\n    SELECT\n            nvl(success_log.id_type, fail_log.id_type) AS id_type,\n            nvl(success_log.id, fail_log.id) AS id,\n            nvl(success_log.campaign_id, fail_log.campaign_id) AS campaign_id,\n            nvl(success_log.ad_group_id, fail_log.ad_group_id) AS ad_group_id,\n            nvl(success_log.creative_id, fail_log.creative_id) AS creative_id,\n            nvl(fail_log.min_ts, unix_timestamp()* 1000) AS fail_min_ts,\n            nvl(success_log.min_ts, unix_timestamp()* 1000) AS success_min_ts,\n            nvl(fail_log.max_ts, 0L) AS fail_max_ts,\n            nvl(success_log.max_ts, 0L) AS success_max_ts,\n            nvl(success_log.send_cnt, 0L) AS success_send_cnt,\n            nvl(success_log.send_user_cnt, 0L) AS success_send_user_cnt,\n            nvl(fail_log.send_cnt, 0L) AS fail_send_cnt,\n            nvl(fail_log.send_user_cnt, 0L) AS fail_send_user_cnt\n    FROM (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = true\n    ) AS success_log\n    FULL OUTER JOIN\n    (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = false\n    ) AS fail_log\n    ON success_log.id_type = fail_log.id_type\n    AND success_log.id = fail_log.id\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}]"
1023,process:::click_log_aggr:::message_stat_init,process:::current_stat:::message_stat_init,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat_with_meta.json', 'options': {'sql': ""SELECT  id_type, id,\n        count(1) AS click_cnt,\n        count(distinct(user_id)) AS click_user_cnt\nFROM (\n    SELECT meta.*, user_id\n    FROM (\n        SELECT  explode(meta_arr) AS meta, user_id\n        FROM (\n            SELECT  array(\n                        named_struct('id_type', 'campaign_id', 'id', campaign_id),\n                        named_struct('id_type', 'ad_group_id', 'id', ad_group_id),\n                        named_struct('id_type', 'creative_id', 'id', creative_id)\n                    ) AS meta_arr,\n                    user_id,\n                    row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n            FROM click_log\n            WHERE created_at_date between '2020-01-01' AND '2021-01-14'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': ""SELECT  id_type, id,\n        count(1) AS click_cnt,\n        count(distinct(user_id)) AS click_user_cnt\nFROM (\n    SELECT meta.*, user_id\n    FROM (\n        SELECT  explode(meta_arr) AS meta, user_id\n        FROM (\n            SELECT  array(\n                        named_struct('id_type', 'campaign_id', 'id', campaign_id),\n                        named_struct('id_type', 'ad_group_id', 'id', ad_group_id),\n                        named_struct('id_type', 'creative_id', 'id', creative_id)\n                    ) AS meta_arr,\n                    user_id,\n                    row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n            FROM click_log\n            WHERE created_at_date between '2020-01-01' AND '2021-01-16'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}]"
1024,process:::current_stat:::message_stat_init,process:::calc_stat:::message_stat_init,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat_with_meta.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'message_stat_init.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'sql': ""SELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT  *,\n                floor(diff_seconds / 3600) AS hours,\n                floor((diff_seconds % 3600) / 60) AS minutes,\n                floor(diff_seconds % 60) AS seconds\n        FROM (\n            SELECT *,\n                    date_format(from_utc_timestamp(from_unixtime(min_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS start_time,\n                    date_format(from_utc_timestamp(from_unixtime(max_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS end_time,\n                    ((max_ts - min_ts) / 1000) AS diff_seconds,\n                    CAST(FORMAT_NUMBER(nvl(fail_send_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS send_fail_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS click_count_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_user_cnt / success_send_user_cnt * 100, 0), '########.##') AS DOUBLE) AS click_user_rate\n            FROM   current_stat\n        )\n)""}, 'role': 'process', 'type': None}, {'filename': 'message_stat_init.json', 'options': {'sql': ""SELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT  *,\n                floor(diff_seconds / 3600) AS hours,\n                floor((diff_seconds % 3600) / 60) AS minutes,\n                floor(diff_seconds % 60) AS seconds\n        FROM (\n            SELECT *,\n                    date_format(from_utc_timestamp(from_unixtime(min_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS start_time,\n                    date_format(from_utc_timestamp(from_unixtime(max_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS end_time,\n                    ((max_ts - min_ts) / 1000) AS diff_seconds,\n                    CAST(FORMAT_NUMBER(nvl(fail_send_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS send_fail_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS click_count_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_user_cnt / success_send_user_cnt * 100, 0), '########.##') AS DOUBLE) AS click_user_rate\n            FROM   current_stat\n        )\n)""}, 'role': 'process', 'type': 'sql'}]"
1025,process:::calc_stat:::message_stat_init,s3://kcd-de-production/service/message/message_stats/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat_with_meta.json', 'options': {'sql': ""SELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT  *,\n                floor(diff_seconds / 3600) AS hours,\n                floor((diff_seconds % 3600) / 60) AS minutes,\n                floor(diff_seconds % 60) AS seconds\n        FROM (\n            SELECT *,\n                    date_format(from_utc_timestamp(from_unixtime(min_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS start_time,\n                    date_format(from_utc_timestamp(from_unixtime(max_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS end_time,\n                    ((max_ts - min_ts) / 1000) AS diff_seconds,\n                    CAST(FORMAT_NUMBER(nvl(fail_send_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS send_fail_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS click_count_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_user_cnt / success_send_user_cnt * 100, 0), '########.##') AS DOUBLE) AS click_user_rate\n            FROM   current_stat\n        )\n)""}, 'role': 'process', 'type': None}, {'filename': 'message_stat_init.json', 'options': {'sql': ""SELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT  *,\n                floor(diff_seconds / 3600) AS hours,\n                floor((diff_seconds % 3600) / 60) AS minutes,\n                floor(diff_seconds % 60) AS seconds\n        FROM (\n            SELECT *,\n                    date_format(from_utc_timestamp(from_unixtime(min_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS start_time,\n                    date_format(from_utc_timestamp(from_unixtime(max_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS end_time,\n                    ((max_ts - min_ts) / 1000) AS diff_seconds,\n                    CAST(FORMAT_NUMBER(nvl(fail_send_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS send_fail_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS click_count_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_user_cnt / success_send_user_cnt * 100, 0), '########.##') AS DOUBLE) AS click_user_rate\n            FROM   current_stat\n        )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-14', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-29', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'message_stat_init.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-16', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}]"
1026,s3://kcd-de-production/service/message/message_stats/,process:::merged_stat:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat_with_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-14', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-29', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'message_stat_init.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-16', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'message_stat.json', 'options': {'sql': 'SELECT    current.id,\n          current.id_type,\n          nvl(current.campaign_id, prev.campaign_id) AS campaign_id,\n          nvl(current.ad_group_id, prev.ad_group_id) AS ad_group_id,\n          nvl(current.creative_id, prev.creative_id) AS creative_id,\n          nvl(prev.min_ts, current.min_ts) AS min_ts,\n          nvl(current.max_ts, prev.max_ts) AS max_ts,\n          (nvl(current.success_send_cnt, 0) + nvl(prev.success_send_cnt, 0)) AS success_send_cnt,\n          (nvl(current.success_send_user_cnt, 0) + nvl(prev.success_send_user_cnt, 0)) AS success_send_user_cnt,\n          (nvl(current.fail_send_cnt, 0) + nvl(prev.fail_send_cnt, 0)) AS fail_send_cnt,\n          (nvl(current.fail_send_user_cnt, 0) + nvl(prev.fail_send_user_cnt, 0)) AS fail_send_user_cnt,\n          (nvl(current.click_cnt, 0) + nvl(prev.click_cnt, 0)) AS click_cnt,\n          (nvl(current.click_user_cnt, 0) + nvl(prev.click_user_cnt, 0)) AS click_user_cnt,\n          current.name, current.type, current.population\nFROM      current_stat AS current\nLEFT OUTER JOIN  prev_stat AS prev\nON    current.id_type = prev.id_type\nAND   current.id = prev.id'}, 'role': 'process', 'type': 'sql'}]"
1027,s3://kcd-de-production/service/message/message_stats/,process:::calc_stat:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat_with_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-14', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-29', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'message_stat_init.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-16', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT  *,\n                floor(diff_seconds / 3600) AS hours,\n                floor((diff_seconds % 3600) / 60) AS minutes,\n                floor(diff_seconds % 60) AS seconds\n        FROM (\n            SELECT *,\n                    date_format(from_utc_timestamp(from_unixtime(min_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS start_time,\n                    date_format(from_utc_timestamp(from_unixtime(max_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS end_time,\n                    ((max_ts - min_ts) / 1000) AS diff_seconds,\n                    CAST(FORMAT_NUMBER(nvl(fail_send_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS send_fail_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS click_count_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_user_cnt / success_send_user_cnt * 100, 0), '########.##') AS DOUBLE) AS click_user_rate\n            FROM   merged_stat\n        )\n)\n\nUNION ALL\n\nSELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT\n                  prev.*\n        FROM prev_stat AS prev\n        LEFT OUTER JOIN   current_stat AS current\n        ON    current.id_type = prev.id_type\n        AND   current.id = prev.id\n        WHERE current.id is null\n)""}, 'role': 'process', 'type': 'sql'}]"
1028,s3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments,process:::baemin_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  adjustment_amounts,\n        advertise_fee,\n        created_at,\n        cycle,\n        deduction_amount,\n        delivery_tip,\n        delivery_tip_discount,\n        deposited_at,\n        fee_deduction,\n        order_amount,\n        period_ended_at,\n        period_started_at,\n        rate_fee,\n        received_amount,\n        reward_amount,\n        service_fee_amounts,\n        settle_code,\n        shop_id,\n        status,\n        transaction_amounts,\n        updated_at,\n        vat\nFROM    baemin_payments_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}]"
1029,s3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1030,s3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments,process:::yogiyo_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  certification_fee,\n        contract_type,\n        created_at,\n        delivery_tip,\n        deposited_at,\n        monthly_fee,\n        offline_amount,\n        order_amount,\n        payment_number,\n        period_ended_at,\n        period_started_at,\n        rate_fee,\n        received_amount,\n        reserved_amount,\n        shop_discount,\n        shop_id,\n        terminal_fee,\n        transaction_fee,\n        unpaid_amount,\n        updated_at,\n        vat\nFROM    yogiyo_payments_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}]"
1031,s3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1032,s3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments,process:::baedaltong_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  created_at,\n        deposited_at,\n        offline_canceled_amount,\n        offline_fee,\n        offline_order_amount,\n        offline_received_amount,\n        offline_vat,\n        online_canceled_amount,\n        online_fee,\n        online_order_amount,\n        online_received_amount,\n        online_vat,\n        period_ended_at,\n        period_started_at,\n        previous_reserved_amount,\n        received_amount,\n        reserved_amount,\n        shop_id,\n        updated_at\nFROM    baedaltong_payments_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}]"
1033,s3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1034,process:::baemin_payments:::build_delivery_app_payments,process:::merged_baemin_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  adjustment_amounts,\n        advertise_fee,\n        created_at,\n        cycle,\n        deduction_amount,\n        delivery_tip,\n        delivery_tip_discount,\n        deposited_at,\n        fee_deduction,\n        order_amount,\n        period_ended_at,\n        period_started_at,\n        rate_fee,\n        received_amount,\n        reward_amount,\n        service_fee_amounts,\n        settle_code,\n        shop_id,\n        status,\n        transaction_amounts,\n        updated_at,\n        vat\nFROM    baemin_payments_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baemin' AS app_name\nFROM    (\n    SELECT  *,\n            row_number() OVER (\n                PARTITION BY shop_id, deposited_at, period_started_at, period_ended_at, settle_code\n                ORDER BY status_seq DESC\n            ) AS status_rank\n    FROM    (\n        SELECT *,\n               CASE\n                WHEN status = 'COMPLETE' THEN 2\n                WHEN status = 'REQUEST' THEN 1\n                WHEN status = 'PLAN' THEN 0\n                ELSE 0\n               END AS status_seq\n        FROM   baemin_payments_unique\n        WHERE  received_amount > 0\n    )\n) s, delivery_apps a\nWHERE   status_rank = 1\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baemin' AS app_name\nFROM    (\n    SELECT  *,\n            row_number() OVER (\n                PARTITION BY shop_id, deposited_at, period_started_at, period_ended_at, settle_code\n                ORDER BY status_seq DESC\n            ) AS status_rank\n    FROM    (\n        SELECT *,\n               CASE\n                WHEN status = 'COMPLETE' THEN 2\n                WHEN status = 'REQUEST' THEN 1\n                WHEN status = 'PLAN' THEN 0\n                ELSE 0\n               END AS status_seq\n        FROM   baemin_payments\n        WHERE  received_amount > 0\n    )\n) s, delivery_apps a\nWHERE   status_rank = 1\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
1035,process:::yogiyo_payments:::build_delivery_app_payments,process:::merged_yogiyo_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  certification_fee,\n        contract_type,\n        created_at,\n        delivery_tip,\n        deposited_at,\n        monthly_fee,\n        offline_amount,\n        order_amount,\n        payment_number,\n        period_ended_at,\n        period_started_at,\n        rate_fee,\n        received_amount,\n        reserved_amount,\n        shop_discount,\n        shop_id,\n        terminal_fee,\n        transaction_fee,\n        unpaid_amount,\n        updated_at,\n        vat\nFROM    yogiyo_payments_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'yogiyo' AS app_name\nFROM    yogiyo_payments_unique s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'yogiyo' AS app_name\nFROM    yogiyo_payments s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
1036,process:::baedaltong_payments:::build_delivery_app_payments,process:::merged_baedaltong_payments:::build_delivery_app_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  created_at,\n        deposited_at,\n        offline_canceled_amount,\n        offline_fee,\n        offline_order_amount,\n        offline_received_amount,\n        offline_vat,\n        online_canceled_amount,\n        online_fee,\n        online_order_amount,\n        online_received_amount,\n        online_vat,\n        period_ended_at,\n        period_started_at,\n        previous_reserved_amount,\n        received_amount,\n        reserved_amount,\n        shop_id,\n        updated_at\nFROM    baedaltong_payments_src\nWHERE   created_at_date >= '2000-01-01'\nAND     created_at_date < '2200-01-01'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baedaltong' AS app_name\nFROM    baedaltong_payments_unique s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'initial_build_delivery_app_payments.json', 'options': {'sql': ""SELECT  a.business_id,\n        s.*,\n        'baedaltong' AS app_name\nFROM    baedaltong_payments s, delivery_apps a\nWHERE   received_amount > 0\nAND     s.shop_id = a.id""}, 'role': 'process', 'type': 'sql'}]"
1037,s3://kcd-de-staging/raw/catalog_v2/raw/tb=paygcrew_Receipt,process:::parsed:::parse_receipt,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'parse_receipt.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-staging/raw/catalog_v2/raw/tb=paygcrew_Receipt'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'parse_receipt.json', 'options': {'sql': ""SELECT    timestamp, business_id, client_id, name AS origin_name, custom_name, pos_x, pos_y, privacy_safe_address, receipt, created_at_date,\n          pos_receipt.*\n\nFROM (\n        SELECT    *,\n                  parse_receipt(receipt, name) AS pos_receipt\n        FROM (\n                SELECT    timestamp, business_id, client_id, name, custom_name, pos_x, pos_y, privacy_safe_address, receipt, created_at_date,\n                          row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n                FROM      receipt_raw\n                WHERE     created_at_date between '2020-12-07' AND '2020-12-07'\n                AND       masked != true\n        )\n        WHERE rank = 1\n)""}, 'role': 'process', 'type': 'sql'}]"
1038,process:::parsed:::parse_receipt,s3://kcd-de-staging/raw/etl/pos/receipt,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'parse_receipt.json', 'options': {'sql': ""SELECT    timestamp, business_id, client_id, name AS origin_name, custom_name, pos_x, pos_y, privacy_safe_address, receipt, created_at_date,\n          pos_receipt.*\n\nFROM (\n        SELECT    *,\n                  parse_receipt(receipt, name) AS pos_receipt\n        FROM (\n                SELECT    timestamp, business_id, client_id, name, custom_name, pos_x, pos_y, privacy_safe_address, receipt, created_at_date,\n                          row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n                FROM      receipt_raw\n                WHERE     created_at_date between '2020-12-07' AND '2020-12-07'\n                AND       masked != true\n        )\n        WHERE rank = 1\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_receipt_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/raw/etl/pos/receipt'}, 'role': 'source', 'type': 'file'}, {'filename': 'parse_receipt.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/pos/receipt', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}]"
1039,s3://kcd-data/place_table/place_indexes,process:::place_indexes_union_distinct:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_indexes', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_indexes'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT\n       *\n   FROM\n        (SELECT\n            row_number() OVER (PARTITION BY registration_number, merchant_number, issuer ORDER BY _scrap_id DESC) AS rownum,\n            *\n        FROM\n          (SELECT\n              timestamp,\n              _scrap_id,\n              place_uid,\n              place_type,\n              registration_number,\n              merchant_number,\n              issuer\n          FROM\n              place_indexes\n\n          UNION ALL\n\n          SELECT\n              timestamp,\n              _scrap_id,\n              place_uid,\n              place_type,\n              registration_number,\n              merchant_number,\n              issuer\n          FROM\n              place_indexes_snapshot\n          )\n        )\n   WHERE rownum = 1'}, 'role': 'process', 'type': 'sql'}]"
1040,s3://kcd-data/place_table/place_indexes,process:::place_indexes_graph_format:::place_table_graph_format,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_indexes', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_indexes'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_graph_format.json', 'options': {'sql': ""    SELECT\n        timestamp,\n        registration_number AS from,\n        concat(place_uid, '_', place_type) AS to,\n        'place_indexes' as label,\n        to_json(\n           struct(\n               issuer,\n               merchant_number,\n               place_uid,\n               place_type,\n               registration_number\n           )\n        ) AS props\n    FROM\n        place_indexes""}, 'role': 'process', 'type': 'sql'}]"
1041,s3://kcd-data/place_table/place_info,process:::place_info_union_distinct:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_info', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_info'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': '    SELECT\n       *\n    FROM\n        (SELECT\n            row_number() OVER (PARTITION BY place_uid, place_type ORDER BY _scrap_id DESC) AS rownum,\n            *\n         FROM\n            (SELECT\n                 timestamp,\n                 place_uid,\n                 place_type,\n                 name,\n                 classification,\n                 street_address,\n                 lot_address,\n                 phone_number,\n                 latitude,\n                 longitude,\n                 description,\n                 images,\n                 _scrap_id\n             FROM\n                 place_info\n\n             UNION ALL\n\n             SELECT\n                 timestamp,\n                 place_uid,\n                 place_type,\n                 name,\n                 classification,\n                 street_address,\n                 lot_address,\n                 phone_number,\n                 latitude,\n                 longitude,\n                 description,\n                 images,\n                 _scrap_id\n             FROM\n                 place_info_snapshot\n            )\n        )\n    WHERE\n        rownum = 1'}, 'role': 'process', 'type': 'sql'}]"
1042,s3://kcd-data/place_table/place_info,process:::place_info_graph_format:::place_table_graph_format,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_info', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_info'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_graph_format.json', 'options': {'sql': ""    SELECT\n        timestamp,\n        concat(place_uid, '_', place_type) AS from,\n        concat(place_uid, '_', place_type) AS to,\n        'place_info' as label,\n        to_json(struct(\n            classification,\n            images,\n            latitude,\n            longitude,\n            lot_address,\n            phone_number,\n            place_uid,\n            street_address,\n            nvl(review_count, 0) AS review_count,\n            avg_review_rating,\n            registration_number,\n            name\n        )) AS props\n    FROM\n        place_info""}, 'role': 'process', 'type': 'sql'}]"
1043,s3://kcd-data/place_table/place_menus,process:::place_menus_union_distinct:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_menus', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_menus'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT B.* FROM\n       (SELECT\n           place_uid,\n           place_type,\n           max(_scrap_id) as max_scrap_id\n       FROM\n           (SELECT\n               timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus\n\n            UNION ALL\n\n            SELECT\n               timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus_snapshot\n           )\n       GROUP BY\n           place_uid, place_type\n       ) A INNER JOIN\n           (SELECT\n               timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus\n\n            UNION ALL\n\n            SELECT\n                timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus_snapshot\n           ) B\n           ON   A.place_uid = B.place_uid\n           AND  A.place_type = B.place_type\n           AND  A.max_scrap_id = B._scrap_id'}, 'role': 'process', 'type': 'sql'}]"
1044,s3://kcd-data/place_table/place_menus,process:::place_menus_graph_format:::place_table_graph_format,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_menus', 'skip_tx': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/place_table/latest/place_menus'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_graph_format.json', 'options': {'sql': ""     SELECT\n         timestamp,\n         concat(place_uid, '_', place_type) AS from,\n         java_method('java.util.UUID', 'randomUUID') AS to,\n         'place_menus' as label,\n         to_json(struct(\n             description,\n             image,\n             name,\n             place_type,\n             place_uid,\n             price,\n             priority\n         )) AS props\n     FROM\n         place_menus""}, 'role': 'process', 'type': 'sql'}]"
1045,s3://kcd-data/raw/catalog_v2/raw/tb=owl_api_place_indexes,process:::place_indexes_union_distinct:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=owl_api_place_indexes', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT\n       *\n   FROM\n        (SELECT\n            row_number() OVER (PARTITION BY registration_number, merchant_number, issuer ORDER BY _scrap_id DESC) AS rownum,\n            *\n        FROM\n          (SELECT\n              timestamp,\n              _scrap_id,\n              place_uid,\n              place_type,\n              registration_number,\n              merchant_number,\n              issuer\n          FROM\n              place_indexes\n\n          UNION ALL\n\n          SELECT\n              timestamp,\n              _scrap_id,\n              place_uid,\n              place_type,\n              registration_number,\n              merchant_number,\n              issuer\n          FROM\n              place_indexes_snapshot\n          )\n        )\n   WHERE rownum = 1'}, 'role': 'process', 'type': 'sql'}]"
1046,s3://kcd-data/raw/catalog_v2/raw/tb=owl_api_places,process:::place_info_union_distinct:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=owl_api_places', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': '    SELECT\n       *\n    FROM\n        (SELECT\n            row_number() OVER (PARTITION BY place_uid, place_type ORDER BY _scrap_id DESC) AS rownum,\n            *\n         FROM\n            (SELECT\n                 timestamp,\n                 place_uid,\n                 place_type,\n                 name,\n                 classification,\n                 street_address,\n                 lot_address,\n                 phone_number,\n                 latitude,\n                 longitude,\n                 description,\n                 images,\n                 _scrap_id\n             FROM\n                 place_info\n\n             UNION ALL\n\n             SELECT\n                 timestamp,\n                 place_uid,\n                 place_type,\n                 name,\n                 classification,\n                 street_address,\n                 lot_address,\n                 phone_number,\n                 latitude,\n                 longitude,\n                 description,\n                 images,\n                 _scrap_id\n             FROM\n                 place_info_snapshot\n            )\n        )\n    WHERE\n        rownum = 1'}, 'role': 'process', 'type': 'sql'}]"
1047,s3://kcd-data/raw/catalog_v2/raw/tb=owl_api_place_menus,process:::place_menus_union_distinct:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=owl_api_place_menus', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT B.* FROM\n       (SELECT\n           place_uid,\n           place_type,\n           max(_scrap_id) as max_scrap_id\n       FROM\n           (SELECT\n               timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus\n\n            UNION ALL\n\n            SELECT\n               timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus_snapshot\n           )\n       GROUP BY\n           place_uid, place_type\n       ) A INNER JOIN\n           (SELECT\n               timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus\n\n            UNION ALL\n\n            SELECT\n                timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus_snapshot\n           ) B\n           ON   A.place_uid = B.place_uid\n           AND  A.place_type = B.place_type\n           AND  A.max_scrap_id = B._scrap_id'}, 'role': 'process', 'type': 'sql'}]"
1048,s3://kcd-data/raw/catalog_v2/raw/tb=owl_api_place_reviews,process:::place_reviews_union_distinct:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=owl_api_place_reviews', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        (SELECT\n            *,\n            row_number() OVER (PARTITION BY place_uid, place_type, unique_key, review_type ORDER BY _scrap_id DESC) AS rownum\n        FROM\n            (SELECT\n               CASE WHEN url IS null OR trim(url) = '' THEN review_id ELSE url END as unique_key,\n               *\n             FROM\n               (SELECT\n                   timestamp,\n                   place_uid,\n                   place_type,\n                   review_type,\n                   review_id,\n                   author,\n                   title,\n                   contents,\n                   url,\n                   image,\n                   rating,\n                   written_at,\n                   _scrap_id\n                FROM place_reviews\n\n                UNION ALl\n\n                SELECT\n                   timestamp,\n                   place_uid,\n                   place_type,\n                   review_type,\n                   review_id,\n                   author,\n                   title,\n                   contents,\n                   url,\n                   image,\n                   rating,\n                   written_at,\n                   _scrap_id\n                 FROM place_reviews_snapshot)\n            )\n        )\n    WHERE rownum = 1""}, 'role': 'process', 'type': 'sql'}]"
1049,process:::place_indexes_union_distinct:::place_table_incremental,process:::place_info_with_rating_with_registration_number:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT\n       *\n   FROM\n        (SELECT\n            row_number() OVER (PARTITION BY registration_number, merchant_number, issuer ORDER BY _scrap_id DESC) AS rownum,\n            *\n        FROM\n          (SELECT\n              timestamp,\n              _scrap_id,\n              place_uid,\n              place_type,\n              registration_number,\n              merchant_number,\n              issuer\n          FROM\n              place_indexes\n\n          UNION ALL\n\n          SELECT\n              timestamp,\n              _scrap_id,\n              place_uid,\n              place_type,\n              registration_number,\n              merchant_number,\n              issuer\n          FROM\n              place_indexes_snapshot\n          )\n        )\n   WHERE rownum = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT\n      A.*,\n      B.registration_number\n   FROM\n      place_info_with_rating A\n   LEFT OUTER JOIN\n      (SELECT\n          *\n       FROM\n          place_indexes_union_distinct\n       ) B\n       ON\n          A.place_uid = B.place_uid\n       AND\n          B.place_type = B.place_type'}, 'role': 'process', 'type': 'sql'}]"
1050,process:::place_indexes_union_distinct:::place_table_incremental,s3://kcd-data/place_table/2021_01_29/place_indexes,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT\n       *\n   FROM\n        (SELECT\n            row_number() OVER (PARTITION BY registration_number, merchant_number, issuer ORDER BY _scrap_id DESC) AS rownum,\n            *\n        FROM\n          (SELECT\n              timestamp,\n              _scrap_id,\n              place_uid,\n              place_type,\n              registration_number,\n              merchant_number,\n              issuer\n          FROM\n              place_indexes\n\n          UNION ALL\n\n          SELECT\n              timestamp,\n              _scrap_id,\n              place_uid,\n              place_type,\n              registration_number,\n              merchant_number,\n              issuer\n          FROM\n              place_indexes_snapshot\n          )\n        )\n   WHERE rownum = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-data/place_table/2021_01_29/place_indexes'}, 'role': 'sink', 'type': 'file'}]"
1051,process:::place_info_union_distinct:::place_table_incremental,process:::place_info_with_rating:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'sql': '    SELECT\n       *\n    FROM\n        (SELECT\n            row_number() OVER (PARTITION BY place_uid, place_type ORDER BY _scrap_id DESC) AS rownum,\n            *\n         FROM\n            (SELECT\n                 timestamp,\n                 place_uid,\n                 place_type,\n                 name,\n                 classification,\n                 street_address,\n                 lot_address,\n                 phone_number,\n                 latitude,\n                 longitude,\n                 description,\n                 images,\n                 _scrap_id\n             FROM\n                 place_info\n\n             UNION ALL\n\n             SELECT\n                 timestamp,\n                 place_uid,\n                 place_type,\n                 name,\n                 classification,\n                 street_address,\n                 lot_address,\n                 phone_number,\n                 latitude,\n                 longitude,\n                 description,\n                 images,\n                 _scrap_id\n             FROM\n                 place_info_snapshot\n            )\n        )\n    WHERE\n        rownum = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT\n      A.*,\n      B.review_count,\n      B.avg_review_rating\n   FROM\n      place_info_union_distinct A\n   LEFT OUTER JOIN\n      (SELECT\n           place_uid,\n           place_type,\n           count(*) AS review_count,\n           avg(rating) AS avg_review_rating\n       FROM\n          place_reviews_union_distinct\n       GROUP BY\n          1, 2) B\n       ON\n          A.place_uid = B.place_uid\n       AND\n          B.place_type = B.place_type'}, 'role': 'process', 'type': 'sql'}]"
1052,process:::place_menus_union_distinct:::place_table_incremental,s3://kcd-data/place_table/2021_01_29/place_menus,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT B.* FROM\n       (SELECT\n           place_uid,\n           place_type,\n           max(_scrap_id) as max_scrap_id\n       FROM\n           (SELECT\n               timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus\n\n            UNION ALL\n\n            SELECT\n               timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus_snapshot\n           )\n       GROUP BY\n           place_uid, place_type\n       ) A INNER JOIN\n           (SELECT\n               timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus\n\n            UNION ALL\n\n            SELECT\n                timestamp, place_uid, place_type, name, description, price, image, priority, _scrap_id\n            FROM place_menus_snapshot\n           ) B\n           ON   A.place_uid = B.place_uid\n           AND  A.place_type = B.place_type\n           AND  A.max_scrap_id = B._scrap_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-data/place_table/2021_01_29/place_menus'}, 'role': 'sink', 'type': 'file'}]"
1053,process:::place_reviews_union_distinct:::place_table_incremental,process:::place_info_with_rating:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        (SELECT\n            *,\n            row_number() OVER (PARTITION BY place_uid, place_type, unique_key, review_type ORDER BY _scrap_id DESC) AS rownum\n        FROM\n            (SELECT\n               CASE WHEN url IS null OR trim(url) = '' THEN review_id ELSE url END as unique_key,\n               *\n             FROM\n               (SELECT\n                   timestamp,\n                   place_uid,\n                   place_type,\n                   review_type,\n                   review_id,\n                   author,\n                   title,\n                   contents,\n                   url,\n                   image,\n                   rating,\n                   written_at,\n                   _scrap_id\n                FROM place_reviews\n\n                UNION ALl\n\n                SELECT\n                   timestamp,\n                   place_uid,\n                   place_type,\n                   review_type,\n                   review_id,\n                   author,\n                   title,\n                   contents,\n                   url,\n                   image,\n                   rating,\n                   written_at,\n                   _scrap_id\n                 FROM place_reviews_snapshot)\n            )\n        )\n    WHERE rownum = 1""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT\n      A.*,\n      B.review_count,\n      B.avg_review_rating\n   FROM\n      place_info_union_distinct A\n   LEFT OUTER JOIN\n      (SELECT\n           place_uid,\n           place_type,\n           count(*) AS review_count,\n           avg(rating) AS avg_review_rating\n       FROM\n          place_reviews_union_distinct\n       GROUP BY\n          1, 2) B\n       ON\n          A.place_uid = B.place_uid\n       AND\n          B.place_type = B.place_type'}, 'role': 'process', 'type': 'sql'}]"
1054,process:::place_reviews_union_distinct:::place_table_incremental,s3://kcd-data/place_table/2021_01_29/place_reviews,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        (SELECT\n            *,\n            row_number() OVER (PARTITION BY place_uid, place_type, unique_key, review_type ORDER BY _scrap_id DESC) AS rownum\n        FROM\n            (SELECT\n               CASE WHEN url IS null OR trim(url) = '' THEN review_id ELSE url END as unique_key,\n               *\n             FROM\n               (SELECT\n                   timestamp,\n                   place_uid,\n                   place_type,\n                   review_type,\n                   review_id,\n                   author,\n                   title,\n                   contents,\n                   url,\n                   image,\n                   rating,\n                   written_at,\n                   _scrap_id\n                FROM place_reviews\n\n                UNION ALl\n\n                SELECT\n                   timestamp,\n                   place_uid,\n                   place_type,\n                   review_type,\n                   review_id,\n                   author,\n                   title,\n                   contents,\n                   url,\n                   image,\n                   rating,\n                   written_at,\n                   _scrap_id\n                 FROM place_reviews_snapshot)\n            )\n        )\n    WHERE rownum = 1""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-data/place_table/2021_01_29/place_reviews'}, 'role': 'sink', 'type': 'file'}]"
1055,process:::place_info_with_rating:::place_table_incremental,process:::place_info_with_rating_with_registration_number:::place_table_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT\n      A.*,\n      B.review_count,\n      B.avg_review_rating\n   FROM\n      place_info_union_distinct A\n   LEFT OUTER JOIN\n      (SELECT\n           place_uid,\n           place_type,\n           count(*) AS review_count,\n           avg(rating) AS avg_review_rating\n       FROM\n          place_reviews_union_distinct\n       GROUP BY\n          1, 2) B\n       ON\n          A.place_uid = B.place_uid\n       AND\n          B.place_type = B.place_type'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT\n      A.*,\n      B.registration_number\n   FROM\n      place_info_with_rating A\n   LEFT OUTER JOIN\n      (SELECT\n          *\n       FROM\n          place_indexes_union_distinct\n       ) B\n       ON\n          A.place_uid = B.place_uid\n       AND\n          B.place_type = B.place_type'}, 'role': 'process', 'type': 'sql'}]"
1056,process:::place_info_with_rating_with_registration_number:::place_table_incremental,s3://kcd-data/place_table/2021_01_29/place_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_table_incremental.json', 'options': {'sql': '   SELECT\n      A.*,\n      B.registration_number\n   FROM\n      place_info_with_rating A\n   LEFT OUTER JOIN\n      (SELECT\n          *\n       FROM\n          place_indexes_union_distinct\n       ) B\n       ON\n          A.place_uid = B.place_uid\n       AND\n          B.place_type = B.place_type'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_table_incremental.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-data/place_table/2021_01_29/place_info'}, 'role': 'sink', 'type': 'file'}]"
1057,process:::place_indexes_graph_format:::place_table_graph_format,s3://kcd-data/place_table/graph_format/place_indexes,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_graph_format.json', 'options': {'sql': ""    SELECT\n        timestamp,\n        registration_number AS from,\n        concat(place_uid, '_', place_type) AS to,\n        'place_indexes' as label,\n        to_json(\n           struct(\n               issuer,\n               merchant_number,\n               place_uid,\n               place_type,\n               registration_number\n           )\n        ) AS props\n    FROM\n        place_indexes""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-data/place_table/graph_format/place_indexes'}, 'role': 'sink', 'type': 'file'}]"
1058,process:::place_info_graph_format:::place_table_graph_format,s3://kcd-data/place_table/graph_format/place_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_graph_format.json', 'options': {'sql': ""    SELECT\n        timestamp,\n        concat(place_uid, '_', place_type) AS from,\n        concat(place_uid, '_', place_type) AS to,\n        'place_info' as label,\n        to_json(struct(\n            classification,\n            images,\n            latitude,\n            longitude,\n            lot_address,\n            phone_number,\n            place_uid,\n            street_address,\n            nvl(review_count, 0) AS review_count,\n            avg_review_rating,\n            registration_number,\n            name\n        )) AS props\n    FROM\n        place_info""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-data/place_table/graph_format/place_info'}, 'role': 'sink', 'type': 'file'}]"
1059,process:::place_menus_graph_format:::place_table_graph_format,s3://kcd-data/place_table/graph_format/place_menus,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_graph_format.json', 'options': {'sql': ""     SELECT\n         timestamp,\n         concat(place_uid, '_', place_type) AS from,\n         java_method('java.util.UUID', 'randomUUID') AS to,\n         'place_menus' as label,\n         to_json(struct(\n             description,\n             image,\n             name,\n             place_type,\n             place_uid,\n             price,\n             priority\n         )) AS props\n     FROM\n         place_menus""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-data/place_table/graph_format/place_menus'}, 'role': 'sink', 'type': 'file'}]"
1060,process:::place_reviews_graph_format:::place_table_graph_format,s3://kcd-data/place_table/graph_format/place_reviews,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_graph_format.json', 'options': {'sql': ""    SELECT\n        timestamp,\n        concat(place_uid, '_', place_type) AS from,\n        concat(review_id, '_', review_type) AS to,\n        'place_reviews' as label,\n        to_json(struct(\n            author,\n            contents,\n            image,\n            place_type,\n            place_uid,\n            rating,\n            review_id,\n            review_type,\n            title,\n            written_at\n        )) AS props\n    FROM\n         place_reviews""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_graph_format.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-data/place_table/graph_format/place_reviews'}, 'role': 'sink', 'type': 'file'}]"
1061,process:::grouped:::build_visits,process:::visits:::build_visits,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_visits.json', 'options': {'sql': ""SELECT  key,\n        business_id,\n        collect_list(struct(*)) AS histories\nFROM    (\n   SELECT *,\n          COALESCE(encrypted_card_number, CONCAT_WS('_', issuer_name, card_number)) AS key\n   FROM   card_sales_transaction_src\n   WHERE  transacted_at >= '2018-10-01'\n   AND    created_at_date >= '2018-10-01'\n)\nGROUP BY key, business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_visits.json', 'options': {'sql': ""SELECT  tx_with_count.transaction.*,\n        tx_with_count.prev_visit_count\nFROM    (\n  SELECT  explode(append_visit_count(histories)) AS tx_with_count\n  FROM    grouped\n)\nWHERE   tx_with_count.transaction.transacted_at >= date_add('2018-10-01', 365)""}, 'role': 'process', 'type': 'sql'}]"
1062,process:::visits:::build_visits,s3://kcd-data/table/card_sales_revisit/visits,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_visits.json', 'options': {'sql': ""SELECT  tx_with_count.transaction.*,\n        tx_with_count.prev_visit_count\nFROM    (\n  SELECT  explode(append_visit_count(histories)) AS tx_with_count\n  FROM    grouped\n)\nWHERE   tx_with_count.transaction.transacted_at >= date_add('2018-10-01', 365)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_visits.json', 'options': {'path': 's3://kcd-data/table/card_sales_revisit/created_at_date=2020-10-28/visits', 'format': 'parquet', 'mode': 'overwrite'}, 'role': 'sink', 'type': 'file'}]"
1063,after_approvals_raw,process:::after_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=30,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=29,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=28,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=27,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=26,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=25,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=24,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=23,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=22,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=21,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=20,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=19,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=18,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=17,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=16,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=15,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=14,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=13,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=12,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=11,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=10,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=09,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=08,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=07,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=06,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=05,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=04,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=03,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=02,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=01,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=11/day=30', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=31,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=30,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=29,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=28,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=27,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=26,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=25,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=24,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=23,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=22', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'approvals_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-logs-raw/dev/card_sales/incremental/approvals', 'format': 'parquet', 'partition_keys': 'year,month', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\n\n  UNION ALL\n\n  SELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n            CAST(authamt AS int) AS amount,\n            trim(IF (authno = '', null, authno)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardno, '', '')) AS card_number,\n            CAST(trim(cardknd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n            IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n            trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n            trim(IF (merno = '', null, merno)) AS merchant_number,\n            scraping_type,\n            IF (authclassnm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n            ) AS updated_at,\n            created_at_date\n   FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\n\nUNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at,\n          created_at_date\n FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
1064,after_approvals_raw,process:::after_approvals:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=30,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=29,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=28,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=27,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=26,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=25,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=24,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=23,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=22,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=21,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=20,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=19,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=18,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=17,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=16,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=15,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=14,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=13,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=12,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=11,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=10,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=09,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=08,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=07,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=06,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=05,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=04,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=03,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=02,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=12/day=01,s3://staging-card-sales/staging-card-sales-approvals/year=2020/month=11/day=30', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=31,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=30,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=29,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=28,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=27,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=26,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=25,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=24,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=23,s3://staging-card-sales/staging-card-sales-approvals/year=2019/month=12/day=22', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'approvals_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-logs-raw/dev/card_sales/incremental/approvals', 'format': 'parquet', 'partition_keys': 'year,month', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\nUNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at,\n          created_at_date\n FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
1065,catalog_approvals_raw,process:::catalog_approvals_filtered:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_approvals', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_approvals', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'approvals_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_approvals', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_approvals_raw\n WHERE    created_at_date >= '2020-12-23'\n AND      created_at_date < '2020-12-31'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_approvals_raw\n WHERE    created_at_date >= '2019-12-22'\n AND      created_at_date < '2020-01-01'""}, 'role': 'process', 'type': 'sql'}]"
1066,catalog_approvals_raw,process:::catalog_approvals_filtered:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_approvals', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_approvals', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'approvals_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_approvals', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_approvals_raw\n WHERE    created_at_date >= '2020-12-25'\n AND      created_at_date < '2021-01-25'""}, 'role': 'process', 'type': 'sql'}]"
1067,after_payments_raw,process:::after_payments:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=30,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=29,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=28,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=27,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=26,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=25,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=24,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=23,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=22,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=21,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=20,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=19,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=18,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=17,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=16,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=15,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=14,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=13,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=12,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=11,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=10,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=09,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=08,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=07,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=06,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=05,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=04,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=03,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=02,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=01,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=11/day=30', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=31,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=30,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=29,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=28,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=27,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=26,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=25,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=24,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=23,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=22', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'payments_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-logs-raw/dev/card_sales/incremental/payments', 'format': 'parquet', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n\n  UNION ALL\n\n  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          trim(IF (stlbanknm = '', null, replace(stlbanknm, '은행', ''))) AS bank_name,\n          trim(stlacctno) AS account_number,\n          CAST(pcacnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvamt AS BIGINT) AS reserved_amount,\n          CAST(etcamt AS BIGINT) AS etc_amount,\n          CAST(pcaamt AS BIGINT) AS sales_amount,\n          CAST(rcpscdamt AS BIGINT) AS received_amount,\n          CAST(vatfeeamt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymdate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n  FROM    catalog_payments_filtered a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}]"
1068,after_payments_raw,process:::after_payments:::payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=30,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=29,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=28,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=27,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=26,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=25,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=24,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=23,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=22,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=21,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=20,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=19,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=18,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=17,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=16,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=15,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=14,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=13,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=12,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=11,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=10,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=09,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=08,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=07,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=06,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=05,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=04,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=03,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=02,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=12/day=01,s3://staging-card-sales/staging-card-sales-payments/year=2020/month=11/day=30', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=31,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=30,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=29,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=28,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=27,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=26,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=25,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=24,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=23,s3://staging-card-sales/staging-card-sales-payments/year=2019/month=12/day=22', 'format': 'json', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'payments_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-logs-raw/dev/card_sales/incremental/payments', 'format': 'parquet', 'partition_keys': 'year,month,day,hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'payments_initial.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n\n  UNION ALL\n\n  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          trim(IF (stlbanknm = '', null, replace(stlbanknm, '은행', ''))) AS bank_name,\n          trim(stlacctno) AS account_number,\n          CAST(pcacnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvamt AS BIGINT) AS reserved_amount,\n          CAST(etcamt AS BIGINT) AS etc_amount,\n          CAST(pcaamt AS BIGINT) AS sales_amount,\n          CAST(rcpscdamt AS BIGINT) AS received_amount,\n          CAST(vatfeeamt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymdate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n  FROM    catalog_payments_filtered a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}]"
1069,catalog_payments_raw,process:::catalog_payments_filtered:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_payments', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_payments', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'payments_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_payments', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_payments_raw\n WHERE    created_at_date >= '2019-12-22'\n AND      created_at_date < '2020-01-01'""}, 'role': 'process', 'type': 'sql'}]"
1070,catalog_payments_raw,process:::catalog_payments_filtered:::payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_payments', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_payments', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}, {'filename': 'payments_initial.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_api_card_sales_payments', 'format': 'json', 'partition_keys': 'created_at_date,created_at_hour', 'log_leaf_file': 'true', 'mergeSchema': 'true', 'extraColumns': 'credential_key:string,scraping_type:string'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'payments_initial.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_payments_raw\n WHERE    created_at_date >= '2020-12-25'\n AND      created_at_date < '2021-01-25'""}, 'role': 'process', 'type': 'sql'}]"
1071,process:::prev_approvals:::build_raw_tables,process:::current_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_approvals_raw\n WHERE    created_at_date >= '2020-11-23'\n AND      created_at_date < '2020-11-30'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_approvals_raw\n WHERE    created_at_date >= '2019-12-15'\n AND      created_at_date < '2019-12-22'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      approvals c LEFT ANTI JOIN prev_approvals p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.transacted_at = c.transacted_at AND\n  p.authorization_number = c.authorization_number AND\n  p.amount = c.amount\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      approvals c LEFT ANTI JOIN prev_approvals p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.transacted_at = c.transacted_at AND\n  p.authorization_number = c.authorization_number AND\n  p.amount = c.amount AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]"
1072,process:::catalog_approvals_filtered:::build_raw_tables,process:::after_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_approvals_raw\n WHERE    created_at_date >= '2020-12-23'\n AND      created_at_date < '2020-12-31'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_approvals_raw\n WHERE    created_at_date >= '2019-12-22'\n AND      created_at_date < '2020-01-01'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\n\n  UNION ALL\n\n  SELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n            CAST(authamt AS int) AS amount,\n            trim(IF (authno = '', null, authno)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardno, '', '')) AS card_number,\n            CAST(trim(cardknd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n            IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n            trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n            trim(IF (merno = '', null, merno)) AS merchant_number,\n            scraping_type,\n            IF (authclassnm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n            ) AS updated_at,\n            created_at_date\n   FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\n\nUNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at,\n          created_at_date\n FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
1073,process:::after_approvals:::build_raw_tables,process:::reformat_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\n\n  UNION ALL\n\n  SELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n            CAST(authamt AS int) AS amount,\n            trim(IF (authno = '', null, authno)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardno, '', '')) AS card_number,\n            CAST(trim(cardknd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n            IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n            trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n            trim(IF (merno = '', null, merno)) AS merchant_number,\n            scraping_type,\n            IF (authclassnm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n            ) AS updated_at,\n            created_at_date\n   FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\n\nUNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at,\n          created_at_date\n FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    *\nFROM      (\n SELECT * FROM   after_approvals\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    *\nFROM      (\n SELECT * FROM   after_approvals\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null'}, 'role': 'process', 'type': 'sql'}]"
1074,process:::reformat_approvals:::build_raw_tables,process:::approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    *\nFROM      (\n SELECT * FROM   after_approvals\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    *\nFROM      (\n SELECT * FROM   after_approvals\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    business_id,\n          credential_key,\n          transacted_at,\n          authorization_number,\n          amount,\n          MIN(acquirer_name) AS acquirer_name,\n          MIN(card_number) AS card_number,\n          MIN(card_type) AS card_type,\n          MIN(encrypted_card_number) AS encrypted_card_number,\n          MIN(installment) AS installment,\n          MIN(issuer_name) AS issuer_name,\n          MIN(masked_card_number) AS masked_card_number,\n          MIN(merchant_number) AS merchant_number,\n          MIN(scraping_type) AS scraping_type,\n          MIN(status) AS status,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(created_at_date) AS created_at_date\nFROM      reformat_approvals\nGROUP BY  business_id, credential_key, transacted_at, authorization_number, amount'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    business_id,\n          credential_key,\n          transacted_at,\n          authorization_number,\n          amount,\n          MIN(acquirer_name) AS acquirer_name,\n          MIN(card_number) AS card_number,\n          MIN(card_type) AS card_type,\n          MIN(encrypted_card_number) AS encrypted_card_number,\n          MIN(installment) AS installment,\n          MIN(issuer_name) AS issuer_name,\n          MIN(masked_card_number) AS masked_card_number,\n          MIN(merchant_number) AS merchant_number,\n          MIN(scraping_type) AS scraping_type,\n          MIN(status) AS status,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(created_at_date) AS created_at_date\nFROM      reformat_approvals\nGROUP BY  business_id, credential_key, transacted_at, authorization_number, amount'}, 'role': 'process', 'type': 'sql'}]"
1075,process:::approvals:::build_raw_tables,process:::current_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    business_id,\n          credential_key,\n          transacted_at,\n          authorization_number,\n          amount,\n          MIN(acquirer_name) AS acquirer_name,\n          MIN(card_number) AS card_number,\n          MIN(card_type) AS card_type,\n          MIN(encrypted_card_number) AS encrypted_card_number,\n          MIN(installment) AS installment,\n          MIN(issuer_name) AS issuer_name,\n          MIN(masked_card_number) AS masked_card_number,\n          MIN(merchant_number) AS merchant_number,\n          MIN(scraping_type) AS scraping_type,\n          MIN(status) AS status,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(created_at_date) AS created_at_date\nFROM      reformat_approvals\nGROUP BY  business_id, credential_key, transacted_at, authorization_number, amount'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    business_id,\n          credential_key,\n          transacted_at,\n          authorization_number,\n          amount,\n          MIN(acquirer_name) AS acquirer_name,\n          MIN(card_number) AS card_number,\n          MIN(card_type) AS card_type,\n          MIN(encrypted_card_number) AS encrypted_card_number,\n          MIN(installment) AS installment,\n          MIN(issuer_name) AS issuer_name,\n          MIN(masked_card_number) AS masked_card_number,\n          MIN(merchant_number) AS merchant_number,\n          MIN(scraping_type) AS scraping_type,\n          MIN(status) AS status,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(created_at_date) AS created_at_date\nFROM      reformat_approvals\nGROUP BY  business_id, credential_key, transacted_at, authorization_number, amount'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      approvals c LEFT ANTI JOIN prev_approvals p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.transacted_at = c.transacted_at AND\n  p.authorization_number = c.authorization_number AND\n  p.amount = c.amount\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      approvals c LEFT ANTI JOIN prev_approvals p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.transacted_at = c.transacted_at AND\n  p.authorization_number = c.authorization_number AND\n  p.amount = c.amount AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]"
1076,process:::current_approvals:::build_raw_tables,process:::merged_approvals:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      approvals c LEFT ANTI JOIN prev_approvals p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.transacted_at = c.transacted_at AND\n  p.authorization_number = c.authorization_number AND\n  p.amount = c.amount\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      approvals c LEFT ANTI JOIN prev_approvals p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.transacted_at = c.transacted_at AND\n  p.authorization_number = c.authorization_number AND\n  p.amount = c.amount AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
1077,process:::merged_approvals:::build_raw_tables,approvals_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, authorization_number, amount, status\n              ORDER BY created_at DESC\n          ) AS approval_seq,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS INTEGER)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS INTEGER)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01' THEN\n                      CAST((a.amount * 4 / 110 / 10) AS INTEGER) * 10\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      current_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'add_seq_on_approvals.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '2000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
1078,process:::prev_purchases:::build_raw_tables,process:::current_purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_purchases_raw\n WHERE    created_at_date >= '2020-11-23'\n AND      created_at_date < '2020-11-30'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_purchases_raw\n WHERE    created_at_date >= '2019-12-15'\n AND      created_at_date < '2019-12-22'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      purchases c LEFT ANTI JOIN prev_purchases p\nON        (\n  p.business_id = c.business_id AND\n  p.authorization_number = c.authorization_number AND\n  p.masked_card_number = c.masked_card_number AND\n  p.amount = c.amount AND\n  p.purchased_at = c.purchased_at AND\n  p.paid_at = c.paid_at\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      purchases c LEFT ANTI JOIN prev_purchases p\nON        (\n  p.business_id = c.business_id AND\n  p.authorization_number = c.authorization_number AND\n  p.masked_card_number = c.masked_card_number AND\n  p.amount = c.amount AND\n  p.purchased_at = c.purchased_at AND\n  p.paid_at = c.paid_at AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]"
1079,process:::catalog_purchases_filtered:::build_raw_tables,process:::after_purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_purchases_raw\n WHERE    created_at_date >= '2020-12-23'\n AND      created_at_date < '2020-12-31'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_purchases_raw\n WHERE    created_at_date >= '2019-12-22'\n AND      created_at_date < '2020-01-01'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n      CAST(pcaamt AS int) AS amount,\n      trim(IF (authno = '', null, authno)) AS authorization_number,\n      CAST(basicfee AS int) AS base_fee,\n      CAST(a.business_id AS int) AS business_id,\n      trim(replace(cardno, '-', '')) AS card_number,\n      CAST(trim(cardclss) AS int) AS card_type,\n      COALESCE(credential_key, k.uuid) AS credential_key,\n      CAST(etcfee AS int) AS etc_fee,\n      CAST(fee AS int) AS fee,\n      trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n      mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n      trim(IF (merno = '', null, merno)) AS merchant_number,\n      to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n      CAST(pymamt AS int) AS payment,\n      CAST(pointfee AS int) AS point_fee,\n      to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n      scraping_type,\n      to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n      CAST(vatfee AS int) AS vat_fee,\n      to_timestamp(\n       concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n      ) AS created_at,\n      to_timestamp(\n       concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n      ) AS updated_at,\n      created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
1080,process:::after_purchases:::build_raw_tables,process:::reformat_purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n      CAST(pcaamt AS int) AS amount,\n      trim(IF (authno = '', null, authno)) AS authorization_number,\n      CAST(basicfee AS int) AS base_fee,\n      CAST(a.business_id AS int) AS business_id,\n      trim(replace(cardno, '-', '')) AS card_number,\n      CAST(trim(cardclss) AS int) AS card_type,\n      COALESCE(credential_key, k.uuid) AS credential_key,\n      CAST(etcfee AS int) AS etc_fee,\n      CAST(fee AS int) AS fee,\n      trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n      mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n      trim(IF (merno = '', null, merno)) AS merchant_number,\n      to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n      CAST(pymamt AS int) AS payment,\n      CAST(pointfee AS int) AS point_fee,\n      to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n      scraping_type,\n      to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n      CAST(vatfee AS int) AS vat_fee,\n      to_timestamp(\n       concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n      ) AS created_at,\n      to_timestamp(\n       concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n      ) AS updated_at,\n      created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n  SELECT  trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n          CAST(pcaAmt AS int) AS amount,\n          trim(IF (authNo = '', null, authNo)) AS authorization_number,\n          CAST(basicFee AS int) AS base_fee,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardNo, '-', '')) AS card_number,\n          CAST(trim(cardClss) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          CAST(etcFee AS int) AS etc_fee,\n          CAST(fee AS int) AS fee,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardNo, '-', ''))) AS masked_card_number,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          to_timestamp(unix_timestamp(pymScdDate , 'yyyyMMdd')) AS paid_at,\n          CAST(pymAmt AS int) AS payment,\n          CAST(pointFee AS int) AS point_fee,\n          to_timestamp(unix_timestamp(pcaDate , 'yyyyMMdd')) AS purchased_at,\n          scraping_type,\n          to_timestamp(unix_timestamp(trnsDate , 'yyyyMMdd')) AS transacted_at,\n          CAST(vatFee AS int) AS vat_fee,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_purchases_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n  WHERE   cardNo is not null\n)\n\nUNION ALL\n\nSELECT  trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n        CAST(pcaamt AS int) AS amount,\n        trim(IF (authno = '', null, authno)) AS authorization_number,\n        CAST(basicfee AS int) AS base_fee,\n        CAST(a.business_id AS int) AS business_id,\n        trim(replace(cardno, '-', '')) AS card_number,\n        CAST(trim(cardclss) AS int) AS card_type,\n        COALESCE(credential_key, k.uuid) AS credential_key,\n        CAST(etcfee AS int) AS etc_fee,\n        CAST(fee AS int) AS fee,\n        trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n        mask_card_number(trim(replace(cardno, '-', ''))) AS masked_card_number,\n        trim(IF (merno = '', null, merno)) AS merchant_number,\n        to_timestamp(unix_timestamp(pymscddate , 'yyyyMMdd')) AS paid_at,\n        CAST(pymamt AS int) AS payment,\n        CAST(pointfee AS int) AS point_fee,\n        to_timestamp(unix_timestamp(pcadate , 'yyyyMMdd')) AS purchased_at,\n        scraping_type,\n        to_timestamp(unix_timestamp(trnsdate , 'yyyyMMdd')) AS transacted_at,\n        CAST(vatfee AS int) AS vat_fee,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS created_at,\n        to_timestamp(\n         concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n        ) AS updated_at,\n        created_at_date\nFROM    catalog_purchases_filtered a LEFT OUTER JOIN credential_keys k\nON      a.business_id = k.business_id\nWHERE   cardno is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      after_purchases a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      after_purchases a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}]"
1081,process:::reformat_purchases:::build_raw_tables,process:::purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      after_purchases a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    a.acquirer_name,\n          a.amount,\n          a.authorization_number,\n          a.base_fee,\n          a.business_id,\n          a.card_number,\n          a.card_type,\n          a.credential_key,\n          a.etc_fee,\n          a.fee,\n          a.issuer_name,\n          a.masked_card_number,\n          a.merchant_number,\n          COALESCE(a.paid_at,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              )\n          ) AS paid_at,\n          a.payment,\n          a.point_fee,\n          purchase_delayed(a.issuer_name, a.transacted_at, a.purchased_at) AS purchase_delayed,\n          a.purchased_at,\n          a.scraping_type,\n          a.transacted_at,\n          a.vat_fee,\n          a.created_at,\n          a.updated_at,\n          a.created_at_date\nFROM      after_purchases a, card_merchants c\nWHERE     a.business_id is not null\nAND       a.issuer_name is not null\nAND       a.card_number is not null\nAND       a.purchased_at is not null\nAND       a.business_id = c.business_id\nAND       a.issuer_name = c.issuer_name\nAND       a.merchant_number = c.merchant_number'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n  SELECT    business_id,\n            credential_key,\n            authorization_number,\n            masked_card_number,\n            amount,\n            purchased_at,\n            paid_at,\n            MIN(acquirer_name) AS acquirer_name,\n            MIN(base_fee) AS base_fee,\n            MIN(card_number) AS card_number,\n            MIN(card_type) AS card_type,\n            MIN(etc_fee) AS etc_fee,\n            MIN(fee) AS fee,\n            MIN(issuer_name) AS issuer_name,\n            MIN(merchant_number) AS merchant_number,\n            MIN(payment) AS payment,\n            MIN(point_fee) AS point_fee,\n            MIN(purchase_delayed) AS purchase_delayed,\n            MIN(scraping_type) AS scraping_type,\n            MIN(transacted_at) AS transacted_at,\n            MIN(vat_fee) AS vat_fee,\n            MIN(created_at) AS created_at,\n            MIN(updated_at) AS updated_at,\n            MIN(created_at_date) AS created_at_date\n  FROM      reformat_purchases\n  GROUP BY  1, 2, 3, 4, 5, 6, 7\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n  SELECT    business_id,\n            credential_key,\n            authorization_number,\n            masked_card_number,\n            amount,\n            purchased_at,\n            paid_at,\n            MIN(acquirer_name) AS acquirer_name,\n            MIN(base_fee) AS base_fee,\n            MIN(card_number) AS card_number,\n            MIN(card_type) AS card_type,\n            MIN(etc_fee) AS etc_fee,\n            MIN(fee) AS fee,\n            MIN(issuer_name) AS issuer_name,\n            MIN(merchant_number) AS merchant_number,\n            MIN(payment) AS payment,\n            MIN(point_fee) AS point_fee,\n            MIN(purchase_delayed) AS purchase_delayed,\n            MIN(scraping_type) AS scraping_type,\n            MIN(transacted_at) AS transacted_at,\n            MIN(vat_fee) AS vat_fee,\n            MIN(created_at) AS created_at,\n            MIN(updated_at) AS updated_at,\n            MIN(created_at_date) AS created_at_date\n  FROM      reformat_purchases\n  GROUP BY  1, 2, 3, 4, 5, 6, 7\n)'}, 'role': 'process', 'type': 'sql'}]"
1082,process:::purchases:::build_raw_tables,process:::current_purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n  SELECT    business_id,\n            credential_key,\n            authorization_number,\n            masked_card_number,\n            amount,\n            purchased_at,\n            paid_at,\n            MIN(acquirer_name) AS acquirer_name,\n            MIN(base_fee) AS base_fee,\n            MIN(card_number) AS card_number,\n            MIN(card_type) AS card_type,\n            MIN(etc_fee) AS etc_fee,\n            MIN(fee) AS fee,\n            MIN(issuer_name) AS issuer_name,\n            MIN(merchant_number) AS merchant_number,\n            MIN(payment) AS payment,\n            MIN(point_fee) AS point_fee,\n            MIN(purchase_delayed) AS purchase_delayed,\n            MIN(scraping_type) AS scraping_type,\n            MIN(transacted_at) AS transacted_at,\n            MIN(vat_fee) AS vat_fee,\n            MIN(created_at) AS created_at,\n            MIN(updated_at) AS updated_at,\n            MIN(created_at_date) AS created_at_date\n  FROM      reformat_purchases\n  GROUP BY  1, 2, 3, 4, 5, 6, 7\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n  SELECT    business_id,\n            credential_key,\n            authorization_number,\n            masked_card_number,\n            amount,\n            purchased_at,\n            paid_at,\n            MIN(acquirer_name) AS acquirer_name,\n            MIN(base_fee) AS base_fee,\n            MIN(card_number) AS card_number,\n            MIN(card_type) AS card_type,\n            MIN(etc_fee) AS etc_fee,\n            MIN(fee) AS fee,\n            MIN(issuer_name) AS issuer_name,\n            MIN(merchant_number) AS merchant_number,\n            MIN(payment) AS payment,\n            MIN(point_fee) AS point_fee,\n            MIN(purchase_delayed) AS purchase_delayed,\n            MIN(scraping_type) AS scraping_type,\n            MIN(transacted_at) AS transacted_at,\n            MIN(vat_fee) AS vat_fee,\n            MIN(created_at) AS created_at,\n            MIN(updated_at) AS updated_at,\n            MIN(created_at_date) AS created_at_date\n  FROM      reformat_purchases\n  GROUP BY  1, 2, 3, 4, 5, 6, 7\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      purchases c LEFT ANTI JOIN prev_purchases p\nON        (\n  p.business_id = c.business_id AND\n  p.authorization_number = c.authorization_number AND\n  p.masked_card_number = c.masked_card_number AND\n  p.amount = c.amount AND\n  p.purchased_at = c.purchased_at AND\n  p.paid_at = c.paid_at\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      purchases c LEFT ANTI JOIN prev_purchases p\nON        (\n  p.business_id = c.business_id AND\n  p.authorization_number = c.authorization_number AND\n  p.masked_card_number = c.masked_card_number AND\n  p.amount = c.amount AND\n  p.purchased_at = c.purchased_at AND\n  p.paid_at = c.paid_at AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]"
1083,process:::current_purchases:::build_raw_tables,process:::merged_purchases:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      purchases c LEFT ANTI JOIN prev_purchases p\nON        (\n  p.business_id = c.business_id AND\n  p.authorization_number = c.authorization_number AND\n  p.masked_card_number = c.masked_card_number AND\n  p.amount = c.amount AND\n  p.purchased_at = c.purchased_at AND\n  p.paid_at = c.paid_at\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      purchases c LEFT ANTI JOIN prev_purchases p\nON        (\n  p.business_id = c.business_id AND\n  p.authorization_number = c.authorization_number AND\n  p.masked_card_number = c.masked_card_number AND\n  p.amount = c.amount AND\n  p.purchased_at = c.purchased_at AND\n  p.paid_at = c.paid_at AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, amount\n              ORDER BY purchased_at, authorization_number\n          ) AS purchase_cancel_seq,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), authorization_number, masked_card_number, amount\n              ORDER BY purchased_at DESC\n          ) AS purchase_seq,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      current_purchases'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, transacted_at, masked_card_number, amount\n              ORDER BY purchased_at DESC, authorization_number\n          ) AS purchase_cancel_seq,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), authorization_number, masked_card_number, amount\n              ORDER BY purchased_at ASC\n          ) AS purchase_seq,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      current_purchases'}, 'role': 'process', 'type': 'sql'}]"
1084,process:::merged_purchases:::build_raw_tables,purchases_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), masked_card_number, amount\n              ORDER BY purchased_at, authorization_number\n          ) AS purchase_cancel_seq,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), authorization_number, masked_card_number, amount\n              ORDER BY purchased_at DESC\n          ) AS purchase_seq,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      current_purchases'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          base_fee,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          etc_fee,\n          fee,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          paid_at,\n          payment,\n          point_fee,\n          purchase_delayed,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, transacted_at, masked_card_number, amount\n              ORDER BY purchased_at DESC, authorization_number\n          ) AS purchase_cancel_seq,\n          row_number() OVER (\n              PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), authorization_number, masked_card_number, amount\n              ORDER BY purchased_at ASC\n          ) AS purchase_seq,\n          purchased_at,\n          scraping_type,\n          transacted_at,\n          vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      current_purchases'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'add_seq_on_purchases.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '2000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'staging_build_raw_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/purchases', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}]"
1085,process:::prev_payments:::build_raw_tables,process:::merged_payments:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_payments_raw\n WHERE    created_at_date >= '2020-11-23'\n AND      created_at_date < '2020-11-30'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     prev_payments_raw\n WHERE    created_at_date >= '2019-12-15'\n AND      created_at_date < '2019-12-22'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      payments c LEFT ANTI JOIN prev_payments p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.merchant_number = c.merchant_number AND\n  p.bank_name = c.bank_name AND\n  p.received_at = c.received_at\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      payments c LEFT ANTI JOIN prev_payments p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.merchant_number = c.merchant_number AND\n  p.bank_name = c.bank_name AND\n  p.received_at = c.received_at AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]"
1086,process:::after_payments:::build_raw_tables,process:::reformat_payments:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n\n  UNION ALL\n\n  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          trim(IF (stlbanknm = '', null, replace(stlbanknm, '은행', ''))) AS bank_name,\n          trim(stlacctno) AS account_number,\n          CAST(pcacnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvamt AS BIGINT) AS reserved_amount,\n          CAST(etcamt AS BIGINT) AS etc_amount,\n          CAST(pcaamt AS BIGINT) AS sales_amount,\n          CAST(rcpscdamt AS BIGINT) AS received_amount,\n          CAST(vatfeeamt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymdate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n  FROM    catalog_payments_filtered a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    *\nFROM      (\n  SELECT * FROM after_payments\n)\nWHERE     business_id is not null\nAND       merchant_number is not null\nAND       bank_name is not null\nAND       received_at is not null'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    *\nFROM      (\n  SELECT * FROM after_payments\n)\nWHERE     business_id is not null\nAND       merchant_number is not null\nAND       bank_name is not null\nAND       received_at is not null'}, 'role': 'process', 'type': 'sql'}]"
1087,process:::reformat_payments:::build_raw_tables,process:::payments:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    *\nFROM      (\n  SELECT * FROM after_payments\n)\nWHERE     business_id is not null\nAND       merchant_number is not null\nAND       bank_name is not null\nAND       received_at is not null'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    *\nFROM      (\n  SELECT * FROM after_payments\n)\nWHERE     business_id is not null\nAND       merchant_number is not null\nAND       bank_name is not null\nAND       received_at is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""  SELECT  business_id,\n          credential_key,\n          merchant_number,\n          bank_name,\n          received_at,\n          MIN(issuer_name) AS issuer_name,\n          MIN(account_number) AS account_number,\n          MIN(sales_count) AS sales_count,\n          MIN(scraping_type) AS scraping_type,\n          MIN(reserved_amount) AS reserved_amount,\n          MIN(etc_amount) AS etc_amount,\n          MIN(sales_amount) AS sales_amount,\n          MIN(received_amount) AS received_amount,\n          MIN(vat_fee_amount) AS vat_fee_amount,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(date_format(created_at, 'yyyy-MM-dd')) AS created_at_date\n  FROM    reformat_payments\n  GROUP BY business_id, credential_key, merchant_number, bank_name, received_at""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""  SELECT  business_id,\n          credential_key,\n          merchant_number,\n          bank_name,\n          received_at,\n          MIN(issuer_name) AS issuer_name,\n          MIN(account_number) AS account_number,\n          MIN(sales_count) AS sales_count,\n          MIN(scraping_type) AS scraping_type,\n          MIN(reserved_amount) AS reserved_amount,\n          MIN(etc_amount) AS etc_amount,\n          MIN(sales_amount) AS sales_amount,\n          MIN(received_amount) AS received_amount,\n          MIN(vat_fee_amount) AS vat_fee_amount,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(date_format(created_at, 'yyyy-MM-dd')) AS created_at_date\n  FROM    reformat_payments\n  GROUP BY business_id, credential_key, merchant_number, bank_name, received_at""}, 'role': 'process', 'type': 'sql'}]"
1088,process:::payments:::build_raw_tables,process:::merged_payments:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""  SELECT  business_id,\n          credential_key,\n          merchant_number,\n          bank_name,\n          received_at,\n          MIN(issuer_name) AS issuer_name,\n          MIN(account_number) AS account_number,\n          MIN(sales_count) AS sales_count,\n          MIN(scraping_type) AS scraping_type,\n          MIN(reserved_amount) AS reserved_amount,\n          MIN(etc_amount) AS etc_amount,\n          MIN(sales_amount) AS sales_amount,\n          MIN(received_amount) AS received_amount,\n          MIN(vat_fee_amount) AS vat_fee_amount,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(date_format(created_at, 'yyyy-MM-dd')) AS created_at_date\n  FROM    reformat_payments\n  GROUP BY business_id, credential_key, merchant_number, bank_name, received_at""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""  SELECT  business_id,\n          credential_key,\n          merchant_number,\n          bank_name,\n          received_at,\n          MIN(issuer_name) AS issuer_name,\n          MIN(account_number) AS account_number,\n          MIN(sales_count) AS sales_count,\n          MIN(scraping_type) AS scraping_type,\n          MIN(reserved_amount) AS reserved_amount,\n          MIN(etc_amount) AS etc_amount,\n          MIN(sales_amount) AS sales_amount,\n          MIN(received_amount) AS received_amount,\n          MIN(vat_fee_amount) AS vat_fee_amount,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(date_format(created_at, 'yyyy-MM-dd')) AS created_at_date\n  FROM    reformat_payments\n  GROUP BY business_id, credential_key, merchant_number, bank_name, received_at""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      payments c LEFT ANTI JOIN prev_payments p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.merchant_number = c.merchant_number AND\n  p.bank_name = c.bank_name AND\n  p.received_at = c.received_at\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      payments c LEFT ANTI JOIN prev_payments p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.merchant_number = c.merchant_number AND\n  p.bank_name = c.bank_name AND\n  p.received_at = c.received_at AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]"
1089,process:::merged_payments:::build_raw_tables,payments_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      payments c LEFT ANTI JOIN prev_payments p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.merchant_number = c.merchant_number AND\n  p.bank_name = c.bank_name AND\n  p.received_at = c.received_at\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': 'SELECT    c.*\nFROM      payments c LEFT ANTI JOIN prev_payments p\nON        (\n  p.business_id = c.business_id AND\n  p.credential_key = c.credential_key AND\n  p.merchant_number = c.merchant_number AND\n  p.bank_name = c.bank_name AND\n  p.received_at = c.received_at AND\n  p.credential_key = c.credential_key\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_raw_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'payments_initial.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
1090,classifications,process:::merge:::registration_number_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaSource', 'format': 'parquet', 'basePath': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification', 'partitionName': 'name', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'process', 'type': 'custom'}]"
1091,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=kcd,process:::merge:::registration_number_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=kcd'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'process', 'type': 'custom'}]"
1092,process:::merge:::registration_number_meta,process:::select_columns:::registration_number_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_meta.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinType': 'full_outer', 'joinColumns': 'registration_number'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'registration_number_meta.json', 'options': {'sql': ""SELECT    registration_number,\n          businesses,\n          location,\n          classification,\n          classifications,\n          cardsales,\n          CASE\n              WHEN    places.places.merchant_name IS NOT NULL AND location IS NOT NULL THEN CONCAT(\n                                                                              location.sido, ' ',\n                                                                              location.sigungu, ' ',\n                                                                              location.dong, ' ',\n                                                                              places.places.merchant_name\n                                                                         )\n              WHEN    places.places.merchant_name IS NOT NULL  THEN places.places.merchant_name\n              ELSE    null\n          END AS search_name,\n\n          named_struct(\n              'name', places.places.merchant_name,\n              'reviews', places.reviews\n          ) AS places\nFROM      merge\nWHERE     registration_number IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
1093,process:::select_columns:::registration_number_meta,s3://kcd-de-production/data_cubes/dimension/name=registration_number_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_meta.json', 'options': {'sql': ""SELECT    registration_number,\n          businesses,\n          location,\n          classification,\n          classifications,\n          cardsales,\n          CASE\n              WHEN    places.places.merchant_name IS NOT NULL AND location IS NOT NULL THEN CONCAT(\n                                                                              location.sido, ' ',\n                                                                              location.sigungu, ' ',\n                                                                              location.dong, ' ',\n                                                                              places.places.merchant_name\n                                                                         )\n              WHEN    places.places.merchant_name IS NOT NULL  THEN places.places.merchant_name\n              ELSE    null\n          END AS search_name,\n\n          named_struct(\n              'name', places.places.merchant_name,\n              'reviews', places.reviews\n          ) AS places\nFROM      merge\nWHERE     registration_number IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'generate_paynote_place_topk.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=registration_number_meta'}, 'role': 'sink', 'type': 'file'}]"
1094,process:::sales_amount:::market_info,process:::sales_amount_with_rate:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info.json', 'options': {'sql': 'SELECT\n        business_id, duration, prev_duration,\n        struct(\n            amount_sum,\n            amount_avg,\n            tx_count_sum,\n            tx_count_avg,\n            unit_price\n        ) AS metrics\nFROM (\n        SELECT\n                business_id,\n                dateRange.code AS duration,\n                dateRange.prevCode AS prev_duration,\n                amount_sum,\n                ROUND(amount_sum / cnt) AS amount_avg,\n                tx_count_sum,\n                ROUND(tx_count_sum / cnt) AS tx_count_avg,\n                ROUND(amount_sum / tx_count_sum) AS unit_price\n        FROM (\n            SELECT\n                    business_id, dateRange,\n                    SUM(amount) AS amount_sum,\n                    SUM(tx_count) AS tx_count_sum,\n                    count(1) AS cnt\n            FROM (\n                SELECT\n                    business_id,\n                    explode(dateRangeCodes) AS dateRange,\n                    amount_sum AS amount,\n                    tx_count\n                FROM (\n                    SELECT\n                        business_id,\n                        dateRangeCode(timestamp) AS dateRangeCodes,\n                        amount_sum,\n                        tx_count\n                    FROM card_sales_transactions\n                )\n                WHERE size(dateRangeCodes) > 0\n            )\n            GROUP BY business_id, dateRange\n        )\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_info.json', 'options': {'sql': 'SELECT\n        cur.*,\n        prev.metrics AS prev_metrics\nFROM  sales_amount cur\nLEFT OUTER JOIN sales_amount prev\nON cur.business_id = prev.business_id\nAND cur.prev_duration = prev.duration\nORDER BY business_id, duration'}, 'role': 'process', 'type': 'sql'}]"
1095,process:::sales_amount_with_rate:::market_info,process:::business_meta_with_amount:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info.json', 'options': {'sql': 'SELECT\n        cur.*,\n        prev.metrics AS prev_metrics\nFROM  sales_amount cur\nLEFT OUTER JOIN sales_amount prev\nON cur.business_id = prev.business_id\nAND cur.prev_duration = prev.duration\nORDER BY business_id, duration'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_info.json', 'options': {'sql': '    SELECT\n            business_meta.business_id,\n            business_meta.businesses.businesses.business_name AS name,\n            business_meta.classification.market_area AS kcd_classification,\n            sales_amount_with_rate.duration,\n            sales_amount_with_rate.metrics,\n            sales_amount_with_rate.prev_metrics,\n            business_location.geo_point AS location,\n            struct(\n                business_location.b_code,\n                business_location.sido,\n                business_location.sido_code,\n                business_location.sigungu,\n                business_location.sigungu_code,\n                business_location.dong,\n                business_location.h_codes,\n                business_location.full_address\n            ) AS address\n    FROM business_meta\n    LEFT OUTER JOIN sales_amount_with_rate\n    ON business_meta.business_id = sales_amount_with_rate.business_id\n    LEFT OUTER JOIN  business_location\n    ON business_meta.business_id = business_location.business_id'}, 'role': 'process', 'type': 'sql'}]"
1096,process:::business_meta_with_amount:::market_info,process:::sido_range:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info.json', 'options': {'sql': '    SELECT\n            business_meta.business_id,\n            business_meta.businesses.businesses.business_name AS name,\n            business_meta.classification.market_area AS kcd_classification,\n            sales_amount_with_rate.duration,\n            sales_amount_with_rate.metrics,\n            sales_amount_with_rate.prev_metrics,\n            business_location.geo_point AS location,\n            struct(\n                business_location.b_code,\n                business_location.sido,\n                business_location.sido_code,\n                business_location.sigungu,\n                business_location.sigungu_code,\n                business_location.dong,\n                business_location.h_codes,\n                business_location.full_address\n            ) AS address\n    FROM business_meta\n    LEFT OUTER JOIN sales_amount_with_rate\n    ON business_meta.business_id = sales_amount_with_rate.business_id\n    LEFT OUTER JOIN  business_location\n    ON business_meta.business_id = business_location.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_info.json', 'options': {'sql': '    SELECT  duration,\n            address.sido_code,\n            percentile(metrics.amount_avg, array(0.25, 0.5, 0.75)) AS amount_range\n    FROM business_meta_with_amount\n    WHERE duration IS NOT NULL\n    AND metrics.amount_avg IS NOT NULL\n    AND address.sido_code IS NOT NULL\n    GROUP BY duration, address.sido_code'}, 'role': 'process', 'type': 'sql'}]"
1097,process:::business_meta_with_amount:::market_info,process:::sigungu_range:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info.json', 'options': {'sql': '    SELECT\n            business_meta.business_id,\n            business_meta.businesses.businesses.business_name AS name,\n            business_meta.classification.market_area AS kcd_classification,\n            sales_amount_with_rate.duration,\n            sales_amount_with_rate.metrics,\n            sales_amount_with_rate.prev_metrics,\n            business_location.geo_point AS location,\n            struct(\n                business_location.b_code,\n                business_location.sido,\n                business_location.sido_code,\n                business_location.sigungu,\n                business_location.sigungu_code,\n                business_location.dong,\n                business_location.h_codes,\n                business_location.full_address\n            ) AS address\n    FROM business_meta\n    LEFT OUTER JOIN sales_amount_with_rate\n    ON business_meta.business_id = sales_amount_with_rate.business_id\n    LEFT OUTER JOIN  business_location\n    ON business_meta.business_id = business_location.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_info.json', 'options': {'sql': '    SELECT  duration,\n            address.sido_code,\n            address.sigungu_code,\n            percentile(metrics.amount_avg, array(0.25, 0.5, 0.75)) AS amount_range\n    FROM business_meta_with_amount\n    WHERE duration IS NOT NULL\n    AND metrics.amount_avg IS NOT NULL\n    AND address.sido_code IS NOT NULL\n    AND address.sigungu_code IS NOT NULL\n    GROUP BY duration, address.sido_code, address.sigungu_code'}, 'role': 'process', 'type': 'sql'}]"
1098,process:::business_meta_with_amount:::market_info,process:::bdong_range:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info.json', 'options': {'sql': '    SELECT\n            business_meta.business_id,\n            business_meta.businesses.businesses.business_name AS name,\n            business_meta.classification.market_area AS kcd_classification,\n            sales_amount_with_rate.duration,\n            sales_amount_with_rate.metrics,\n            sales_amount_with_rate.prev_metrics,\n            business_location.geo_point AS location,\n            struct(\n                business_location.b_code,\n                business_location.sido,\n                business_location.sido_code,\n                business_location.sigungu,\n                business_location.sigungu_code,\n                business_location.dong,\n                business_location.h_codes,\n                business_location.full_address\n            ) AS address\n    FROM business_meta\n    LEFT OUTER JOIN sales_amount_with_rate\n    ON business_meta.business_id = sales_amount_with_rate.business_id\n    LEFT OUTER JOIN  business_location\n    ON business_meta.business_id = business_location.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_info.json', 'options': {'sql': '    SELECT  duration,\n            address.sido_code,\n            address.sigungu_code,\n            address.b_code,\n            percentile(metrics.amount_avg, array(0.25, 0.5, 0.75)) AS amount_range\n    FROM business_meta_with_amount\n    WHERE duration IS NOT NULL\n    AND metrics.amount_avg IS NOT NULL\n    AND address.sido_code IS NOT NULL\n    AND address.sigungu_code IS NOT NULL\n    AND address.b_code IS NOT NULL\n    GROUP BY duration, address.sido_code, address.sigungu_code, address.b_code'}, 'role': 'process', 'type': 'sql'}]"
1099,process:::business_meta_with_amount:::market_info,process:::market_info:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info.json', 'options': {'sql': '    SELECT\n            business_meta.business_id,\n            business_meta.businesses.businesses.business_name AS name,\n            business_meta.classification.market_area AS kcd_classification,\n            sales_amount_with_rate.duration,\n            sales_amount_with_rate.metrics,\n            sales_amount_with_rate.prev_metrics,\n            business_location.geo_point AS location,\n            struct(\n                business_location.b_code,\n                business_location.sido,\n                business_location.sido_code,\n                business_location.sigungu,\n                business_location.sigungu_code,\n                business_location.dong,\n                business_location.h_codes,\n                business_location.full_address\n            ) AS address\n    FROM business_meta\n    LEFT OUTER JOIN sales_amount_with_rate\n    ON business_meta.business_id = sales_amount_with_rate.business_id\n    LEFT OUTER JOIN  business_location\n    ON business_meta.business_id = business_location.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_info.json', 'options': {'sql': 'SELECT\n        business_id,\n        name,\n        location,\n        kcd_classification,\n        address,\n        duration,\n        metrics,\n        prev_metrics,\n        named_struct(\n            \'depth1\', amount_range_depth1,\n            \'depth2\', amount_range_depth2,\n            \'depth3\', amount_range_depth3\n        ) AS amount_range\nFROM (\n        SELECT\n                business_meta_with_amount.*,\n                CASE\n                    WHEN metrics.amount_avg < depth1_range.amount_range[0] THEN ""lower""\n                    WHEN metrics.amount_avg < depth1_range.amount_range[1] THEN ""lower_middle""\n                    WHEN metrics.amount_avg < depth1_range.amount_range[2] THEN ""upper_middle""\n                    WHEN metrics.amount_avg >= depth1_range.amount_range[2] THEN ""upper""\n                    ELSE null\n                END AS amount_range_depth1,\n                CASE\n                    WHEN metrics.amount_avg < depth2_range.amount_range[0] THEN ""lower""\n                    WHEN metrics.amount_avg < depth2_range.amount_range[1] THEN ""lower_middle""\n                    WHEN metrics.amount_avg < depth2_range.amount_range[2] THEN ""upper_middle""\n                    WHEN metrics.amount_avg >= depth2_range.amount_range[2] THEN ""upper""\n                    ELSE null\n                END AS amount_range_depth2,\n                CASE\n                    WHEN metrics.amount_avg < depth3_range.amount_range[0] THEN ""lower""\n                    WHEN metrics.amount_avg < depth3_range.amount_range[1] THEN ""lower_middle""\n                    WHEN metrics.amount_avg < depth3_range.amount_range[2] THEN ""upper_middle""\n                    WHEN metrics.amount_avg >= depth3_range.amount_range[2] THEN ""upper""\n                    ELSE null\n                END AS amount_range_depth3\n        FROM business_meta_with_amount\n        LEFT OUTER JOIN address_amount_range\n        ON  business_meta_with_amount.duration = address_amount_range.depth3_range.duration\n        AND business_meta_with_amount.address.sido_code = address_amount_range.depth3_range.sido_code\n        AND business_meta_with_amount.address.sigungu_code = address_amount_range.depth3_range.sigungu_code\n        AND business_meta_with_amount.address.b_code = address_amount_range.depth3_range.b_code\n)'}, 'role': 'process', 'type': 'sql'}]"
1100,process:::sido_range:::market_info,process:::address_amount_range:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info.json', 'options': {'sql': '    SELECT  duration,\n            address.sido_code,\n            percentile(metrics.amount_avg, array(0.25, 0.5, 0.75)) AS amount_range\n    FROM business_meta_with_amount\n    WHERE duration IS NOT NULL\n    AND metrics.amount_avg IS NOT NULL\n    AND address.sido_code IS NOT NULL\n    GROUP BY duration, address.sido_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_info.json', 'options': {'sql': '    SELECT\n            struct(bdong_range.*) AS depth3_range,\n            struct(sigungu_range.*) AS depth2_range,\n            struct(sido_range.*) AS depth1_range\n    FROM  sido_range\n    JOIN sigungu_range\n    ON sido_range.sido_code = sigungu_range.sido_code\n    AND sido_range.duration = sigungu_range.duration\n    JOIN bdong_range\n    ON sigungu_range.sido_code = bdong_range.sido_code\n    AND  sigungu_range.sigungu_code = bdong_range.sigungu_code\n    AND sigungu_range.duration = bdong_range.duration'}, 'role': 'process', 'type': 'sql'}]"
1101,process:::sigungu_range:::market_info,process:::address_amount_range:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info.json', 'options': {'sql': '    SELECT  duration,\n            address.sido_code,\n            address.sigungu_code,\n            percentile(metrics.amount_avg, array(0.25, 0.5, 0.75)) AS amount_range\n    FROM business_meta_with_amount\n    WHERE duration IS NOT NULL\n    AND metrics.amount_avg IS NOT NULL\n    AND address.sido_code IS NOT NULL\n    AND address.sigungu_code IS NOT NULL\n    GROUP BY duration, address.sido_code, address.sigungu_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_info.json', 'options': {'sql': '    SELECT\n            struct(bdong_range.*) AS depth3_range,\n            struct(sigungu_range.*) AS depth2_range,\n            struct(sido_range.*) AS depth1_range\n    FROM  sido_range\n    JOIN sigungu_range\n    ON sido_range.sido_code = sigungu_range.sido_code\n    AND sido_range.duration = sigungu_range.duration\n    JOIN bdong_range\n    ON sigungu_range.sido_code = bdong_range.sido_code\n    AND  sigungu_range.sigungu_code = bdong_range.sigungu_code\n    AND sigungu_range.duration = bdong_range.duration'}, 'role': 'process', 'type': 'sql'}]"
1102,process:::bdong_range:::market_info,process:::address_amount_range:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info.json', 'options': {'sql': '    SELECT  duration,\n            address.sido_code,\n            address.sigungu_code,\n            address.b_code,\n            percentile(metrics.amount_avg, array(0.25, 0.5, 0.75)) AS amount_range\n    FROM business_meta_with_amount\n    WHERE duration IS NOT NULL\n    AND metrics.amount_avg IS NOT NULL\n    AND address.sido_code IS NOT NULL\n    AND address.sigungu_code IS NOT NULL\n    AND address.b_code IS NOT NULL\n    GROUP BY duration, address.sido_code, address.sigungu_code, address.b_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_info.json', 'options': {'sql': '    SELECT\n            struct(bdong_range.*) AS depth3_range,\n            struct(sigungu_range.*) AS depth2_range,\n            struct(sido_range.*) AS depth1_range\n    FROM  sido_range\n    JOIN sigungu_range\n    ON sido_range.sido_code = sigungu_range.sido_code\n    AND sido_range.duration = sigungu_range.duration\n    JOIN bdong_range\n    ON sigungu_range.sido_code = bdong_range.sido_code\n    AND  sigungu_range.sigungu_code = bdong_range.sigungu_code\n    AND sigungu_range.duration = bdong_range.duration'}, 'role': 'process', 'type': 'sql'}]"
1103,process:::address_amount_range:::market_info,process:::market_info:::market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info.json', 'options': {'sql': '    SELECT\n            struct(bdong_range.*) AS depth3_range,\n            struct(sigungu_range.*) AS depth2_range,\n            struct(sido_range.*) AS depth1_range\n    FROM  sido_range\n    JOIN sigungu_range\n    ON sido_range.sido_code = sigungu_range.sido_code\n    AND sido_range.duration = sigungu_range.duration\n    JOIN bdong_range\n    ON sigungu_range.sido_code = bdong_range.sido_code\n    AND  sigungu_range.sigungu_code = bdong_range.sigungu_code\n    AND sigungu_range.duration = bdong_range.duration'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_info.json', 'options': {'sql': 'SELECT\n        business_id,\n        name,\n        location,\n        kcd_classification,\n        address,\n        duration,\n        metrics,\n        prev_metrics,\n        named_struct(\n            \'depth1\', amount_range_depth1,\n            \'depth2\', amount_range_depth2,\n            \'depth3\', amount_range_depth3\n        ) AS amount_range\nFROM (\n        SELECT\n                business_meta_with_amount.*,\n                CASE\n                    WHEN metrics.amount_avg < depth1_range.amount_range[0] THEN ""lower""\n                    WHEN metrics.amount_avg < depth1_range.amount_range[1] THEN ""lower_middle""\n                    WHEN metrics.amount_avg < depth1_range.amount_range[2] THEN ""upper_middle""\n                    WHEN metrics.amount_avg >= depth1_range.amount_range[2] THEN ""upper""\n                    ELSE null\n                END AS amount_range_depth1,\n                CASE\n                    WHEN metrics.amount_avg < depth2_range.amount_range[0] THEN ""lower""\n                    WHEN metrics.amount_avg < depth2_range.amount_range[1] THEN ""lower_middle""\n                    WHEN metrics.amount_avg < depth2_range.amount_range[2] THEN ""upper_middle""\n                    WHEN metrics.amount_avg >= depth2_range.amount_range[2] THEN ""upper""\n                    ELSE null\n                END AS amount_range_depth2,\n                CASE\n                    WHEN metrics.amount_avg < depth3_range.amount_range[0] THEN ""lower""\n                    WHEN metrics.amount_avg < depth3_range.amount_range[1] THEN ""lower_middle""\n                    WHEN metrics.amount_avg < depth3_range.amount_range[2] THEN ""upper_middle""\n                    WHEN metrics.amount_avg >= depth3_range.amount_range[2] THEN ""upper""\n                    ELSE null\n                END AS amount_range_depth3\n        FROM business_meta_with_amount\n        LEFT OUTER JOIN address_amount_range\n        ON  business_meta_with_amount.duration = address_amount_range.depth3_range.duration\n        AND business_meta_with_amount.address.sido_code = address_amount_range.depth3_range.sido_code\n        AND business_meta_with_amount.address.sigungu_code = address_amount_range.depth3_range.sigungu_code\n        AND business_meta_with_amount.address.b_code = address_amount_range.depth3_range.b_code\n)'}, 'role': 'process', 'type': 'sql'}]"
1104,process:::market_info:::market_info,s3://kcd-de-production/service/market_area/market_info,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'market_info.json', 'options': {'sql': 'SELECT\n        business_id,\n        name,\n        location,\n        kcd_classification,\n        address,\n        duration,\n        metrics,\n        prev_metrics,\n        named_struct(\n            \'depth1\', amount_range_depth1,\n            \'depth2\', amount_range_depth2,\n            \'depth3\', amount_range_depth3\n        ) AS amount_range\nFROM (\n        SELECT\n                business_meta_with_amount.*,\n                CASE\n                    WHEN metrics.amount_avg < depth1_range.amount_range[0] THEN ""lower""\n                    WHEN metrics.amount_avg < depth1_range.amount_range[1] THEN ""lower_middle""\n                    WHEN metrics.amount_avg < depth1_range.amount_range[2] THEN ""upper_middle""\n                    WHEN metrics.amount_avg >= depth1_range.amount_range[2] THEN ""upper""\n                    ELSE null\n                END AS amount_range_depth1,\n                CASE\n                    WHEN metrics.amount_avg < depth2_range.amount_range[0] THEN ""lower""\n                    WHEN metrics.amount_avg < depth2_range.amount_range[1] THEN ""lower_middle""\n                    WHEN metrics.amount_avg < depth2_range.amount_range[2] THEN ""upper_middle""\n                    WHEN metrics.amount_avg >= depth2_range.amount_range[2] THEN ""upper""\n                    ELSE null\n                END AS amount_range_depth2,\n                CASE\n                    WHEN metrics.amount_avg < depth3_range.amount_range[0] THEN ""lower""\n                    WHEN metrics.amount_avg < depth3_range.amount_range[1] THEN ""lower_middle""\n                    WHEN metrics.amount_avg < depth3_range.amount_range[2] THEN ""upper_middle""\n                    WHEN metrics.amount_avg >= depth3_range.amount_range[2] THEN ""upper""\n                    ELSE null\n                END AS amount_range_depth3\n        FROM business_meta_with_amount\n        LEFT OUTER JOIN address_amount_range\n        ON  business_meta_with_amount.duration = address_amount_range.depth3_range.duration\n        AND business_meta_with_amount.address.sido_code = address_amount_range.depth3_range.sido_code\n        AND business_meta_with_amount.address.sigungu_code = address_amount_range.depth3_range.sigungu_code\n        AND business_meta_with_amount.address.b_code = address_amount_range.depth3_range.b_code\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'market_info_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/market_info'}, 'role': 'source', 'type': 'file'}, {'filename': 'market_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/market_info'}, 'role': 'sink', 'type': 'file'}]"
1105,s3://kcd-de-production/raw/firehose/plover/,process:::plover:::partition_prod_back_fill_parquet,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'partition_prod_back_fill_parquet.json', 'options': {'paths': 's3://kcd-de-production/raw/firehose/plover_compact/created_at_date=2021-01-27', 'format': 'parquet', 'read': '{""basePath"":""s3://kcd-de-production/raw/firehose/plover_compact""}'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'partition_prod_back_fill_parquet.json', 'options': {'sql': ""SELECT\n  table_name,\n  text_dvs,\n  from_unixtime(timestamp / 1000) AS ts,\n  created_at_date\nFROM    (\n  SELECT  timestamp,\n          CONCAT(service_name, '_', label_name) AS table_name,\n          row_to_json(\n            named_struct(\n              '_event_id',  get_json_object(value, '$._event_id'),\n              '_service_name', service_name,\n              '_label_name', label_name,\n              '_timestamp', timestamp,\n              'content', get_json_object(value, '$.content')\n            )\n          ) AS text_dvs,\n          created_at_date\n  FROM\n          plover_src\n  WHERE\n          value IS NOT NULL\n  AND\n          service_name IS NOT null\n  AND\n          label_name IS NOT null\n)""}, 'role': 'process', 'type': 'sql'}]"
1106,s3://kcd-pos-data/dev/,process:::pos:::partition_prod_back_fill_parquet,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'partition_prod_back_fill_parquet.json', 'options': {'paths': 's3://kcd-pos-data/dev/year=2021/month=01/day=27', 'format': 'json', 'read': '{""basePath"":""s3://kcd-pos-data/dev""}'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'partition_prod_back_fill_parquet.json', 'options': {'sql': ""SELECT\n  table_name,\n  text_dvs,\n  from_unixtime(unix_timestamp()) AS ts,\n  cast(current_date() as string) AS created_at_date\nFROM (\n  SELECT  CONCAT(service_name, '_', label_name) AS table_name,\n          row_to_json(named_struct(\n            'content', content,\n            '_timestamp', timestamp,\n            '_service_name', service_name,\n            '_label_name', label_name,\n            '_event_id', _event_id\n          )) AS text_dvs\n  FROM    (\n    SELECT  source AS label_name,\n            'pos' AS service_name,\n            from_unixtime(unix_timestamp()) AS timestamp,\n            uuid() AS _event_id,\n            to_json(struct(*)) AS content\n    FROM\n            pos_src\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
1107,process:::plover:::partition_prod_back_fill_parquet,process:::union_v3:::partition_prod_back_fill_parquet,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'partition_prod_back_fill_parquet.json', 'options': {'sql': ""SELECT\n  table_name,\n  text_dvs,\n  from_unixtime(timestamp / 1000) AS ts,\n  created_at_date\nFROM    (\n  SELECT  timestamp,\n          CONCAT(service_name, '_', label_name) AS table_name,\n          row_to_json(\n            named_struct(\n              '_event_id',  get_json_object(value, '$._event_id'),\n              '_service_name', service_name,\n              '_label_name', label_name,\n              '_timestamp', timestamp,\n              'content', get_json_object(value, '$.content')\n            )\n          ) AS text_dvs,\n          created_at_date\n  FROM\n          plover_src\n  WHERE\n          value IS NOT NULL\n  AND\n          service_name IS NOT null\n  AND\n          label_name IS NOT null\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'partition_prod_back_fill_parquet.json', 'options': {'sql': 'SELECT\n  lower(table_name) AS tb,\n  created_at_date,\n  text_dvs.text as value\nFROM (\n  SELECT * FROM plover\n\n  UNION ALL\n\n  SELECT * FROM pos\n)'}, 'role': 'process', 'type': 'sql'}]"
1108,process:::pos:::partition_prod_back_fill_parquet,process:::union_v3:::partition_prod_back_fill_parquet,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'partition_prod_back_fill_parquet.json', 'options': {'sql': ""SELECT\n  table_name,\n  text_dvs,\n  from_unixtime(unix_timestamp()) AS ts,\n  cast(current_date() as string) AS created_at_date\nFROM (\n  SELECT  CONCAT(service_name, '_', label_name) AS table_name,\n          row_to_json(named_struct(\n            'content', content,\n            '_timestamp', timestamp,\n            '_service_name', service_name,\n            '_label_name', label_name,\n            '_event_id', _event_id\n          )) AS text_dvs\n  FROM    (\n    SELECT  source AS label_name,\n            'pos' AS service_name,\n            from_unixtime(unix_timestamp()) AS timestamp,\n            uuid() AS _event_id,\n            to_json(struct(*)) AS content\n    FROM\n            pos_src\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'partition_prod_back_fill_parquet.json', 'options': {'sql': 'SELECT\n  lower(table_name) AS tb,\n  created_at_date,\n  text_dvs.text as value\nFROM (\n  SELECT * FROM plover\n\n  UNION ALL\n\n  SELECT * FROM pos\n)'}, 'role': 'process', 'type': 'sql'}]"
1109,process:::union_v3:::partition_prod_back_fill_parquet,s3://kcd-de-production/raw/catalog_v3_complete,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'partition_prod_back_fill_parquet.json', 'options': {'sql': 'SELECT\n  lower(table_name) AS tb,\n  created_at_date,\n  text_dvs.text as value\nFROM (\n  SELECT * FROM plover\n\n  UNION ALL\n\n  SELECT * FROM pos\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'partition_prod_back_fill_parquet.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'format': 'text', 'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/catalog_v3_complete', 'partitions': 'tb,created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '100000'}, 'role': 'sink', 'type': 'custom'}]"
1110,s3://kcd-de-production/service/message/reports/user_type=cashnote/report_name=common,process:::formatted:::bulkload_with_formatting_cashnote_user_meta_common,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bulkload_cashnote_user_meta_common.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/service/message/reports/user_type=cashnote/latest/report_name=common'}, 'role': 'source', 'type': 'file'}, {'filename': 'common_reports.json', 'options': {'format': 'text', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/reports/user_type=cashnote/date_id=2020-08-10/report_name=common'}, 'role': 'sink', 'type': 'file'}, {'filename': 'cashnote_user_common_reports.json', 'options': {'format': 'text', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/reports/user_type=cashnote/date_id=2021-01-29/report_name=common'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'bulkload_cashnote_user_meta_common.json', 'options': {'sql': ""  SELECT\n          unix_timestamp()* 1000 AS timestamp,\n          target_id AS `from`,\n          target_id AS to,\n          'cashnote_user_meta_common' AS label,\n          to_json(struct(*)) AS props\n  FROM    bulkload_file""}, 'role': 'process', 'type': 'sql'}]"
1111,process:::formatted:::bulkload_with_formatting_cashnote_user_meta_common,s2graph_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bulkload_cashnote_user_meta_common.json', 'options': {'sql': ""  SELECT\n          unix_timestamp()* 1000 AS timestamp,\n          target_id AS `from`,\n          target_id AS to,\n          'cashnote_user_meta_common' AS label,\n          to_json(struct(*)) AS props\n  FROM    bulkload_file""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'bulkload_paynote_place_topk.json', 'options': {'s2.spark.sql.streaming.sink.writeMethod': 'bulk', 's2.spark.sql.bulkload.sink.label.mapping': 'paynote_place_topk:paynote_place_topk-2021-01-24_09-24-37', 's2.spark.sql.bulkload.sink.build.degree': 'false', 's2.spark.sql.bulkload.sink.auto.edge.create': 'false', 's2.spark.sql.streaming.sink.skip.error': 'true', 's2.spark.sql.bulkload.sink.hbase.table.name': 'paynote_place_topk-2021-01-24_09-24-37', 's2.spark.sql.bulkload.sink.hbase.table.num.regions': '10', 's2.spark.sql.bulkload.sink.hbase.temp.dir': '/tmp/bulkload/paynote_place_topk-2021-01-24_09-24-37', 's2.spark.sql.bulkload.sink.hbase.incrementalLoad': 'false', 's2.spark.sql.bulkload.sink.hbase.compression': 'LZ4', 'runLoadIncrementalHFiles': 'false', 'hbase.zookeeper.quorum': 'ec2-13-125-222-89.ap-northeast-2.compute.amazonaws.com:2181', 'cache.max.size': '10000', 'cache.ttl.seconds': '6000', 'db.default.driver': 'com.mysql.jdbc.Driver', 'db.default.url': 'jdbc:mysql://s2graph-meta-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com/graph_production', 'db.default.user': 'graph', 'db.default.password': '90f5b058-0151-4dcc-b0cb-c8346ebba924'}, 'role': 'sink', 'type': 's2graph'}, {'filename': 'bulkload_cashnote_user_meta_common.json', 'options': {'s2.spark.sql.streaming.sink.writeMethod': 'bulk', 's2.spark.sql.bulkload.sink.label.mapping': 'cashnote_user_meta_common:cashnote_user_meta_common-2020-08-27_10-03-58', 's2.spark.sql.bulkload.sink.build.degree': 'false', 's2.spark.sql.bulkload.sink.auto.edge.create': 'false', 's2.spark.sql.streaming.sink.skip.error': 'true', 's2.spark.sql.bulkload.sink.hbase.table.name': 'cashnote_user_meta_common-2020-08-27_10-03-58', 's2.spark.sql.bulkload.sink.hbase.table.num.regions': '5', 's2.spark.sql.bulkload.sink.hbase.temp.dir': '/tmp/bulkload/cashnote_user_meta_common-2020-08-27_10-03-58', 's2.spark.sql.bulkload.sink.hbase.incrementalLoad': 'false', 's2.spark.sql.bulkload.sink.hbase.compression': 'LZ4', 'runLoadIncrementalHFiles': 'false', 'hbase.zookeeper.quorum': 'ec2-13-125-222-89.ap-northeast-2.compute.amazonaws.com:2181', 'cache.max.size': '10000', 'cache.ttl.seconds': '6000', 'db.default.driver': 'com.mysql.jdbc.Driver', 'db.default.url': 'jdbc:mysql://s2graph-meta-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com/graph_production', 'db.default.user': 'graph', 'db.default.password': '90f5b058-0151-4dcc-b0cb-c8346ebba924'}, 'role': 'sink', 'type': 's2graph'}, {'filename': 'bulkload_cashnote_business_meta_common.json', 'options': {'s2.spark.sql.streaming.sink.writeMethod': 'bulk', 's2.spark.sql.bulkload.sink.label.mapping': 'cashnote_business_meta_common:cashnote_business_meta_common-2021-01-29_00-49-51', 's2.spark.sql.bulkload.sink.build.degree': 'false', 's2.spark.sql.bulkload.sink.auto.edge.create': 'false', 's2.spark.sql.streaming.sink.skip.error': 'true', 's2.spark.sql.bulkload.sink.hbase.table.name': 'cashnote_business_meta_common-2021-01-29_00-49-51', 's2.spark.sql.bulkload.sink.hbase.table.num.regions': '5', 's2.spark.sql.bulkload.sink.hbase.temp.dir': '/tmp/bulkload/cashnote_business_meta_common-2021-01-29_00-49-51', 's2.spark.sql.bulkload.sink.hbase.incrementalLoad': 'false', 's2.spark.sql.bulkload.sink.hbase.compression': 'LZ4', 'runLoadIncrementalHFiles': 'false', 'hbase.zookeeper.quorum': 'ec2-13-125-222-89.ap-northeast-2.compute.amazonaws.com:2181', 'cache.max.size': '10000', 'cache.ttl.seconds': '6000', 'db.default.driver': 'com.mysql.jdbc.Driver', 'db.default.url': 'jdbc:mysql://s2graph-meta-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com/graph_production', 'db.default.user': 'graph', 'db.default.password': '90f5b058-0151-4dcc-b0cb-c8346ebba924'}, 'role': 'sink', 'type': 's2graph'}]"
1112,process:::transactions:::build_stats,process:::daily_hour_transactions_stat:::build_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_stats.json', 'options': {'sql': 'SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n            (purchased_at is not null AND purchase_canceled_at is null) OR\n            (purchased_at is null AND approval_canceled_at is null)\n          )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('hour', t.transacted_at) AS time,\n          'day_hour' AS time_unit,\n          COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n          COUNT(*) AS card_sales_count,\n          COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n          COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n          COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n          SUM(IF (t.visit_order > 1, t.amount, 0)) AS returning_amount,\n          SUM(IF (t.visit_order > 1, 1, 0)) AS returning_count\nFROM      transactions t\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]"
1113,process:::daily_hour_transactions_stat:::build_stats,process:::daily_transactions_stat:::build_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('hour', t.transacted_at) AS time,\n          'day_hour' AS time_unit,\n          COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n          COUNT(*) AS card_sales_count,\n          COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n          COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n          COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n          SUM(IF (t.visit_order > 1, t.amount, 0)) AS returning_amount,\n          SUM(IF (t.visit_order > 1, 1, 0)) AS returning_count\nFROM      transactions t\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('day', time) AS time,\n          'day' AS time_unit,\n          SUM(card_sales_amount) AS card_sales_amount,\n          SUM(card_sales_count) AS card_sales_count,\n          SUM(card_sales_fee) AS card_sales_fee,\n          SUM(card_sales_vat_fee) AS card_sales_vat_fee,\n          SUM(card_sales_payment) AS card_sales_payment,\n          SUM(returning_amount) AS returning_amount,\n          SUM(returning_count) AS returning_count\nFROM      daily_hour_transactions_stat t\nGROUP BY 1, 2, 3""}, 'role': 'process', 'type': 'sql'}]"
1114,process:::daily_hour_transactions_stat:::build_stats,process:::transactions_stat:::build_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('hour', t.transacted_at) AS time,\n          'day_hour' AS time_unit,\n          COALESCE(SUM(t.amount), 0) AS card_sales_amount,\n          COUNT(*) AS card_sales_count,\n          COALESCE(SUM(t.fee), 0) AS card_sales_fee,\n          COALESCE(SUM(t.vat_fee), 0) AS card_sales_vat_fee,\n          COALESCE(SUM(t.payment), 0) AS card_sales_payment,\n          SUM(IF (t.visit_order > 1, t.amount, 0)) AS returning_amount,\n          SUM(IF (t.visit_order > 1, 1, 0)) AS returning_count\nFROM      transactions t\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_stats.json', 'options': {'sql': 'SELECT * FROM daily_hour_transactions_stat\nUNION ALL\nSELECT * FROM daily_transactions_stat\nUNION ALL\nSELECT * FROM monthly_transactions_stat'}, 'role': 'process', 'type': 'sql'}]"
1115,process:::daily_transactions_stat:::build_stats,process:::monthly_transactions_stat:::build_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('day', time) AS time,\n          'day' AS time_unit,\n          SUM(card_sales_amount) AS card_sales_amount,\n          SUM(card_sales_count) AS card_sales_count,\n          SUM(card_sales_fee) AS card_sales_fee,\n          SUM(card_sales_vat_fee) AS card_sales_vat_fee,\n          SUM(card_sales_payment) AS card_sales_payment,\n          SUM(returning_amount) AS returning_amount,\n          SUM(returning_count) AS returning_count\nFROM      daily_hour_transactions_stat t\nGROUP BY 1, 2, 3""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('month', time) AS time,\n          'month' AS time_unit,\n          SUM(card_sales_amount) AS card_sales_amount,\n          SUM(card_sales_count) AS card_sales_count,\n          SUM(card_sales_fee) AS card_sales_fee,\n          SUM(card_sales_vat_fee) AS card_sales_vat_fee,\n          SUM(card_sales_payment) AS card_sales_payment,\n          SUM(returning_amount) AS returning_amount,\n          SUM(returning_count) AS returning_count\nFROM      daily_transactions_stat t\nGROUP BY 1, 2, 3""}, 'role': 'process', 'type': 'sql'}]"
1116,process:::daily_transactions_stat:::build_stats,process:::transactions_stat:::build_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('day', time) AS time,\n          'day' AS time_unit,\n          SUM(card_sales_amount) AS card_sales_amount,\n          SUM(card_sales_count) AS card_sales_count,\n          SUM(card_sales_fee) AS card_sales_fee,\n          SUM(card_sales_vat_fee) AS card_sales_vat_fee,\n          SUM(card_sales_payment) AS card_sales_payment,\n          SUM(returning_amount) AS returning_amount,\n          SUM(returning_count) AS returning_count\nFROM      daily_hour_transactions_stat t\nGROUP BY 1, 2, 3""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_stats.json', 'options': {'sql': 'SELECT * FROM daily_hour_transactions_stat\nUNION ALL\nSELECT * FROM daily_transactions_stat\nUNION ALL\nSELECT * FROM monthly_transactions_stat'}, 'role': 'process', 'type': 'sql'}]"
1117,process:::monthly_transactions_stat:::build_stats,process:::transactions_stat:::build_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT    t.business_id,\n          t.credential_key,\n          date_trunc('month', time) AS time,\n          'month' AS time_unit,\n          SUM(card_sales_amount) AS card_sales_amount,\n          SUM(card_sales_count) AS card_sales_count,\n          SUM(card_sales_fee) AS card_sales_fee,\n          SUM(card_sales_vat_fee) AS card_sales_vat_fee,\n          SUM(card_sales_payment) AS card_sales_payment,\n          SUM(returning_amount) AS returning_amount,\n          SUM(returning_count) AS returning_count\nFROM      daily_transactions_stat t\nGROUP BY 1, 2, 3""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_stats.json', 'options': {'sql': 'SELECT * FROM daily_hour_transactions_stat\nUNION ALL\nSELECT * FROM daily_transactions_stat\nUNION ALL\nSELECT * FROM monthly_transactions_stat'}, 'role': 'process', 'type': 'sql'}]"
1118,process:::transactions_stat:::build_stats,s3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_stats.json', 'options': {'sql': 'SELECT * FROM daily_hour_transactions_stat\nUNION ALL\nSELECT * FROM daily_transactions_stat\nUNION ALL\nSELECT * FROM monthly_transactions_stat'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/transactions_stat'}, 'role': 'source', 'type': 'file'}]"
1119,process:::purchases_stat:::build_stats,s3://kcd-de-production/raw/stat/snowdon/card_sales/purchases_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT    business_id,\n          credential_key,\n          paid_at AS time,\n          issuer_name,\n          'day' AS time_unit,\n          SUM(payment) AS expected\nFROM      purchases\nGROUP BY 1, 2, 3, 4""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_stats.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/purchases_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
1120,process:::payments_stat:::build_stats,s3://kcd-de-production/raw/stat/snowdon/card_sales/payments_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_stats.json', 'options': {'sql': ""SELECT  business_id,\n        credential_key,\n        received_at AS time,\n        issuer_name,\n        'day' AS time_unit,\n        SUM(reserved_amount) AS reserved,\n        SUM(received_amount) AS received\nFROM    payments\nGROUP BY 1, 2, 3, 4""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_stats.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/payments_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/payments_stat'}, 'role': 'source', 'type': 'file'}]"
1121,s3://kcd-de-production/raw/stat/snowdon/card_sales/payments_stat,process:::payments_stat:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_stats.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card_sales/payments_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card_sales/payments_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      payments_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
1122,process:::card_payments_classification:::card_classification,process:::shinhancard_business_classification:::card_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, classification_code, merchant_code_name AS classification_name\nFROM (\n        SELECT    registration_number, card_issuer, classification_code, merchant_code_name,\n                  row_number() OVER (PARTITION BY registration_number, card_issuer ORDER BY updated_at DESC) AS rank\n        FROM      card_payments\n        WHERE     card_issuer is not null\n)\nWHERE   rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_classification.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT\n                  nvl(snowdon.registration_number, goose.registration_number) AS registration_number,\n                  'shinhan' AS card_issuer,\n                  nvl(snowdon.classification_code, goose.classification_code) AS classification_code,\n                  nvl(snowdon.classification_name, goose.classification_name) AS classification_name\n        FROM (\n                SELECT\n                          card_classification.registration_number,\n                          card_classification.card_issuer,\n                          card_classification.classification_code,\n                          shinhancard_classification.classification_name\n                FROM  (\n                          SELECT  *\n                          FROM    card_payments_classification\n                          WHERE   card_issuer = 'shinhan'\n                ) card_classification\n                LEFT OUTER JOIN   shinhancard_classification\n                ON    card_classification.classification_code = shinhancard_classification.classification_code\n        ) goose\n        FULL OUTER JOIN (\n          SELECT  *\n          FROM (\n                SELECT    registration_number, classification_code, classification_name,\n                          row_number() OVER (PARTITION BY registration_number ORDER BY updated_at DESC) AS rank\n                FROM      shinhancard_businesses\n          )\n          WHERE rank = 1\n        ) snowdon\n        ON    goose.registration_number = snowdon.registration_number\n)\nWHERE  classification_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
1123,process:::card_payments_classification:::card_classification,process:::bccard_business_classification:::card_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, classification_code, merchant_code_name AS classification_name\nFROM (\n        SELECT    registration_number, card_issuer, classification_code, merchant_code_name,\n                  row_number() OVER (PARTITION BY registration_number, card_issuer ORDER BY updated_at DESC) AS rank\n        FROM      card_payments\n        WHERE     card_issuer is not null\n)\nWHERE   rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_classification.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    *\n        FROM  (\n                  SELECT  *\n                  FROM    card_payments_classification\n                  WHERE   card_issuer = 'bc'\n        ) card_classification\n        LEFT OUTER JOIN bccard_classification\n        ON card_classification.classification_name = bccard_classification.depth_3_name\n)\nWHERE depth_1_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
1124,process:::card_payments_classification:::card_classification,process:::hyundaicard_business_classification:::card_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, classification_code, merchant_code_name AS classification_name\nFROM (\n        SELECT    registration_number, card_issuer, classification_code, merchant_code_name,\n                  row_number() OVER (PARTITION BY registration_number, card_issuer ORDER BY updated_at DESC) AS rank\n        FROM      card_payments\n        WHERE     card_issuer is not null\n)\nWHERE   rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_classification.json', 'options': {'sql': ""SELECT    card_classification.registration_number,\n          card_classification.card_issuer,\n          card_classification.classification_name,\n          hyundaicard_classification.classification_code\nFROM  (\n          SELECT  *\n          FROM    card_payments_classification\n          WHERE   card_issuer = 'hyundai'\n) card_classification\nLEFT OUTER JOIN hyundaicard_classification\nON card_classification.classification_name = hyundaicard_classification.classification""}, 'role': 'process', 'type': 'sql'}]"
1125,process:::shinhancard_business_classification:::card_classification,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=shinhancard,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT\n                  nvl(snowdon.registration_number, goose.registration_number) AS registration_number,\n                  'shinhan' AS card_issuer,\n                  nvl(snowdon.classification_code, goose.classification_code) AS classification_code,\n                  nvl(snowdon.classification_name, goose.classification_name) AS classification_name\n        FROM (\n                SELECT\n                          card_classification.registration_number,\n                          card_classification.card_issuer,\n                          card_classification.classification_code,\n                          shinhancard_classification.classification_name\n                FROM  (\n                          SELECT  *\n                          FROM    card_payments_classification\n                          WHERE   card_issuer = 'shinhan'\n                ) card_classification\n                LEFT OUTER JOIN   shinhancard_classification\n                ON    card_classification.classification_code = shinhancard_classification.classification_code\n        ) goose\n        FULL OUTER JOIN (\n          SELECT  *\n          FROM (\n                SELECT    registration_number, classification_code, classification_name,\n                          row_number() OVER (PARTITION BY registration_number ORDER BY updated_at DESC) AS rank\n                FROM      shinhancard_businesses\n          )\n          WHERE rank = 1\n        ) snowdon\n        ON    goose.registration_number = snowdon.registration_number\n)\nWHERE  classification_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=shinhancard'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=shinhancard'}, 'role': 'sink', 'type': 'file'}]"
1126,process:::bccard_business_classification:::card_classification,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT    *\n        FROM  (\n                  SELECT  *\n                  FROM    card_payments_classification\n                  WHERE   card_issuer = 'bc'\n        ) card_classification\n        LEFT OUTER JOIN bccard_classification\n        ON card_classification.classification_name = bccard_classification.depth_3_name\n)\nWHERE depth_1_code IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=bccard'}, 'role': 'sink', 'type': 'file'}]"
1127,process:::hyundaicard_business_classification:::card_classification,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=hyundaicard,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'card_classification.json', 'options': {'sql': ""SELECT    card_classification.registration_number,\n          card_classification.card_issuer,\n          card_classification.classification_name,\n          hyundaicard_classification.classification_code\nFROM  (\n          SELECT  *\n          FROM    card_payments_classification\n          WHERE   card_issuer = 'hyundai'\n) card_classification\nLEFT OUTER JOIN hyundaicard_classification\nON card_classification.classification_name = hyundaicard_classification.classification""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'card_classification_business_id.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=hyundaicard'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=classification/name=hyundaicard'}, 'role': 'sink', 'type': 'file'}]"
1128,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/hometax_ksic_mapping.csv,process:::hometax_classification:::hometax_ksic_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_ksic_classification.json', 'options': {'format': 'csv', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hometax_ksic_mapping.csv', 'columns': 'id,hometax_classification_code,hometax_classification_code_1_depth,hometax_classification_name_1_depth,hometax_classification_code_2_depth,hometax_classification_name_2_depth,hometax_classification_code_3_depth,hometax_classification_name_3_depth,hometax_classification_code_4_depth,hometax_classification_name_4_depth,hometax_classification_name_5_depth,standard_classification_code,standard_classification_code_1_depth,standard_classification_name_1_depth,standard_classification_code_2_depth,standard_classification_name_2_depth,standard_classification_code_3_depth,standard_classification_name_3_depth,standard_classification_code_4_depth,standard_classification_name_4_depth,standard_classification_name_5_depth'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_ksic_classification.json', 'options': {'sql': 'SELECT\n        businesses.id AS business_id,\n        businesses.registration_number,\n        hometax_classification_code AS code,\n        hometax_classification_code_1_depth AS depth_1_code,\n        hometax_classification_name_1_depth AS depth_1_name,\n        hometax_classification_code_2_depth AS depth_2_code,\n        hometax_classification_name_2_depth AS depth_2_name,\n        hometax_classification_code_3_depth AS depth_3_code,\n        hometax_classification_name_3_depth AS depth_3_name,\n        hometax_classification_code_4_depth AS depth_4_code,\n        hometax_classification_name_4_depth AS depth_4_name,\n        hometax_classification_name_5_depth AS depth_5_name\nFROM businesses\nJOIN (\n        SELECT *\n        FROM (\n                SELECT    *,\n                          row_number() OVER (PARTITION BY hometax_classification_code ORDER BY id) AS code_rank\n                FROM      hometax_ksic_map\n        )\n        WHERE code_rank = 1\n) AS dedup_map\nON businesses.hometax_business_classification_code = dedup_map.hometax_classification_code'}, 'role': 'process', 'type': 'sql'}]"
1129,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/hometax_ksic_mapping.csv,process:::ksic_classification:::hometax_ksic_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_ksic_classification.json', 'options': {'format': 'csv', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hometax_ksic_mapping.csv', 'columns': 'id,hometax_classification_code,hometax_classification_code_1_depth,hometax_classification_name_1_depth,hometax_classification_code_2_depth,hometax_classification_name_2_depth,hometax_classification_code_3_depth,hometax_classification_name_3_depth,hometax_classification_code_4_depth,hometax_classification_name_4_depth,hometax_classification_name_5_depth,standard_classification_code,standard_classification_code_1_depth,standard_classification_name_1_depth,standard_classification_code_2_depth,standard_classification_name_2_depth,standard_classification_code_3_depth,standard_classification_name_3_depth,standard_classification_code_4_depth,standard_classification_name_4_depth,standard_classification_name_5_depth'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'hometax_ksic_classification.json', 'options': {'sql': ""SELECT\n          businesses.id AS business_id,\n          businesses.registration_number,\n          code,\n          depth_1_code,\n          depth_1_name,\n          depth_2_code,\n          depth_2_name,\n          depth_3_code,\n          depth_3_name,\n          depth_4_code,\n          depth_4_name,\n          depth_5_name,\n          depth_all,\n          depth_1_2_code\nFROM      businesses\nJOIN (\n      SELECT\n              hometax_classification_code,\n              collect_set(standard_classification_code) AS code,\n              collect_set(standard_classification_code_1_depth) AS depth_1_code,\n              collect_set(standard_classification_name_1_depth) AS depth_1_name,\n              collect_set(standard_classification_code_2_depth) AS depth_2_code,\n              collect_set(standard_classification_name_2_depth) AS depth_2_name,\n              collect_set(standard_classification_code_3_depth) AS depth_3_code,\n              collect_set(standard_classification_name_3_depth) AS depth_3_name,\n              collect_set(standard_classification_code_4_depth) AS depth_4_code,\n              collect_set(standard_classification_name_4_depth) AS depth_4_name,\n              collect_set(standard_classification_name_5_depth) AS depth_5_name,\n              to_json(\n                  collect_set(\n                      named_struct(\n                          'depth_1_code', standard_classification_code_1_depth,\n                          'depth_1_name', standard_classification_name_1_depth,\n                          'depth_2_code', standard_classification_code_2_depth,\n                          'depth_2_name', standard_classification_name_2_depth,\n                          'depth_3_code', standard_classification_code_3_depth,\n                          'depth_3_name', standard_classification_name_3_depth,\n                          'depth_4_code', standard_classification_code_4_depth,\n                          'depth_4_name', standard_classification_name_4_depth,\n                          'depth_5_name', standard_classification_name_5_depth\n                      )\n                  )\n              ) AS depth_all,\n              collect_set(concat(standard_classification_code_1_depth,standard_classification_code_2_depth)) AS depth_1_2_code\n      FROM    hometax_ksic_map\n      GROUP BY hometax_classification_code\n) AS ksic\nON businesses.hometax_business_classification_code = ksic.hometax_classification_code""}, 'role': 'process', 'type': 'sql'}]"
1130,process:::hometax_classification:::hometax_ksic_classification,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax_old,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_ksic_classification.json', 'options': {'sql': 'SELECT\n        businesses.id AS business_id,\n        businesses.registration_number,\n        hometax_classification_code AS code,\n        hometax_classification_code_1_depth AS depth_1_code,\n        hometax_classification_name_1_depth AS depth_1_name,\n        hometax_classification_code_2_depth AS depth_2_code,\n        hometax_classification_name_2_depth AS depth_2_name,\n        hometax_classification_code_3_depth AS depth_3_code,\n        hometax_classification_name_3_depth AS depth_3_name,\n        hometax_classification_code_4_depth AS depth_4_code,\n        hometax_classification_name_4_depth AS depth_4_name,\n        hometax_classification_name_5_depth AS depth_5_name\nFROM businesses\nJOIN (\n        SELECT *\n        FROM (\n                SELECT    *,\n                          row_number() OVER (PARTITION BY hometax_classification_code ORDER BY id) AS code_rank\n                FROM      hometax_ksic_map\n        )\n        WHERE code_rank = 1\n) AS dedup_map\nON businesses.hometax_business_classification_code = dedup_map.hometax_classification_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'new_hometax_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax_old'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=hometax_old'}, 'role': 'sink', 'type': 'file'}]"
1131,process:::ksic_classification:::hometax_ksic_classification,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=ksic,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_ksic_classification.json', 'options': {'sql': ""SELECT\n          businesses.id AS business_id,\n          businesses.registration_number,\n          code,\n          depth_1_code,\n          depth_1_name,\n          depth_2_code,\n          depth_2_name,\n          depth_3_code,\n          depth_3_name,\n          depth_4_code,\n          depth_4_name,\n          depth_5_name,\n          depth_all,\n          depth_1_2_code\nFROM      businesses\nJOIN (\n      SELECT\n              hometax_classification_code,\n              collect_set(standard_classification_code) AS code,\n              collect_set(standard_classification_code_1_depth) AS depth_1_code,\n              collect_set(standard_classification_name_1_depth) AS depth_1_name,\n              collect_set(standard_classification_code_2_depth) AS depth_2_code,\n              collect_set(standard_classification_name_2_depth) AS depth_2_name,\n              collect_set(standard_classification_code_3_depth) AS depth_3_code,\n              collect_set(standard_classification_name_3_depth) AS depth_3_name,\n              collect_set(standard_classification_code_4_depth) AS depth_4_code,\n              collect_set(standard_classification_name_4_depth) AS depth_4_name,\n              collect_set(standard_classification_name_5_depth) AS depth_5_name,\n              to_json(\n                  collect_set(\n                      named_struct(\n                          'depth_1_code', standard_classification_code_1_depth,\n                          'depth_1_name', standard_classification_name_1_depth,\n                          'depth_2_code', standard_classification_code_2_depth,\n                          'depth_2_name', standard_classification_name_2_depth,\n                          'depth_3_code', standard_classification_code_3_depth,\n                          'depth_3_name', standard_classification_name_3_depth,\n                          'depth_4_code', standard_classification_code_4_depth,\n                          'depth_4_name', standard_classification_name_4_depth,\n                          'depth_5_name', standard_classification_name_5_depth\n                      )\n                  )\n              ) AS depth_all,\n              collect_set(concat(standard_classification_code_1_depth,standard_classification_code_2_depth)) AS depth_1_2_code\n      FROM    hometax_ksic_map\n      GROUP BY hometax_classification_code\n) AS ksic\nON businesses.hometax_business_classification_code = ksic.hometax_classification_code""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_business_label.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=ksic'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_ksic_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=ksic'}, 'role': 'sink', 'type': 'file'}]"
1132,process:::catalog_payments_filtered:::build_raw_tables,process:::after_payments:::build_raw_tables,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_raw_tables.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_payments_raw\n WHERE    created_at_date >= '2019-12-22'\n AND      created_at_date < '2020-01-01'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_raw_tables.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n\n  UNION ALL\n\n  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          trim(IF (stlbanknm = '', null, replace(stlbanknm, '은행', ''))) AS bank_name,\n          trim(stlacctno) AS account_number,\n          CAST(pcacnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvamt AS BIGINT) AS reserved_amount,\n          CAST(etcamt AS BIGINT) AS etc_amount,\n          CAST(pcaamt AS BIGINT) AS sales_amount,\n          CAST(rcpscdamt AS BIGINT) AS received_amount,\n          CAST(vatfeeamt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymdate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n  FROM    catalog_payments_filtered a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}]"
1133,process:::hometax_amount:::hometax_business_amount_employee,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=amount,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_amount_employee.json', 'options': {'sql': ""  SELECT  business_id,\n          amount_sum,\n          fromYear, toYear,\n          year_cnt,\n          (amount_sum / year_cnt) AS amount_avg\n  FROM (\n      SELECT\n               sales.business_id,\n               sales.amount_sum,\n               sales.year_cnt,\n               CAST(YEAR(opend_at) AS INT) AS fromYear,\n               CAST(YEAR(current_date()) AS INT) AS toYear\n      FROM (\n          SELECT business_id, SUM(amount) AS amount_sum, COUNT(DISTINCT YEAR(date)) AS year_cnt\n          FROM hometax_sales_declarations\n          WHERE form_type = '부가가치세신고서'\n          GROUP BY business_id\n      ) sales\n      JOIN (\n          SELECT business_id, opend_at\n          FROM (\n              SELECT business_id, taxation_type, to_date(opened_at, 'yyyyMMdd') AS opend_at\n              FROM hometax_businesses\n          )\n          WHERE opend_at > '2015-12-31' AND opend_at < '2019-01-01'\n          AND taxation_type != '간이과세자'\n      ) valid_businesses\n      ON sales.business_id = valid_businesses.business_id\n  )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_business_label.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=amount'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=amount'}, 'role': 'sink', 'type': 'file'}]"
1134,process:::wht:::hometax_business_amount_employee,process:::hometax_employee:::hometax_business_amount_employee,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_amount_employee.json', 'options': {'sql': ""  SELECT\n          w.business_id,\n          w.imputed_at,\n          CASE\n              WHEN declare_period = '반기' THEN fulltime_employees_count * 6\n              ELSE fulltime_employees_count\n          END AS fulltime_employees_count\n  FROM hometax_wht_declarations w\n  JOIN (\n      SELECT business_id, imputed_at, max(declared_at) AS declared_at\n      FROM  hometax_wht_declarations\n      GROUP BY business_id, imputed_at\n  ) AS latest_wht\n  ON w.business_id = latest_wht.business_id\n  AND w.imputed_at = latest_wht.imputed_at\n  AND w.declared_at = latest_wht.declared_at""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_business_amount_employee.json', 'options': {'sql': 'SELECT\n         wht.business_id,\n         from_date, to_date,\n         SUM(fulltime_employees_count) AS employ_count,\n         ceil(months_between(to_date, from_date)) AS month_cnt,\n         CAST(\n             format_number(SUM(fulltime_employees_count) / ceil(months_between(to_date, from_date)), 2)\n             AS DOUBLE\n         ) AS employ_avg\nFROM     wht\nJOIN     businesses\nON wht.business_id = businesses.business_id\nWHERE wht.imputed_at >= from_date AND  wht.imputed_at < to_date\nGROUP BY wht.business_id, opend_at, from_date, to_date'}, 'role': 'process', 'type': 'sql'}]"
1135,process:::businesses:::hometax_business_amount_employee,process:::hometax_employee:::hometax_business_amount_employee,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_amount_employee.json', 'options': {'sql': ""  SELECT\n          business_id,\n          opend_at,\n          CASE\n              WHEN opend_at < '2019-01-01' THEN '2019-01-01'\n              WHEN date_trunc('MONTH', opend_at) <= date_trunc('MONTH', add_months(current_date(), -12)) THEN date_trunc('MONTH', add_months(current_date(), -12))\n              ELSE  date_trunc('MONTH', opend_at)\n          END AS from_date,\n          CASE\n              WHEN opend_at < '2019-01-01' THEN '2020-01-01'\n              ELSE  date_trunc('MONTH', current_date())\n          END AS to_date\n\n  FROM (\n      SELECT business_id, to_date(opened_at, 'yyyyMMdd') AS opend_at\n      FROM hometax_businesses\n  )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_business_amount_employee.json', 'options': {'sql': 'SELECT\n         wht.business_id,\n         from_date, to_date,\n         SUM(fulltime_employees_count) AS employ_count,\n         ceil(months_between(to_date, from_date)) AS month_cnt,\n         CAST(\n             format_number(SUM(fulltime_employees_count) / ceil(months_between(to_date, from_date)), 2)\n             AS DOUBLE\n         ) AS employ_avg\nFROM     wht\nJOIN     businesses\nON wht.business_id = businesses.business_id\nWHERE wht.imputed_at >= from_date AND  wht.imputed_at < to_date\nGROUP BY wht.business_id, opend_at, from_date, to_date'}, 'role': 'process', 'type': 'sql'}]"
1136,process:::hometax_employee:::hometax_business_amount_employee,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=employee,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax_business_amount_employee.json', 'options': {'sql': 'SELECT\n         wht.business_id,\n         from_date, to_date,\n         SUM(fulltime_employees_count) AS employ_count,\n         ceil(months_between(to_date, from_date)) AS month_cnt,\n         CAST(\n             format_number(SUM(fulltime_employees_count) / ceil(months_between(to_date, from_date)), 2)\n             AS DOUBLE\n         ) AS employ_avg\nFROM     wht\nJOIN     businesses\nON wht.business_id = businesses.business_id\nWHERE wht.imputed_at >= from_date AND  wht.imputed_at < to_date\nGROUP BY wht.business_id, opend_at, from_date, to_date'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_business_label.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=employee'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_business_amount_employee.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=employee'}, 'role': 'sink', 'type': 'file'}]"
1137,process:::meta:::message_stat,process:::current_stat:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT 'campaign_id' AS id_type, id, name, CAST(null AS STRING) AS type, CAST(null AS INT) AS population FROM campaign\nUNION ALL\nSELECT 'ad_group_id' AS id_type, id, name, type, population FROM ad_group\nUNION ALL\nSELECT 'creative_id' AS id_type, id, name, message_type AS type, CAST(null AS INT) AS population FROM creative""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}]"
1138,process:::send_log_by_status:::message_stat,process:::send_log_aggr:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT id_type, id, campaign_id, ad_group_id, creative_id, status,\n        min(timestamp) AS min_ts, max(timestamp) AS max_ts,\n        count(1) AS send_cnt,\n        count(distinct(user_id)) AS send_user_cnt\nFROM (\n    SELECT meta.*, status, user_id, timestamp\n    FROM (\n        SELECT  explode(meta_arr) AS meta, status, user_id, timestamp\n        FROM (\n                SELECT  array(\n                            named_struct('id_type', 'campaign_id', 'id', campaign_id, 'campaign_id', campaign_id, 'ad_group_id', 'n/a', 'creative_id', 'n/a'),\n                            named_struct('id_type', 'ad_group_id', 'id', ad_group_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', 'n/a'),\n                            named_struct('id_type', 'creative_id', 'id', creative_id, 'campaign_id', campaign_id, 'ad_group_id', ad_group_id, 'creative_id', creative_id)\n                        ) AS meta_arr,\n                        status, user_id, timestamp,\n                        row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n                FROM send_log\n                WHERE created_at_date = '2021-01-29'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id, campaign_id, ad_group_id, creative_id, status""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat.json', 'options': {'sql': 'SELECT\n        id_type, id, campaign_id, ad_group_id, creative_id,\n        IF(success_min_ts < fail_min_ts, success_min_ts, fail_min_ts) AS min_ts,\n        IF(success_max_ts > fail_max_ts, success_max_ts, fail_max_ts) AS max_ts,\n        success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt\nFROM (\n    SELECT\n            nvl(success_log.id_type, fail_log.id_type) AS id_type,\n            nvl(success_log.id, fail_log.id) AS id,\n            nvl(success_log.campaign_id, fail_log.campaign_id) AS campaign_id,\n            nvl(success_log.ad_group_id, fail_log.ad_group_id) AS ad_group_id,\n            nvl(success_log.creative_id, fail_log.creative_id) AS creative_id,\n            nvl(fail_log.min_ts, unix_timestamp()* 1000) AS fail_min_ts,\n            nvl(success_log.min_ts, unix_timestamp()* 1000) AS success_min_ts,\n            nvl(fail_log.max_ts, 0L) AS fail_max_ts,\n            nvl(success_log.max_ts, 0L) AS success_max_ts,\n            nvl(success_log.send_cnt, 0L) AS success_send_cnt,\n            nvl(success_log.send_user_cnt, 0L) AS success_send_user_cnt,\n            nvl(fail_log.send_cnt, 0L) AS fail_send_cnt,\n            nvl(fail_log.send_user_cnt, 0L) AS fail_send_user_cnt\n    FROM (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = true\n    ) AS success_log\n    FULL OUTER JOIN\n    (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = false\n    ) AS fail_log\n    ON success_log.id_type = fail_log.id_type\n    AND success_log.id = fail_log.id\n)'}, 'role': 'process', 'type': 'sql'}]"
1139,process:::send_log_aggr:::message_stat,process:::current_stat:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat.json', 'options': {'sql': 'SELECT\n        id_type, id, campaign_id, ad_group_id, creative_id,\n        IF(success_min_ts < fail_min_ts, success_min_ts, fail_min_ts) AS min_ts,\n        IF(success_max_ts > fail_max_ts, success_max_ts, fail_max_ts) AS max_ts,\n        success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt\nFROM (\n    SELECT\n            nvl(success_log.id_type, fail_log.id_type) AS id_type,\n            nvl(success_log.id, fail_log.id) AS id,\n            nvl(success_log.campaign_id, fail_log.campaign_id) AS campaign_id,\n            nvl(success_log.ad_group_id, fail_log.ad_group_id) AS ad_group_id,\n            nvl(success_log.creative_id, fail_log.creative_id) AS creative_id,\n            nvl(fail_log.min_ts, unix_timestamp()* 1000) AS fail_min_ts,\n            nvl(success_log.min_ts, unix_timestamp()* 1000) AS success_min_ts,\n            nvl(fail_log.max_ts, 0L) AS fail_max_ts,\n            nvl(success_log.max_ts, 0L) AS success_max_ts,\n            nvl(success_log.send_cnt, 0L) AS success_send_cnt,\n            nvl(success_log.send_user_cnt, 0L) AS success_send_user_cnt,\n            nvl(fail_log.send_cnt, 0L) AS fail_send_cnt,\n            nvl(fail_log.send_user_cnt, 0L) AS fail_send_user_cnt\n    FROM (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = true\n    ) AS success_log\n    FULL OUTER JOIN\n    (\n        SELECT *\n        FROM send_log_by_status\n        WHERE status = false\n    ) AS fail_log\n    ON success_log.id_type = fail_log.id_type\n    AND success_log.id = fail_log.id\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}]"
1140,process:::click_log_aggr:::message_stat,process:::current_stat:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT  id_type, id,\n        count(1) AS click_cnt,\n        count(distinct(user_id)) AS click_user_cnt\nFROM (\n    SELECT meta.*, user_id\n    FROM (\n        SELECT  explode(meta_arr) AS meta, user_id\n        FROM (\n            SELECT  array(\n                        named_struct('id_type', 'campaign_id', 'id', campaign_id),\n                        named_struct('id_type', 'ad_group_id', 'id', ad_group_id),\n                        named_struct('id_type', 'creative_id', 'id', creative_id)\n                    ) AS meta_arr,\n                    user_id,\n                    row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n            FROM click_log\n            WHERE created_at_date = '2021-01-29'\n        )\n        WHERE rank = 1\n    )\n)\nGROUP BY  id_type, id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}]"
1141,process:::current_stat:::message_stat,process:::merged_stat:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat.json', 'options': {'sql': 'SELECT    current.id,\n          current.id_type,\n          nvl(current.campaign_id, prev.campaign_id) AS campaign_id,\n          nvl(current.ad_group_id, prev.ad_group_id) AS ad_group_id,\n          nvl(current.creative_id, prev.creative_id) AS creative_id,\n          nvl(prev.min_ts, current.min_ts) AS min_ts,\n          nvl(current.max_ts, prev.max_ts) AS max_ts,\n          (nvl(current.success_send_cnt, 0) + nvl(prev.success_send_cnt, 0)) AS success_send_cnt,\n          (nvl(current.success_send_user_cnt, 0) + nvl(prev.success_send_user_cnt, 0)) AS success_send_user_cnt,\n          (nvl(current.fail_send_cnt, 0) + nvl(prev.fail_send_cnt, 0)) AS fail_send_cnt,\n          (nvl(current.fail_send_user_cnt, 0) + nvl(prev.fail_send_user_cnt, 0)) AS fail_send_user_cnt,\n          (nvl(current.click_cnt, 0) + nvl(prev.click_cnt, 0)) AS click_cnt,\n          (nvl(current.click_user_cnt, 0) + nvl(prev.click_user_cnt, 0)) AS click_user_cnt,\n          current.name, current.type, current.population\nFROM      current_stat AS current\nLEFT OUTER JOIN  prev_stat AS prev\nON    current.id_type = prev.id_type\nAND   current.id = prev.id'}, 'role': 'process', 'type': 'sql'}]"
1142,process:::current_stat:::message_stat,process:::calc_stat:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat.json', 'options': {'sql': 'SELECT    stat.*, meta.name, meta.type, meta.population\nFROM (\n    SELECT\n            nvl(send_log_aggr.id_type, click_log_aggr.id_type) AS id_type,\n            nvl(send_log_aggr.id, click_log_aggr.id) AS id,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            min_ts, max_ts,\n            success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n            nvl(click_log_aggr.click_cnt, 0) AS click_cnt,\n            nvl(click_log_aggr.click_user_cnt, 0) AS click_user_cnt\n    FROM send_log_aggr\n    FULL OUTER JOIN click_log_aggr\n    ON    send_log_aggr.id_type = click_log_aggr.id_type\n    AND   send_log_aggr.id = click_log_aggr.id\n) AS stat\nLEFT OUTER JOIN meta\nON stat.id_type = meta.id_type\nAND stat.id = CAST(meta.id AS STRING)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT  *,\n                floor(diff_seconds / 3600) AS hours,\n                floor((diff_seconds % 3600) / 60) AS minutes,\n                floor(diff_seconds % 60) AS seconds\n        FROM (\n            SELECT *,\n                    date_format(from_utc_timestamp(from_unixtime(min_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS start_time,\n                    date_format(from_utc_timestamp(from_unixtime(max_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS end_time,\n                    ((max_ts - min_ts) / 1000) AS diff_seconds,\n                    CAST(FORMAT_NUMBER(nvl(fail_send_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS send_fail_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS click_count_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_user_cnt / success_send_user_cnt * 100, 0), '########.##') AS DOUBLE) AS click_user_rate\n            FROM   merged_stat\n        )\n)\n\nUNION ALL\n\nSELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT\n                  prev.*\n        FROM prev_stat AS prev\n        LEFT OUTER JOIN   current_stat AS current\n        ON    current.id_type = prev.id_type\n        AND   current.id = prev.id\n        WHERE current.id is null\n)""}, 'role': 'process', 'type': 'sql'}]"
1143,process:::merged_stat:::message_stat,process:::calc_stat:::message_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat.json', 'options': {'sql': 'SELECT    current.id,\n          current.id_type,\n          nvl(current.campaign_id, prev.campaign_id) AS campaign_id,\n          nvl(current.ad_group_id, prev.ad_group_id) AS ad_group_id,\n          nvl(current.creative_id, prev.creative_id) AS creative_id,\n          nvl(prev.min_ts, current.min_ts) AS min_ts,\n          nvl(current.max_ts, prev.max_ts) AS max_ts,\n          (nvl(current.success_send_cnt, 0) + nvl(prev.success_send_cnt, 0)) AS success_send_cnt,\n          (nvl(current.success_send_user_cnt, 0) + nvl(prev.success_send_user_cnt, 0)) AS success_send_user_cnt,\n          (nvl(current.fail_send_cnt, 0) + nvl(prev.fail_send_cnt, 0)) AS fail_send_cnt,\n          (nvl(current.fail_send_user_cnt, 0) + nvl(prev.fail_send_user_cnt, 0)) AS fail_send_user_cnt,\n          (nvl(current.click_cnt, 0) + nvl(prev.click_cnt, 0)) AS click_cnt,\n          (nvl(current.click_user_cnt, 0) + nvl(prev.click_user_cnt, 0)) AS click_user_cnt,\n          current.name, current.type, current.population\nFROM      current_stat AS current\nLEFT OUTER JOIN  prev_stat AS prev\nON    current.id_type = prev.id_type\nAND   current.id = prev.id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT  *,\n                floor(diff_seconds / 3600) AS hours,\n                floor((diff_seconds % 3600) / 60) AS minutes,\n                floor(diff_seconds % 60) AS seconds\n        FROM (\n            SELECT *,\n                    date_format(from_utc_timestamp(from_unixtime(min_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS start_time,\n                    date_format(from_utc_timestamp(from_unixtime(max_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS end_time,\n                    ((max_ts - min_ts) / 1000) AS diff_seconds,\n                    CAST(FORMAT_NUMBER(nvl(fail_send_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS send_fail_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS click_count_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_user_cnt / success_send_user_cnt * 100, 0), '########.##') AS DOUBLE) AS click_user_rate\n            FROM   merged_stat\n        )\n)\n\nUNION ALL\n\nSELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT\n                  prev.*\n        FROM prev_stat AS prev\n        LEFT OUTER JOIN   current_stat AS current\n        ON    current.id_type = prev.id_type\n        AND   current.id = prev.id\n        WHERE current.id is null\n)""}, 'role': 'process', 'type': 'sql'}]"
1144,process:::calc_stat:::message_stat,s3://kcd-de-production/service/message/message_stats/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_stat.json', 'options': {'sql': ""SELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT  *,\n                floor(diff_seconds / 3600) AS hours,\n                floor((diff_seconds % 3600) / 60) AS minutes,\n                floor(diff_seconds % 60) AS seconds\n        FROM (\n            SELECT *,\n                    date_format(from_utc_timestamp(from_unixtime(min_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS start_time,\n                    date_format(from_utc_timestamp(from_unixtime(max_ts / 1000), 'Asia/Seoul'), 'yyyy-MM-dd HH:mm:ss') AS end_time,\n                    ((max_ts - min_ts) / 1000) AS diff_seconds,\n                    CAST(FORMAT_NUMBER(nvl(fail_send_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS send_fail_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_cnt / success_send_cnt * 100, 0), '########.##') AS DOUBLE) AS click_count_rate,\n                    CAST(FORMAT_NUMBER(nvl(click_user_cnt / success_send_user_cnt * 100, 0), '########.##') AS DOUBLE) AS click_user_rate\n            FROM   merged_stat\n        )\n)\n\nUNION ALL\n\nSELECT\n           id_type, id, campaign_id, ad_group_id, creative_id, min_ts, max_ts,\n           success_send_cnt, success_send_user_cnt, fail_send_cnt, fail_send_user_cnt,\n           click_cnt, click_user_cnt,\n           start_time, end_time, diff_seconds,\n           send_fail_rate, click_count_rate,\n           hours, minutes, seconds,\n           name, type, population\nFROM (\n        SELECT\n                  prev.*\n        FROM prev_stat AS prev\n        LEFT OUTER JOIN   current_stat AS current\n        ON    current.id_type = prev.id_type\n        AND   current.id = prev.id\n        WHERE current.id is null\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_stat_with_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-14', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-28'}, 'role': 'source', 'type': 'file'}, {'filename': 'message_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-29', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'message_stat_init.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/message_stats/date_id=2021-01-16', 'partitions': 'id_type'}, 'role': 'sink', 'type': 'file'}]"
1145,process:::add_join_field:::business_meta_es_sink,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'business_meta_es_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-29', 'yyyy-MM-dd') AS timestamp,\n            named_struct(\n                'name', 'meta'\n            ) AS join_field,\n            *\n  FROM      business_meta""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
1146,s3://kcd-data/raw/catalog_v2/raw/tb=owl_db_hometax_sales_invoices,process:::hometax_sales_invoices:::build_hometax_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_invoices.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=owl_db_hometax_sales_invoices'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_hometax_invoices.json', 'options': {'sql': ""SELECT  *\nFROM    (\n  SELECT  CAST(business_id AS int) AS business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          received,\n          price,\n          tax,\n          amount,\n          note,\n          customer_address,\n          customer_business_name,\n          customer_email,\n          customer_owner_name,\n          customer_registration_number,\n          customer_workplace_number,\n          CAST(null AS string) AS customer_business_classification,\n          CAST(null AS string) AS customer_business_category,\n          CAST(items_count AS int) AS items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          to_date(written_at) AS written_at,\n          to_date(issued_at) AS issued_at,\n          to_date(sent_at) AS sent_at,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          customer_address,\n          original_authorization_number,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    hometax_sales_invoices_src\n)\nWHERE   created_at_date >= '2020-10-06'\nAND     created_at_date < '2020-10-13'""}, 'role': 'process', 'type': 'sql'}]"
1147,s3://kcd-data/raw/catalog_v2/raw/tb=owl_db_hometax_purchases_invoices,process:::hometax_purchases_invoices:::build_hometax_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_invoices.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=owl_db_hometax_purchases_invoices'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_hometax_invoices.json', 'options': {'sql': ""SELECT  business_id,\n        authorization_number,\n        MAX(tax_invoice) AS tax_invoice,\n        MAX(invoice_type) AS invoice_type,\n        MAX(issue_type) AS issue_type,\n        MAX(paid) AS paid,\n        MAX(tax) AS tax,\n        MAX(amount) AS amount,\n        MAX(note) AS note,\n        MAX(vendor_registration_number) AS vendor_registration_number,\n        MAX(vendor_workplace_number) AS vendor_workplace_number,\n        MAX(vendor_business_name) AS vendor_business_name,\n        MAX(vendor_business_classification) AS vendor_business_classification,\n        MAX(vendor_business_category) AS vendor_business_category,\n        MAX(vendor_owner_name) AS vendor_owner_name,\n        MAX(vendor_email) AS vendor_email,\n        MAX(items_count) AS items_count,\n        MAX(item_unit) AS item_unit,\n        MAX(item_price) AS item_price,\n        MAX(item_name) AS item_name,\n        MAX(item_note) AS item_note,\n        MAX(authorization_number) AS authorization_number,\n        MAX(written_at) AS written_at,\n        MAX(issued_at) AS issued_at,\n        MAX(sent_at) AS sent_at,\n        MAX(created_at) AS created_at,\n        MAX(updated_at) AS updated_at,\n        MAX(vendor_address) AS vendor_address,\n        MAX(original_authorization_number) AS original_authorization_number,\n        MAX(created_at_date) AS created_at_date\nFROM    (\n  SELECT  CAST(business_id AS int) AS business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          paid,\n          price,\n          tax,\n          amount,\n          note,\n          vendor_registration_number,\n          vendor_workplace_number,\n          vendor_business_name,\n          CAST(null AS string) AS vendor_business_classification,\n          CAST(null AS string) AS vendor_business_category,\n          vendor_owner_name,\n          vendor_email,\n          CAST(items_count AS int) AS items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          to_date(written_at) AS written_at,\n          to_date(issued_at) AS issued_at,\n          to_date(sent_at) AS sent_ad,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          vendor_address,\n          original_authorization_number,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    hometax_purchases_invoices_src\n)\nWHERE     created_at_date >= '2020-10-06'\nAND       created_at_date < '2020-10-13'\nGROUP BY  business_id, authorization_number""}, 'role': 'process', 'type': 'sql'}]"
1148,process:::hometax_sales_invoices:::build_hometax_invoices,process:::hometax_sales_invoices_unique:::build_hometax_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_invoices.json', 'options': {'sql': ""SELECT  *\nFROM    (\n  SELECT  CAST(business_id AS int) AS business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          received,\n          price,\n          tax,\n          amount,\n          note,\n          customer_address,\n          customer_business_name,\n          customer_email,\n          customer_owner_name,\n          customer_registration_number,\n          customer_workplace_number,\n          CAST(null AS string) AS customer_business_classification,\n          CAST(null AS string) AS customer_business_category,\n          CAST(items_count AS int) AS items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          to_date(written_at) AS written_at,\n          to_date(issued_at) AS issued_at,\n          to_date(sent_at) AS sent_at,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          customer_address,\n          original_authorization_number,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    hometax_sales_invoices_src\n)\nWHERE   created_at_date >= '2020-10-06'\nAND     created_at_date < '2020-10-13'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_invoices.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_invoices\n  WHERE   is_sales\n) prev RIGHT OUTER JOIN hometax_sales_invoices current\nON      (\n  prev.business_id = current.business_id AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]"
1149,process:::prev_hometax_invoices:::build_hometax_invoices,process:::hometax_sales_invoices_unique:::build_hometax_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_invoices.json', 'options': {'sql': ""SELECT  *\nFROM    prev_hometax_invoices_src\nWHERE   created_at_date >= '${PREV_MIN_DATE}'\nAND     created_at_date < '2020-10-06'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_invoices.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_invoices\n  WHERE   is_sales\n) prev RIGHT OUTER JOIN hometax_sales_invoices current\nON      (\n  prev.business_id = current.business_id AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]"
1150,process:::prev_hometax_invoices:::build_hometax_invoices,process:::hometax_purchases_invoices_unique:::build_hometax_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_invoices.json', 'options': {'sql': ""SELECT  *\nFROM    prev_hometax_invoices_src\nWHERE   created_at_date >= '${PREV_MIN_DATE}'\nAND     created_at_date < '2020-10-06'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_invoices.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_invoices\n  WHERE   is_purchases\n) prev RIGHT OUTER JOIN hometax_purchases_invoices current\nON      (\n  prev.business_id = current.business_id AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]"
1151,process:::hometax_sales_invoices_unique:::build_hometax_invoices,process:::hometax_invoices:::build_hometax_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_invoices.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_invoices\n  WHERE   is_sales\n) prev RIGHT OUTER JOIN hometax_sales_invoices current\nON      (\n  prev.business_id = current.business_id AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_invoices.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(b) */\n        i.*,\n        b.id AS trader_business_id\nFROM    (\n  SELECT  business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          received,\n          CAST(null AS boolean) AS paid,\n          price,\n          tax,\n          amount,\n          note,\n          customer_registration_number AS registration_number,\n          customer_workplace_number AS workplace_number,\n          customer_business_name AS business_name,\n          customer_business_classification AS business_classification,\n          customer_business_category AS business_category,\n          customer_owner_name AS owner_name,\n          customer_email AS email,\n          items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          written_at,\n          issued_at,\n          sent_at,\n          created_at,\n          created_at_date,\n          updated_at,\n          customer_address AS address,\n          original_authorization_number,\n          true AS is_sales,\n          false AS is_purchases,\n          amount < 0 AS canceled,\n          invoice_type in ('일반(수정)', '수입(수정)', '위수탁(수정)', '영세율(수정)', '영세율위수탁(수정)') AS revised,\n          tax_invoice AND invoice_type in ('일반', '위수탁') AND tax = 0 AND ABS(price) >= 10 AS invalid_tax,\n          invoice_type like '%영세율%' AS zero_rate\n  FROM    hometax_sales_invoices_unique\n\n  UNION ALL\n\n  SELECT  business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          CAST(null AS boolean) AS received,\n          paid,\n          price,\n          tax,\n          amount,\n          note,\n          vendor_registration_number AS registration_number,\n          vendor_workplace_number AS workplace_number,\n          vendor_business_name AS business_name,\n          vendor_business_classification AS business_classification,\n          vendor_business_category AS business_category,\n          vendor_owner_name AS owner_name,\n          vendor_email AS email,\n          items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          written_at,\n          issued_at,\n          sent_at,\n          created_at,\n          created_at_date,\n          updated_at,\n          vendor_address AS address,\n          original_authorization_number,\n          false AS is_sales,\n          true AS is_purchases,\n          amount < 0 AS canceled,\n          invoice_type in ('일반(수정)', '수입(수정)', '위수탁(수정)', '영세율(수정)', '영세율위수탁(수정)') AS revised,\n          tax_invoice AND invoice_type in ('일반', '위수탁') AND tax = 0 AND ABS(price) >= 10 AS invalid_tax,\n          invoice_type like '%영세율%' AS zero_rate\n  FROM    hometax_purchases_invoices_unique\n) i LEFT OUTER JOIN businesses b\nON (i.registration_number = b.registration_number)""}, 'role': 'process', 'type': 'sql'}]"
1152,process:::hometax_purchases_invoices:::build_hometax_invoices,process:::hometax_purchases_invoices_unique:::build_hometax_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_invoices.json', 'options': {'sql': ""SELECT  business_id,\n        authorization_number,\n        MAX(tax_invoice) AS tax_invoice,\n        MAX(invoice_type) AS invoice_type,\n        MAX(issue_type) AS issue_type,\n        MAX(paid) AS paid,\n        MAX(tax) AS tax,\n        MAX(amount) AS amount,\n        MAX(note) AS note,\n        MAX(vendor_registration_number) AS vendor_registration_number,\n        MAX(vendor_workplace_number) AS vendor_workplace_number,\n        MAX(vendor_business_name) AS vendor_business_name,\n        MAX(vendor_business_classification) AS vendor_business_classification,\n        MAX(vendor_business_category) AS vendor_business_category,\n        MAX(vendor_owner_name) AS vendor_owner_name,\n        MAX(vendor_email) AS vendor_email,\n        MAX(items_count) AS items_count,\n        MAX(item_unit) AS item_unit,\n        MAX(item_price) AS item_price,\n        MAX(item_name) AS item_name,\n        MAX(item_note) AS item_note,\n        MAX(authorization_number) AS authorization_number,\n        MAX(written_at) AS written_at,\n        MAX(issued_at) AS issued_at,\n        MAX(sent_at) AS sent_at,\n        MAX(created_at) AS created_at,\n        MAX(updated_at) AS updated_at,\n        MAX(vendor_address) AS vendor_address,\n        MAX(original_authorization_number) AS original_authorization_number,\n        MAX(created_at_date) AS created_at_date\nFROM    (\n  SELECT  CAST(business_id AS int) AS business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          paid,\n          price,\n          tax,\n          amount,\n          note,\n          vendor_registration_number,\n          vendor_workplace_number,\n          vendor_business_name,\n          CAST(null AS string) AS vendor_business_classification,\n          CAST(null AS string) AS vendor_business_category,\n          vendor_owner_name,\n          vendor_email,\n          CAST(items_count AS int) AS items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          to_date(written_at) AS written_at,\n          to_date(issued_at) AS issued_at,\n          to_date(sent_at) AS sent_ad,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          vendor_address,\n          original_authorization_number,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    hometax_purchases_invoices_src\n)\nWHERE     created_at_date >= '2020-10-06'\nAND       created_at_date < '2020-10-13'\nGROUP BY  business_id, authorization_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_invoices.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_invoices\n  WHERE   is_purchases\n) prev RIGHT OUTER JOIN hometax_purchases_invoices current\nON      (\n  prev.business_id = current.business_id AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]"
1153,process:::hometax_purchases_invoices_unique:::build_hometax_invoices,process:::hometax_invoices:::build_hometax_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_invoices.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_invoices\n  WHERE   is_purchases\n) prev RIGHT OUTER JOIN hometax_purchases_invoices current\nON      (\n  prev.business_id = current.business_id AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_invoices.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(b) */\n        i.*,\n        b.id AS trader_business_id\nFROM    (\n  SELECT  business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          received,\n          CAST(null AS boolean) AS paid,\n          price,\n          tax,\n          amount,\n          note,\n          customer_registration_number AS registration_number,\n          customer_workplace_number AS workplace_number,\n          customer_business_name AS business_name,\n          customer_business_classification AS business_classification,\n          customer_business_category AS business_category,\n          customer_owner_name AS owner_name,\n          customer_email AS email,\n          items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          written_at,\n          issued_at,\n          sent_at,\n          created_at,\n          created_at_date,\n          updated_at,\n          customer_address AS address,\n          original_authorization_number,\n          true AS is_sales,\n          false AS is_purchases,\n          amount < 0 AS canceled,\n          invoice_type in ('일반(수정)', '수입(수정)', '위수탁(수정)', '영세율(수정)', '영세율위수탁(수정)') AS revised,\n          tax_invoice AND invoice_type in ('일반', '위수탁') AND tax = 0 AND ABS(price) >= 10 AS invalid_tax,\n          invoice_type like '%영세율%' AS zero_rate\n  FROM    hometax_sales_invoices_unique\n\n  UNION ALL\n\n  SELECT  business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          CAST(null AS boolean) AS received,\n          paid,\n          price,\n          tax,\n          amount,\n          note,\n          vendor_registration_number AS registration_number,\n          vendor_workplace_number AS workplace_number,\n          vendor_business_name AS business_name,\n          vendor_business_classification AS business_classification,\n          vendor_business_category AS business_category,\n          vendor_owner_name AS owner_name,\n          vendor_email AS email,\n          items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          written_at,\n          issued_at,\n          sent_at,\n          created_at,\n          created_at_date,\n          updated_at,\n          vendor_address AS address,\n          original_authorization_number,\n          false AS is_sales,\n          true AS is_purchases,\n          amount < 0 AS canceled,\n          invoice_type in ('일반(수정)', '수입(수정)', '위수탁(수정)', '영세율(수정)', '영세율위수탁(수정)') AS revised,\n          tax_invoice AND invoice_type in ('일반', '위수탁') AND tax = 0 AND ABS(price) >= 10 AS invalid_tax,\n          invoice_type like '%영세율%' AS zero_rate\n  FROM    hometax_purchases_invoices_unique\n) i LEFT OUTER JOIN businesses b\nON (i.registration_number = b.registration_number)""}, 'role': 'process', 'type': 'sql'}]"
1154,process:::hometax_invoices:::build_hometax_invoices,s3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_invoices.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(b) */\n        i.*,\n        b.id AS trader_business_id\nFROM    (\n  SELECT  business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          received,\n          CAST(null AS boolean) AS paid,\n          price,\n          tax,\n          amount,\n          note,\n          customer_registration_number AS registration_number,\n          customer_workplace_number AS workplace_number,\n          customer_business_name AS business_name,\n          customer_business_classification AS business_classification,\n          customer_business_category AS business_category,\n          customer_owner_name AS owner_name,\n          customer_email AS email,\n          items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          written_at,\n          issued_at,\n          sent_at,\n          created_at,\n          created_at_date,\n          updated_at,\n          customer_address AS address,\n          original_authorization_number,\n          true AS is_sales,\n          false AS is_purchases,\n          amount < 0 AS canceled,\n          invoice_type in ('일반(수정)', '수입(수정)', '위수탁(수정)', '영세율(수정)', '영세율위수탁(수정)') AS revised,\n          tax_invoice AND invoice_type in ('일반', '위수탁') AND tax = 0 AND ABS(price) >= 10 AS invalid_tax,\n          invoice_type like '%영세율%' AS zero_rate\n  FROM    hometax_sales_invoices_unique\n\n  UNION ALL\n\n  SELECT  business_id,\n          tax_invoice,\n          invoice_type,\n          issue_type,\n          CAST(null AS boolean) AS received,\n          paid,\n          price,\n          tax,\n          amount,\n          note,\n          vendor_registration_number AS registration_number,\n          vendor_workplace_number AS workplace_number,\n          vendor_business_name AS business_name,\n          vendor_business_classification AS business_classification,\n          vendor_business_category AS business_category,\n          vendor_owner_name AS owner_name,\n          vendor_email AS email,\n          items_count,\n          item_unit,\n          item_price,\n          item_name,\n          item_note,\n          authorization_number,\n          written_at,\n          issued_at,\n          sent_at,\n          created_at,\n          created_at_date,\n          updated_at,\n          vendor_address AS address,\n          original_authorization_number,\n          false AS is_sales,\n          true AS is_purchases,\n          amount < 0 AS canceled,\n          invoice_type in ('일반(수정)', '수입(수정)', '위수탁(수정)', '영세율(수정)', '영세율위수탁(수정)') AS revised,\n          tax_invoice AND invoice_type in ('일반', '위수탁') AND tax = 0 AND ABS(price) >= 10 AS invalid_tax,\n          invoice_type like '%영세율%' AS zero_rate\n  FROM    hometax_purchases_invoices_unique\n) i LEFT OUTER JOIN businesses b\nON (i.registration_number = b.registration_number)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_invoices.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_invoices', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
1155,s3://kcd-de-production/service/message/custom_set/user_type=paynote/,process:::formatted_with_custom_set:::paynote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_user_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/custom_set/user_type=paynote/latest'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'paynote_user_meta.json', 'options': {'sql': 'SELECT\n          formatted.*,\n          custom_set.custom_set_ids\nFROM      formatted\nLEFT OUTER JOIN   custom_set\nON    formatted.user_id = custom_set.user_id'}, 'role': 'process', 'type': 'sql'}]"
1156,process:::formatted:::paynote_user_meta,process:::formatted_with_custom_set:::paynote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_user_meta.json', 'options': {'sql': 'SELECT    user_id,\n          devices.device_type,\n          users.age_band,\n          users.gender,\n          users.plus_friends,\n          card_agreements.issuers AS agreement_issuers,\n          card_agreements.options AS agreement_options,\n          acceptance_templates\nFROM      users'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_meta.json', 'options': {'sql': 'SELECT\n          formatted.*,\n          custom_set.custom_set_ids\nFROM      formatted\nLEFT OUTER JOIN   custom_set\nON    formatted.user_id = custom_set.user_id'}, 'role': 'process', 'type': 'sql'}]"
1157,process:::formatted_with_custom_set:::paynote_user_meta,s3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_user_meta.json', 'options': {'sql': 'SELECT\n          formatted.*,\n          custom_set.custom_set_ids\nFROM      formatted\nLEFT OUTER JOIN   custom_set\nON    formatted.user_id = custom_set.user_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_common_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_meta.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/dimension/name=paynote_user_meta'}, 'role': 'sink', 'type': 'file'}]"
1158,process:::purchases_stat:::card_sales_purchases,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'sales_purchases.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(amount_sum) AS amount_sum,\n          SUM(tx_count) AS tx_count,\n          map_from_entries(collect_list(struct(issuer_name, amount_sum))) AS issuer_amount_sum,\n          map_from_entries(collect_list(struct(issuer_name, tx_count))) AS issuer_tx_count\n  FROM (\n          SELECT\n                  timestamp,\n                  business_id,\n                  issuer_name,\n                  SUM(amount) AS amount_sum,\n                  COUNT(1) AS tx_count\n          FROM (\n                  SELECT\n                          business_id,\n                          date_trunc('MONTH', transacted_at) AS timestamp,\n                          amount,\n                          issuer_name\n                  FROM    purchases\n                  WHERE   business_id IS NOT NULL\n                  AND     transacted_at between '2019-01-01' AND '2020-09-05'\n          )\n          GROUP BY business_id, issuer_name, timestamp\n ) GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'sales_purchases.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_purchases', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
1159,process:::naver:::place_classification,process:::mapping:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT  *, classification AS naver_classification\nFROM    places_src\nWHERE   type = 'Places::Naver'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT  *\nFROM    (\n  SELECT  *,\n          row_number() OVER (PARTITION BY naver_classification ORDER BY count DESC) AS rank\n  FROM    (\n    SELECT  naver_classification, kakao_classification,\n            count(1) AS count\n    FROM  (\n      SELECT  business_id, classification AS kakao_classification\n      FROM    kakao\n      WHERE   classification is not null\n    ) kakao, (\n      SELECT  business_id, classification AS naver_classification\n      FROM    naver\n      WHERE   classification is not null\n    ) naver\n    WHERE   kakao.business_id = naver.business_id\n    GROUP BY 1, 2\n  )\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
1160,process:::naver:::place_classification,process:::kakao_only:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT  *, classification AS naver_classification\nFROM    places_src\nWHERE   type = 'Places::Naver'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT  *, classification AS kcd_classification\nFROM    kakao\nWHERE   kakao_classification is not null'}, 'role': 'process', 'type': 'sql'}]"
1161,process:::naver:::place_classification,process:::naver_only:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT  *, classification AS naver_classification\nFROM    places_src\nWHERE   type = 'Places::Naver'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT  /*+BROADCAST(m) */\n        n.*, m.kakao_classification AS kcd_classification\nFROM    (\n  SELECT  /*+BROADCAST(k) */\n          n.*\n  FROM    naver n LEFT OUTER JOIN kakao k ON (n.business_id = k.business_id)\n  WHERE   k.business_id is null\n  AND     n.naver_classification is not null\n) n LEFT OUTER JOIN mapping m ON (n.classification = m.naver_classification)'}, 'role': 'process', 'type': 'sql'}]"
1162,process:::naver:::place_classification,process:::naver_classification:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT  *, classification AS naver_classification\nFROM    places_src\nWHERE   type = 'Places::Naver'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT  CAST(business_id AS Int) AS business_id,\n                arr[0] AS depth_1_name,\n                arr[1] AS depth_2_name,\n                arr[2] AS depth_3_name,\n                arr[3] AS depth_4_name,\n                arr[4] AS depth_5_name\n        FROM (\n                SELECT  business_id,\n                        split(classification, ' > ') AS arr\n                FROM    naver\n                WHERE   business_id is not null\n        )\n)\nWHERE depth_1_name IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
1163,process:::kakao:::place_classification,process:::mapping:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT  *, classification AS kakao_classification\nFROM    places_src\nWHERE   type = 'Places::Daum'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT  *\nFROM    (\n  SELECT  *,\n          row_number() OVER (PARTITION BY naver_classification ORDER BY count DESC) AS rank\n  FROM    (\n    SELECT  naver_classification, kakao_classification,\n            count(1) AS count\n    FROM  (\n      SELECT  business_id, classification AS kakao_classification\n      FROM    kakao\n      WHERE   classification is not null\n    ) kakao, (\n      SELECT  business_id, classification AS naver_classification\n      FROM    naver\n      WHERE   classification is not null\n    ) naver\n    WHERE   kakao.business_id = naver.business_id\n    GROUP BY 1, 2\n  )\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
1164,process:::kakao:::place_classification,process:::kakao_only:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT  *, classification AS kakao_classification\nFROM    places_src\nWHERE   type = 'Places::Daum'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT  *, classification AS kcd_classification\nFROM    kakao\nWHERE   kakao_classification is not null'}, 'role': 'process', 'type': 'sql'}]"
1165,process:::kakao:::place_classification,process:::naver_only:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT  *, classification AS kakao_classification\nFROM    places_src\nWHERE   type = 'Places::Daum'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT  /*+BROADCAST(m) */\n        n.*, m.kakao_classification AS kcd_classification\nFROM    (\n  SELECT  /*+BROADCAST(k) */\n          n.*\n  FROM    naver n LEFT OUTER JOIN kakao k ON (n.business_id = k.business_id)\n  WHERE   k.business_id is null\n  AND     n.naver_classification is not null\n) n LEFT OUTER JOIN mapping m ON (n.classification = m.naver_classification)'}, 'role': 'process', 'type': 'sql'}]"
1166,process:::kakao:::place_classification,process:::kakao_classification:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT  *, classification AS kakao_classification\nFROM    places_src\nWHERE   type = 'Places::Daum'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT  CAST(business_id AS Int) AS business_id,\n                arr[0] AS depth_1_name,\n                arr[1] AS depth_2_name,\n                arr[2] AS depth_3_name,\n                arr[3] AS depth_4_name,\n                arr[4] AS depth_5_name\n        FROM (\n                SELECT  business_id,\n                        split(classification, ' > ') AS arr\n                FROM    kakao\n                WHERE   business_id is not null\n        )\n)\nWHERE depth_1_name IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
1167,process:::mapping:::place_classification,process:::naver_only:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT  *\nFROM    (\n  SELECT  *,\n          row_number() OVER (PARTITION BY naver_classification ORDER BY count DESC) AS rank\n  FROM    (\n    SELECT  naver_classification, kakao_classification,\n            count(1) AS count\n    FROM  (\n      SELECT  business_id, classification AS kakao_classification\n      FROM    kakao\n      WHERE   classification is not null\n    ) kakao, (\n      SELECT  business_id, classification AS naver_classification\n      FROM    naver\n      WHERE   classification is not null\n    ) naver\n    WHERE   kakao.business_id = naver.business_id\n    GROUP BY 1, 2\n  )\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT  /*+BROADCAST(m) */\n        n.*, m.kakao_classification AS kcd_classification\nFROM    (\n  SELECT  /*+BROADCAST(k) */\n          n.*\n  FROM    naver n LEFT OUTER JOIN kakao k ON (n.business_id = k.business_id)\n  WHERE   k.business_id is null\n  AND     n.naver_classification is not null\n) n LEFT OUTER JOIN mapping m ON (n.classification = m.naver_classification)'}, 'role': 'process', 'type': 'sql'}]"
1168,process:::mapping:::place_classification,s3://kcd-de-production/data_sources/lookup/subject=classification/name=naver_kakao_map,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT  *\nFROM    (\n  SELECT  *,\n          row_number() OVER (PARTITION BY naver_classification ORDER BY count DESC) AS rank\n  FROM    (\n    SELECT  naver_classification, kakao_classification,\n            count(1) AS count\n    FROM  (\n      SELECT  business_id, classification AS kakao_classification\n      FROM    kakao\n      WHERE   classification is not null\n    ) kakao, (\n      SELECT  business_id, classification AS naver_classification\n      FROM    naver\n      WHERE   classification is not null\n    ) naver\n    WHERE   kakao.business_id = naver.business_id\n    GROUP BY 1, 2\n  )\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/lookup/subject=classification/name=naver_kakao_map'}, 'role': 'sink', 'type': 'file'}]"
1169,process:::kakao_only:::place_classification,process:::place_classification_with_location:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT  *, classification AS kcd_classification\nFROM    kakao\nWHERE   kakao_classification is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT business_id,\n       split(kcd_classification, ' > ') AS classification_arr,\n       split(lot_address, ' ') AS location_arr,\n       street_address\nFROM  (\n    SELECT * FROM kakao_only\n    UNION ALL\n    SELECT * FROM naver_only\n)\nWHERE business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
1170,process:::naver_only:::place_classification,process:::place_classification_with_location:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT  /*+BROADCAST(m) */\n        n.*, m.kakao_classification AS kcd_classification\nFROM    (\n  SELECT  /*+BROADCAST(k) */\n          n.*\n  FROM    naver n LEFT OUTER JOIN kakao k ON (n.business_id = k.business_id)\n  WHERE   k.business_id is null\n  AND     n.naver_classification is not null\n) n LEFT OUTER JOIN mapping m ON (n.classification = m.naver_classification)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT business_id,\n       split(kcd_classification, ' > ') AS classification_arr,\n       split(lot_address, ' ') AS location_arr,\n       street_address\nFROM  (\n    SELECT * FROM kakao_only\n    UNION ALL\n    SELECT * FROM naver_only\n)\nWHERE business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
1171,process:::place_classification_with_location:::place_classification,process:::kcd_classification:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT business_id,\n       split(kcd_classification, ' > ') AS classification_arr,\n       split(lot_address, ' ') AS location_arr,\n       street_address\nFROM  (\n    SELECT * FROM kakao_only\n    UNION ALL\n    SELECT * FROM naver_only\n)\nWHERE business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT\n          CAST(business_id AS Int) AS business_id,\n          classification_arr[0] AS depth_1_name,\n          classification_arr[1] AS depth_2_name,\n          classification_arr[2] AS depth_3_name,\n          classification_arr[3] AS depth_4_name,\n          classification_arr[4] AS depth_5_name\nFROM      place_classification_with_location'}, 'role': 'process', 'type': 'sql'}]"
1172,process:::place_classification_with_location:::place_classification,process:::kcd_location:::place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT business_id,\n       split(kcd_classification, ' > ') AS classification_arr,\n       split(lot_address, ' ') AS location_arr,\n       street_address\nFROM  (\n    SELECT * FROM kakao_only\n    UNION ALL\n    SELECT * FROM naver_only\n)\nWHERE business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT\n          CAST(business_id AS Int) AS business_id,\n           case\n               when location_arr[0] = '서울' then '서울특별시'\n               when location_arr[0] = '세종특별자치' then '세종특별자치시'\n               when location_arr[0] = '강원' then '강원도'\n               when location_arr[0] = '경기' then '경기도'\n               when location_arr[0] = '경남' then '경상남도'\n               when location_arr[0] = '경북' then '경상북도'\n               when location_arr[0] = '광주' then '광주광역시'\n               when location_arr[0] = '대구' then '대구광역시'\n               when location_arr[0] = '대전' then '대전광역시'\n               when location_arr[0] = '부산' then '부산광역시'\n               when location_arr[0] = '세종' then '세종특별자치시'\n               when location_arr[0] = '울산' then '울산광역시'\n               when location_arr[0] = '인천' then '인천광역시'\n               when location_arr[0] = '전남' then '전라남도'\n               when location_arr[0] = '전북' then '전라북도'\n               when location_arr[0] = '제주' then '제주특별자치도'\n               when location_arr[0] = '충남' then '충청남도'\n               when location_arr[0] = '충북' then '충청북도'\n               else location_arr[0]\n           end as lot_address_1_depth,\n           location_arr[1] AS lot_address_2_depth,\n           location_arr[2] AS lot_address_3_depth,\n           street_address\nFROM      place_classification_with_location""}, 'role': 'process', 'type': 'sql'}]"
1173,process:::kcd_classification:::place_classification,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=place,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': 'SELECT\n          CAST(business_id AS Int) AS business_id,\n          classification_arr[0] AS depth_1_name,\n          classification_arr[1] AS depth_2_name,\n          classification_arr[2] AS depth_3_name,\n          classification_arr[3] AS depth_4_name,\n          classification_arr[4] AS depth_5_name\nFROM      place_classification_with_location'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=place'}, 'role': 'sink', 'type': 'file'}]"
1174,process:::naver_classification:::place_classification,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=naver,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT  CAST(business_id AS Int) AS business_id,\n                arr[0] AS depth_1_name,\n                arr[1] AS depth_2_name,\n                arr[2] AS depth_3_name,\n                arr[3] AS depth_4_name,\n                arr[4] AS depth_5_name\n        FROM (\n                SELECT  business_id,\n                        split(classification, ' > ') AS arr\n                FROM    naver\n                WHERE   business_id is not null\n        )\n)\nWHERE depth_1_name IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=naver'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=naver'}, 'role': 'sink', 'type': 'file'}]"
1175,process:::kakao_classification:::place_classification,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kakao,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT    *\nFROM (\n        SELECT  CAST(business_id AS Int) AS business_id,\n                arr[0] AS depth_1_name,\n                arr[1] AS depth_2_name,\n                arr[2] AS depth_3_name,\n                arr[3] AS depth_4_name,\n                arr[4] AS depth_5_name\n        FROM (\n                SELECT  business_id,\n                        split(classification, ' > ') AS arr\n                FROM    kakao\n                WHERE   business_id is not null\n        )\n)\nWHERE depth_1_name IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'kcd_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kakao'}, 'role': 'source', 'type': 'file'}, {'filename': 'place_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=classification/name=kakao'}, 'role': 'sink', 'type': 'file'}]"
1176,process:::kcd_location:::place_classification,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'place_classification.json', 'options': {'sql': ""SELECT\n          CAST(business_id AS Int) AS business_id,\n           case\n               when location_arr[0] = '서울' then '서울특별시'\n               when location_arr[0] = '세종특별자치' then '세종특별자치시'\n               when location_arr[0] = '강원' then '강원도'\n               when location_arr[0] = '경기' then '경기도'\n               when location_arr[0] = '경남' then '경상남도'\n               when location_arr[0] = '경북' then '경상북도'\n               when location_arr[0] = '광주' then '광주광역시'\n               when location_arr[0] = '대구' then '대구광역시'\n               when location_arr[0] = '대전' then '대전광역시'\n               when location_arr[0] = '부산' then '부산광역시'\n               when location_arr[0] = '세종' then '세종특별자치시'\n               when location_arr[0] = '울산' then '울산광역시'\n               when location_arr[0] = '인천' then '인천광역시'\n               when location_arr[0] = '전남' then '전라남도'\n               when location_arr[0] = '전북' then '전라북도'\n               when location_arr[0] = '제주' then '제주특별자치도'\n               when location_arr[0] = '충남' then '충청남도'\n               when location_arr[0] = '충북' then '충청북도'\n               else location_arr[0]\n           end as lot_address_1_depth,\n           location_arr[1] AS lot_address_2_depth,\n           location_arr[2] AS lot_address_3_depth,\n           street_address\nFROM      place_classification_with_location""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'place_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=location/name=place_classification'}, 'role': 'sink', 'type': 'file'}]"
1177,process:::pos_menus:::pos_preferred_menus_by_visit_type,process:::pos_menus_with_payment:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_menus_raw\n    WHERE\n        created_at_date >= '2020-06-01'\n    AND business_id IS NOT NULL\n    AND name IS NOT NULL\n    AND name != ''\n    AND name != 'null'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': ""SELECT\n    *,\n    CASE\n        WHEN order_hour between 0 and 5 then '새벽'\n        WHEN order_hour between 6 and 10 then '아침'\n        WHEN order_hour between 11 and 13 then '점심'\n        WHEN order_hour between 14 and 16 then '오후'\n        ELSE '저녁'\n    END AS time_bucket,\n    CASE\n        WHEN visit_order is NOT NULL and visit_order > 1 then '재방문'\n        ELSE '신규'\n    END as visit_type\nFROM\n    (\n     SELECT\n         pos_menus.*,\n         pos_payments_visited.visit_order,\n         pos_payments_visited.card_number,\n         pos_payments_visited.issuer_name\n     FROM\n         pos_menus\n     LEFT OUTER JOIN\n         pos_payments_visited\n     ON\n         pos_payments_visited.bill_key = pos_menus.bill_key\n    )""}, 'role': 'process', 'type': 'sql'}]"
1178,process:::pos_payments_visited:::pos_preferred_menus_by_visit_type,process:::pos_menus_with_payment:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_payments_visited_raw\n    WHERE\n        created_at_date >= '2020-06-01'\n    AND business_id IS NOT NULL\n    AND card_number IS NOT NULL\n    AND card_number != '******'\n    AND card_number != ''""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': ""SELECT\n    *,\n    CASE\n        WHEN order_hour between 0 and 5 then '새벽'\n        WHEN order_hour between 6 and 10 then '아침'\n        WHEN order_hour between 11 and 13 then '점심'\n        WHEN order_hour between 14 and 16 then '오후'\n        ELSE '저녁'\n    END AS time_bucket,\n    CASE\n        WHEN visit_order is NOT NULL and visit_order > 1 then '재방문'\n        ELSE '신규'\n    END as visit_type\nFROM\n    (\n     SELECT\n         pos_menus.*,\n         pos_payments_visited.visit_order,\n         pos_payments_visited.card_number,\n         pos_payments_visited.issuer_name\n     FROM\n         pos_menus\n     LEFT OUTER JOIN\n         pos_payments_visited\n     ON\n         pos_payments_visited.bill_key = pos_menus.bill_key\n    )""}, 'role': 'process', 'type': 'sql'}]"
1179,process:::pos_menus_with_payment:::pos_preferred_menus_by_visit_type,process:::pos_menu_with_payment_with_group_with_rank_times:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': ""SELECT\n    *,\n    CASE\n        WHEN order_hour between 0 and 5 then '새벽'\n        WHEN order_hour between 6 and 10 then '아침'\n        WHEN order_hour between 11 and 13 then '점심'\n        WHEN order_hour between 14 and 16 then '오후'\n        ELSE '저녁'\n    END AS time_bucket,\n    CASE\n        WHEN visit_order is NOT NULL and visit_order > 1 then '재방문'\n        ELSE '신규'\n    END as visit_type\nFROM\n    (\n     SELECT\n         pos_menus.*,\n         pos_payments_visited.visit_order,\n         pos_payments_visited.card_number,\n         pos_payments_visited.issuer_name\n     FROM\n         pos_menus\n     LEFT OUTER JOIN\n         pos_payments_visited\n     ON\n         pos_payments_visited.bill_key = pos_menus.bill_key\n    )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': '   SELECT\n       business_id,\n       order_month,\n       visit_type,\n       collect_list(struct(rank, time_bucket, total_count)) AS times\n   FROM\n       (\n       SELECT\n           *,\n           row_number() OVER (PARTITION BY business_id, order_month, visit_type ORDER BY total_count DESC) AS rank\n       FROM\n         (\n          SELECT\n              business_id,\n              order_month,\n              visit_type,\n              time_bucket,\n              count(*) as total_count\n          FROM\n              pos_menus_with_payment\n          GROUP BY\n              business_id,\n              order_month,\n              visit_type,\n              time_bucket\n          )\n       )\n   GROUP BY\n       business_id,\n       order_month,\n       visit_type'}, 'role': 'process', 'type': 'sql'}]"
1180,process:::pos_menus_with_payment:::pos_preferred_menus_by_visit_type,process:::pos_menu_with_payment_with_group_with_rank:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': ""SELECT\n    *,\n    CASE\n        WHEN order_hour between 0 and 5 then '새벽'\n        WHEN order_hour between 6 and 10 then '아침'\n        WHEN order_hour between 11 and 13 then '점심'\n        WHEN order_hour between 14 and 16 then '오후'\n        ELSE '저녁'\n    END AS time_bucket,\n    CASE\n        WHEN visit_order is NOT NULL and visit_order > 1 then '재방문'\n        ELSE '신규'\n    END as visit_type\nFROM\n    (\n     SELECT\n         pos_menus.*,\n         pos_payments_visited.visit_order,\n         pos_payments_visited.card_number,\n         pos_payments_visited.issuer_name\n     FROM\n         pos_menus\n     LEFT OUTER JOIN\n         pos_payments_visited\n     ON\n         pos_payments_visited.bill_key = pos_menus.bill_key\n    )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': 'SELECT\n    business_id,\n    order_month,\n    visit_type,\n    collect_list(struct(rank, name, total_amount, total_count)) AS menus\nFROM\n   (\n   SELECT\n       *,\n       row_number() OVER (PARTITION BY business_id, order_month, visit_type ORDER BY total_amount DESC) AS rank\n   FROM\n      (\n       SELECT\n           business_id,\n           order_month,\n           name,\n           collect_list(order_time) as order_times,\n           visit_type,\n           sum(price * `count`) as total_amount,\n           sum(`count`) as total_count\n       FROM\n           pos_menus_with_payment\n       GROUP BY\n           business_id,\n           order_month,\n           visit_type,\n           name\n       )\n   )\nGROUP BY\n    business_id,\n    order_month,\n    visit_type'}, 'role': 'process', 'type': 'sql'}]"
1181,process:::pos_menu_with_payment_with_group_with_rank_times:::pos_preferred_menus_by_visit_type,process:::pos_menu_with_payment_with_group_with_rank_joined:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': '   SELECT\n       business_id,\n       order_month,\n       visit_type,\n       collect_list(struct(rank, time_bucket, total_count)) AS times\n   FROM\n       (\n       SELECT\n           *,\n           row_number() OVER (PARTITION BY business_id, order_month, visit_type ORDER BY total_count DESC) AS rank\n       FROM\n         (\n          SELECT\n              business_id,\n              order_month,\n              visit_type,\n              time_bucket,\n              count(*) as total_count\n          FROM\n              pos_menus_with_payment\n          GROUP BY\n              business_id,\n              order_month,\n              visit_type,\n              time_bucket\n          )\n       )\n   GROUP BY\n       business_id,\n       order_month,\n       visit_type'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': '   SELECT\n       menus.*,\n       times.times\n   FROM\n       pos_menu_with_payment_with_group_with_rank_times times\n   INNER JOIN\n       pos_menu_with_payment_with_group_with_rank menus\n   ON  menus.business_id = times.business_id\n   AND menus.order_month = times.order_month\n   AND menus.visit_type = times.visit_type'}, 'role': 'process', 'type': 'sql'}]"
1182,process:::pos_menu_with_payment_with_group_with_rank:::pos_preferred_menus_by_visit_type,process:::pos_menu_with_payment_with_group_with_rank_joined:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': 'SELECT\n    business_id,\n    order_month,\n    visit_type,\n    collect_list(struct(rank, name, total_amount, total_count)) AS menus\nFROM\n   (\n   SELECT\n       *,\n       row_number() OVER (PARTITION BY business_id, order_month, visit_type ORDER BY total_amount DESC) AS rank\n   FROM\n      (\n       SELECT\n           business_id,\n           order_month,\n           name,\n           collect_list(order_time) as order_times,\n           visit_type,\n           sum(price * `count`) as total_amount,\n           sum(`count`) as total_count\n       FROM\n           pos_menus_with_payment\n       GROUP BY\n           business_id,\n           order_month,\n           visit_type,\n           name\n       )\n   )\nGROUP BY\n    business_id,\n    order_month,\n    visit_type'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': '   SELECT\n       menus.*,\n       times.times\n   FROM\n       pos_menu_with_payment_with_group_with_rank_times times\n   INNER JOIN\n       pos_menu_with_payment_with_group_with_rank menus\n   ON  menus.business_id = times.business_id\n   AND menus.order_month = times.order_month\n   AND menus.visit_type = times.visit_type'}, 'role': 'process', 'type': 'sql'}]"
1183,process:::pos_menu_with_payment_with_group_with_rank_joined:::pos_preferred_menus_by_visit_type,process:::pos_menu_with_payment_jdbc:::pos_preferred_menus_by_visit_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': '   SELECT\n       menus.*,\n       times.times\n   FROM\n       pos_menu_with_payment_with_group_with_rank_times times\n   INNER JOIN\n       pos_menu_with_payment_with_group_with_rank menus\n   ON  menus.business_id = times.business_id\n   AND menus.order_month = times.order_month\n   AND menus.visit_type = times.visit_type'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': '   SELECT\n       business_id,\n       order_month,\n       visit_type,\n       to_json(times) AS times,\n       to_json(menus) AS menus\n   FROM\n       pos_menu_with_payment_with_group_with_rank_joined'}, 'role': 'process', 'type': 'sql'}]"
1184,process:::pos_menu_with_payment_jdbc:::pos_preferred_menus_by_visit_type,s3://kcd-de-production/raw/etl/pos/pos_preferred_menus,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': '   SELECT\n       business_id,\n       order_month,\n       visit_type,\n       to_json(times) AS times,\n       to_json(menus) AS menus\n   FROM\n       pos_menu_with_payment_with_group_with_rank_joined'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/pos/pos_preferred_menus', 'format': 'parquet', 'partitions': 'order_month', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}]"
1185,process:::pos_menu_with_payment_jdbc:::pos_preferred_menus_by_visit_type,jdbc_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'sql': '   SELECT\n       business_id,\n       order_month,\n       visit_type,\n       to_json(times) AS times,\n       to_json(menus) AS menus\n   FROM\n       pos_menu_with_payment_with_group_with_rank_joined'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'uid_type:bills_id_type,menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats_v2', 'conflictColumns': 'uid,uid_type,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus', 'conflictColumns': 'business_id,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'daily_delivery_orders_stat.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'daily_delivery_orders_stat', 'conflictColumns': 'business_id,delivery_app,shop_number,date', 'updateColumns': 'closed_orders_amount,closed_orders_count,cancelled_orders_amount,cancelled_orders_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'hometax_business_label_upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'dbtable': 'hometax_businesses', 'conflictColumns': 'business_id', 'updateColumns': 'regular_employees_count,size_category,updated_at', 'typeCastColumns': 'size_category:hometax_business_size_category'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_sdk_event.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'sdk_name,event_type, user_type', 'updateColumns': 'sdk_name,event_type,user_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'delivery_receipt_stats.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-staging.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_staging', 'user': 'plover', 'password': 'welcome!', 'operation': 'upsert', 'dbtable': 'pos_receipt_stat', 'conflictColumns': 'public_id,target_date,date_type,h3_index,h3_resolution', 'updateColumns': 'metric', 'typeCastColumns': 'metric:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats', 'conflictColumns': 'business_id,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus', 'conflictColumns': 'business_id,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_menu_top_k.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_menu_top_k', 'conflictColumns': 'business_id,order_month,time_bucket,name', 'updateColumns': 'total_amount,total_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}]"
1186,s3://kcd-de-staging/work/ryan/corona_weekly/2021/5/weekly_txns,process:::weekly_txns:::build_corona_weekly_stats_ratio,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/corona_weekly/2021/5/weekly_txns'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_stats.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/2021/5/weekly_txns', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'week_of_year', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     week_of_year >= weekofyear(current_date()) - 3\nAND       year(transacted_at_week) in (2019, 2020)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'sql': ""SELECT    *\nFROM      weekly_txns_src\nWHERE     weekofyear(transacted_at_week) >= weekofyear(current_date()) - 2\nAND       year(transacted_at_week) in (2019, 2021)\nAND       lot_address_1_depth NOT IN ('none', 'NULL', '')""}, 'role': 'process', 'type': 'sql'}]"
1187,process:::crefia_business_meta:::crefia_business_meta,s3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/results/crefia_business_meta,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'crefia_business_meta.json', 'options': {'sql': ""SELECT    business_id,\n          businesses.businesses.registration_number,\n          businesses.businesses.business_name,\n          businesses.businesses.card_merchant_signed_up_at,\n          businesses.businesses.opened_at,\n          businesses.businesses.closed_at,\n          businesses.businesses.taxation_type,\n          businesses.businesses.crefia_size_code,\n          businesses.businesses.crefia_owner_birthday as owner_birthday,\n          classification.kcd.depth_1_name as kcd_classification_depth_1_name,\n          classification.kcd.depth_2_name as kcd_classification_depth_2_name,\n          classification.kcd.depth_3_name as kcd_classification_depth_3_name,\n          location.common.full_address as address\nFROM      business_meta\nWHERE     array_contains(businesses.credentials.types, 'Crefia')\nOR        array_contains(businesses.credentials.types, 'CrefiaBusiness')""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'crefia_business_meta.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/results/crefia_business_meta', 'header': 'true', 'numPartitions': '1', 'sep': '|'}, 'role': 'sink', 'type': 'custom'}]"
1188,jdbc:ad_history,process:::update_ad_history:::target_extract_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_ad_history.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_history', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'update_ad_history.json', 'options': {'sql': ""  SELECT\n          n.message_id,\n          n.campaign_id,\n          n.ad_group_id,\n          n.creative_id,\n          n.business_id,\n          n.user_id,\n          n.step,\n          n.status,\n          n.message,\n          n.error_detail,\n          current_timestamp() AS created_at,\n          current_timestamp() AS updated_at\n  FROM (\n          SELECT\n                  CONCAT(\n                      meta.campaign_id, meta.ad_group_id, meta.creative_id,\n                      '_',\n                      meta.business_id, meta.user_id\n                  ) AS message_id,\n                  CAST(meta.campaign_id AS INT) AS campaign_id,\n                  CAST(meta.ad_group_id AS INT) AS ad_group_id,\n                  CAST(meta.creative_id AS INT) AS creative_id,\n                  CAST(meta.business_id AS INT) AS business_id,\n                  CAST(meta.user_id AS INT) AS user_id,\n                  'EXTRACT' AS step,\n                  IF(status.valid = true, 'SUCCESS', 'FAIL') AS status,\n                  status.error AS message,\n                  '' AS error_detail\n          FROM    target_messages\n          WHERE   meta.campaign_id = 2\n  ) AS n\n  LEFT OUTER JOIN ad_history\n  ON  n.message_id = ad_history.message_id\n  WHERE   ad_history.message_id IS NULL""}, 'role': 'process', 'type': 'sql'}]"
1189,process:::update_ad_history:::target_extract_log,process:::dedup:::target_extract_log,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_ad_history.json', 'options': {'sql': ""  SELECT\n          n.message_id,\n          n.campaign_id,\n          n.ad_group_id,\n          n.creative_id,\n          n.business_id,\n          n.user_id,\n          n.step,\n          n.status,\n          n.message,\n          n.error_detail,\n          current_timestamp() AS created_at,\n          current_timestamp() AS updated_at\n  FROM (\n          SELECT\n                  CONCAT(\n                      meta.campaign_id, meta.ad_group_id, meta.creative_id,\n                      '_',\n                      meta.business_id, meta.user_id\n                  ) AS message_id,\n                  CAST(meta.campaign_id AS INT) AS campaign_id,\n                  CAST(meta.ad_group_id AS INT) AS ad_group_id,\n                  CAST(meta.creative_id AS INT) AS creative_id,\n                  CAST(meta.business_id AS INT) AS business_id,\n                  CAST(meta.user_id AS INT) AS user_id,\n                  'EXTRACT' AS step,\n                  IF(status.valid = true, 'SUCCESS', 'FAIL') AS status,\n                  status.error AS message,\n                  '' AS error_detail\n          FROM    target_messages\n          WHERE   meta.campaign_id = 2\n  ) AS n\n  LEFT OUTER JOIN ad_history\n  ON  n.message_id = ad_history.message_id\n  WHERE   ad_history.message_id IS NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'update_ad_history.json', 'options': {'sql': '  SELECT\n          message_id,\n          campaign_id,\n          ad_group_id,\n          creative_id,\n          business_id,\n          user_id,\n          step,\n          status,\n          message,\n          error_detail,\n          created_at,\n          updated_at\n  FROM (\n      SELECT\n              *,\n              row_number() OVER (PARTITION BY message_id ORDER BY created_at DESC) AS rank\n      FROM    update_ad_history\n  )\n  WHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
1190,process:::dedup:::target_extract_log,ad_history_db_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'update_ad_history.json', 'options': {'sql': '  SELECT\n          message_id,\n          campaign_id,\n          ad_group_id,\n          creative_id,\n          business_id,\n          user_id,\n          step,\n          status,\n          message,\n          error_detail,\n          created_at,\n          updated_at\n  FROM (\n      SELECT\n              *,\n              row_number() OVER (PARTITION BY message_id ORDER BY created_at DESC) AS rank\n      FROM    update_ad_history\n  )\n  WHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'update_ad_history.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'ad_history', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'mode': 'append'}, 'role': 'sink', 'type': 'jdbc'}]"
1191,s3://kcd-data/raw/catalog_v2/raw/tb=posetl_menus,process:::pos_app_menus:::pos_menus_tok_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_menu_top_k.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=posetl_menus', 'partition_keys': 'created_at_date,created_at_hour'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_menu_top_k.json', 'options': {'sql': ""    SELECT\n        DISTINCT(menu_key) as uk, *\n    FROM\n        pos_app_menus_raw\n    WHERE\n        created_at_date >= '2020-08-23'\n    AND business_id IS NOT NULL\n    AND name IS NOT NULL\n    AND name != ''\n""}, 'role': 'process', 'type': 'sql'}]"
1192,process:::pos_app_menus:::pos_menus_tok_k,process:::pos_app_menus_top_k:::pos_menus_tok_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_menu_top_k.json', 'options': {'sql': ""    SELECT\n        DISTINCT(menu_key) as uk, *\n    FROM\n        pos_app_menus_raw\n    WHERE\n        created_at_date >= '2020-08-23'\n    AND business_id IS NOT NULL\n    AND name IS NOT NULL\n    AND name != ''\n""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_menu_top_k.json', 'options': {'sql': '   SELECT\n       *,\n       row_number() OVER (PARTITION BY business_id, order_month, time_bucket ORDER BY total_amount DESC) AS rank\n   FROM\n       (\n       SELECT\n           business_id,\n           order_month,\n           time_bucket,\n           name,\n           sum(price) as total_amount,\n           count(*) as total_count\n       FROM\n           (SELECT\n               *,\n               CASE\n                   WHEN order_hour = -1 then \'전체\'\n                   WHEN order_hour between 0 and 5 then \'새벽\'\n                   WHEN order_hour between 6 and 10 then \'아침\'\n                   WHEN order_hour between 11 and 13 then \'점심\'\n                   WHEN order_hour between 14 and 16 then \'오후\'\n                   ELSE \'저녁\'\n               END AS time_bucket\n           FROM\n               (SELECT\n                   business_id,\n                   name,\n                   CAST(price as integer),\n                   order_time,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM-dd"") as order_date,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM"") as order_month,\n                   CAST(date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""HH"") as integer) as order_hour\n               FROM\n                   pos_app_menus\n\n               UNION ALL\n\n               SELECT\n                   business_id,\n                   name,\n                   CAST(price as integer),\n                   order_time,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM-dd"") as order_date,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM"") as order_month,\n                   -1 as order_hour\n               FROM\n                   pos_app_menus\n               )\n           )\n       GROUP BY\n           business_id,\n           order_month,\n           time_bucket,\n           name\n       )'}, 'role': 'process', 'type': 'sql'}]"
1193,process:::pos_app_menus_top_k:::pos_menus_tok_k,process:::pos_app_menus_top_k_jdbc:::pos_menus_tok_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_menu_top_k.json', 'options': {'sql': '   SELECT\n       *,\n       row_number() OVER (PARTITION BY business_id, order_month, time_bucket ORDER BY total_amount DESC) AS rank\n   FROM\n       (\n       SELECT\n           business_id,\n           order_month,\n           time_bucket,\n           name,\n           sum(price) as total_amount,\n           count(*) as total_count\n       FROM\n           (SELECT\n               *,\n               CASE\n                   WHEN order_hour = -1 then \'전체\'\n                   WHEN order_hour between 0 and 5 then \'새벽\'\n                   WHEN order_hour between 6 and 10 then \'아침\'\n                   WHEN order_hour between 11 and 13 then \'점심\'\n                   WHEN order_hour between 14 and 16 then \'오후\'\n                   ELSE \'저녁\'\n               END AS time_bucket\n           FROM\n               (SELECT\n                   business_id,\n                   name,\n                   CAST(price as integer),\n                   order_time,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM-dd"") as order_date,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM"") as order_month,\n                   CAST(date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""HH"") as integer) as order_hour\n               FROM\n                   pos_app_menus\n\n               UNION ALL\n\n               SELECT\n                   business_id,\n                   name,\n                   CAST(price as integer),\n                   order_time,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM-dd"") as order_date,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM"") as order_month,\n                   -1 as order_hour\n               FROM\n                   pos_app_menus\n               )\n           )\n       GROUP BY\n           business_id,\n           order_month,\n           time_bucket,\n           name\n       )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_menu_top_k.json', 'options': {'sql': '   SELECT\n     business_id,\n     order_month,\n     name,\n     time_bucket,\n     total_amount,\n     total_count,\n     rank\n   FROM\n     pos_app_menus_top_k\n   WHERE\n     rank < 101'}, 'role': 'process', 'type': 'sql'}]"
1194,process:::pos_app_menus_top_k:::pos_menus_tok_k,s3://kcd-data/raw/pos/pos_menu_top_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_menu_top_k.json', 'options': {'sql': '   SELECT\n       *,\n       row_number() OVER (PARTITION BY business_id, order_month, time_bucket ORDER BY total_amount DESC) AS rank\n   FROM\n       (\n       SELECT\n           business_id,\n           order_month,\n           time_bucket,\n           name,\n           sum(price) as total_amount,\n           count(*) as total_count\n       FROM\n           (SELECT\n               *,\n               CASE\n                   WHEN order_hour = -1 then \'전체\'\n                   WHEN order_hour between 0 and 5 then \'새벽\'\n                   WHEN order_hour between 6 and 10 then \'아침\'\n                   WHEN order_hour between 11 and 13 then \'점심\'\n                   WHEN order_hour between 14 and 16 then \'오후\'\n                   ELSE \'저녁\'\n               END AS time_bucket\n           FROM\n               (SELECT\n                   business_id,\n                   name,\n                   CAST(price as integer),\n                   order_time,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM-dd"") as order_date,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM"") as order_month,\n                   CAST(date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""HH"") as integer) as order_hour\n               FROM\n                   pos_app_menus\n\n               UNION ALL\n\n               SELECT\n                   business_id,\n                   name,\n                   CAST(price as integer),\n                   order_time,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM-dd"") as order_date,\n                   date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""yyyy-MM"") as order_month,\n                   -1 as order_hour\n               FROM\n                   pos_app_menus\n               )\n           )\n       GROUP BY\n           business_id,\n           order_month,\n           time_bucket,\n           name\n       )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_menu_top_k.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-data/raw/pos/pos_menu_top_k', 'format': 'parquet', 'partitions': 'order_month', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}]"
1195,process:::pos_app_menus_top_k_jdbc:::pos_menus_tok_k,jdbc_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_menu_top_k.json', 'options': {'sql': '   SELECT\n     business_id,\n     order_month,\n     name,\n     time_bucket,\n     total_amount,\n     total_count,\n     rank\n   FROM\n     pos_app_menus_top_k\n   WHERE\n     rank < 101'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'uid_type:bills_id_type,menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats_v2', 'conflictColumns': 'uid,uid_type,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus', 'conflictColumns': 'business_id,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'daily_delivery_orders_stat.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'daily_delivery_orders_stat', 'conflictColumns': 'business_id,delivery_app,shop_number,date', 'updateColumns': 'closed_orders_amount,closed_orders_count,cancelled_orders_amount,cancelled_orders_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'hometax_business_label_upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'dbtable': 'hometax_businesses', 'conflictColumns': 'business_id', 'updateColumns': 'regular_employees_count,size_category,updated_at', 'typeCastColumns': 'size_category:hometax_business_size_category'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_sdk_event.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'sdk_name,event_type, user_type', 'updateColumns': 'sdk_name,event_type,user_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'delivery_receipt_stats.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-staging.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_staging', 'user': 'plover', 'password': 'welcome!', 'operation': 'upsert', 'dbtable': 'pos_receipt_stat', 'conflictColumns': 'public_id,target_date,date_type,h3_index,h3_resolution', 'updateColumns': 'metric', 'typeCastColumns': 'metric:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats', 'conflictColumns': 'business_id,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus', 'conflictColumns': 'business_id,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_menu_top_k.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_menu_top_k', 'conflictColumns': 'business_id,order_month,time_bucket,name', 'updateColumns': 'total_amount,total_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}]"
1196,s3://kcd-data/message/target_users,process:::extract_log:::user_info_prev,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_info_prev.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-data/message/target_users'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'user_info_prev.json', 'options': {'sql': ""  SELECT  CAST(date_id AS STRING) AS date_id,\n          meta.user_id,\n          meta.business_id,\n          CAST(meta.ad_group_id AS STRING) AS ad_group_id,\n          CAST(meta.campaign_id AS STRING) AS campaign_id,\n          meta.type AS message_type\n  FROM    target_users\n  WHERE   date_id >= '2020-01-15'\n  AND     date_id <= '2020-08-01'""}, 'role': 'process', 'type': 'sql'}]"
1197,s3://kcd-data-staging/raw/catalog_v2/raw/tb=dmp_message_result_stat,process:::result_log:::user_info_prev,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_info_prev.json', 'options': {'format': 'json', 'paths': 's3://kcd-data-staging/raw/catalog_v2/raw/tb=dmp_message_result_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'user_info_prev.json', 'options': {'sql': ""  SELECT  date_format(created_at_date, 'yyyy-MM-dd') AS date_id,\n          meta_user_id AS user_id,\n          meta_business_id AS business_id,\n          meta_ad_group_id AS ad_group_id,\n          meta_campaign_id AS campaign_id,\n          meta_type AS message_type\n  FROM    dmp_message_result_stat\n  WHERE   meta_user_id IS NOT NULL\n  AND     status = true\n  AND     created_at_date >= '2020-01-15'\n  AND     created_at_date <= '2020-08-01'""}, 'role': 'process', 'type': 'sql'}]"
1198,process:::result_log:::user_info_prev,process:::message_type:::user_info_prev,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_info_prev.json', 'options': {'sql': ""  SELECT  date_format(created_at_date, 'yyyy-MM-dd') AS date_id,\n          meta_user_id AS user_id,\n          meta_business_id AS business_id,\n          meta_ad_group_id AS ad_group_id,\n          meta_campaign_id AS campaign_id,\n          meta_type AS message_type\n  FROM    dmp_message_result_stat\n  WHERE   meta_user_id IS NOT NULL\n  AND     status = true\n  AND     created_at_date >= '2020-01-15'\n  AND     created_at_date <= '2020-08-01'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'user_info_prev.json', 'options': {'sql': '  SELECT\n          user_id, business_id,\n          collect_list(struct(value, date_id, cnt)) AS message_type\n  FROM (\n      SELECT  user_id, business_id, date_id, message_type AS value, count(1) AS cnt\n      FROM    result_log\n      GROUP BY user_id, business_id, date_id, message_type\n  )\n  GROUP BY user_id, business_id'}, 'role': 'process', 'type': 'sql'}]"
1199,process:::result_log:::user_info_prev,process:::campaign_id:::user_info_prev,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_info_prev.json', 'options': {'sql': ""  SELECT  date_format(created_at_date, 'yyyy-MM-dd') AS date_id,\n          meta_user_id AS user_id,\n          meta_business_id AS business_id,\n          meta_ad_group_id AS ad_group_id,\n          meta_campaign_id AS campaign_id,\n          meta_type AS message_type\n  FROM    dmp_message_result_stat\n  WHERE   meta_user_id IS NOT NULL\n  AND     status = true\n  AND     created_at_date >= '2020-01-15'\n  AND     created_at_date <= '2020-08-01'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'user_info_prev.json', 'options': {'sql': '  SELECT\n          user_id, business_id,\n          collect_list(struct(value, date_id, cnt)) AS campaign_id\n  FROM (\n      SELECT  user_id, business_id, date_id, campaign_id AS value, count(1) AS cnt\n      FROM    result_log\n      GROUP BY user_id, business_id, date_id, campaign_id\n  )\n  GROUP BY user_id, business_id'}, 'role': 'process', 'type': 'sql'}]"
1200,process:::extract_log:::user_info_prev,process:::ad_group_id:::user_info_prev,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_info_prev.json', 'options': {'sql': ""  SELECT  CAST(date_id AS STRING) AS date_id,\n          meta.user_id,\n          meta.business_id,\n          CAST(meta.ad_group_id AS STRING) AS ad_group_id,\n          CAST(meta.campaign_id AS STRING) AS campaign_id,\n          meta.type AS message_type\n  FROM    target_users\n  WHERE   date_id >= '2020-01-15'\n  AND     date_id <= '2020-08-01'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'user_info_prev.json', 'options': {'sql': '  SELECT\n          user_id, business_id,\n          collect_list(struct(value, date_id, cnt)) AS ad_group_id\n  FROM (\n      SELECT\n              user_id, business_id, date_id, ad_group_id AS value, count(1) AS cnt\n      FROM (\n          SELECT  user_id, business_id, date_id, ad_group_id\n          FROM    extract_log\n          WHERE   campaign_id = 2\n\n          UNION ALL\n\n          SELECT  user_id, business_id, date_id, ad_group_id\n          FROM    result_log\n          WHERE   campaign_id != 2\n      )\n      GROUP BY user_id, business_id, date_id, ad_group_id\n  )\n  GROUP BY user_id, business_id'}, 'role': 'process', 'type': 'sql'}]"
1201,process:::message_type:::user_info_prev,process:::user_message_history:::user_info_prev,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_info_prev.json', 'options': {'sql': '  SELECT\n          user_id, business_id,\n          collect_list(struct(value, date_id, cnt)) AS message_type\n  FROM (\n      SELECT  user_id, business_id, date_id, message_type AS value, count(1) AS cnt\n      FROM    result_log\n      GROUP BY user_id, business_id, date_id, message_type\n  )\n  GROUP BY user_id, business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'user_info_prev.json', 'options': {'sql': 'SELECT\n          IF(m.user_id IS NOT NULL, m.user_id, ad_group_id.user_id) AS user_id,\n          IF(m.business_id IS NOT NULL, m.business_id, ad_group_id.business_id) AS business_id,\n          m.message_type,\n          m.campaign_id,\n          ad_group_id.ad_group_id\nFROM (\n        SELECT\n                  IF(message_type.user_id IS NOT NULL, message_type.user_id, campaign_id.user_id) AS user_id,\n                  IF(message_type.business_id IS NOT NULL, message_type.business_id, campaign_id.business_id) AS business_id,\n                  message_type.message_type,\n                  campaign_id.campaign_id\n        FROM      message_type\n        FULL OUTER JOIN campaign_id\n        ON    message_type.user_id = campaign_id.user_id\n        AND   message_type.business_id = campaign_id.business_id\n) AS m\nFULL OUTER JOIN ad_group_id\nON    m.user_id = ad_group_id.user_id\nAND   m.business_id = ad_group_id.business_id'}, 'role': 'process', 'type': 'sql'}]"
1202,process:::campaign_id:::user_info_prev,process:::user_message_history:::user_info_prev,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_info_prev.json', 'options': {'sql': '  SELECT\n          user_id, business_id,\n          collect_list(struct(value, date_id, cnt)) AS campaign_id\n  FROM (\n      SELECT  user_id, business_id, date_id, campaign_id AS value, count(1) AS cnt\n      FROM    result_log\n      GROUP BY user_id, business_id, date_id, campaign_id\n  )\n  GROUP BY user_id, business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'user_info_prev.json', 'options': {'sql': 'SELECT\n          IF(m.user_id IS NOT NULL, m.user_id, ad_group_id.user_id) AS user_id,\n          IF(m.business_id IS NOT NULL, m.business_id, ad_group_id.business_id) AS business_id,\n          m.message_type,\n          m.campaign_id,\n          ad_group_id.ad_group_id\nFROM (\n        SELECT\n                  IF(message_type.user_id IS NOT NULL, message_type.user_id, campaign_id.user_id) AS user_id,\n                  IF(message_type.business_id IS NOT NULL, message_type.business_id, campaign_id.business_id) AS business_id,\n                  message_type.message_type,\n                  campaign_id.campaign_id\n        FROM      message_type\n        FULL OUTER JOIN campaign_id\n        ON    message_type.user_id = campaign_id.user_id\n        AND   message_type.business_id = campaign_id.business_id\n) AS m\nFULL OUTER JOIN ad_group_id\nON    m.user_id = ad_group_id.user_id\nAND   m.business_id = ad_group_id.business_id'}, 'role': 'process', 'type': 'sql'}]"
1203,process:::ad_group_id:::user_info_prev,process:::user_message_history:::user_info_prev,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_info_prev.json', 'options': {'sql': '  SELECT\n          user_id, business_id,\n          collect_list(struct(value, date_id, cnt)) AS ad_group_id\n  FROM (\n      SELECT\n              user_id, business_id, date_id, ad_group_id AS value, count(1) AS cnt\n      FROM (\n          SELECT  user_id, business_id, date_id, ad_group_id\n          FROM    extract_log\n          WHERE   campaign_id = 2\n\n          UNION ALL\n\n          SELECT  user_id, business_id, date_id, ad_group_id\n          FROM    result_log\n          WHERE   campaign_id != 2\n      )\n      GROUP BY user_id, business_id, date_id, ad_group_id\n  )\n  GROUP BY user_id, business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'user_info_prev.json', 'options': {'sql': 'SELECT\n          IF(m.user_id IS NOT NULL, m.user_id, ad_group_id.user_id) AS user_id,\n          IF(m.business_id IS NOT NULL, m.business_id, ad_group_id.business_id) AS business_id,\n          m.message_type,\n          m.campaign_id,\n          ad_group_id.ad_group_id\nFROM (\n        SELECT\n                  IF(message_type.user_id IS NOT NULL, message_type.user_id, campaign_id.user_id) AS user_id,\n                  IF(message_type.business_id IS NOT NULL, message_type.business_id, campaign_id.business_id) AS business_id,\n                  message_type.message_type,\n                  campaign_id.campaign_id\n        FROM      message_type\n        FULL OUTER JOIN campaign_id\n        ON    message_type.user_id = campaign_id.user_id\n        AND   message_type.business_id = campaign_id.business_id\n) AS m\nFULL OUTER JOIN ad_group_id\nON    m.user_id = ad_group_id.user_id\nAND   m.business_id = ad_group_id.business_id'}, 'role': 'process', 'type': 'sql'}]"
1204,process:::user_message_history:::user_info_prev,s3://kcd-data/message/user_info/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'user_info_prev.json', 'options': {'sql': 'SELECT\n          IF(m.user_id IS NOT NULL, m.user_id, ad_group_id.user_id) AS user_id,\n          IF(m.business_id IS NOT NULL, m.business_id, ad_group_id.business_id) AS business_id,\n          m.message_type,\n          m.campaign_id,\n          ad_group_id.ad_group_id\nFROM (\n        SELECT\n                  IF(message_type.user_id IS NOT NULL, message_type.user_id, campaign_id.user_id) AS user_id,\n                  IF(message_type.business_id IS NOT NULL, message_type.business_id, campaign_id.business_id) AS business_id,\n                  message_type.message_type,\n                  campaign_id.campaign_id\n        FROM      message_type\n        FULL OUTER JOIN campaign_id\n        ON    message_type.user_id = campaign_id.user_id\n        AND   message_type.business_id = campaign_id.business_id\n) AS m\nFULL OUTER JOIN ad_group_id\nON    m.user_id = ad_group_id.user_id\nAND   m.business_id = ad_group_id.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'user_info_prev.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-data/message/user_info/date_id=2020-08-01'}, 'role': 'sink', 'type': 'file'}]"
1205,process:::daily_order_payments_stat:::delivery_app_payments_stat,process:::weekly_order_payments_stat:::delivery_app_payments_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('day', deposited_at) AS time,\n          'day' AS time_unit,\n          SUM(received_amount) AS received_amount,\n          SUM(IF (app_name = 'baemin', received_amount, 0)) AS baemin_received_amount,\n          SUM(IF (app_name = 'baedaltong', received_amount, 0)) AS baedaltong_received_amount,\n          SUM(IF (app_name = 'yogiyo', received_amount, 0)) AS yogiyo_received_amount,\n          SUM(order_amount) AS order_amount,\n          SUM(IF (app_name = 'baemin', order_amount, 0)) AS baemin_order_amount,\n          SUM(IF (app_name = 'baedaltong', order_amount, 0)) AS baedaltong_order_amount,\n          SUM(IF (app_name = 'yogiyo', order_amount, 0)) AS yogiyo_order_amount,\n          MIN(period_started_at) AS period_started_at,\n          MAX(period_ended_at) AS period_ended_at\nFROM      delivery_app_payments_src\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('week', time) AS time,\n          'week' AS time_unit,\n          SUM(received_amount) AS received_amount,\n          SUM(baemin_received_amount) AS baemin_received_amount,\n          SUM(baedaltong_received_amount) AS baedaltong_received_amount,\n          SUM(yogiyo_received_amount) AS yogiyo_received_amount,\n          SUM(order_amount) AS order_amount,\n          SUM(baemin_order_amount) AS baemin_order_amount,\n          SUM(baedaltong_order_amount) AS baedaltong_order_amount,\n          SUM(yogiyo_order_amount) AS yogiyo_order_amount,\n          MIN(period_started_at) AS period_started_at,\n          MAX(period_ended_at) AS period_ended_at\nFROM      daily_order_payments_stat\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]"
1206,process:::daily_order_payments_stat:::delivery_app_payments_stat,process:::monthly_order_payments_stat:::delivery_app_payments_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('day', deposited_at) AS time,\n          'day' AS time_unit,\n          SUM(received_amount) AS received_amount,\n          SUM(IF (app_name = 'baemin', received_amount, 0)) AS baemin_received_amount,\n          SUM(IF (app_name = 'baedaltong', received_amount, 0)) AS baedaltong_received_amount,\n          SUM(IF (app_name = 'yogiyo', received_amount, 0)) AS yogiyo_received_amount,\n          SUM(order_amount) AS order_amount,\n          SUM(IF (app_name = 'baemin', order_amount, 0)) AS baemin_order_amount,\n          SUM(IF (app_name = 'baedaltong', order_amount, 0)) AS baedaltong_order_amount,\n          SUM(IF (app_name = 'yogiyo', order_amount, 0)) AS yogiyo_order_amount,\n          MIN(period_started_at) AS period_started_at,\n          MAX(period_ended_at) AS period_ended_at\nFROM      delivery_app_payments_src\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('month', time) AS time,\n          'month' AS time_unit,\n          SUM(received_amount) AS received_amount,\n          SUM(baemin_received_amount) AS baemin_received_amount,\n          SUM(baedaltong_received_amount) AS baedaltong_received_amount,\n          SUM(yogiyo_received_amount) AS yogiyo_received_amount,\n          SUM(order_amount) AS order_amount,\n          SUM(baemin_order_amount) AS baemin_order_amount,\n          SUM(baedaltong_order_amount) AS baedaltong_order_amount,\n          SUM(yogiyo_order_amount) AS yogiyo_order_amount,\n          MIN(period_started_at) AS period_started_at,\n          MAX(period_ended_at) AS period_ended_at\nFROM      daily_order_payments_stat\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]"
1207,process:::daily_order_payments_stat:::delivery_app_payments_stat,process:::delivery_app_payments_stat:::delivery_app_payments_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('day', deposited_at) AS time,\n          'day' AS time_unit,\n          SUM(received_amount) AS received_amount,\n          SUM(IF (app_name = 'baemin', received_amount, 0)) AS baemin_received_amount,\n          SUM(IF (app_name = 'baedaltong', received_amount, 0)) AS baedaltong_received_amount,\n          SUM(IF (app_name = 'yogiyo', received_amount, 0)) AS yogiyo_received_amount,\n          SUM(order_amount) AS order_amount,\n          SUM(IF (app_name = 'baemin', order_amount, 0)) AS baemin_order_amount,\n          SUM(IF (app_name = 'baedaltong', order_amount, 0)) AS baedaltong_order_amount,\n          SUM(IF (app_name = 'yogiyo', order_amount, 0)) AS yogiyo_order_amount,\n          MIN(period_started_at) AS period_started_at,\n          MAX(period_ended_at) AS period_ended_at\nFROM      delivery_app_payments_src\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': 'SELECT * FROM daily_order_payments_stat\nUNION ALL\nSELECT * FROM weekly_order_payments_stat\nUNION ALL\nSELECT * FROM monthly_order_payments_stat'}, 'role': 'process', 'type': 'sql'}]"
1208,process:::weekly_order_payments_stat:::delivery_app_payments_stat,process:::delivery_app_payments_stat:::delivery_app_payments_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('week', time) AS time,\n          'week' AS time_unit,\n          SUM(received_amount) AS received_amount,\n          SUM(baemin_received_amount) AS baemin_received_amount,\n          SUM(baedaltong_received_amount) AS baedaltong_received_amount,\n          SUM(yogiyo_received_amount) AS yogiyo_received_amount,\n          SUM(order_amount) AS order_amount,\n          SUM(baemin_order_amount) AS baemin_order_amount,\n          SUM(baedaltong_order_amount) AS baedaltong_order_amount,\n          SUM(yogiyo_order_amount) AS yogiyo_order_amount,\n          MIN(period_started_at) AS period_started_at,\n          MAX(period_ended_at) AS period_ended_at\nFROM      daily_order_payments_stat\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': 'SELECT * FROM daily_order_payments_stat\nUNION ALL\nSELECT * FROM weekly_order_payments_stat\nUNION ALL\nSELECT * FROM monthly_order_payments_stat'}, 'role': 'process', 'type': 'sql'}]"
1209,process:::monthly_order_payments_stat:::delivery_app_payments_stat,process:::delivery_app_payments_stat:::delivery_app_payments_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('month', time) AS time,\n          'month' AS time_unit,\n          SUM(received_amount) AS received_amount,\n          SUM(baemin_received_amount) AS baemin_received_amount,\n          SUM(baedaltong_received_amount) AS baedaltong_received_amount,\n          SUM(yogiyo_received_amount) AS yogiyo_received_amount,\n          SUM(order_amount) AS order_amount,\n          SUM(baemin_order_amount) AS baemin_order_amount,\n          SUM(baedaltong_order_amount) AS baedaltong_order_amount,\n          SUM(yogiyo_order_amount) AS yogiyo_order_amount,\n          MIN(period_started_at) AS period_started_at,\n          MAX(period_ended_at) AS period_ended_at\nFROM      daily_order_payments_stat\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': 'SELECT * FROM daily_order_payments_stat\nUNION ALL\nSELECT * FROM weekly_order_payments_stat\nUNION ALL\nSELECT * FROM monthly_order_payments_stat'}, 'role': 'process', 'type': 'sql'}]"
1210,process:::delivery_app_payments_stat:::delivery_app_payments_stat,s3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_payments_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_payments_stat.json', 'options': {'sql': 'SELECT * FROM daily_order_payments_stat\nUNION ALL\nSELECT * FROM weekly_order_payments_stat\nUNION ALL\nSELECT * FROM monthly_order_payments_stat'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_payments_stat.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_payments_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_payments_stat'}, 'role': 'source', 'type': 'file'}]"
1211,s3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_payments_stat,process:::delivery_app_payments_stat:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_payments_stat.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_payments_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_payments_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_payments_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
1212,s3://kcd-logs-raw/dev/dumps/2019-08-27/card_sales_approvals,process:::current_approvals:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'approvals_initial.json', 'options': {'paths': 's3://kcd-logs-raw/dev/dumps/2019-08-27/card_sales_approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n     SELECT  trim(acquirer_name) AS acquirer_name,\n             CAST(amount AS int) AS amount,\n             trim(authorization_number) AS authorization_number,\n             CAST(a.business_id AS int) AS business_id,\n             trim(card_number) AS card_number,\n             CAST(card_type AS int) AS card_type,\n             k.uuid AS credential_key,\n             trim(encrypted_card_number) AS encrypted_card_number,\n             CAST(installment AS int) AS installment,\n             trim(issuer_name) AS issuer_name,\n             mask_card_number(trim(card_number)) AS masked_card_number,\n             trim(merchant_number) AS merchant_number,\n             CAST(null AS string) AS scraping_type,\n             CAST(status AS int) AS status,\n             to_timestamp(unix_timestamp(transacted_at , 'yyyy-MM-dd\\'T\\'HH:mm:ss')) AS transacted_at,\n             a.created_at,\n             a.updated_at\n     FROM    current_approvals_raw a INNER JOIN credential_keys k\n     ON      a.business_id = k.business_id\n)""}, 'role': 'process', 'type': 'sql'}]"
1213,process:::current_approvals:::approvals,process:::reformat_approvals:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'approvals_initial.json', 'options': {'sql': ""SELECT  *,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    (\n     SELECT  trim(acquirer_name) AS acquirer_name,\n             CAST(amount AS int) AS amount,\n             trim(authorization_number) AS authorization_number,\n             CAST(a.business_id AS int) AS business_id,\n             trim(card_number) AS card_number,\n             CAST(card_type AS int) AS card_type,\n             k.uuid AS credential_key,\n             trim(encrypted_card_number) AS encrypted_card_number,\n             CAST(installment AS int) AS installment,\n             trim(issuer_name) AS issuer_name,\n             mask_card_number(trim(card_number)) AS masked_card_number,\n             trim(merchant_number) AS merchant_number,\n             CAST(null AS string) AS scraping_type,\n             CAST(status AS int) AS status,\n             to_timestamp(unix_timestamp(transacted_at , 'yyyy-MM-dd\\'T\\'HH:mm:ss')) AS transacted_at,\n             a.created_at,\n             a.updated_at\n     FROM    current_approvals_raw a INNER JOIN credential_keys k\n     ON      a.business_id = k.business_id\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': 'SELECT    *\nFROM      (\n SELECT * FROM   current_approvals\n\n UNION ALL\n\n SELECT * FROM   after_approvals\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null'}, 'role': 'process', 'type': 'sql'}]"
1214,process:::catalog_approvals_filtered:::approvals,process:::after_approvals:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'approvals_initial.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_approvals_raw\n WHERE    created_at_date >= '2020-12-25'\n AND      created_at_date < '2021-01-25'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\nUNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at,\n          created_at_date\n FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]"
1215,process:::after_approvals:::approvals,process:::reformat_approvals:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'approvals_initial.json', 'options': {'sql': ""SELECT    *,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM      (\n   SELECT   trim(IF (affiCardNm = '', null, affiCardNm)) AS acquirer_name,\n            CAST(authAmt AS int) AS amount,\n            trim(IF (authNo = '', null, authNo)) AS authorization_number,\n            CAST(a.business_id AS int) AS business_id,\n            trim(replace(cardNo, '', '')) AS card_number,\n            CAST(trim(cardKnd) AS int) AS card_type,\n            COALESCE(credential_key, k.uuid) AS credential_key,\n            trim(IF (cardRealNo = '', null, cardRealNo)) AS encrypted_card_number,\n            IF (insTrmNm is null, 0, CAST(insTrmNm AS int)) AS installment,\n            trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n            mask_card_number(trim(replace(cardNo, '', ''))) AS masked_card_number,\n            trim(IF (merNo = '', null, merNo)) AS merchant_number,\n            scraping_type,\n            IF (authClassNm = '승인', 0, 1) AS status,\n            to_timestamp(unix_timestamp(concat_ws(' ', trnsDate, trnsTime), 'yyyyMMdd HHmmss')) AS transacted_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS created_at,\n            to_timestamp(\n             concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n            ) AS updated_at\n   FROM     after_approvals_raw a LEFT OUTER JOIN credential_keys k\n   ON       a.business_id = k.business_id\n   WHERE    cardNo is not null\n)\nUNION ALL\n\nSELECT    trim(IF (afficardnm = '', null, afficardnm)) AS acquirer_name,\n          CAST(authamt AS int) AS amount,\n          trim(IF (authno = '', null, authno)) AS authorization_number,\n          CAST(a.business_id AS int) AS business_id,\n          trim(replace(cardno, '', '')) AS card_number,\n          CAST(trim(cardknd) AS int) AS card_type,\n          COALESCE(credential_key, k.uuid) AS credential_key,\n          trim(IF (cardrealno = '', null, cardrealno)) AS encrypted_card_number,\n          IF (instrmnm is null, 0, CAST(instrmnm AS int)) AS installment,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          mask_card_number(trim(replace(cardno, '', ''))) AS masked_card_number,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          scraping_type,\n          IF (authclassnm = '승인', 0, 1) AS status,\n          to_timestamp(unix_timestamp(concat_ws(' ', trnsdate, trnstime), 'yyyyMMdd HHmmss')) AS transacted_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n           concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at,\n          created_at_date\n FROM     catalog_approvals_filtered a LEFT OUTER JOIN credential_keys k\n ON       a.business_id = k.business_id\n WHERE    cardno is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': 'SELECT    *\nFROM      (\n SELECT * FROM   current_approvals\n\n UNION ALL\n\n SELECT * FROM   after_approvals\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null'}, 'role': 'process', 'type': 'sql'}]"
1216,process:::reformat_approvals:::approvals,process:::unique_approvals:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'approvals_initial.json', 'options': {'sql': 'SELECT    *\nFROM      (\n SELECT * FROM   current_approvals\n\n UNION ALL\n\n SELECT * FROM   after_approvals\n)\nWHERE     business_id is not null\nAND       authorization_number is not null\nAND       transacted_at is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': 'SELECT    business_id,\n          credential_key,\n          transacted_at,\n          authorization_number,\n          amount,\n          MIN(acquirer_name) AS acquirer_name,\n          MIN(card_number) AS card_number,\n          MIN(card_type) AS card_type,\n          MIN(encrypted_card_number) AS encrypted_card_number,\n          MIN(installment) AS installment,\n          MIN(issuer_name) AS issuer_name,\n          MIN(masked_card_number) AS masked_card_number,\n          MIN(merchant_number) AS merchant_number,\n          MIN(scraping_type) AS scraping_type,\n          MIN(status) AS status,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(created_at_date) AS created_at_date\nFROM      reformat_approvals\nGROUP BY  business_id, credential_key, transacted_at, authorization_number, amount'}, 'role': 'process', 'type': 'sql'}]"
1217,process:::unique_approvals:::approvals,process:::approvals:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'approvals_initial.json', 'options': {'sql': 'SELECT    business_id,\n          credential_key,\n          transacted_at,\n          authorization_number,\n          amount,\n          MIN(acquirer_name) AS acquirer_name,\n          MIN(card_number) AS card_number,\n          MIN(card_type) AS card_type,\n          MIN(encrypted_card_number) AS encrypted_card_number,\n          MIN(installment) AS installment,\n          MIN(issuer_name) AS issuer_name,\n          MIN(masked_card_number) AS masked_card_number,\n          MIN(merchant_number) AS merchant_number,\n          MIN(scraping_type) AS scraping_type,\n          MIN(status) AS status,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(created_at_date) AS created_at_date\nFROM      reformat_approvals\nGROUP BY  business_id, credential_key, transacted_at, authorization_number, amount'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'approvals_initial.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS integer)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS integer)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01'\n                      THEN CAST(a.amount * 4 / 110 AS integer)\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      unique_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
1218,process:::approvals:::approvals,s3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'approvals_initial.json', 'options': {'sql': ""SELECT    acquirer_name,\n          amount,\n          authorization_number,\n          business_id,\n          card_number,\n          card_type,\n          credential_key,\n          encrypted_card_number,\n          estimated_fee AS fee,\n          estimated_paid_at,\n          installment,\n          issuer_name,\n          masked_card_number,\n          merchant_number,\n          amount - estimated_fee - estimated_vat_fee AS payment,\n          scraping_type,\n          status,\n          transacted_at,\n          NULLIF(estimated_vat_fee, 0) AS vat_fee,\n          created_at,\n          updated_at,\n          created_at_date\nFROM      (\n    SELECT    a.*,\n              estimate_paid_at(\n                  a.issuer_name,\n                  c.bank_name,\n                  a.transacted_at,\n                  COALESCE(c.calculated_purchase_period, 1),\n                  COALESCE(c.calculated_payment_period, c.payment_period),\n                  c.paid_on_weekends\n              ) AS estimated_paid_at,\n              CASE\n                  WHEN card_type = 1 THEN\n                      CAST((a.amount * COALESCE(c.calculated_credit_fee_rate, c.credit_fee_rate) / 100) AS integer)\n                  ELSE\n                      CAST((a.amount * COALESCE(c.calculated_check_fee_rate, c.check_fee_rate_c) / 100) AS integer)\n              END AS estimated_fee,\n              CASE\n                  WHEN b.vat_withheld AND a.transacted_at > '2019-01-01'\n                      THEN CAST(a.amount * 4 / 110 AS integer)\n                  ELSE\n                      0\n              END AS estimated_vat_fee\n    FROM      unique_approvals a, businesses b, card_merchants c\n    WHERE     a.business_id = b.id\n    AND       a.business_id = c.business_id\n    AND       a.issuer_name = c.issuer_name\n    AND       a.merchant_number = c.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'approvals_initial.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/approvals', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'add_seq_on_approvals.json', 'options': {'paths': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]"
1219,s3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/approvals,process:::approvals_with_sequence:::approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'approvals_initial.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/approvals', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}, {'filename': 'add_seq_on_approvals.json', 'options': {'paths': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/tmp/approvals', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'add_seq_on_approvals.json', 'options': {'sql': '    SELECT    *,\n              row_number() OVER (\n                  PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), mask_card_number(card_number), authorization_number, amount, status\n                  ORDER BY created_at DESC\n              ) AS approval_seq\n    FROM      approvals'}, 'role': 'process', 'type': 'sql'}]"
1220,process:::visit_pairs:::build_user_visit_info,s3://kcd-de-production/service/market_area/analysis/visit_pairs,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_visit_info.json', 'options': {'sql': ""  SELECT  encrypted_card_number,\n          business_id,\n          pair._1 as start_date,\n          pair._2 as end_date\n  FROM    (\n          SELECT  encrypted_card_number,\n                  business_id,\n                  explode(cohort(visits)) as pair\n          FROM    (\n                  SELECT  encrypted_card_number,\n                          business_id,\n                          collect_list(transacted_at) as visits\n                  FROM    visits\n                  WHERE   encrypted_card_number IS NOT NULL\n                  AND     business_id IS NOT NULL\n                  AND     transacted_at >= '2020-01-01'\n                  AND     transacted_at < '2021-01-24'\n                  GROUP BY encrypted_card_number, business_id\n          )\n  )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_cohort.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/visit_pairs'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_visit_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/visit_pairs'}, 'role': 'sink', 'type': 'file'}]"
1221,process:::visit_user_type:::build_user_visit_info,s3://kcd-de-production/service/market_area/analysis/visit_user_type,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_visit_info.json', 'options': {'sql': ""SELECT\n        *,\n        IF(visit_count > 1, 'revisit', 'new') AS user_type\nFROM (\n        SELECT\n                business_id, encrypted_card_number, date, min(prev_visit_count) AS visit_count\n        FROM (\n            SELECT  business_id,\n                    encrypted_card_number,\n                    date_trunc('WEEK', transacted_at) AS date,\n                    (visit_order - 1) AS prev_visit_count\n            FROM visits\n        )\n        GROUP BY business_id, encrypted_card_number, date\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_user_visit_info.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/visit_user_type', 'partitions': 'user_type'}, 'role': 'sink', 'type': 'file'}]"
1222,jdbc:card_payments,process:::card_payments_date:::dump_db_goose_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_goose_incremental.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'card_payments', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'lowerBound': '54966963', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_goose_incremental.json', 'options': {'sql': ""  SELECT\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          *\n  FROM    card_payments\n  WHERE   id > 54966963""}, 'role': 'process', 'type': 'sql'}]"
1223,jdbc:access_logs,process:::access_logs_date:::dump_db_goose_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_goose_incremental.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'access_logs', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'lowerBound': '312348', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_goose_incremental.json', 'options': {'sql': ""  SELECT\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          *\n  FROM    access_logs\n  WHERE   id > 312348""}, 'role': 'process', 'type': 'sql'}]"
1224,jdbc:user_events,process:::user_events_date:::dump_db_goose_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_goose_incremental.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'user_events', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'lowerBound': '87976', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_goose_incremental.json', 'options': {'sql': ""  SELECT\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          *\n  FROM    user_events\n  WHERE   id > 87976""}, 'role': 'process', 'type': 'sql'}]"
1225,process:::card_payments_date:::dump_db_goose_incremental,s3://kcd-de-production/raw/db/goose/incremental/card_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_goose_incremental.json', 'options': {'sql': ""  SELECT\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          *\n  FROM    card_payments\n  WHERE   id > 54966963""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_categories.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'registration_number_businesses.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'card_classification.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/card_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/card_payments'}, 'role': 'source', 'type': 'file'}]"
1226,process:::access_logs_date:::dump_db_goose_incremental,s3://kcd-de-production/raw/db/goose/incremental/access_logs,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_goose_incremental.json', 'options': {'sql': ""  SELECT\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          *\n  FROM    access_logs\n  WHERE   id > 312348""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/access_logs'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/access_logs', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}]"
1227,process:::user_events_date:::dump_db_goose_incremental,s3://kcd-de-production/raw/db/goose/incremental/user_events,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_goose_incremental.json', 'options': {'sql': ""  SELECT\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          *\n  FROM    user_events\n  WHERE   id > 87976""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'get_latest_ids_goose.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/incremental/user_events'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/goose/incremental/user_events', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}]"
1228,process:::current_transactions:::match_to_transactions,s3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'match_to_transactions.json', 'options': {'sql': ""SELECT    DISTINCT\n            acquirer_name,\n            amount,\n            approval_canceled_at,\n            approval_seq,\n            authorization_number,\n            base_fee,\n            business_id,\n            card_number,\n            card_type,\n            credential_key,\n            encrypted_card_number,\n            estimated_paid_at,\n            etc_fee,\n            fee,\n            installment,\n            issuer_name,\n            masked_card_number,\n            merchant_number,\n            paid_at,\n            payment,\n            point_fee,\n            purchase_cancel_seq,\n            purchase_canceled_at,\n            purchase_delayed,\n            purchase_seq,\n            purchased_at,\n            scraping_type,\n            status,\n            transacted_at,\n            vat_fee,\n            created_at,\n            updated_at,\n            created_at_date\nFROM        (\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            CAST(null AS integer) AS base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            CAST(null AS integer) AS etc_fee,\n            approval.fee AS fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            CAST(null AS timestamp) AS paid_at,\n            approval.payment AS payment,\n            CAST(null AS integer) AS point_fee,\n            CAST(null AS integer) AS purchase_cancel_seq,\n            CAST(null AS timestamp) AS purchase_canceled_at,\n            CAST(null AS boolean) AS purchase_delayed,\n            CAST(null AS integer) AS purchase_seq,\n            CAST(null AS timestamp) AS purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            approval.vat_fee AS vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     purchase.business_id is null\n\n  UNION ALL\n\n  SELECT    purchase.acquirer_name,\n            purchase.amount,\n            CAST(null AS integer) AS approval_seq,\n            purchase.authorization_number,\n            purchase.base_fee,\n            purchase.business_id,\n            purchase.card_number,\n            purchase.card_type,\n            purchase.credential_key,\n            CAST(null AS string) AS encrypted_card_number,\n            CAST(null AS timestamp) AS estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            CAST(null AS integer) AS installment,\n            purchase.issuer_name,\n            purchase.masked_card_number,\n            purchase.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            purchase.scraping_type,\n            CAST(null AS integer) AS status,\n            purchase.transacted_at,\n            CAST(null AS timestamp) AS approval_canceled_at,\n            purchase.vat_fee,\n            purchase.created_at,\n            purchase.updated_at,\n            date_format(purchase.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is null\n\n  UNION ALL\n\n  SELECT    approval.acquirer_name,\n            approval.amount,\n            CAST(approval.approval_seq AS integer) AS approval_seq,\n            approval.authorization_number,\n            purchase.base_fee,\n            approval.business_id,\n            approval.card_number,\n            approval.card_type,\n            approval.credential_key,\n            approval.encrypted_card_number,\n            approval.estimated_paid_at,\n            purchase.etc_fee,\n            purchase.fee,\n            approval.installment,\n            approval.issuer_name,\n            approval.masked_card_number,\n            approval.merchant_number,\n            purchase.paid_at,\n            purchase.payment,\n            purchase.point_fee,\n            CAST(purchase.purchase_cancel_seq AS integer) AS purchase_cancel_seq,\n            purchase.purchase_canceled_at,\n            purchase.purchase_delayed,\n            CAST(purchase.purchase_seq AS integer) AS purchase_seq,\n            purchase.purchased_at,\n            approval.scraping_type,\n            approval.status,\n            approval.transacted_at,\n            approval.approval_canceled_at,\n            purchase.vat_fee,\n            approval.created_at,\n            approval.updated_at,\n            date_format(approval.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM      transaction_candidates\n  WHERE     approval.business_id is not null AND purchase.business_id is not null\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_matched_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'staging_build_matched_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'match_to_transactions.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/transactions'}, 'role': 'source', 'type': 'file'}]"
1229,process:::weekly_txns:::build_corona_weekly_stats,s3://kcd-de-staging/work/ryan/corona_weekly/2021/5/weekly_txns,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats.json', 'options': {'sql': ""SELECT  *,\n        weekofyear(transacted_at_week) AS week_of_year\nFROM    (\n  SELECT  st.business_id,\n          date_trunc('week', time) AS transacted_at_week,\n          SUM(card_sales_amount) AS amount_sum,\n          SUM(IF (hour(time) < 18 AND hour(time) >= 6, card_sales_amount, 0)) as day_time_amount_sum,\n          SUM(IF (hour(time) >= 18 OR hour(time) < 6, card_sales_amount, 0)) as night_time_amount_sum,\n          SUM(IF (weekday(time) > 4, card_sales_amount, 0)) as weekend_amount_sum,\n          SUM(IF (weekday(time) <= 4, card_sales_amount, 0)) as weekday_amount_sum,\n          SUM(card_sales_amount - returning_amount) as new_amount_sum,\n          SUM(returning_amount) as revisit_amount_sum,\n          SUM(card_sales_count) as tx_count,\n          MAX(st.place.lot_address_1_depth) as lot_address_1_depth,\n          MAX(st.place.lot_address_2_depth) as lot_address_2_depth,\n          MAX(st.place.lot_address_3_depth) as lot_address_3_depth,\n          MAX(st.place.kcd_classification_1_depth) as kcd_classification_1_depth,\n          MAX(st.place.kcd_classification_2_depth) as kcd_classification_2_depth,\n          MAX(st.place.kcd_classification_3_depth) as kcd_classification_3_depth\n  FROM    transactions_stat_with_meta st, targets t\n  WHERE   st.business_id = t.business_id\n  AND     t.transacted_at_month_count = 13\n  AND     st.time_unit = 'day_hour'\n  AND     weekofyear(st.time) < weekofyear(current_date())\n  GROUP BY 1, 2\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'sql': ""SELECT  *,\n        weekofyear(transacted_at_week) AS week_of_year\nFROM    (\n  SELECT  st.business_id,\n          date_trunc('week', time) AS transacted_at_week,\n          SUM(card_sales_amount) AS amount_sum,\n          SUM(IF (hour(time) < 18, card_sales_amount, 0)) as day_time_amount_sum,\n          SUM(IF (hour(time) >= 18, card_sales_amount, 0)) as night_time_amount_sum,\n          SUM(IF (weekday(time) > 4, card_sales_amount, 0)) as weekend_amount_sum,\n          SUM(IF (weekday(time) <= 4, card_sales_amount, 0)) as weekday_amount_sum,\n          SUM(card_sales_amount - returning_amount) as new_amount_sum,\n          SUM(returning_amount) as revisit_amount_sum,\n          SUM(card_sales_count) as tx_count,\n          MAX(st.place.lot_address_1_depth) as lot_address_1_depth,\n          MAX(st.place.lot_address_2_depth) as lot_address_2_depth,\n          MAX(st.place.lot_address_3_depth) as lot_address_3_depth,\n          MAX(st.place.kcd_classification_1_depth) as kcd_classification_1_depth,\n          MAX(st.place.kcd_classification_2_depth) as kcd_classification_2_depth,\n          MAX(st.place.kcd_classification_3_depth) as kcd_classification_3_depth\n  FROM    transactions_stat_with_meta st, targets t\n  WHERE   st.business_id = t.business_id\n  AND     t.transacted_at_month_count = 13\n  AND     st.time_unit = 'day_hour'\n  AND     weekofyear(st.time) < weekofyear(current_date())\n  GROUP BY 1, 2\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_stats_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/corona_weekly/2021/5/weekly_txns'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_stats.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/2021/5/weekly_txns', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'week_of_year', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}]"
1230,process:::weekly_txns:::build_corona_weekly_stats,s3://kcd-de-staging/work/ryan/corona_weekly/37/weekly_txns,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_corona_weekly_stats.json', 'options': {'sql': ""SELECT  *,\n        weekofyear(transacted_at_week) AS week_of_year\nFROM    (\n  SELECT  st.business_id,\n          date_trunc('week', time) AS transacted_at_week,\n          SUM(card_sales_amount) AS amount_sum,\n          SUM(IF (hour(time) < 18 AND hour(time) >= 6, card_sales_amount, 0)) as day_time_amount_sum,\n          SUM(IF (hour(time) >= 18 OR hour(time) < 6, card_sales_amount, 0)) as night_time_amount_sum,\n          SUM(IF (weekday(time) > 4, card_sales_amount, 0)) as weekend_amount_sum,\n          SUM(IF (weekday(time) <= 4, card_sales_amount, 0)) as weekday_amount_sum,\n          SUM(card_sales_amount - returning_amount) as new_amount_sum,\n          SUM(returning_amount) as revisit_amount_sum,\n          SUM(card_sales_count) as tx_count,\n          MAX(st.place.lot_address_1_depth) as lot_address_1_depth,\n          MAX(st.place.lot_address_2_depth) as lot_address_2_depth,\n          MAX(st.place.lot_address_3_depth) as lot_address_3_depth,\n          MAX(st.place.kcd_classification_1_depth) as kcd_classification_1_depth,\n          MAX(st.place.kcd_classification_2_depth) as kcd_classification_2_depth,\n          MAX(st.place.kcd_classification_3_depth) as kcd_classification_3_depth\n  FROM    transactions_stat_with_meta st, targets t\n  WHERE   st.business_id = t.business_id\n  AND     t.transacted_at_month_count = 13\n  AND     st.time_unit = 'day_hour'\n  AND     weekofyear(st.time) < weekofyear(current_date())\n  GROUP BY 1, 2\n)""}, 'role': 'process', 'type': 'sql'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'sql': ""SELECT  *,\n        weekofyear(transacted_at_week) AS week_of_year\nFROM    (\n  SELECT  st.business_id,\n          date_trunc('week', time) AS transacted_at_week,\n          SUM(card_sales_amount) AS amount_sum,\n          SUM(IF (hour(time) < 18, card_sales_amount, 0)) as day_time_amount_sum,\n          SUM(IF (hour(time) >= 18, card_sales_amount, 0)) as night_time_amount_sum,\n          SUM(IF (weekday(time) > 4, card_sales_amount, 0)) as weekend_amount_sum,\n          SUM(IF (weekday(time) <= 4, card_sales_amount, 0)) as weekday_amount_sum,\n          SUM(card_sales_amount - returning_amount) as new_amount_sum,\n          SUM(returning_amount) as revisit_amount_sum,\n          SUM(card_sales_count) as tx_count,\n          MAX(st.place.lot_address_1_depth) as lot_address_1_depth,\n          MAX(st.place.lot_address_2_depth) as lot_address_2_depth,\n          MAX(st.place.lot_address_3_depth) as lot_address_3_depth,\n          MAX(st.place.kcd_classification_1_depth) as kcd_classification_1_depth,\n          MAX(st.place.kcd_classification_2_depth) as kcd_classification_2_depth,\n          MAX(st.place.kcd_classification_3_depth) as kcd_classification_3_depth\n  FROM    transactions_stat_with_meta st, targets t\n  WHERE   st.business_id = t.business_id\n  AND     t.transacted_at_month_count = 13\n  AND     st.time_unit = 'day_hour'\n  AND     weekofyear(st.time) < weekofyear(current_date())\n  GROUP BY 1, 2\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_corona_weekly_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/corona_weekly/37/weekly_txns'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_corona_weekly_sales.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/work/ryan/corona_weekly/37/weekly_txns', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'week_of_year', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}]"
1231,jdbc:custom_set,process:::valid_custom_set:::paynote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_custom_set.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'custom_set', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'cashnote_custom_set.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'custom_set', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'paynote_custom_set.json', 'options': {'sql': ""SELECT    *\nFROM      custom_set\nWHERE     enabled = true\nAND       user_type = 'paynote'""}, 'role': 'process', 'type': 'sql'}]"
1232,jdbc:custom_set,process:::valid_custom_set:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_custom_set.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'custom_set', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}, {'filename': 'cashnote_custom_set.json', 'options': {'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'custom_set', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""SELECT    *\nFROM      custom_set\nWHERE     enabled = true\nAND       user_type = 'cashnote'""}, 'role': 'process', 'type': 'sql'}]"
1233,process:::valid_custom_set:::paynote_custom_set,process:::custom_set_values:::paynote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_custom_set.json', 'options': {'sql': ""SELECT    *\nFROM      custom_set\nWHERE     enabled = true\nAND       user_type = 'paynote'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_custom_set.json', 'options': {'class': 'com.kcd.thrush.message.spark.CustomSetReadProcess'}, 'role': 'process', 'type': 'custom'}]"
1234,process:::custom_set_values:::paynote_custom_set,process:::dim_phone_number:::paynote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_custom_set.json', 'options': {'class': 'com.kcd.thrush.message.spark.CustomSetReadProcess'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'paynote_custom_set.json', 'options': {'sql': ""  SELECT      custom_set_id, status,\n              users.id AS user_id\n  FROM (\n    SELECT    custom_set_id, custom_set_value, status\n    FROM      custom_set_values\n    WHERE     dimension = 'phone_number'\n    AND       status in ('RUNNING', 'COMPLETE')\n  ) AS custom_set\n  JOIN users\n  ON custom_set.custom_set_value = users.phone_number""}, 'role': 'process', 'type': 'sql'}]"
1235,process:::dim_phone_number:::paynote_custom_set,process:::grouped:::paynote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_custom_set.json', 'options': {'sql': ""  SELECT      custom_set_id, status,\n              users.id AS user_id\n  FROM (\n    SELECT    custom_set_id, custom_set_value, status\n    FROM      custom_set_values\n    WHERE     dimension = 'phone_number'\n    AND       status in ('RUNNING', 'COMPLETE')\n  ) AS custom_set\n  JOIN users\n  ON custom_set.custom_set_value = users.phone_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_custom_set.json', 'options': {'sql': '  SELECT\n          status, user_id,\n          collect_set(custom_set_id) AS custom_set_ids\n  FROM (\n          SELECT  custom_set_id, status, user_id\n          FROM    dim_phone_number\n  )\n  GROUP BY status, user_id'}, 'role': 'process', 'type': 'sql'}]"
1236,process:::grouped:::paynote_custom_set,process:::custom_set_all:::paynote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_custom_set.json', 'options': {'sql': '  SELECT\n          status, user_id,\n          collect_set(custom_set_id) AS custom_set_ids\n  FROM (\n          SELECT  custom_set_id, status, user_id\n          FROM    dim_phone_number\n  )\n  GROUP BY status, user_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_custom_set.json', 'options': {'sql': '  SELECT\n          user_id,\n          flatten(collect_list(custom_set_ids)) AS custom_set_ids\n  FROM    grouped\n  GROUP BY user_id'}, 'role': 'process', 'type': 'sql'}]"
1237,process:::grouped:::paynote_custom_set,process:::custom_set_new:::paynote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_custom_set.json', 'options': {'sql': '  SELECT\n          status, user_id,\n          collect_set(custom_set_id) AS custom_set_ids\n  FROM (\n          SELECT  custom_set_id, status, user_id\n          FROM    dim_phone_number\n  )\n  GROUP BY status, user_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_custom_set.json', 'options': {'sql': ""SELECT\n      set_new.user_id,\n      array_except(\n          array_union(\n              set_new.custom_set_ids,\n              nvl(set_old.custom_set_ids, array(null))\n          ),\n          array(null)\n       ) AS custom_set_ids\nFROM (\n        SELECT    *\n        FROM      grouped\n        WHERE     status = 'RUNNING'\n) AS set_new\nLEFT OUTER JOIN (\n        SELECT    *\n        FROM      grouped\n        WHERE     status = 'COMPLETE'\n) AS set_old\nON    set_new.user_id = set_old.user_id""}, 'role': 'process', 'type': 'sql'}]"
1238,process:::custom_set_all:::paynote_custom_set,s3://kcd-de-production/service/message/custom_set/user_type=paynote/ts=00_38,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_custom_set.json', 'options': {'sql': '  SELECT\n          user_id,\n          flatten(collect_list(custom_set_ids)) AS custom_set_ids\n  FROM    grouped\n  GROUP BY user_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_custom_set.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/custom_set/user_type=paynote/date_id=2021-01-29/ts=00_38'}, 'role': 'sink', 'type': 'file'}]"
1239,process:::custom_set_new:::paynote_custom_set,process:::add_join_field:::paynote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_custom_set.json', 'options': {'sql': ""SELECT\n      set_new.user_id,\n      array_except(\n          array_union(\n              set_new.custom_set_ids,\n              nvl(set_old.custom_set_ids, array(null))\n          ),\n          array(null)\n       ) AS custom_set_ids\nFROM (\n        SELECT    *\n        FROM      grouped\n        WHERE     status = 'RUNNING'\n) AS set_new\nLEFT OUTER JOIN (\n        SELECT    *\n        FROM      grouped\n        WHERE     status = 'COMPLETE'\n) AS set_old\nON    set_new.user_id = set_old.user_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_custom_set.json', 'options': {'sql': ""SELECT\n          to_timestamp('2021-01-29 00_38', 'yyyy-MM-dd HH_mm') AS timestamp,\n          named_struct(\n            'name', 'meta'\n          ) AS join_field,\n          *\nFROM      custom_set_new""}, 'role': 'process', 'type': 'sql'}]"
1240,process:::add_join_field:::paynote_custom_set,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_custom_set.json', 'options': {'sql': ""SELECT\n          to_timestamp('2021-01-29 00_38', 'yyyy-MM-dd HH_mm') AS timestamp,\n          named_struct(\n            'name', 'meta'\n          ) AS join_field,\n          *\nFROM      custom_set_new""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
1241,s3://kcd-de-staging/misc/swallow_staging/regions.csv,process:::regions:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'format': 'csv', 'paths': 's3://kcd-de-staging/misc/swallow_staging/regions.csv', 'read': '{""header"":""true""}'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': 'SELECT  *\nFROM    regions_src\nWHERE   dong is null'}, 'role': 'process', 'type': 'sql'}]"
1242,s3://kcd-de-staging/misc/swallow_staging/classifications.csv,process:::classification_tree:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'format': 'csv', 'paths': 's3://kcd-de-staging/misc/swallow_staging/classifications.csv', 'read': '{""header"":""true""}'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  id,\n        name AS classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name\nFROM    classifications\nWHERE   classification_type = 'KCDClassification'\nAND     parent_id is null\n\nUNION ALL\n\nSELECT  s.id,\n        f.name AS classification_kcd_depth_1_name,\n        s.name AS classification_kcd_depth_2_name\nFROM    classifications s, classifications f\nWHERE   s.classification_type = 'KCDClassification'\nAND     f.classification_type = 'KCDClassification'\nAND     f.parent_id is null\nAND     s.parent_id = f.id""}, 'role': 'process', 'type': 'sql'}]"
1243,process:::regions:::build_sales_stat,process:::sales_stat:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'sql': 'SELECT  *\nFROM    regions_src\nWHERE   dong is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(r, c) */\n        CAST(r.id AS bigint) AS region_id,\n        CAST(c.id AS bigint) AS classification_id,\n        a.sido,\n        a.sigungu,\n        a.classification_kcd_depth_1_name,\n        a.classification_kcd_depth_2_name,\n        a.time AS base_date,\n        a.time_unit AS date_unit,\n        a.business_count,\n        a.card_sales_amount,\n        a.card_sales_count,\n        a.delivery_sales_amount,\n        a.delivery_count,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    (\n  SELECT  *\n  FROM    regions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    classifications_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    multi_dimensions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    total_stat\n) a LEFT OUTER JOIN regions r\nON (\n  a.sido = r.sido AND\n  COALESCE(a.sigungu, 'null') = COALESCE(r.sigungu, 'null')\n) LEFT OUTER JOIN classification_tree c\nON (\n  a.classification_kcd_depth_1_name = c.classification_kcd_depth_1_name AND\n  COALESCE(a.classification_kcd_depth_2_name, 'null') = COALESCE(c.classification_kcd_depth_2_name, 'null')\n)""}, 'role': 'process', 'type': 'sql'}]"
1244,process:::classification_tree:::build_sales_stat,process:::sales_stat:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  id,\n        name AS classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name\nFROM    classifications\nWHERE   classification_type = 'KCDClassification'\nAND     parent_id is null\n\nUNION ALL\n\nSELECT  s.id,\n        f.name AS classification_kcd_depth_1_name,\n        s.name AS classification_kcd_depth_2_name\nFROM    classifications s, classifications f\nWHERE   s.classification_type = 'KCDClassification'\nAND     f.classification_type = 'KCDClassification'\nAND     f.parent_id is null\nAND     s.parent_id = f.id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(r, c) */\n        CAST(r.id AS bigint) AS region_id,\n        CAST(c.id AS bigint) AS classification_id,\n        a.sido,\n        a.sigungu,\n        a.classification_kcd_depth_1_name,\n        a.classification_kcd_depth_2_name,\n        a.time AS base_date,\n        a.time_unit AS date_unit,\n        a.business_count,\n        a.card_sales_amount,\n        a.card_sales_count,\n        a.delivery_sales_amount,\n        a.delivery_count,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    (\n  SELECT  *\n  FROM    regions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    classifications_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    multi_dimensions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    total_stat\n) a LEFT OUTER JOIN regions r\nON (\n  a.sido = r.sido AND\n  COALESCE(a.sigungu, 'null') = COALESCE(r.sigungu, 'null')\n) LEFT OUTER JOIN classification_tree c\nON (\n  a.classification_kcd_depth_1_name = c.classification_kcd_depth_1_name AND\n  COALESCE(a.classification_kcd_depth_2_name, 'null') = COALESCE(c.classification_kcd_depth_2_name, 'null')\n)""}, 'role': 'process', 'type': 'sql'}]"
1245,process:::tx_with_meta:::build_sales_stat,process:::regions_stat:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(t) */\n        src.*,\n        location.sido AS sido,\n        location.sigungu AS sigungu,\n        location.dong AS dong,\n        CASE\n          WHEN classification.depth_1_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_1_name\n        END AS classification_kcd_depth_1_name,\n        CASE\n          WHEN classification.depth_2_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_2_name\n        END AS classification_kcd_depth_2_name\nFROM    tx_with_meta_src src, (\n  SELECT  *\n  FROM    targets_src\n  WHERE   transacted_at_month_count = 13\n) t\nWHERE   src.business_id = t.business_id\nAND     classification.depth_1_name is not null\nAND    (\n   (\n     time_unit = 'week' AND\n     year(time) in (2019, 2020) AND\n     weekofyear(time) < weekofyear(current_date()) AND\n     weekofyear(time) >= weekofyear(current_date()) - 8\n   ) OR\n   (\n     time_unit = 'day' AND\n     time < current_date() AND\n     time >= DATE_SUB(current_date(), 7)\n   ) OR\n   (\n     time_unit = 'week' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   ) OR\n   (\n     time_unit = 'day' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   )\n )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  sido,\n        sigungu,\n        '전체업종' AS classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nAND     sigungu is not null\nGROUP BY  sido, sigungu, time, time_unit\n\nUNION ALL\n\nSELECT  sido,\n        CAST(null AS string) AS sigungu,\n        '전체업종' AS classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nGROUP BY  sido, time, time_unit""}, 'role': 'process', 'type': 'sql'}]"
1246,process:::tx_with_meta:::build_sales_stat,process:::classifications_stat:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(t) */\n        src.*,\n        location.sido AS sido,\n        location.sigungu AS sigungu,\n        location.dong AS dong,\n        CASE\n          WHEN classification.depth_1_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_1_name\n        END AS classification_kcd_depth_1_name,\n        CASE\n          WHEN classification.depth_2_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_2_name\n        END AS classification_kcd_depth_2_name\nFROM    tx_with_meta_src src, (\n  SELECT  *\n  FROM    targets_src\n  WHERE   transacted_at_month_count = 13\n) t\nWHERE   src.business_id = t.business_id\nAND     classification.depth_1_name is not null\nAND    (\n   (\n     time_unit = 'week' AND\n     year(time) in (2019, 2020) AND\n     weekofyear(time) < weekofyear(current_date()) AND\n     weekofyear(time) >= weekofyear(current_date()) - 8\n   ) OR\n   (\n     time_unit = 'day' AND\n     time < current_date() AND\n     time >= DATE_SUB(current_date(), 7)\n   ) OR\n   (\n     time_unit = 'week' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   ) OR\n   (\n     time_unit = 'day' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   )\n )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  '전국' AS sido,\n        CAST(null AS string) AS sigungu,\n        classification_kcd_depth_1_name,\n        classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   classification_kcd_depth_1_name is not null\nAND     classification_kcd_depth_2_name is not null\nGROUP BY  classification_kcd_depth_1_name, classification_kcd_depth_2_name, time, time_unit\n\nUNION ALL\n\nSELECT  '전국' AS sido,\n        CAST(null AS string) AS sigungu,\n        classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   classification_kcd_depth_1_name is not null\nGROUP BY  classification_kcd_depth_1_name, time, time_unit""}, 'role': 'process', 'type': 'sql'}]"
1247,process:::tx_with_meta:::build_sales_stat,process:::multi_dimensions_stat:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(t) */\n        src.*,\n        location.sido AS sido,\n        location.sigungu AS sigungu,\n        location.dong AS dong,\n        CASE\n          WHEN classification.depth_1_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_1_name\n        END AS classification_kcd_depth_1_name,\n        CASE\n          WHEN classification.depth_2_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_2_name\n        END AS classification_kcd_depth_2_name\nFROM    tx_with_meta_src src, (\n  SELECT  *\n  FROM    targets_src\n  WHERE   transacted_at_month_count = 13\n) t\nWHERE   src.business_id = t.business_id\nAND     classification.depth_1_name is not null\nAND    (\n   (\n     time_unit = 'week' AND\n     year(time) in (2019, 2020) AND\n     weekofyear(time) < weekofyear(current_date()) AND\n     weekofyear(time) >= weekofyear(current_date()) - 8\n   ) OR\n   (\n     time_unit = 'day' AND\n     time < current_date() AND\n     time >= DATE_SUB(current_date(), 7)\n   ) OR\n   (\n     time_unit = 'week' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   ) OR\n   (\n     time_unit = 'day' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   )\n )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': 'SELECT  sido,\n        sigungu,\n        classification_kcd_depth_1_name,\n        classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nAND     sigungu is not null\nAND     classification_kcd_depth_1_name is not null\nAND     classification_kcd_depth_2_name is not null\nGROUP BY  sido, sigungu, classification_kcd_depth_1_name, classification_kcd_depth_2_name, time, time_unit\n\nUNION ALL\n\nSELECT  sido,\n        sigungu,\n        classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nAND     sigungu is not null\nAND     classification_kcd_depth_1_name is not null\nGROUP BY  sido, sigungu, classification_kcd_depth_1_name, time, time_unit\n\nUNION ALL\n\nSELECT  sido,\n        CAST(null AS string) AS sigungu,\n        classification_kcd_depth_1_name,\n        classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nAND     classification_kcd_depth_1_name is not null\nAND     classification_kcd_depth_2_name is not null\nGROUP BY  sido, classification_kcd_depth_1_name, classification_kcd_depth_2_name, time, time_unit\n\nUNION ALL\n\nSELECT  sido,\n        CAST(null AS string) AS sigungu,\n        classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nAND     classification_kcd_depth_1_name is not null\nGROUP BY  sido, classification_kcd_depth_1_name, time, time_unit'}, 'role': 'process', 'type': 'sql'}]"
1248,process:::tx_with_meta:::build_sales_stat,process:::total_stat:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(t) */\n        src.*,\n        location.sido AS sido,\n        location.sigungu AS sigungu,\n        location.dong AS dong,\n        CASE\n          WHEN classification.depth_1_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_1_name\n        END AS classification_kcd_depth_1_name,\n        CASE\n          WHEN classification.depth_2_name = '금융/보헙업' THEN '금융/보험업'\n          ELSE classification.depth_2_name\n        END AS classification_kcd_depth_2_name\nFROM    tx_with_meta_src src, (\n  SELECT  *\n  FROM    targets_src\n  WHERE   transacted_at_month_count = 13\n) t\nWHERE   src.business_id = t.business_id\nAND     classification.depth_1_name is not null\nAND    (\n   (\n     time_unit = 'week' AND\n     year(time) in (2019, 2020) AND\n     weekofyear(time) < weekofyear(current_date()) AND\n     weekofyear(time) >= weekofyear(current_date()) - 8\n   ) OR\n   (\n     time_unit = 'day' AND\n     time < current_date() AND\n     time >= DATE_SUB(current_date(), 7)\n   ) OR\n   (\n     time_unit = 'week' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   ) OR\n   (\n     time_unit = 'day' AND\n     time >= to_date('2020-01-01', 'yyyy-MM-dd') AND time <= to_date('2020-07-12')\n   )\n )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  '전국' AS sido,\n        CAST(null AS string) AS sigungu,\n        '전체업종' AS classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nGROUP BY  time, time_unit""}, 'role': 'process', 'type': 'sql'}]"
1249,process:::regions_stat:::build_sales_stat,process:::sales_stat:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  sido,\n        sigungu,\n        '전체업종' AS classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nAND     sigungu is not null\nGROUP BY  sido, sigungu, time, time_unit\n\nUNION ALL\n\nSELECT  sido,\n        CAST(null AS string) AS sigungu,\n        '전체업종' AS classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nGROUP BY  sido, time, time_unit""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(r, c) */\n        CAST(r.id AS bigint) AS region_id,\n        CAST(c.id AS bigint) AS classification_id,\n        a.sido,\n        a.sigungu,\n        a.classification_kcd_depth_1_name,\n        a.classification_kcd_depth_2_name,\n        a.time AS base_date,\n        a.time_unit AS date_unit,\n        a.business_count,\n        a.card_sales_amount,\n        a.card_sales_count,\n        a.delivery_sales_amount,\n        a.delivery_count,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    (\n  SELECT  *\n  FROM    regions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    classifications_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    multi_dimensions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    total_stat\n) a LEFT OUTER JOIN regions r\nON (\n  a.sido = r.sido AND\n  COALESCE(a.sigungu, 'null') = COALESCE(r.sigungu, 'null')\n) LEFT OUTER JOIN classification_tree c\nON (\n  a.classification_kcd_depth_1_name = c.classification_kcd_depth_1_name AND\n  COALESCE(a.classification_kcd_depth_2_name, 'null') = COALESCE(c.classification_kcd_depth_2_name, 'null')\n)""}, 'role': 'process', 'type': 'sql'}]"
1250,process:::classifications_stat:::build_sales_stat,process:::sales_stat:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  '전국' AS sido,\n        CAST(null AS string) AS sigungu,\n        classification_kcd_depth_1_name,\n        classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   classification_kcd_depth_1_name is not null\nAND     classification_kcd_depth_2_name is not null\nGROUP BY  classification_kcd_depth_1_name, classification_kcd_depth_2_name, time, time_unit\n\nUNION ALL\n\nSELECT  '전국' AS sido,\n        CAST(null AS string) AS sigungu,\n        classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   classification_kcd_depth_1_name is not null\nGROUP BY  classification_kcd_depth_1_name, time, time_unit""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(r, c) */\n        CAST(r.id AS bigint) AS region_id,\n        CAST(c.id AS bigint) AS classification_id,\n        a.sido,\n        a.sigungu,\n        a.classification_kcd_depth_1_name,\n        a.classification_kcd_depth_2_name,\n        a.time AS base_date,\n        a.time_unit AS date_unit,\n        a.business_count,\n        a.card_sales_amount,\n        a.card_sales_count,\n        a.delivery_sales_amount,\n        a.delivery_count,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    (\n  SELECT  *\n  FROM    regions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    classifications_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    multi_dimensions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    total_stat\n) a LEFT OUTER JOIN regions r\nON (\n  a.sido = r.sido AND\n  COALESCE(a.sigungu, 'null') = COALESCE(r.sigungu, 'null')\n) LEFT OUTER JOIN classification_tree c\nON (\n  a.classification_kcd_depth_1_name = c.classification_kcd_depth_1_name AND\n  COALESCE(a.classification_kcd_depth_2_name, 'null') = COALESCE(c.classification_kcd_depth_2_name, 'null')\n)""}, 'role': 'process', 'type': 'sql'}]"
1251,process:::multi_dimensions_stat:::build_sales_stat,process:::sales_stat:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'sql': 'SELECT  sido,\n        sigungu,\n        classification_kcd_depth_1_name,\n        classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nAND     sigungu is not null\nAND     classification_kcd_depth_1_name is not null\nAND     classification_kcd_depth_2_name is not null\nGROUP BY  sido, sigungu, classification_kcd_depth_1_name, classification_kcd_depth_2_name, time, time_unit\n\nUNION ALL\n\nSELECT  sido,\n        sigungu,\n        classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nAND     sigungu is not null\nAND     classification_kcd_depth_1_name is not null\nGROUP BY  sido, sigungu, classification_kcd_depth_1_name, time, time_unit\n\nUNION ALL\n\nSELECT  sido,\n        CAST(null AS string) AS sigungu,\n        classification_kcd_depth_1_name,\n        classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nAND     classification_kcd_depth_1_name is not null\nAND     classification_kcd_depth_2_name is not null\nGROUP BY  sido, classification_kcd_depth_1_name, classification_kcd_depth_2_name, time, time_unit\n\nUNION ALL\n\nSELECT  sido,\n        CAST(null AS string) AS sigungu,\n        classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nWHERE   sido is not null\nAND     classification_kcd_depth_1_name is not null\nGROUP BY  sido, classification_kcd_depth_1_name, time, time_unit'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(r, c) */\n        CAST(r.id AS bigint) AS region_id,\n        CAST(c.id AS bigint) AS classification_id,\n        a.sido,\n        a.sigungu,\n        a.classification_kcd_depth_1_name,\n        a.classification_kcd_depth_2_name,\n        a.time AS base_date,\n        a.time_unit AS date_unit,\n        a.business_count,\n        a.card_sales_amount,\n        a.card_sales_count,\n        a.delivery_sales_amount,\n        a.delivery_count,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    (\n  SELECT  *\n  FROM    regions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    classifications_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    multi_dimensions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    total_stat\n) a LEFT OUTER JOIN regions r\nON (\n  a.sido = r.sido AND\n  COALESCE(a.sigungu, 'null') = COALESCE(r.sigungu, 'null')\n) LEFT OUTER JOIN classification_tree c\nON (\n  a.classification_kcd_depth_1_name = c.classification_kcd_depth_1_name AND\n  COALESCE(a.classification_kcd_depth_2_name, 'null') = COALESCE(c.classification_kcd_depth_2_name, 'null')\n)""}, 'role': 'process', 'type': 'sql'}]"
1252,process:::total_stat:::build_sales_stat,process:::sales_stat:::build_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  '전국' AS sido,\n        CAST(null AS string) AS sigungu,\n        '전체업종' AS classification_kcd_depth_1_name,\n        CAST(null AS string) AS classification_kcd_depth_2_name,\n        time,\n        time_unit,\n        SUM(card_sales_amount) AS card_sales_amount,\n        SUM(card_sales_count) AS card_sales_count,\n        COUNT(DISTINCT business_id) business_count,\n        SUM(delivery.amount_sum) AS delivery_sales_amount,\n        COUNT(DISTINCT delivery.business_id) delivery_count\nFROM    tx_with_meta\nGROUP BY  time, time_unit""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(r, c) */\n        CAST(r.id AS bigint) AS region_id,\n        CAST(c.id AS bigint) AS classification_id,\n        a.sido,\n        a.sigungu,\n        a.classification_kcd_depth_1_name,\n        a.classification_kcd_depth_2_name,\n        a.time AS base_date,\n        a.time_unit AS date_unit,\n        a.business_count,\n        a.card_sales_amount,\n        a.card_sales_count,\n        a.delivery_sales_amount,\n        a.delivery_count,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    (\n  SELECT  *\n  FROM    regions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    classifications_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    multi_dimensions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    total_stat\n) a LEFT OUTER JOIN regions r\nON (\n  a.sido = r.sido AND\n  COALESCE(a.sigungu, 'null') = COALESCE(r.sigungu, 'null')\n) LEFT OUTER JOIN classification_tree c\nON (\n  a.classification_kcd_depth_1_name = c.classification_kcd_depth_1_name AND\n  COALESCE(a.classification_kcd_depth_2_name, 'null') = COALESCE(c.classification_kcd_depth_2_name, 'null')\n)""}, 'role': 'process', 'type': 'sql'}]"
1253,process:::sales_stat:::build_sales_stat,s3://kcd-de-production/raw/stat/snowdon/dashboard/corona/sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sales_stat.json', 'options': {'sql': ""SELECT  /*+ BROADCAST(r, c) */\n        CAST(r.id AS bigint) AS region_id,\n        CAST(c.id AS bigint) AS classification_id,\n        a.sido,\n        a.sigungu,\n        a.classification_kcd_depth_1_name,\n        a.classification_kcd_depth_2_name,\n        a.time AS base_date,\n        a.time_unit AS date_unit,\n        a.business_count,\n        a.card_sales_amount,\n        a.card_sales_count,\n        a.delivery_sales_amount,\n        a.delivery_count,\n        current_timestamp() AS created_at,\n        current_timestamp() AS updated_at\nFROM    (\n  SELECT  *\n  FROM    regions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    classifications_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    multi_dimensions_stat\n\n  UNION ALL\n\n  SELECT  *\n  FROM    total_stat\n) a LEFT OUTER JOIN regions r\nON (\n  a.sido = r.sido AND\n  COALESCE(a.sigungu, 'null') = COALESCE(r.sigungu, 'null')\n) LEFT OUTER JOIN classification_tree c\nON (\n  a.classification_kcd_depth_1_name = c.classification_kcd_depth_1_name AND\n  COALESCE(a.classification_kcd_depth_2_name, 'null') = COALESCE(c.classification_kcd_depth_2_name, 'null')\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sales_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/dashboard/corona/sales_stat'}, 'role': 'sink', 'type': 'file'}]"
1254,pos_payments_raw,process:::pos_payments_distinct:::dedup_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_payments.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=posetl_payments/created_at_date=2020-09-22,s3://kcd-data/raw/catalog_v2/raw/tb=posetl_payments/created_at_date=2020-09-21,s3://kcd-data/raw/catalog_v2/raw/tb=posetl_payments/created_at_date=2020-09-20', 'partition_keys': 'created_at_date,created_at_hour'}, 'role': 'source', 'type': 'custom'}, {'filename': 'pos_add_visit_orders.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=posetl_payments', 'partition_keys': 'created_at_date,created_at_hour'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'dedup_payments.json', 'options': {'sql': 'SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  business_id,\n  card_number,\n  client_id,\n  index,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  store_key,\n  timestamp,\n  CAST(null AS int) AS visit_order,\n  created_at_date,\n  CAST(unix_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"") AS timestamp) AS transacted_at,\n  CAST(to_date(CAST(unix_timestamp(paid_at, ""yyyy-MM-dd"") AS timestamp), \'yyyy-MM-dd\') as string) AS transacted_at_date\nFROM    (\n  SELECT\n    *,\n    row_number() OVER (PARTITION BY payment_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_payments_raw\n  WHERE\n    created_at_date >= \'2019-09-23\' AND created_at_date < \'2020-09-23\'\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
1255,pos_payments_raw,process:::pos_payments_distinct:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_payments.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=posetl_payments/created_at_date=2020-09-22,s3://kcd-data/raw/catalog_v2/raw/tb=posetl_payments/created_at_date=2020-09-21,s3://kcd-data/raw/catalog_v2/raw/tb=posetl_payments/created_at_date=2020-09-20', 'partition_keys': 'created_at_date,created_at_hour'}, 'role': 'source', 'type': 'custom'}, {'filename': 'pos_add_visit_orders.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=posetl_payments', 'partition_keys': 'created_at_date,created_at_hour'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT\n  distinct(payment_key),\n  *\nFROM\n  pos_payments_raw\nWHERE\n  created_at_date >= '2018-09-23' AND created_at_date < '2020-09-23'""}, 'role': 'process', 'type': 'sql'}]"
1256,process:::pos_payments_distinct:::dedup_payments,s3://kcd-data/raw/etl/pos/pos_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_payments.json', 'options': {'sql': 'SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  business_id,\n  card_number,\n  client_id,\n  index,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  store_key,\n  timestamp,\n  CAST(null AS int) AS visit_order,\n  created_at_date,\n  CAST(unix_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"") AS timestamp) AS transacted_at,\n  CAST(to_date(CAST(unix_timestamp(paid_at, ""yyyy-MM-dd"") AS timestamp), \'yyyy-MM-dd\') as string) AS transacted_at_date\nFROM    (\n  SELECT\n    *,\n    row_number() OVER (PARTITION BY payment_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_payments_raw\n  WHERE\n    created_at_date >= \'2019-09-23\' AND created_at_date < \'2020-09-23\'\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dedup_payments.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-data/raw/etl/pos/pos_payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
1257,s3://kcd-data/raw/catalog_v2/raw/tb=owl_db_card_purchases_approvals,process:::card_purchases_approvals:::build_card_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases.json', 'options': {'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=owl_db_card_purchases_approvals', 'format': 'json'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_card_purchases.json', 'options': {'sql': ""SELECT  business_id,\n        card_id,\n        status,\n        approved_at,\n        authorization_number,\n        amount,\n        MAX(card_name) AS card_name,\n        MAX(card_number) AS card_number,\n        MAX(created_at) AS created_at,\n        MAX(currency) AS currency,\n        MAX(installment) AS installment,\n        MAX(issuer_name) AS issuer_name,\n        MAX(updated_at) AS updated_at,\n        MAX(vat) AS vat,\n        MAX(vendor_business_name) AS vendor_business_name,\n        MAX(vendor_registration_number) AS vendor_registration_number,\n        MAX(created_at_date) AS created_at_date\nFROM    (\n  SELECT    CAST(amount AS int) AS amount,\n            to_timestamp(approved_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS approved_at,\n            authorization_number,\n            CAST(business_id AS int) AS business_id,\n            CAST(card_id AS int) AS card_id,\n            card_name,\n            card_number,\n            to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n            CAST(currency AS int) AS currency,\n            CAST(installment AS int) AS installment,\n            issuer_name,\n            status,\n            to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n            vat,\n            vendor_business_name,\n            vendor_registration_number,\n            date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM      card_purchases_approvals_src\n)\nWHERE    created_at_date >= '2021-01-21'\nAND      created_at_date < '2021-01-28'\nGROUP BY business_id, card_id, status, approved_at, authorization_number, amount""}, 'role': 'process', 'type': 'sql'}]"
1258,s3://kcd-de-production/raw/etl/snowdon/card/card_purchases,process:::prev_card_purchases_approvals:::build_card_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card/card_purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_purchases.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card/card_purchases', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_card_purchases_stat.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card/card_purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_card_purchases.json', 'options': {'sql': ""SELECT  *\nFROM    prev_card_purchases_approvals_src\nWHERE   created_at_date >= '${PREV_MIN_DATE}'\nAND     created_at_date < '2021-01-21'""}, 'role': 'process', 'type': 'sql'}]"
1259,s3://kcd-de-production/raw/etl/snowdon/card/card_purchases,process:::card_purchases:::build_card_purchases_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card/card_purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_purchases.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card/card_purchases', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_card_purchases_stat.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card/card_purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_card_purchases_stat.json', 'options': {'sql': ""SELECT    *\nFROM      card_purchases_src\nWHERE     created_at_date >= '2021-01-21'\nAND       created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]"
1260,process:::prev_card_purchases_approvals:::build_card_purchases,process:::card_purchases_unique:::build_card_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases.json', 'options': {'sql': ""SELECT  *\nFROM    prev_card_purchases_approvals_src\nWHERE   created_at_date >= '${PREV_MIN_DATE}'\nAND     created_at_date < '2021-01-21'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_purchases.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_card_purchases_approvals prev RIGHT OUTER JOIN card_purchases current\nON      (\n  prev.business_id = current.business_id AND\n  prev.card_id = current.card_id AND\n  prev.status = current.status AND\n  prev.approved_at = current.approved_at AND\n  prev.authorization_number = current.authorization_number AND\n  prev.amount = current.amount\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]"
1261,process:::card_purchases_approvals:::build_card_purchases,process:::card_purchases:::build_card_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases.json', 'options': {'sql': ""SELECT  business_id,\n        card_id,\n        status,\n        approved_at,\n        authorization_number,\n        amount,\n        MAX(card_name) AS card_name,\n        MAX(card_number) AS card_number,\n        MAX(created_at) AS created_at,\n        MAX(currency) AS currency,\n        MAX(installment) AS installment,\n        MAX(issuer_name) AS issuer_name,\n        MAX(updated_at) AS updated_at,\n        MAX(vat) AS vat,\n        MAX(vendor_business_name) AS vendor_business_name,\n        MAX(vendor_registration_number) AS vendor_registration_number,\n        MAX(created_at_date) AS created_at_date\nFROM    (\n  SELECT    CAST(amount AS int) AS amount,\n            to_timestamp(approved_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS approved_at,\n            authorization_number,\n            CAST(business_id AS int) AS business_id,\n            CAST(card_id AS int) AS card_id,\n            card_name,\n            card_number,\n            to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n            CAST(currency AS int) AS currency,\n            CAST(installment AS int) AS installment,\n            issuer_name,\n            status,\n            to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n            vat,\n            vendor_business_name,\n            vendor_registration_number,\n            date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM      card_purchases_approvals_src\n)\nWHERE    created_at_date >= '2021-01-21'\nAND      created_at_date < '2021-01-28'\nGROUP BY business_id, card_id, status, approved_at, authorization_number, amount""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_purchases.json', 'options': {'sql': 'SELECT    *\nFROM      (\n   SELECT *,\n          CAST(approved_at AS long) - CAST(lag(approved_at, 1) over (\n              PARTITION BY business_id, authorization_number, status, amount\n              ORDER BY approved_at\n          ) AS long) as buffer\n   FROM   card_purchases_approvals\n   WHERE  currency = 0\n   AND    amount IS NOT NULL\n)\nWHERE buffer is null OR buffer > 1000 * 60'}, 'role': 'process', 'type': 'sql'}]"
1262,process:::card_purchases:::build_card_purchases,process:::card_purchases_unique:::build_card_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases.json', 'options': {'sql': 'SELECT    *\nFROM      (\n   SELECT *,\n          CAST(approved_at AS long) - CAST(lag(approved_at, 1) over (\n              PARTITION BY business_id, authorization_number, status, amount\n              ORDER BY approved_at\n          ) AS long) as buffer\n   FROM   card_purchases_approvals\n   WHERE  currency = 0\n   AND    amount IS NOT NULL\n)\nWHERE buffer is null OR buffer > 1000 * 60'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_purchases.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_card_purchases_approvals prev RIGHT OUTER JOIN card_purchases current\nON      (\n  prev.business_id = current.business_id AND\n  prev.card_id = current.card_id AND\n  prev.status = current.status AND\n  prev.approved_at = current.approved_at AND\n  prev.authorization_number = current.authorization_number AND\n  prev.amount = current.amount\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]"
1263,process:::card_purchases_unique:::build_card_purchases,s3://kcd-de-production/raw/etl/snowdon/card/card_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_card_purchases_approvals prev RIGHT OUTER JOIN card_purchases current\nON      (\n  prev.business_id = current.business_id AND\n  prev.card_id = current.card_id AND\n  prev.status = current.status AND\n  prev.approved_at = current.approved_at AND\n  prev.authorization_number = current.authorization_number AND\n  prev.amount = current.amount\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_purchases.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card/card_purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_purchases.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card/card_purchases', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_card_purchases_stat.json', 'options': {'paths': 's3://kcd-de-production/raw/etl/snowdon/card/card_purchases', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]"
1264,process:::approvals_with_sequence:::approvals,approvals_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'add_seq_on_approvals.json', 'options': {'sql': '    SELECT    *,\n              row_number() OVER (\n                  PARTITION BY business_id, credential_key, CAST(transacted_at AS DATE), mask_card_number(card_number), authorization_number, amount, status\n                  ORDER BY created_at DESC\n              ) AS approval_seq\n    FROM      approvals'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'staging_build_raw_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'build_raw_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'add_seq_on_approvals.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/approvals', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '2000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
1265,jdbc:new_card_sales_transactions,process:::card_sales_transactions:::dump_db_card_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_card_sales.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'new_card_sales_transactions', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '8581239045', 'upperBound': '9068232598', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_card_sales.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    card_sales_transactions\nWHERE   id >= 8581239045\nAND     id < 9068232598\n          ""}, 'role': 'process', 'type': 'sql'}]"
1266,process:::card_sales_transactions:::dump_db_card_sales,s3://kcd-de-staging/work/elric/dump/snowdon/incremental/card_sales_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_card_sales.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    card_sales_transactions\nWHERE   id >= 8581239045\nAND     id < 9068232598\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_card_sales.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/elric/dump/snowdon/incremental/card_sales_transactions'}, 'role': 'sink', 'type': 'file'}]"
1267,s3://kcd-de-production/raw/catalog_v2/raw/tb=pos_items/,process:::formatted_items:::asp_pos_post_process,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_asp_format_process.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=pos_items/created_at_date=2021-01-28', 'partition_keys': 'created_at_date', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_asp_format_process.json', 'options': {'sql': ""SELECT    *,\n          concat_ws('|', store_pos_key, receipt_key, item_key) as record_key,\n          current_timestamp() as ts,\n          date_format(date_trunc('day', receipt_ordered_at), 'yyyy-MM-dd') as ordered_at_date\nFROM      (\n    SELECT    concat_ws('|',\n                 brand_registration_number,\n                 francise_registration_number,\n                 store_registration_number,\n                 store_uid,\n                 pos_uid\n              ) as store_pos_key,\n              concat_ws('|',\n                 receipt_uid,\n                 receipt_status,\n                 date_format(receipt_ordered_at, 'yyyyMMDDHHmmss'),\n                 date_format(receipt_paid_at, 'yyyyMMDDHHmmss'),\n                 cancelled_receipt_uid\n              ) as receipt_key,\n              concat_ws('|',\n                 item_name,\n                 item_ordered_at,\n                 item_amount,\n                 item_price,\n                 item_quantity,\n                 item_discount,\n                 item_vat\n              ) as item_key,\n              a.*\n    FROM      (\n        SELECT DISTINCT\n               trim(target) as pos_asp_agent,\n               trim(payload_br_uid) as brand_uid,\n               trim(payload_br_name) as brand_name,\n               trim(replace(payload_br_registration_number, '-', '')) as brand_registration_number,\n               trim(payload_fr_uid) as francise_uid,\n               trim(payload_fr_name) as francise_name,\n               trim(replace(payload_fr_registration_number, '-', '')) as francise_registration_number,\n               trim(payload_st_uid) as store_uid,\n               trim(payload_st_name) as store_name,\n               trim(replace(payload_st_registration_number, '-', '')) as store_registration_number,\n               trim(payload_fr_address) as francise_address,\n               trim(payload_st_address) as store_address,\n               CAST(payload_st_site_area AS int) as store_area,\n               CAST(payload_st_table_count AS int) as store_table_count,\n               trim(payload_pos_uid) as pos_uid,\n               trim(payload_pos_name) as pos_name,\n               trim(payload_rcp_table_id) as table_uid,\n\n               trim(payload_rcp_uid) as receipt_uid,\n               trim(payload_rcp_cancelled_uid) as cancelled_receipt_uid,\n               trim(payload_rcp_status) as receipt_status,\n               to_timestamp(replace(regexp_replace(payload_rcp_ordered_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as receipt_ordered_at,\n               to_timestamp(replace(regexp_replace(payload_rcp_paid_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as receipt_paid_at,\n               CAST(payload_rcp_amount AS bigint) as receipt_amount,\n               CAST(payload_rcp_discount AS bigint) as receipt_discount,\n               CAST(payload_rcp_vat AS bigint) as receipt_vat,\n\n               trim(payload_menu_uid) as menu_uid,\n               trim(payload_item_name) as item_name,\n               to_timestamp(replace(regexp_replace(payload_item_ordered_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as item_ordered_at,\n               CAST(payload_item_amount AS int) as item_amount,\n               CAST(payload_item_discount AS bigint) as item_discount,\n               CAST(payload_item_price AS bigint) as item_price,\n               CAST(payload_item_quantity AS int) as item_quantity,\n               CAST(payload_item_vat AS bigint) as item_vat\n        FROM   items\n    ) as a\n)""}, 'role': 'process', 'type': 'sql'}]"
1268,s3://kcd-de-production/raw/catalog_v2/raw/tb=pos_payments/,process:::formatted_payments:::asp_pos_post_process,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_asp_format_process.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=pos_payments/created_at_date=2021-01-28', 'partition_keys': 'created_at_date', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'pos_asp_format_process.json', 'options': {'sql': ""SELECT    *,\n          concat_ws('|', store_pos_key, receipt_key, payment_key) as record_key,\n          current_timestamp() as ts,\n          date_format(date_trunc('day', receipt_ordered_at), 'yyyy-MM-dd') as ordered_at_date\nFROM      (\n    SELECT     concat_ws('|',\n                  brand_registration_number,\n                  francise_registration_number,\n                  store_registration_number,\n                  store_uid,\n                  pos_uid\n               ) as store_pos_key,\n               concat_ws('|',\n                  receipt_uid,\n                  receipt_status,\n                  date_format(receipt_ordered_at, 'yyyyMMDDHHmmss'),\n                  date_format(receipt_paid_at, 'yyyyMMDDHHmmss'),\n                  cancelled_receipt_uid\n               ) as receipt_key,\n               concat_ws('|',\n                  payment_approved_at,\n                  payment_authorization_number,\n                  payment_cash_receipt_identification,\n                  payment_issuer,\n                  payment_acquirer,\n                  payment_card_number,\n                  payment_amount,\n                  payment_method,\n                  payment_status\n               ) as payment_key,\n               a.*\n    FROM       (\n        SELECT DISTINCT\n               trim(target) as pos_asp_agent,\n               trim(payload_br_uid) as brand_uid,\n               trim(payload_br_name) as brand_name,\n               trim(replace(payload_br_registration_number, '-', '')) as brand_registration_number,\n               trim(payload_fr_uid) as francise_uid,\n               trim(payload_fr_name) as francise_name,\n               trim(replace(payload_fr_registration_number, '-', '')) as francise_registration_number,\n               trim(payload_st_uid) as store_uid,\n               trim(payload_st_name) as store_name,\n               trim(replace(payload_st_registration_number, '-', '')) as store_registration_number,\n               trim(payload_fr_address) as francise_address,\n               trim(payload_st_address) as store_address,\n               CAST(payload_st_site_area AS int) as store_area,\n               CAST(payload_st_table_count AS int) as store_table_count,\n               trim(payload_pos_uid) as pos_uid,\n               trim(payload_pos_name) as pos_name,\n               trim(payload_rcp_table_id) as table_uid,\n\n               trim(payload_rcp_uid) as receipt_uid,\n               trim(payload_rcp_cancelled_uid) as cancelled_receipt_uid,\n               trim(payload_rcp_status) as receipt_status,\n               to_timestamp(replace(regexp_replace(payload_rcp_ordered_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as receipt_ordered_at,\n               to_timestamp(replace(regexp_replace(payload_rcp_paid_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as receipt_paid_at,\n               CAST(payload_rcp_amount AS bigint) as receipt_amount,\n               CAST(payload_rcp_discount AS bigint) as receipt_discount,\n               CAST(payload_rcp_vat AS bigint) as receipt_vat,\n\n               trim(payload_pay_method) as payment_method,\n               trim(payload_pay_status) as payment_status,\n\n               trim(payload_pay_issuer) as payment_issuer,\n               trim(payload_pay_acquirer) as payment_acquirer,\n               trim(payload_pay_card_number) as payment_card_number,\n               trim(payload_pay_authorization_number) as payment_authorization_number,\n               trim(payload_pay_cash_receipt_identification) as payment_cash_receipt_identification,\n               to_timestamp(replace(regexp_replace(payload_pay_approved_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as payment_approved_at,\n               CAST(payload_pay_amount AS bigint) as payment_amount,\n               CAST(payload_pay_price AS bigint) as payment_price,\n               CAST(payload_pay_vat AS bigint) as payment_vat,\n               CAST(payload_pay_installment AS int) as payment_installment\n        FROM   payments\n    ) as a\n)""}, 'role': 'process', 'type': 'sql'}]"
1269,process:::formatted_items:::asp_pos_post_process,process:::filtered_items:::asp_pos_post_process,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_asp_format_process.json', 'options': {'sql': ""SELECT    *,\n          concat_ws('|', store_pos_key, receipt_key, item_key) as record_key,\n          current_timestamp() as ts,\n          date_format(date_trunc('day', receipt_ordered_at), 'yyyy-MM-dd') as ordered_at_date\nFROM      (\n    SELECT    concat_ws('|',\n                 brand_registration_number,\n                 francise_registration_number,\n                 store_registration_number,\n                 store_uid,\n                 pos_uid\n              ) as store_pos_key,\n              concat_ws('|',\n                 receipt_uid,\n                 receipt_status,\n                 date_format(receipt_ordered_at, 'yyyyMMDDHHmmss'),\n                 date_format(receipt_paid_at, 'yyyyMMDDHHmmss'),\n                 cancelled_receipt_uid\n              ) as receipt_key,\n              concat_ws('|',\n                 item_name,\n                 item_ordered_at,\n                 item_amount,\n                 item_price,\n                 item_quantity,\n                 item_discount,\n                 item_vat\n              ) as item_key,\n              a.*\n    FROM      (\n        SELECT DISTINCT\n               trim(target) as pos_asp_agent,\n               trim(payload_br_uid) as brand_uid,\n               trim(payload_br_name) as brand_name,\n               trim(replace(payload_br_registration_number, '-', '')) as brand_registration_number,\n               trim(payload_fr_uid) as francise_uid,\n               trim(payload_fr_name) as francise_name,\n               trim(replace(payload_fr_registration_number, '-', '')) as francise_registration_number,\n               trim(payload_st_uid) as store_uid,\n               trim(payload_st_name) as store_name,\n               trim(replace(payload_st_registration_number, '-', '')) as store_registration_number,\n               trim(payload_fr_address) as francise_address,\n               trim(payload_st_address) as store_address,\n               CAST(payload_st_site_area AS int) as store_area,\n               CAST(payload_st_table_count AS int) as store_table_count,\n               trim(payload_pos_uid) as pos_uid,\n               trim(payload_pos_name) as pos_name,\n               trim(payload_rcp_table_id) as table_uid,\n\n               trim(payload_rcp_uid) as receipt_uid,\n               trim(payload_rcp_cancelled_uid) as cancelled_receipt_uid,\n               trim(payload_rcp_status) as receipt_status,\n               to_timestamp(replace(regexp_replace(payload_rcp_ordered_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as receipt_ordered_at,\n               to_timestamp(replace(regexp_replace(payload_rcp_paid_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as receipt_paid_at,\n               CAST(payload_rcp_amount AS bigint) as receipt_amount,\n               CAST(payload_rcp_discount AS bigint) as receipt_discount,\n               CAST(payload_rcp_vat AS bigint) as receipt_vat,\n\n               trim(payload_menu_uid) as menu_uid,\n               trim(payload_item_name) as item_name,\n               to_timestamp(replace(regexp_replace(payload_item_ordered_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as item_ordered_at,\n               CAST(payload_item_amount AS int) as item_amount,\n               CAST(payload_item_discount AS bigint) as item_discount,\n               CAST(payload_item_price AS bigint) as item_price,\n               CAST(payload_item_quantity AS int) as item_quantity,\n               CAST(payload_item_vat AS bigint) as item_vat\n        FROM   items\n    ) as a\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_asp_format_process.json', 'options': {'sql': 'SELECT    *\nFROM      formatted_items\nWHERE     record_key is not null'}, 'role': 'process', 'type': 'sql'}]"
1270,process:::filtered_items:::asp_pos_post_process,s3://kcd-de-staging/work/ryan/pos_asp/items/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_asp_format_process.json', 'options': {'sql': 'SELECT    *\nFROM      formatted_items\nWHERE     record_key is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_asp_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/pos_asp/items/created_at_date=2020-11-04', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'pos_asp_format_process.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/pos_asp/items/created_at_date=2021-01-28', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
1271,process:::formatted_payments:::asp_pos_post_process,process:::filtered_payments:::asp_pos_post_process,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_asp_format_process.json', 'options': {'sql': ""SELECT    *,\n          concat_ws('|', store_pos_key, receipt_key, payment_key) as record_key,\n          current_timestamp() as ts,\n          date_format(date_trunc('day', receipt_ordered_at), 'yyyy-MM-dd') as ordered_at_date\nFROM      (\n    SELECT     concat_ws('|',\n                  brand_registration_number,\n                  francise_registration_number,\n                  store_registration_number,\n                  store_uid,\n                  pos_uid\n               ) as store_pos_key,\n               concat_ws('|',\n                  receipt_uid,\n                  receipt_status,\n                  date_format(receipt_ordered_at, 'yyyyMMDDHHmmss'),\n                  date_format(receipt_paid_at, 'yyyyMMDDHHmmss'),\n                  cancelled_receipt_uid\n               ) as receipt_key,\n               concat_ws('|',\n                  payment_approved_at,\n                  payment_authorization_number,\n                  payment_cash_receipt_identification,\n                  payment_issuer,\n                  payment_acquirer,\n                  payment_card_number,\n                  payment_amount,\n                  payment_method,\n                  payment_status\n               ) as payment_key,\n               a.*\n    FROM       (\n        SELECT DISTINCT\n               trim(target) as pos_asp_agent,\n               trim(payload_br_uid) as brand_uid,\n               trim(payload_br_name) as brand_name,\n               trim(replace(payload_br_registration_number, '-', '')) as brand_registration_number,\n               trim(payload_fr_uid) as francise_uid,\n               trim(payload_fr_name) as francise_name,\n               trim(replace(payload_fr_registration_number, '-', '')) as francise_registration_number,\n               trim(payload_st_uid) as store_uid,\n               trim(payload_st_name) as store_name,\n               trim(replace(payload_st_registration_number, '-', '')) as store_registration_number,\n               trim(payload_fr_address) as francise_address,\n               trim(payload_st_address) as store_address,\n               CAST(payload_st_site_area AS int) as store_area,\n               CAST(payload_st_table_count AS int) as store_table_count,\n               trim(payload_pos_uid) as pos_uid,\n               trim(payload_pos_name) as pos_name,\n               trim(payload_rcp_table_id) as table_uid,\n\n               trim(payload_rcp_uid) as receipt_uid,\n               trim(payload_rcp_cancelled_uid) as cancelled_receipt_uid,\n               trim(payload_rcp_status) as receipt_status,\n               to_timestamp(replace(regexp_replace(payload_rcp_ordered_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as receipt_ordered_at,\n               to_timestamp(replace(regexp_replace(payload_rcp_paid_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as receipt_paid_at,\n               CAST(payload_rcp_amount AS bigint) as receipt_amount,\n               CAST(payload_rcp_discount AS bigint) as receipt_discount,\n               CAST(payload_rcp_vat AS bigint) as receipt_vat,\n\n               trim(payload_pay_method) as payment_method,\n               trim(payload_pay_status) as payment_status,\n\n               trim(payload_pay_issuer) as payment_issuer,\n               trim(payload_pay_acquirer) as payment_acquirer,\n               trim(payload_pay_card_number) as payment_card_number,\n               trim(payload_pay_authorization_number) as payment_authorization_number,\n               trim(payload_pay_cash_receipt_identification) as payment_cash_receipt_identification,\n               to_timestamp(replace(regexp_replace(payload_pay_approved_at, '[\\:, \\-, \\s]', ''), '-', ''), 'yyyyMMddHHmmss') as payment_approved_at,\n               CAST(payload_pay_amount AS bigint) as payment_amount,\n               CAST(payload_pay_price AS bigint) as payment_price,\n               CAST(payload_pay_vat AS bigint) as payment_vat,\n               CAST(payload_pay_installment AS int) as payment_installment\n        FROM   payments\n    ) as a\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_asp_format_process.json', 'options': {'sql': 'SELECT    *\nFROM      formatted_payments\nWHERE     record_key is not null'}, 'role': 'process', 'type': 'sql'}]"
1272,process:::filtered_payments:::asp_pos_post_process,s3://kcd-de-staging/work/ryan/pos_asp/payments/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_asp_format_process.json', 'options': {'sql': 'SELECT    *\nFROM      formatted_payments\nWHERE     record_key is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_asp_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/pos_asp/payments/created_at_date=2020-11-04', 'log_leaf_file': 'true'}, 'role': 'source', 'type': 'file'}, {'filename': 'pos_asp_format_process.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/pos_asp/payments/created_at_date=2021-01-28', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
1273,jdbc:hometax_card_purchases,process:::hometax_card_purchases_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_card_purchases', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '324912098', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_card_purchases\nWHERE   id > 324912098\n          ""}, 'role': 'process', 'type': 'sql'}]"
1274,jdbc:hometax_purchases_cash_receipts,process:::hometax_purchases_cash_receipts_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_purchases_cash_receipts', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '288604218', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_purchases_cash_receipts\nWHERE   id > 288604218\n          ""}, 'role': 'process', 'type': 'sql'}]"
1275,jdbc:hometax_purchases_invoices,process:::hometax_purchases_invoices_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_purchases_invoices', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '400193164', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_purchases_invoices\nWHERE   id > 400193164\n          ""}, 'role': 'process', 'type': 'sql'}]"
1276,jdbc:hometax_card_sales,process:::hometax_card_sales_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_card_sales', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '12252014', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_card_sales\nWHERE   id > 12252014\n          ""}, 'role': 'process', 'type': 'sql'}]"
1277,jdbc:hometax_sales_cash_receipts,process:::hometax_sales_cash_receipts_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_sales_cash_receipts', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '1119954188', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_sales_cash_receipts\nWHERE   id > 1119954188\n          ""}, 'role': 'process', 'type': 'sql'}]"
1278,jdbc:hometax_sales_invoices,process:::hometax_sales_invoices_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'hometax_sales_invoices', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '102788559', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_sales_invoices\nWHERE   id > 102788559\n          ""}, 'role': 'process', 'type': 'sql'}]"
1279,jdbc:bank_transactions,process:::bank_transactions_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'bank_transactions', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '989621729', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    bank_transactions\nWHERE   id > 989621729\n          ""}, 'role': 'process', 'type': 'sql'}]"
1280,jdbc:shinhancard_customer_statistics,process:::shinhancard_customer_statistics_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'shinhancard_customer_statistics', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '36157548', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    shinhancard_customer_statistics\nWHERE   id > 36157548\n          ""}, 'role': 'process', 'type': 'sql'}]"
1281,jdbc:daily_reports,process:::daily_reports_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'daily_reports', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '188505551', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    daily_reports\nWHERE   id > 188505551\n          ""}, 'role': 'process', 'type': 'sql'}]"
1282,jdbc:weekly_reports,process:::weekly_reports_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'weekly_reports', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '3125251', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    weekly_reports\nWHERE   id > 3125251\n          ""}, 'role': 'process', 'type': 'sql'}]"
1283,jdbc:monthly_reports,process:::monthly_reports_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'monthly_reports', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '857224', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    monthly_reports\nWHERE   id > 857224\n          ""}, 'role': 'process', 'type': 'sql'}]"
1284,jdbc:place_comments,process:::place_comments_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'place_comments', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '188526039', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    place_comments\nWHERE   id > 188526039\n          ""}, 'role': 'process', 'type': 'sql'}]"
1285,jdbc:place_reviews,process:::place_reviews_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'place_reviews', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '1885130521', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    place_reviews\nWHERE   id > 1885130521\n          ""}, 'role': 'process', 'type': 'sql'}]"
1286,jdbc:baemin_payments,process:::baemin_payments_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'baemin_payments', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '43579475', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    baemin_payments\nWHERE   id > 43579475\n          ""}, 'role': 'process', 'type': 'sql'}]"
1287,jdbc:baemin_orders,process:::baemin_orders_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'baemin_orders', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '772383095', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    baemin_orders\nWHERE   id > 772383095\n          ""}, 'role': 'process', 'type': 'sql'}]"
1288,jdbc:baemin_sales_vats,process:::baemin_sales_vats_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'baemin_sales_vats', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '138185797', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    baemin_sales_vats\nWHERE   id > 138185797\n          ""}, 'role': 'process', 'type': 'sql'}]"
1289,jdbc:baedaltong_orders,process:::baedaltong_orders_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'baedaltong_orders', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '5533796', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    baedaltong_orders\nWHERE   id > 5533796\n          ""}, 'role': 'process', 'type': 'sql'}]"
1290,jdbc:baedaltong_payments,process:::baedaltong_payments_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'baedaltong_payments', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '289636', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    baedaltong_payments\nWHERE   id > 289636\n          ""}, 'role': 'process', 'type': 'sql'}]"
1291,jdbc:yogiyo_orders,process:::yogiyo_orders_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'yogiyo_orders', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '97016777', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    yogiyo_orders\nWHERE   id > 97016777\n          ""}, 'role': 'process', 'type': 'sql'}]"
1292,jdbc:yogiyo_payments,process:::yogiyo_payments_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'yogiyo_payments', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '6855528', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    yogiyo_payments\nWHERE   id > 6855528\n          ""}, 'role': 'process', 'type': 'sql'}]"
1293,jdbc:card_purchases_approvals,process:::card_purchases_approvals_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_purchases_approvals', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '134407276', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    card_purchases_approvals\nWHERE   id > 134407276\n          ""}, 'role': 'process', 'type': 'sql'}]"
1294,jdbc:card_purchases_bills,process:::card_purchases_bills_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_purchases_bills', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '23236419', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    card_purchases_bills\nWHERE   id > 23236419\n          ""}, 'role': 'process', 'type': 'sql'}]"
1295,jdbc:card_purchases_payments,process:::card_purchases_payments_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'card_purchases_payments', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '33867292', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    card_purchases_payments\nWHERE   id > 33867292\n          ""}, 'role': 'process', 'type': 'sql'}]"
1296,jdbc:vendor_transactions,process:::vendor_transactions_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'vendor_transactions', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '47462534', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    vendor_transactions\nWHERE   id > 47462534\n          ""}, 'role': 'process', 'type': 'sql'}]"
1297,jdbc:vendor_invoices,process:::vendor_invoices_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'vendor_invoices', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '299296670', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    vendor_invoices\nWHERE   id > 299296670\n          ""}, 'role': 'process', 'type': 'sql'}]"
1298,jdbc:customer_transactions,process:::customer_transactions_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'customer_transactions', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '9935650', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    customer_transactions\nWHERE   id > 9935650\n          ""}, 'role': 'process', 'type': 'sql'}]"
1299,jdbc:customer_invoices,process:::customer_invoices_date:::dump_incremental,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'customer_invoices', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'lowerBound': '87339650', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    customer_invoices\nWHERE   id > 87339650\n          ""}, 'role': 'process', 'type': 'sql'}]"
1300,process:::report_logs_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/report_logs,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    report_logs\nWHERE   id > 328893704\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/report_logs', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/report_logs'}, 'role': 'source', 'type': 'file'}]"
1301,process:::hometax_card_purchases_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_card_purchases\nWHERE   id > 324912098\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_purchases'}, 'role': 'source', 'type': 'file'}]"
1302,process:::hometax_purchases_cash_receipts_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_purchases_cash_receipts\nWHERE   id > 288604218\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_cash_receipts'}, 'role': 'source', 'type': 'file'}]"
1303,process:::hometax_purchases_invoices_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_purchases_invoices\nWHERE   id > 400193164\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_purchase.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_purchases_invoices'}, 'role': 'source', 'type': 'file'}]"
1304,process:::hometax_card_sales_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_card_sales\nWHERE   id > 12252014\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_card_sales'}, 'role': 'source', 'type': 'file'}]"
1305,process:::hometax_sales_cash_receipts_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_sales_cash_receipts\nWHERE   id > 1119954188\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_cash_receipts'}, 'role': 'source', 'type': 'file'}]"
1306,process:::hometax_sales_invoices_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    hometax_sales_invoices\nWHERE   id > 102788559\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_sales.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/hometax_sales_invoices'}, 'role': 'source', 'type': 'file'}]"
1307,process:::bank_transactions_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    bank_transactions\nWHERE   id > 989621729\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/bank_transactions'}, 'role': 'source', 'type': 'file'}]"
1308,process:::shinhancard_customer_statistics_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    shinhancard_customer_statistics\nWHERE   id > 36157548\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/shinhancard_customer_statistics'}, 'role': 'source', 'type': 'file'}]"
1309,process:::daily_reports_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    daily_reports\nWHERE   id > 188505551\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/daily_reports', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/daily_reports'}, 'role': 'source', 'type': 'file'}]"
1310,process:::weekly_reports_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/weekly_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    weekly_reports\nWHERE   id > 3125251\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/weekly_reports', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/weekly_reports'}, 'role': 'source', 'type': 'file'}]"
1311,process:::monthly_reports_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    monthly_reports\nWHERE   id > 857224\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/monthly_reports', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/monthly_reports'}, 'role': 'source', 'type': 'file'}]"
1312,process:::place_comments_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/place_comments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    place_comments\nWHERE   id > 188526039\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}, {'filename': 'fact_delivery.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_comments'}, 'role': 'source', 'type': 'file'}]"
1313,process:::place_reviews_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/place_reviews,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    place_reviews\nWHERE   id > 1885130521\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'fact_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_reviews'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/place_reviews', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/place_reviews'}, 'role': 'source', 'type': 'file'}]"
1314,process:::baemin_payments_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    baemin_payments\nWHERE   id > 43579475\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_payments'}, 'role': 'source', 'type': 'file'}]"
1315,process:::baemin_orders_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    baemin_orders\nWHERE   id > 772383095\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_orders'}, 'role': 'source', 'type': 'file'}]"
1316,process:::baemin_sales_vats_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    baemin_sales_vats\nWHERE   id > 138185797\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baemin_sales_vats'}, 'role': 'source', 'type': 'file'}]"
1317,process:::baedaltong_orders_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    baedaltong_orders\nWHERE   id > 5533796\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_orders'}, 'role': 'source', 'type': 'file'}]"
1318,process:::baedaltong_payments_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    baedaltong_payments\nWHERE   id > 289636\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/baedaltong_payments'}, 'role': 'source', 'type': 'file'}]"
1319,process:::yogiyo_orders_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    yogiyo_orders\nWHERE   id > 97016777\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_orders.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_orders'}, 'role': 'source', 'type': 'file'}]"
1320,process:::yogiyo_payments_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    yogiyo_payments\nWHERE   id > 6855528\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'initial_build_delivery_app_payments.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/yogiyo_payments'}, 'role': 'source', 'type': 'file'}]"
1321,process:::card_purchases_approvals_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_approvals,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    card_purchases_approvals\nWHERE   id > 134407276\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_approvals', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_approvals'}, 'role': 'source', 'type': 'file'}]"
1322,process:::card_purchases_bills_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_bills,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    card_purchases_bills\nWHERE   id > 23236419\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_bills', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_bills'}, 'role': 'source', 'type': 'file'}]"
1323,process:::card_purchases_payments_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    card_purchases_payments\nWHERE   id > 33867292\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_payments'}, 'role': 'source', 'type': 'file'}]"
1324,process:::vendor_transactions_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/vendor_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    vendor_transactions\nWHERE   id > 47462534\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/vendor_transactions', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/vendor_transactions'}, 'role': 'source', 'type': 'file'}]"
1325,process:::vendor_invoices_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/vendor_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    vendor_invoices\nWHERE   id > 299296670\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/vendor_invoices', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/vendor_invoices'}, 'role': 'source', 'type': 'file'}]"
1326,process:::customer_transactions_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/customer_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    customer_transactions\nWHERE   id > 9935650\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/customer_transactions', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/customer_transactions'}, 'role': 'source', 'type': 'file'}]"
1327,process:::customer_invoices_date:::dump_incremental,s3://kcd-de-production/raw/db/snowdon/incremental/customer_invoices,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'sql': ""\nSELECT  date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n        *\nFROM    customer_invoices\nWHERE   id > 87339650\n          ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/customer_invoices', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/customer_invoices'}, 'role': 'source', 'type': 'file'}]"
1328,s3://kcd-de-production/raw/db/snowdon/incremental/report_logs,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/report_logs', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/report_logs'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1329,s3://kcd-de-production/raw/db/snowdon/incremental/daily_reports,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/daily_reports', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/daily_reports'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1330,s3://kcd-de-production/raw/db/snowdon/incremental/weekly_reports,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/weekly_reports', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/weekly_reports'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1331,s3://kcd-de-production/raw/db/snowdon/incremental/,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/monthly_reports', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/monthly_reports'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1332,s3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_approvals,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_approvals', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_approvals'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1333,s3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_bills,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_bills', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_bills'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1334,s3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_payments,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_payments', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/card_purchases_payments'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1335,s3://kcd-de-production/raw/db/snowdon/incremental/vendor_transactions,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/vendor_transactions', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/vendor_transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1336,s3://kcd-de-production/raw/db/snowdon/incremental/vendor_invoices,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/vendor_invoices', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/vendor_invoices'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1337,s3://kcd-de-production/raw/db/snowdon/incremental/customer_transactions,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/customer_transactions', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/customer_transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1338,s3://kcd-de-production/raw/db/snowdon/incremental/customer_invoices,process:::latest_ids:::get_latest_ids,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_snowdon_incremental.json', 'options': {'format': 'parquet', 'mode': 'append', 'path': 's3://kcd-de-production/raw/db/snowdon/incremental/customer_invoices', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/incremental/customer_invoices'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]"
1339,s3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/group_id=e365a43e-c321-4f54-a6f5-dbc1245228a6,process:::formatted_old_report_logs:::check_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'check_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/message/report_logs/user_type=cashnote/report_name=daily_reports/old_report_logs/date_id=2021-01-28/group_id=e365a43e-c321-4f54-a6f5-dbc1245228a6'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'check_daily_reports.json', 'options': {'sql': 'SELECT\n        business_id, user_id,\n        struct(\n            card_sales_amount,\n            card_sales_count,\n            card_sales_fee,\n            card_sales_vat_fee,\n            card_sales_payment,\n            card_sales_new_amount,\n            card_sales_returning_amount,\n            card_sales_monthly_amount,\n            hourly_sales_0_6_amount,\n            hourly_sales_6_11_amount,\n            hourly_sales_11_14_amount,\n            hourly_sales_14_17_amount,\n            hourly_sales_17_24_amount,\n            today_payments_kb,\n            today_payments_nh,\n            today_payments_lotte,\n            today_payments_baemin,\n            today_payments_bc,\n            today_payments_samsung,\n            today_payments_shinhan,\n            today_payments_hana,\n            today_payments_hyundai,\n            delivery_app_sales_baemin_amount,\n            delivery_app_sales_yogiyo_amount,\n            delivery_app_sales_baedaltong_amount,\n            delivery_app_sales_monthly_amount,\n            card_purchases_monthly_amount,\n            hometax_sales_monthly_invoice_amount,\n            hometax_sales_monthly_cash_amount,\n            hometax_purchases_monthly_cash_amount,\n            hometax_purchases_monthly_invoice_amount\n        ) AS data\nFROM old_report_logs'}, 'role': 'process', 'type': 'sql'}]"
1340,process:::formatted_old_report_logs:::check_daily_report,process:::diff:::check_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'check_daily_reports.json', 'options': {'sql': 'SELECT\n        business_id, user_id,\n        struct(\n            card_sales_amount,\n            card_sales_count,\n            card_sales_fee,\n            card_sales_vat_fee,\n            card_sales_payment,\n            card_sales_new_amount,\n            card_sales_returning_amount,\n            card_sales_monthly_amount,\n            hourly_sales_0_6_amount,\n            hourly_sales_6_11_amount,\n            hourly_sales_11_14_amount,\n            hourly_sales_14_17_amount,\n            hourly_sales_17_24_amount,\n            today_payments_kb,\n            today_payments_nh,\n            today_payments_lotte,\n            today_payments_baemin,\n            today_payments_bc,\n            today_payments_samsung,\n            today_payments_shinhan,\n            today_payments_hana,\n            today_payments_hyundai,\n            delivery_app_sales_baemin_amount,\n            delivery_app_sales_yogiyo_amount,\n            delivery_app_sales_baedaltong_amount,\n            delivery_app_sales_monthly_amount,\n            card_purchases_monthly_amount,\n            hometax_sales_monthly_invoice_amount,\n            hometax_sales_monthly_cash_amount,\n            hometax_purchases_monthly_cash_amount,\n            hometax_purchases_monthly_invoice_amount\n        ) AS data\nFROM old_report_logs'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'check_daily_reports.json', 'options': {'sql': 'SELECT\n        dim,\n        matched_cnt,\n        (all_cnt - matched_cnt) AS unmatched_cnt,\n        (matched_cnt / all_cnt * 100) AS matched_ratio\nFROM (\n    SELECT\n            *,\n            (SELECT count(distinct(business_id)) AS all_business_cnt FROM formatted_old_report_logs) AS all_cnt\n    FROM (\n        SELECT\n                dim,\n                count(distinct(business_id)) AS matched_cnt\n        FROM (\n            SELECT\n                    business_id, user_id,\n                    matched._1 AS dim,\n                    matched._2 AS val\n            FROM (\n                SELECT\n                        o.business_id, o.user_id,\n                        explode(compareTowRowWithLongValue(o.data, n.data)) AS matched\n                FROM formatted_old_report_logs AS o\n                LEFT OUTER JOIN formatted_new_report_logs AS n\n                ON o.business_id = n.business_id\n            )\n        )\n        WHERE val = true\n        GROUP BY dim\n    )\n)'}, 'role': 'process', 'type': 'sql'}]"
1341,process:::formatted_new_report_logs:::check_daily_report,process:::diff:::check_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'check_daily_reports.json', 'options': {'sql': 'SELECT\n        business_id,\n        struct(\n            card_sales_amount,\n            card_sales_count,\n            card_sales_fee,\n            card_sales_vat_fee,\n            card_sales_payment,\n            card_sales_new_amount,\n            card_sales_returning_amount,\n            card_sales_monthly_amount,\n            hourly_sales_0_6_amount,\n            hourly_sales_6_11_amount,\n            hourly_sales_11_14_amount,\n            hourly_sales_14_17_amount,\n            hourly_sales_17_24_amount,\n            today_payments_kb,\n            today_payments_nh,\n            today_payments_lotte,\n            today_payments_baemin,\n            today_payments_bc,\n            today_payments_samsung,\n            today_payments_shinhan,\n            today_payments_hana,\n            today_payments_hyundai,\n            delivery_app_sales_baemin_amount,\n            delivery_app_sales_yogiyo_amount,\n            delivery_app_sales_baedaltong_amount,\n            delivery_app_sales_monthly_amount,\n            card_purchases_monthly_amount,\n            hometax_sales_monthly_invoice_amount,\n            hometax_sales_monthly_cash_amount,\n            hometax_purchases_monthly_cash_amount,\n            hometax_purchases_monthly_invoice_amount\n        ) AS data\nFROM new_report_logs'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'check_daily_reports.json', 'options': {'sql': 'SELECT\n        dim,\n        matched_cnt,\n        (all_cnt - matched_cnt) AS unmatched_cnt,\n        (matched_cnt / all_cnt * 100) AS matched_ratio\nFROM (\n    SELECT\n            *,\n            (SELECT count(distinct(business_id)) AS all_business_cnt FROM formatted_old_report_logs) AS all_cnt\n    FROM (\n        SELECT\n                dim,\n                count(distinct(business_id)) AS matched_cnt\n        FROM (\n            SELECT\n                    business_id, user_id,\n                    matched._1 AS dim,\n                    matched._2 AS val\n            FROM (\n                SELECT\n                        o.business_id, o.user_id,\n                        explode(compareTowRowWithLongValue(o.data, n.data)) AS matched\n                FROM formatted_old_report_logs AS o\n                LEFT OUTER JOIN formatted_new_report_logs AS n\n                ON o.business_id = n.business_id\n            )\n        )\n        WHERE val = true\n        GROUP BY dim\n    )\n)'}, 'role': 'process', 'type': 'sql'}]"
1342,process:::diff:::check_daily_report,process:::add_field:::check_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'check_daily_reports.json', 'options': {'sql': 'SELECT\n        dim,\n        matched_cnt,\n        (all_cnt - matched_cnt) AS unmatched_cnt,\n        (matched_cnt / all_cnt * 100) AS matched_ratio\nFROM (\n    SELECT\n            *,\n            (SELECT count(distinct(business_id)) AS all_business_cnt FROM formatted_old_report_logs) AS all_cnt\n    FROM (\n        SELECT\n                dim,\n                count(distinct(business_id)) AS matched_cnt\n        FROM (\n            SELECT\n                    business_id, user_id,\n                    matched._1 AS dim,\n                    matched._2 AS val\n            FROM (\n                SELECT\n                        o.business_id, o.user_id,\n                        explode(compareTowRowWithLongValue(o.data, n.data)) AS matched\n                FROM formatted_old_report_logs AS o\n                LEFT OUTER JOIN formatted_new_report_logs AS n\n                ON o.business_id = n.business_id\n            )\n        )\n        WHERE val = true\n        GROUP BY dim\n    )\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'check_daily_reports.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-28', 'yyyy-MM-dd') AS timestamp,\n            '2021-01-28' AS report_date,\n            'e365a43e-c321-4f54-a6f5-dbc1245228a6' AS group_id,\n            *\n  FROM      diff""}, 'role': 'process', 'type': 'sql'}]"
1343,process:::diff:::check_daily_report,s3://kcd-de-production/service/message/debug/daily_report_diff/group_id=e365a43e-c321-4f54-a6f5-dbc1245228a6,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'check_daily_reports.json', 'options': {'sql': 'SELECT\n        dim,\n        matched_cnt,\n        (all_cnt - matched_cnt) AS unmatched_cnt,\n        (matched_cnt / all_cnt * 100) AS matched_ratio\nFROM (\n    SELECT\n            *,\n            (SELECT count(distinct(business_id)) AS all_business_cnt FROM formatted_old_report_logs) AS all_cnt\n    FROM (\n        SELECT\n                dim,\n                count(distinct(business_id)) AS matched_cnt\n        FROM (\n            SELECT\n                    business_id, user_id,\n                    matched._1 AS dim,\n                    matched._2 AS val\n            FROM (\n                SELECT\n                        o.business_id, o.user_id,\n                        explode(compareTowRowWithLongValue(o.data, n.data)) AS matched\n                FROM formatted_old_report_logs AS o\n                LEFT OUTER JOIN formatted_new_report_logs AS n\n                ON o.business_id = n.business_id\n            )\n        )\n        WHERE val = true\n        GROUP BY dim\n    )\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'check_daily_reports.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/debug/daily_report_diff/date_id=2021-01-28/group_id=e365a43e-c321-4f54-a6f5-dbc1245228a6', 'numPartitions': '1'}, 'role': 'sink', 'type': 'file'}]"
1344,process:::add_field:::check_daily_report,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'check_daily_reports.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-28', 'yyyy-MM-dd') AS timestamp,\n            '2021-01-28' AS report_date,\n            'e365a43e-c321-4f54-a6f5-dbc1245228a6' AS group_id,\n            *\n  FROM      diff""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
1345,jdbc:card_agreements,s3://kcd-de-production/raw/db/goose/snapshot/card_agreements,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_goose.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'card_agreements', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/card_agreements'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/card_agreements'}, 'role': 'sink', 'type': 'file'}]"
1346,jdbc:place_merchants,s3://kcd-de-production/raw/db/goose/snapshot/place_merchants,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_goose.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'place_merchants', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/place_merchants'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/place_merchants'}, 'role': 'source', 'type': 'file'}]"
1347,jdbc:place_masters,s3://kcd-de-production/raw/db/goose/snapshot/place_masters,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_goose.json', 'options': {'url': 'jdbc:postgresql://goose-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/goose_production', 'dbtable': 'place_masters', 'user': 'shon_ro', 'password': 'Rht49bKsJrm3zvGP', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/place_masters'}, 'role': 'sink', 'type': 'file'}]"
1348,s3://kcd-de-production/raw/db/goose/snapshot/place_merchants,process:::merchant_places:::merchant_places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_goose.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/goose/snapshot/date_id=2021-01-29/hour=12/place_merchants'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/goose/snapshot/latest/place_merchants'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'merchant_places.json', 'options': {'sql': 'SELECT    *\nFROM (\n          SELECT\n                  issuer AS card_issuer, merchant_number,\n                  places.*,\n                  row_number() OVER (PARTITION BY place_merchants.registration_number, issuer, merchant_number, type ORDER BY places.updated_at DESC ) AS rank\n          FROM      place_merchants\n          JOIN      places\n          ON        place_merchants.place_id = places.id\n          AND       place_merchants.registration_number = places.registration_number\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
1349,process:::add_join_field:::cashnote_user_meta_es_sink,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_meta_es_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-29', 'yyyy-MM-dd') AS timestamp,\n            named_struct(\n                'name', 'meta'\n            ) AS join_field,\n            *\n  FROM      cashnote_user_meta""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
1350,jdbc:client_user_mapping,process:::targets_to_send_message:::build_user_agreements,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_agreements.json', 'options': {'url': 'jdbc:mysql://auth-mysql-2.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:3306/auth?characterEncoding=UTF-8', 'dbtable': 'client_user_mapping', 'user': 'auth', 'password': '83jCxnHncj', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'driver': 'com.mysql.jdbc.Driver', 'autoPartition': 'false'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_user_agreements.json', 'options': {'sql': ""SELECT  distinct phone_number\nFROM    current_client_user_mapping\nWHERE   realm_id = 'paynote'\nAND     client_id = 'gsshop'\nAND     verified is not null\nAND     DATEDIFF(current_date(), CAST(verified AS DATE)) >= 7\nAND     phone_number is not null\nAND     phone_number != ''""}, 'role': 'process', 'type': 'sql'}]"
1351,jdbc:client_user_mapping,process:::client_user_mapping_joined:::build_user_agreements,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_agreements.json', 'options': {'url': 'jdbc:mysql://auth-mysql-2.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:3306/auth?characterEncoding=UTF-8', 'dbtable': 'client_user_mapping', 'user': 'auth', 'password': '83jCxnHncj', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'driver': 'com.mysql.jdbc.Driver', 'autoPartition': 'false'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_user_agreements.json', 'options': {'sql': ""SELECT  struct(current.*) AS current,\n        struct(prev.*) AS prev\nFROM    current_client_user_mapping current FULL OUTER JOIN prev_client_user_mapping prev\nON      current.id = prev.id\nWHERE   current.realm_id = 'paynote'\nAND     current.client_id = 'gsshop'\nAND     prev.realm_id = 'paynote'\nAND     prev.client_id = 'gsshop'\nAND     current.verified_ci = current.ci""}, 'role': 'process', 'type': 'sql'}]"
1352,jdbc:client_user_mapping,s3://kcd-de-production/paynote_connect/gs/dump/client_user_mapping,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_agreements.json', 'options': {'url': 'jdbc:mysql://auth-mysql-2.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:3306/auth?characterEncoding=UTF-8', 'dbtable': 'client_user_mapping', 'user': 'auth', 'password': '83jCxnHncj', 'fetchsize': '5000', 'numRowsPerPartition': '50000', 'driver': 'com.mysql.jdbc.Driver', 'autoPartition': 'false'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'build_user_agreements.json', 'options': {'format': 'parquet', 'path': 's3://kcd-de-production/paynote_connect/gs/created_at_date=2021-01-19/dump/client_user_mapping', 'mode': 'overwrite'}, 'role': 'sink', 'type': 'file'}]"
1353,process:::targets_to_send_message:::build_user_agreements,s3://kcd-de-production/paynote_connect/gs/message_targets,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_agreements.json', 'options': {'sql': ""SELECT  distinct phone_number\nFROM    current_client_user_mapping\nWHERE   realm_id = 'paynote'\nAND     client_id = 'gsshop'\nAND     verified is not null\nAND     DATEDIFF(current_date(), CAST(verified AS DATE)) >= 7\nAND     phone_number is not null\nAND     phone_number != ''""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_user_agreements.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'path': 's3://kcd-de-production/paynote_connect/gs/created_at_date=2021-01-19/message_targets', 'numPartitions': '1', 'mode': 'overwrite'}, 'role': 'sink', 'type': 'custom'}]"
1354,process:::client_user_mapping_joined:::build_user_agreements,process:::targets_to_send_data:::build_user_agreements,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_agreements.json', 'options': {'sql': ""SELECT  struct(current.*) AS current,\n        struct(prev.*) AS prev\nFROM    current_client_user_mapping current FULL OUTER JOIN prev_client_user_mapping prev\nON      current.id = prev.id\nWHERE   current.realm_id = 'paynote'\nAND     current.client_id = 'gsshop'\nAND     prev.realm_id = 'paynote'\nAND     prev.client_id = 'gsshop'\nAND     current.verified_ci = current.ci""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_user_agreements.json', 'options': {'sql': ""SELECT  prev.client_id,\n        prev.client_user_id,\n        prev.created,\n        'delete' AS operation\nFROM    client_user_mapping_joined\nWHERE   current.id IS NULL AND prev.id IS NOT NULL\n\nUNION ALL\n\nSELECT  current.client_id,\n        current.client_user_id,\n        current.created,\n        'insert' AS operation\nFROM    client_user_mapping_joined\nWHERE   current.id IS NOT NULL AND prev.id IS NULL""}, 'role': 'process', 'type': 'sql'}]"
1355,process:::targets_to_send_data:::build_user_agreements,s3://kcd-de-production/paynote_connect/gs/agreements,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_agreements.json', 'options': {'sql': ""SELECT  prev.client_id,\n        prev.client_user_id,\n        prev.created,\n        'delete' AS operation\nFROM    client_user_mapping_joined\nWHERE   current.id IS NULL AND prev.id IS NOT NULL\n\nUNION ALL\n\nSELECT  current.client_id,\n        current.client_user_id,\n        current.created,\n        'insert' AS operation\nFROM    client_user_mapping_joined\nWHERE   current.id IS NOT NULL AND prev.id IS NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_user_agreements.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'path': 's3://kcd-de-production/paynote_connect/gs/created_at_date=2021-01-19/agreements', 'numPartitions': '1', 'header': 'true', 'mode': 'overwrite'}, 'role': 'sink', 'type': 'custom'}]"
1356,s3://kcd-de-production/raw/db/snowdon/snapshot/issuer_histories,process:::issuer_purchase_period:::build_daily_report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/snowdon/snapshot/date_id=2020-12-30/hour=11/issuer_histories/'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_report.json', 'options': {'sql': 'SELECT\n        business_id,\n        issuer_name,\n        merchant_number,\n        date_sub(purchased_up_to, purchase_period) AS limit_date\nFROM (\n    SELECT\n            business_id,\n            issuer_name,\n            merchant_number,\n            COALESCE(calculated_purchase_period, 1) AS purchase_period,\n            purchased_up_to\n    FROM card_merchants\n    JOIN (\n            SELECT  issuer AS name,\n                    max(date) AS purchased_up_to\n            FROM issuer_histories\n            WHERE purchases = true AND purchases_checked = true\n            GROUP BY issuer\n    ) AS issuers\n    ON card_merchants.issuer_name = issuers.name\n)'}, 'role': 'process', 'type': 'sql'}, {'filename': 'test_build_daily_report.json', 'options': {'sql': 'SELECT\n        business_id,\n        issuer_name,\n        merchant_number,\n        date_sub(purchased_up_to, purchase_period) AS limit_date\nFROM (\n    SELECT\n            business_id,\n            issuer_name,\n            merchant_number,\n            COALESCE(calculated_purchase_period, 1) AS purchase_period,\n            purchased_up_to\n    FROM card_merchants\n    JOIN (\n            SELECT  issuer AS name,\n                    max(date) AS purchased_up_to\n            FROM issuer_histories\n            WHERE purchases = true AND purchases_checked = true\n            GROUP BY issuer\n    ) AS issuers\n    ON card_merchants.issuer_name = issuers.name\n)'}, 'role': 'process', 'type': 'sql'}]"
1357,s3://thrush/dev/data/adhoc/DR-49/matched_targets,process:::semas_businesses_daily_ratio:::semas_daily_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'format': 'parquet', 'paths': 's3://thrush/dev/data/adhoc/DR-49/matched_targets'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT  b.*,\n        concat_ws(\n            ' ~ ',\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 - 1),\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 + 5)\n        ) as standard_period,\n        '2020-12-10' as target_date,\n        standard_amount,\n        target_amount\nFROM target_date_standard_period_transactions a\nJOIN (\n     SELECT DISTINCT business_id,\n                     sido\n     FROM semas_businesses\n) b ON a.business_id = b.business_id""}, 'role': 'process', 'type': 'sql'}]"
1358,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/semas_kcd_mapping.csv,process:::target_businesses_daily_ratio:::semas_daily_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'format': 'csv', 'read': '{""header"":""true""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/semas_kcd_mapping.csv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT  st.business_id,\n        meta.lot_address_1_depth AS sido,\n        meta.kcd_classification_1_depth AS depth_1_name,\n        meta.kcd_classification_2_depth AS depth_2_name,\n        s.semas_classification,\n        concat_ws(\n            ' ~ ',\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 - 1),\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 + 5)\n        ) as standard_period,\n        '2020-12-10' as target_date,\n        standard_amount,\n        target_amount\nFROM    target_date_standard_period_transactions st, targets t, semas_classification_mapping s\nWHERE   st.business_id = t.business_id\nAND     t.transacted_at_month_count = 13\nAND     meta.lot_address_1_depth NOT IN ('none', 'NULL', '')\nAND     meta.kcd_classification_1_depth = s.kcd_classification_depth_1\nAND     meta.kcd_classification_2_depth = s.kcd_classification_depth_2""}, 'role': 'process', 'type': 'sql'}]"
1359,process:::target_date_standard_period_transactions:::semas_daily_sales_stat,process:::target_businesses_daily_ratio:::semas_daily_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT  business_id,\n        MAX(place) AS meta,\n        SUM(IF (weekofyear(time) = weekofyear('2020-12-10') and year(time) = 2019, card_sales_amount, 0)) AS standard_amount,\n        SUM(IF (time = '2020-12-10', card_sales_amount, 0)) AS target_amount\nFROM    transactions_stat_with_meta\nWHERE   time_unit = 'day'\nGROUP BY 1""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT  st.business_id,\n        meta.lot_address_1_depth AS sido,\n        meta.kcd_classification_1_depth AS depth_1_name,\n        meta.kcd_classification_2_depth AS depth_2_name,\n        s.semas_classification,\n        concat_ws(\n            ' ~ ',\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 - 1),\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 + 5)\n        ) as standard_period,\n        '2020-12-10' as target_date,\n        standard_amount,\n        target_amount\nFROM    target_date_standard_period_transactions st, targets t, semas_classification_mapping s\nWHERE   st.business_id = t.business_id\nAND     t.transacted_at_month_count = 13\nAND     meta.lot_address_1_depth NOT IN ('none', 'NULL', '')\nAND     meta.kcd_classification_1_depth = s.kcd_classification_depth_1\nAND     meta.kcd_classification_2_depth = s.kcd_classification_depth_2""}, 'role': 'process', 'type': 'sql'}]"
1360,process:::target_date_standard_period_transactions:::semas_daily_sales_stat,process:::semas_businesses_daily_ratio:::semas_daily_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT  business_id,\n        MAX(place) AS meta,\n        SUM(IF (weekofyear(time) = weekofyear('2020-12-10') and year(time) = 2019, card_sales_amount, 0)) AS standard_amount,\n        SUM(IF (time = '2020-12-10', card_sales_amount, 0)) AS target_amount\nFROM    transactions_stat_with_meta\nWHERE   time_unit = 'day'\nGROUP BY 1""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT  b.*,\n        concat_ws(\n            ' ~ ',\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 - 1),\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 + 5)\n        ) as standard_period,\n        '2020-12-10' as target_date,\n        standard_amount,\n        target_amount\nFROM target_date_standard_period_transactions a\nJOIN (\n     SELECT DISTINCT business_id,\n                     sido\n     FROM semas_businesses\n) b ON a.business_id = b.business_id""}, 'role': 'process', 'type': 'sql'}]"
1361,process:::target_businesses_daily_ratio:::semas_daily_sales_stat,process:::target_businesses_daily_stat:::semas_daily_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT  st.business_id,\n        meta.lot_address_1_depth AS sido,\n        meta.kcd_classification_1_depth AS depth_1_name,\n        meta.kcd_classification_2_depth AS depth_2_name,\n        s.semas_classification,\n        concat_ws(\n            ' ~ ',\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 - 1),\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 + 5)\n        ) as standard_period,\n        '2020-12-10' as target_date,\n        standard_amount,\n        target_amount\nFROM    target_date_standard_period_transactions st, targets t, semas_classification_mapping s\nWHERE   st.business_id = t.business_id\nAND     t.transacted_at_month_count = 13\nAND     meta.lot_address_1_depth NOT IN ('none', 'NULL', '')\nAND     meta.kcd_classification_1_depth = s.kcd_classification_depth_1\nAND     meta.kcd_classification_2_depth = s.kcd_classification_depth_2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT *\nFROM\n(\n    SELECT  '통합' as type,\n            '전체' as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct target_businesses_daily_ratio.business_id) as business_count\n    FROM    target_businesses_daily_ratio\n    GROUP BY 1, 2, 3, 4\n\n    UNION ALL\n\n    SELECT  '지역' as type,\n            sido as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct target_businesses_daily_ratio.business_id) as business_count\n    FROM    target_businesses_daily_ratio\n    WHERE   sido is not null\n    GROUP BY 1, 2, 3, 4\n\n    UNION ALL\n\n    SELECT  '업종' as type,\n            semas_classification as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct target_businesses_daily_ratio.business_id) as business_count\n    FROM    target_businesses_daily_ratio\n    WHERE   depth_1_name is not null\n    AND     depth_1_name not in ('부동산', '금융,보험', '사회,공공기관', '언론,미디어')\n    GROUP BY 1, 2, 3, 4\n\n    UNION ALL\n\n    SELECT  '지역 X 업종' as type,\n            concat_ws('>', sido, semas_classification) as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct target_businesses_daily_ratio.business_id) as business_count\n    FROM    target_businesses_daily_ratio\n    WHERE   sido is not null and depth_1_name is not null\n    AND     depth_1_name not in ('부동산', '금융,보험', '사회,공공기관', '언론,미디어')\n    GROUP BY 1, 2, 3, 4\n\n    UNION ALL\n\n    SELECT  '업종상세' as type,\n            concat_ws('>', depth_1_name, depth_2_name) as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct target_businesses_daily_ratio.business_id) as business_count\n    FROM    target_businesses_daily_ratio\n    WHERE   depth_1_name is not null and depth_2_name is not null\n    AND     depth_1_name not in ('부동산', '금융,보험', '사회,공공기관', '언론,미디어')\n    GROUP BY 1, 2, 3, 4\n)""}, 'role': 'process', 'type': 'sql'}]"
1362,process:::semas_businesses_daily_ratio:::semas_daily_sales_stat,process:::semas_businesses_daily_stat:::semas_daily_sales_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT  b.*,\n        concat_ws(\n            ' ~ ',\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 - 1),\n            date_add('2019-01-01', (weekofyear('2020-12-10') - 1) * 7 + 5)\n        ) as standard_period,\n        '2020-12-10' as target_date,\n        standard_amount,\n        target_amount\nFROM target_date_standard_period_transactions a\nJOIN (\n     SELECT DISTINCT business_id,\n                     sido\n     FROM semas_businesses\n) b ON a.business_id = b.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT *\nFROM\n(\n    SELECT  '통합' as type,\n            '전체' as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct semas_businesses_daily_ratio.business_id) as business_count\n    FROM    semas_businesses_daily_ratio\n    GROUP BY 1, 2, 3, 4\n\n    UNION ALL\n\n    SELECT  '지역' as type,\n            coalesce(sido, '주소정보없음') as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct semas_businesses_daily_ratio.business_id) as business_count\n    FROM    semas_businesses_daily_ratio\n    GROUP BY 1, 2, 3, 4\n)""}, 'role': 'process', 'type': 'sql'}]"
1363,process:::target_businesses_daily_stat:::semas_daily_sales_stat,s3://kcd-de-staging/work/ryan/semas_stats/2020-12-10/targets,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT *\nFROM\n(\n    SELECT  '통합' as type,\n            '전체' as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct target_businesses_daily_ratio.business_id) as business_count\n    FROM    target_businesses_daily_ratio\n    GROUP BY 1, 2, 3, 4\n\n    UNION ALL\n\n    SELECT  '지역' as type,\n            sido as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct target_businesses_daily_ratio.business_id) as business_count\n    FROM    target_businesses_daily_ratio\n    WHERE   sido is not null\n    GROUP BY 1, 2, 3, 4\n\n    UNION ALL\n\n    SELECT  '업종' as type,\n            semas_classification as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct target_businesses_daily_ratio.business_id) as business_count\n    FROM    target_businesses_daily_ratio\n    WHERE   depth_1_name is not null\n    AND     depth_1_name not in ('부동산', '금융,보험', '사회,공공기관', '언론,미디어')\n    GROUP BY 1, 2, 3, 4\n\n    UNION ALL\n\n    SELECT  '지역 X 업종' as type,\n            concat_ws('>', sido, semas_classification) as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct target_businesses_daily_ratio.business_id) as business_count\n    FROM    target_businesses_daily_ratio\n    WHERE   sido is not null and depth_1_name is not null\n    AND     depth_1_name not in ('부동산', '금융,보험', '사회,공공기관', '언론,미디어')\n    GROUP BY 1, 2, 3, 4\n\n    UNION ALL\n\n    SELECT  '업종상세' as type,\n            concat_ws('>', depth_1_name, depth_2_name) as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct target_businesses_daily_ratio.business_id) as business_count\n    FROM    target_businesses_daily_ratio\n    WHERE   depth_1_name is not null and depth_2_name is not null\n    AND     depth_1_name not in ('부동산', '금융,보험', '사회,공공기관', '언론,미디어')\n    GROUP BY 1, 2, 3, 4\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/semas_stats/2020-12-10/targets', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
1364,process:::semas_businesses_daily_stat:::semas_daily_sales_stat,s3://kcd-de-staging/work/ryan/semas_stats/2020-12-10/semas_businesses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'sql': ""SELECT *\nFROM\n(\n    SELECT  '통합' as type,\n            '전체' as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct semas_businesses_daily_ratio.business_id) as business_count\n    FROM    semas_businesses_daily_ratio\n    GROUP BY 1, 2, 3, 4\n\n    UNION ALL\n\n    SELECT  '지역' as type,\n            coalesce(sido, '주소정보없음') as condition,\n            standard_period,\n            target_date,\n            sum(target_amount) as target_amount_sum,\n            sum(standard_amount) as standard_amount_sum,\n            sum(target_amount) / (sum(standard_amount) / 7) as rate,\n            count(distinct semas_businesses_daily_ratio.business_id) as business_count\n    FROM    semas_businesses_daily_ratio\n    GROUP BY 1, 2, 3, 4\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_semas_daily_sales_ratio.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/semas_stats/2020-12-10/semas_businesses', 'header': 'true', 'numPartitions': '1'}, 'role': 'sink', 'type': 'custom'}]"
1365,jdbc:kakao_messages,s3://kcd-de-production/raw/db/bluebird/snapshot/kakao_messages,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_bluebird.json', 'options': {'url': 'jdbc:postgresql://bluebird-production-2.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'kakao_messages', 'user': 'readonly_user', 'password': 'aNJMuXFJqCnZ2hyi', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_bluebird.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/bluebird/snapshot/date_id=2021-01-29/kakao_messages'}, 'role': 'sink', 'type': 'file'}]"
1366,jdbc:kakao_message_groups,s3://kcd-de-production/raw/db/bluebird/snapshot/kakao_message_groups,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_bluebird.json', 'options': {'url': 'jdbc:postgresql://bluebird-production-2.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'kakao_message_groups', 'user': 'readonly_user', 'password': 'aNJMuXFJqCnZ2hyi', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'dump_db_bluebird.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/bluebird/snapshot/date_id=2021-01-29/kakao_message_groups'}, 'role': 'sink', 'type': 'file'}]"
1367,jdbc:acceptanced_business_templates,s3://kcd-de-production/raw/db/bluebird/snapshot/acceptanced_business_templates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_bluebird.json', 'options': {'url': 'jdbc:postgresql://bluebird-production-2.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'acceptanced_business_templates', 'user': 'readonly_user', 'password': 'aNJMuXFJqCnZ2hyi', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_templates'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_bluebird.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/bluebird/snapshot/date_id=2021-01-29/acceptanced_business_templates'}, 'role': 'sink', 'type': 'file'}, {'filename': 'acceptance_templates.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_templates'}, 'role': 'source', 'type': 'file'}]"
1368,jdbc:acceptanced_business_template_answers,s3://kcd-de-production/raw/db/bluebird/snapshot/acceptanced_business_template_answers,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_bluebird.json', 'options': {'url': 'jdbc:postgresql://bluebird-production-2.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'acceptanced_business_template_answers', 'user': 'readonly_user', 'password': 'aNJMuXFJqCnZ2hyi', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'paynote_users.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_template_answers'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_bluebird.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/bluebird/snapshot/date_id=2021-01-29/acceptanced_business_template_answers'}, 'role': 'sink', 'type': 'file'}, {'filename': 'acceptance_templates.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/acceptanced_business_template_answers'}, 'role': 'source', 'type': 'file'}]"
1369,jdbc:survey_monkey_responses,s3://kcd-de-production/raw/db/bluebird/snapshot/survey_monkey_responses,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dump_db_bluebird.json', 'options': {'url': 'jdbc:postgresql://bluebird-production-2.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'dbtable': 'survey_monkey_responses', 'user': 'readonly_user', 'password': 'aNJMuXFJqCnZ2hyi', 'fetchsize': '5000', 'numRowsPerPartition': '50000'}, 'role': 'source', 'type': 'jdbc'}]","[{'filename': 'survey_monkey.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/db/bluebird/snapshot/latest/survey_monkey_responses'}, 'role': 'source', 'type': 'file'}, {'filename': 'dump_db_bluebird.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/db/bluebird/snapshot/date_id=2021-01-29/survey_monkey_responses'}, 'role': 'sink', 'type': 'file'}]"
1370,process:::valid_custom_set:::cashnote_custom_set,process:::custom_set_values:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""SELECT    *\nFROM      custom_set\nWHERE     enabled = true\nAND       user_type = 'cashnote'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'class': 'com.kcd.thrush.message.spark.CustomSetReadProcess'}, 'role': 'process', 'type': 'custom'}]"
1371,process:::custom_set_values:::cashnote_custom_set,process:::dim_user_id:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'class': 'com.kcd.thrush.message.spark.CustomSetReadProcess'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT      custom_set_id, status,\n              memberships.business_id,\n              memberships.user_id\n  FROM (\n    SELECT    custom_set_id, custom_set_value, status\n    FROM      custom_set_values\n    WHERE     dimension = 'user_id'\n    AND       status in ('RUNNING', 'COMPLETE')\n  ) AS custom_set\n  JOIN memberships\n  ON custom_set.custom_set_value = memberships.user_id""}, 'role': 'process', 'type': 'sql'}]"
1372,process:::custom_set_values:::cashnote_custom_set,process:::dim_business_id:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'class': 'com.kcd.thrush.message.spark.CustomSetReadProcess'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT      custom_set_id, status,\n              memberships.business_id,\n              memberships.user_id\n  FROM (\n    SELECT    custom_set_id, custom_set_value, status\n    FROM      custom_set_values\n    WHERE     dimension = 'business_id'\n    AND       status in ('RUNNING', 'COMPLETE')\n  ) AS custom_set\n  JOIN memberships\n  ON custom_set.custom_set_value = memberships.business_id""}, 'role': 'process', 'type': 'sql'}]"
1373,process:::custom_set_values:::cashnote_custom_set,process:::dim_public_id:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'class': 'com.kcd.thrush.message.spark.CustomSetReadProcess'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT\n          c.custom_set_id, c.status,\n          c.business_id,\n          memberships.user_id\n  FROM (\n          SELECT      custom_set_id, status,\n                      businesses.id AS business_id\n          FROM (\n            SELECT    custom_set_id, custom_set_value, status\n            FROM      custom_set_values\n            WHERE     dimension = 'public_id'\n            AND       status in ('RUNNING', 'COMPLETE')\n          ) AS custom_set\n          JOIN businesses\n          ON custom_set.custom_set_value = businesses.public_id\n  ) c\n  JOIN    memberships\n  ON      c.business_id = memberships.business_id""}, 'role': 'process', 'type': 'sql'}]"
1374,process:::dim_user_id:::cashnote_custom_set,process:::grouped:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT      custom_set_id, status,\n              memberships.business_id,\n              memberships.user_id\n  FROM (\n    SELECT    custom_set_id, custom_set_value, status\n    FROM      custom_set_values\n    WHERE     dimension = 'user_id'\n    AND       status in ('RUNNING', 'COMPLETE')\n  ) AS custom_set\n  JOIN memberships\n  ON custom_set.custom_set_value = memberships.user_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT\n          status, business_id, user_id,\n          CONCAT(user_id, '_', business_id) AS target_id,\n          collect_set(custom_set_id) AS custom_set_ids\n  FROM (\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_user_id\n\n          UNION ALL\n\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_business_id\n\n          UNION ALL\n\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_public_id\n\n  )\n  GROUP BY status, business_id, user_id""}, 'role': 'process', 'type': 'sql'}]"
1375,process:::dim_business_id:::cashnote_custom_set,process:::grouped:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT      custom_set_id, status,\n              memberships.business_id,\n              memberships.user_id\n  FROM (\n    SELECT    custom_set_id, custom_set_value, status\n    FROM      custom_set_values\n    WHERE     dimension = 'business_id'\n    AND       status in ('RUNNING', 'COMPLETE')\n  ) AS custom_set\n  JOIN memberships\n  ON custom_set.custom_set_value = memberships.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT\n          status, business_id, user_id,\n          CONCAT(user_id, '_', business_id) AS target_id,\n          collect_set(custom_set_id) AS custom_set_ids\n  FROM (\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_user_id\n\n          UNION ALL\n\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_business_id\n\n          UNION ALL\n\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_public_id\n\n  )\n  GROUP BY status, business_id, user_id""}, 'role': 'process', 'type': 'sql'}]"
1376,process:::dim_public_id:::cashnote_custom_set,process:::grouped:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT\n          c.custom_set_id, c.status,\n          c.business_id,\n          memberships.user_id\n  FROM (\n          SELECT      custom_set_id, status,\n                      businesses.id AS business_id\n          FROM (\n            SELECT    custom_set_id, custom_set_value, status\n            FROM      custom_set_values\n            WHERE     dimension = 'public_id'\n            AND       status in ('RUNNING', 'COMPLETE')\n          ) AS custom_set\n          JOIN businesses\n          ON custom_set.custom_set_value = businesses.public_id\n  ) c\n  JOIN    memberships\n  ON      c.business_id = memberships.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT\n          status, business_id, user_id,\n          CONCAT(user_id, '_', business_id) AS target_id,\n          collect_set(custom_set_id) AS custom_set_ids\n  FROM (\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_user_id\n\n          UNION ALL\n\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_business_id\n\n          UNION ALL\n\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_public_id\n\n  )\n  GROUP BY status, business_id, user_id""}, 'role': 'process', 'type': 'sql'}]"
1377,process:::grouped:::cashnote_custom_set,process:::custom_set_all:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT\n          status, business_id, user_id,\n          CONCAT(user_id, '_', business_id) AS target_id,\n          collect_set(custom_set_id) AS custom_set_ids\n  FROM (\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_user_id\n\n          UNION ALL\n\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_business_id\n\n          UNION ALL\n\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_public_id\n\n  )\n  GROUP BY status, business_id, user_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': '  SELECT\n          target_id,\n          flatten(collect_list(custom_set_ids)) AS custom_set_ids\n  FROM    grouped\n  GROUP BY target_id'}, 'role': 'process', 'type': 'sql'}]"
1378,process:::grouped:::cashnote_custom_set,process:::custom_set_new:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""  SELECT\n          status, business_id, user_id,\n          CONCAT(user_id, '_', business_id) AS target_id,\n          collect_set(custom_set_id) AS custom_set_ids\n  FROM (\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_user_id\n\n          UNION ALL\n\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_business_id\n\n          UNION ALL\n\n          SELECT  custom_set_id, status, business_id, user_id\n          FROM    dim_public_id\n\n  )\n  GROUP BY status, business_id, user_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""SELECT\n      set_new.target_id,\n      array_except(\n          array_union(\n              set_new.custom_set_ids,\n              nvl(set_old.custom_set_ids, array(null))\n          ),\n          array(null)\n       ) AS custom_set_ids\nFROM (\n        SELECT    *\n        FROM      grouped\n        WHERE     status = 'RUNNING'\n) AS set_new\nLEFT OUTER JOIN (\n        SELECT    *\n        FROM      grouped\n        WHERE     status = 'COMPLETE'\n) AS set_old\nON    set_new.target_id = set_old.target_id""}, 'role': 'process', 'type': 'sql'}]"
1379,process:::custom_set_all:::cashnote_custom_set,s3://kcd-de-production/service/message/custom_set/user_type=cashnote/ts=07_18,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'sql': '  SELECT\n          target_id,\n          flatten(collect_list(custom_set_ids)) AS custom_set_ids\n  FROM    grouped\n  GROUP BY target_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/message/custom_set/user_type=cashnote/date_id=2021-01-29/ts=07_18'}, 'role': 'sink', 'type': 'file'}]"
1380,process:::custom_set_new:::cashnote_custom_set,process:::add_join_field:::cashnote_custom_set,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""SELECT\n      set_new.target_id,\n      array_except(\n          array_union(\n              set_new.custom_set_ids,\n              nvl(set_old.custom_set_ids, array(null))\n          ),\n          array(null)\n       ) AS custom_set_ids\nFROM (\n        SELECT    *\n        FROM      grouped\n        WHERE     status = 'RUNNING'\n) AS set_new\nLEFT OUTER JOIN (\n        SELECT    *\n        FROM      grouped\n        WHERE     status = 'COMPLETE'\n) AS set_old\nON    set_new.target_id = set_old.target_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""SELECT\n          to_timestamp('2021-01-29 07_18', 'yyyy-MM-dd HH_mm') AS timestamp,\n          named_struct(\n            'name', 'meta'\n          ) AS join_field,\n          *\nFROM      custom_set_new\nWHERE     target_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
1381,process:::add_join_field:::cashnote_custom_set,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_custom_set.json', 'options': {'sql': ""SELECT\n          to_timestamp('2021-01-29 07_18', 'yyyy-MM-dd HH_mm') AS timestamp,\n          named_struct(\n            'name', 'meta'\n          ) AS join_field,\n          *\nFROM      custom_set_new\nWHERE     target_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
1382,process:::filtered_target_users:::target_rest_sink,rest_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'prod_message_rest_sink.json', 'options': {'sql': ""SELECT    *\nFROM      ad_group\nWHERE     enabled = true\nAND       status = 'SENDING'""}, 'role': 'process', 'type': 'sql'}, {'filename': 'prod_target_rest_sink.json', 'options': {'sql': ""SELECT    *\nFROM      ad_group\nWHERE     enabled = true\nAND       status = 'SENDING'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'transform_and_rest_sink.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetMessageDirectRestSink', 'url': 'https://event.kcd.partners/api/publish/dmp_message', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTQyNjM4NTMsImV4cCI6MzY4NTI3MDAwMDAwMCwic2VydmljZV9uYW1lIjoiZG1wX21lc3NhZ2UifQ.tQ_j30oLXpykDiieEGAuVQZoBObgj7g3LAAzP_23wm8', 'proxyApi': 'https://event.kcd.partners/rdt/clk', 'changeUrl': 'true', 'batchSize': '15', 'delayTimeMillis': '1', 'outputPath': 's3://kcd-de-production/service/message/rest_sink/date_id=2021-01-29/ts=01_54', 'connectTimeout': '1000', 'readTimeout': '5000', 'partitionKey': 'meta.user_id', 'numPartitions': '2'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'prod_message_rest_sink.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetMessageRestSink', 'url': 'https://event.kcd.partners/api/publish/dmp_message', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTQyNjM4NTMsImV4cCI6MzY4NTI3MDAwMDAwMCwic2VydmljZV9uYW1lIjoiZG1wX21lc3NhZ2UifQ.tQ_j30oLXpykDiieEGAuVQZoBObgj7g3LAAzP_23wm8', 'proxyApi': 'https://event.kcd.partners/rdt/clk', 'changeUrl': 'true', 'batchSize': '1', 'delayTimeMillis': '18', 'outputPath': 's3://kcd-de-production/service/message/rest_sink/date_id=2021-01-11/ts=09_56', 'connectTimeout': '1000', 'readTimeout': '5000', 'partitionKey': 'meta.user_id'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'prod_target_rest_sink.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.TargetMessageRestSink', 'url': 'https://event.kcd.partners/api/publish/dmp_message', 'token': 'eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTQyNjM4NTMsImV4cCI6MzY4NTI3MDAwMDAwMCwic2VydmljZV9uYW1lIjoiZG1wX21lc3NhZ2UifQ.tQ_j30oLXpykDiieEGAuVQZoBObgj7g3LAAzP_23wm8', 'proxyApi': 'https://event.kcd.partners/rdt/clk', 'changeUrl': 'true', 'batchSize': '1', 'delayTimeMillis': '18', 'outputPath': 's3://kcd-de-production/service/message/rest_sink/date_id=2021-01-11/ts=06_48', 'connectTimeout': '1000', 'readTimeout': '5000', 'partitionKey': 'meta.user_id'}, 'role': 'sink', 'type': 'custom'}]"
1383,s3://kcd-de-production/service/market_area/analysis/user_tags,process:::aggr_user_tags:::aggregate_user_tags,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'aggregate_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/user_tags'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/user_tags', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'address_classification_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/user_tags'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'aggregate_user_tags.json', 'options': {'sql': ""SELECT\n   business_id, month, type, address, classification,\n   SUM(a_visitors_count) AS a_visitors_count,\n   SUM(b_visitors_count) AS b_visitors_count\nFROM (\n   SELECT\n           business_id, month, type, address, classification,\n           IF (tag = 'A', visitors_count, 0) AS a_visitors_count,\n           IF (tag = 'B', visitors_count, 0) AS b_visitors_count\n   FROM (\n           SELECT  business_id, min(month) AS month, type, tag, address, classification,\n                   approx_count_distinct(encrypted_card_number) AS visitors_count\n           FROM    user_tags\n           WHERE   type != 'month'\n           GROUP BY business_id, type, tag, address, classification\n\n           UNION ALL\n\n           SELECT  business_id, month, type, tag, address, classification,\n                   approx_count_distinct(encrypted_card_number) AS visitors_count\n           FROM    user_tags\n           WHERE   type = 'month'\n           GROUP BY business_id, month, type, tag, address, classification\n   )\n)\nGROUP BY business_id, month, type, address, classification""}, 'role': 'process', 'type': 'sql'}]"
1384,s3://kcd-de-production/service/market_area/analysis/user_tags,process:::aggr:::address_classification_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'aggregate_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/user_tags'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/user_tags', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'address_classification_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/user_tags'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'address_classification_stat.json', 'options': {'sql': ""SELECT\n   type,\n   min(month) AS month,\n   address,\n   classification,\n   approx_count_distinct(encrypted_card_number) AS user_cnt,\n   approx_count_distinct(business_id) AS business_cnt\nFROM user_tags\nWHERE type != 'month'\nGROUP BY type, address, classification\n\nUNION ALL\n\nSELECT\n   type,\n   month,\n   address,\n   classification,\n   approx_count_distinct(encrypted_card_number) AS user_cnt,\n   approx_count_distinct(business_id) AS business_cnt\nFROM user_tags\nWHERE type = 'month'\nGROUP BY type, month, address, classification""}, 'role': 'process', 'type': 'sql'}]"
1385,s3://kcd-de-production/service/market_area/analysis/address_classification_stat,process:::pivot:::aggregate_user_tags,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'aggregate_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/address_classification_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'address_classification_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/address_classification_stat', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'aggregate_user_tags.json', 'options': {'sql': ""SELECT\n   business_id, month, type, address, classification,\n   stack(4,\n       'A', a_visitors_count,\n       'B', b_visitors_count,\n       'C', c_visitors_count,\n       'C_AVG', CAST(c_visitors_avg AS LONG)\n   ) AS (tag, visitors_count)\nFROM (\n   SELECT\n           aggr_user_tags.*,\n           (stat.user_cnt - (a_visitors_count + b_visitors_count)) AS c_visitors_count,\n           (\n               (stat.user_cnt - (a_visitors_count + b_visitors_count)) / (stat.business_cnt - 1)\n           ) AS c_visitors_avg\n   FROM    aggr_user_tags\n   JOIN    stat\n   ON      aggr_user_tags.type = stat.type\n   AND     aggr_user_tags.month = stat.month\n   AND     aggr_user_tags.address = stat.address\n   AND     aggr_user_tags.classification = stat.classification\n)""}, 'role': 'process', 'type': 'sql'}]"
1386,process:::aggr_user_tags:::aggregate_user_tags,process:::pivot:::aggregate_user_tags,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'aggregate_user_tags.json', 'options': {'sql': ""SELECT\n   business_id, month, type, address, classification,\n   SUM(a_visitors_count) AS a_visitors_count,\n   SUM(b_visitors_count) AS b_visitors_count\nFROM (\n   SELECT\n           business_id, month, type, address, classification,\n           IF (tag = 'A', visitors_count, 0) AS a_visitors_count,\n           IF (tag = 'B', visitors_count, 0) AS b_visitors_count\n   FROM (\n           SELECT  business_id, min(month) AS month, type, tag, address, classification,\n                   approx_count_distinct(encrypted_card_number) AS visitors_count\n           FROM    user_tags\n           WHERE   type != 'month'\n           GROUP BY business_id, type, tag, address, classification\n\n           UNION ALL\n\n           SELECT  business_id, month, type, tag, address, classification,\n                   approx_count_distinct(encrypted_card_number) AS visitors_count\n           FROM    user_tags\n           WHERE   type = 'month'\n           GROUP BY business_id, month, type, tag, address, classification\n   )\n)\nGROUP BY business_id, month, type, address, classification""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'aggregate_user_tags.json', 'options': {'sql': ""SELECT\n   business_id, month, type, address, classification,\n   stack(4,\n       'A', a_visitors_count,\n       'B', b_visitors_count,\n       'C', c_visitors_count,\n       'C_AVG', CAST(c_visitors_avg AS LONG)\n   ) AS (tag, visitors_count)\nFROM (\n   SELECT\n           aggr_user_tags.*,\n           (stat.user_cnt - (a_visitors_count + b_visitors_count)) AS c_visitors_count,\n           (\n               (stat.user_cnt - (a_visitors_count + b_visitors_count)) / (stat.business_cnt - 1)\n           ) AS c_visitors_avg\n   FROM    aggr_user_tags\n   JOIN    stat\n   ON      aggr_user_tags.type = stat.type\n   AND     aggr_user_tags.month = stat.month\n   AND     aggr_user_tags.address = stat.address\n   AND     aggr_user_tags.classification = stat.classification\n)""}, 'role': 'process', 'type': 'sql'}]"
1387,process:::pivot:::aggregate_user_tags,s3://kcd-de-production/service/market_area/analysis/user_tags_aggr,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'aggregate_user_tags.json', 'options': {'sql': ""SELECT\n   business_id, month, type, address, classification,\n   stack(4,\n       'A', a_visitors_count,\n       'B', b_visitors_count,\n       'C', c_visitors_count,\n       'C_AVG', CAST(c_visitors_avg AS LONG)\n   ) AS (tag, visitors_count)\nFROM (\n   SELECT\n           aggr_user_tags.*,\n           (stat.user_cnt - (a_visitors_count + b_visitors_count)) AS c_visitors_count,\n           (\n               (stat.user_cnt - (a_visitors_count + b_visitors_count)) / (stat.business_cnt - 1)\n           ) AS c_visitors_avg\n   FROM    aggr_user_tags\n   JOIN    stat\n   ON      aggr_user_tags.type = stat.type\n   AND     aggr_user_tags.month = stat.month\n   AND     aggr_user_tags.address = stat.address\n   AND     aggr_user_tags.classification = stat.classification\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/user_tags_aggr'}, 'role': 'source', 'type': 'file'}, {'filename': 'aggregate_user_tags.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/user_tags_aggr', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}]"
1388,process:::current_txs_approved:::add_visit_orders,process:::visits_approved:::add_visit_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'add_visit_orders.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '2020-12-29'\nAND     (\n          (purchased_at is not null AND purchase_canceled_at is null) OR\n          (purchased_at is null AND approval_canceled_at is null)\n        )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'add_visit_orders.json', 'options': {'sql': ""SELECT  tx.acquirer_name,\n        tx.amount,\n        tx.approval_canceled_at,\n        tx.approval_seq,\n        tx.authorization_number,\n        tx.base_fee,\n        tx.business_id,\n        tx.card_number,\n        tx.card_type,\n        tx.credential_key,\n        tx.encrypted_card_number,\n        tx.estimated_paid_at,\n        tx.etc_fee,\n        tx.fee,\n        tx.installment,\n        tx.issuer_name,\n        tx.masked_card_number,\n        tx.merchant_number,\n        tx.paid_at,\n        tx.payment,\n        tx.point_fee,\n        tx.purchase_cancel_seq,\n        tx.purchase_canceled_at,\n        tx.purchase_delayed,\n        tx.purchase_seq,\n        tx.purchased_at,\n        tx.scraping_type,\n        tx.status,\n        tx.transacted_at,\n        tx.vat_fee,\n        tx.visit_order,\n        tx.created_at,\n        tx.updated_at,\n        tx.created_at_date\nFROM    (\n  SELECT  explode(append_visit_count(histories)) AS tx\n  FROM    (\n    SELECT  key,\n            business_id,\n            credential_key,\n            collect_list(struct(*)) AS histories\n    FROM    (\n       SELECT acquirer_name,\n              amount,\n              approval_canceled_at,\n              approval_seq,\n              authorization_number,\n              base_fee,\n              business_id,\n              card_number,\n              card_type,\n              credential_key,\n              encrypted_card_number,\n              estimated_paid_at,\n              etc_fee,\n              fee,\n              installment,\n              issuer_name,\n              masked_card_number,\n              merchant_number,\n              paid_at,\n              payment,\n              point_fee,\n              purchase_cancel_seq,\n              purchase_canceled_at,\n              purchase_delayed,\n              purchase_seq,\n              purchased_at,\n              scraping_type,\n              status,\n              transacted_at,\n              vat_fee,\n              created_at,\n              updated_at,\n              date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n              COALESCE(encrypted_card_number, CONCAT_WS('_', issuer_name, card_number)) AS key\n       FROM   prev_approved_txs\n\n       UNION ALL\n\n       SELECT acquirer_name,\n              amount,\n              approval_canceled_at,\n              approval_seq,\n              authorization_number,\n              base_fee,\n              business_id,\n              card_number,\n              card_type,\n              credential_key,\n              encrypted_card_number,\n              estimated_paid_at,\n              etc_fee,\n              fee,\n              installment,\n              issuer_name,\n              masked_card_number,\n              merchant_number,\n              paid_at,\n              payment,\n              point_fee,\n              purchase_cancel_seq,\n              purchase_canceled_at,\n              purchase_delayed,\n              purchase_seq,\n              purchased_at,\n              scraping_type,\n              status,\n              transacted_at,\n              vat_fee,\n              created_at,\n              updated_at,\n              date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n              COALESCE(encrypted_card_number, CONCAT_WS('_', issuer_name, card_number)) AS key\n       FROM   current_txs_approved\n    )\n    GROUP BY key, business_id, credential_key\n  )\n)\nWHERE   tx.created_at_date >= '2020-12-29'""}, 'role': 'process', 'type': 'sql'}]"
1389,process:::current_txs_cancelled:::add_visit_orders,process:::visits_cancelled:::add_visit_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'add_visit_orders.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '2020-12-29'\nAND     NOT (\n          (purchased_at is not null AND purchase_canceled_at is null) OR\n          (purchased_at is null AND approval_canceled_at is null)\n        )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'add_visit_orders.json', 'options': {'sql': ""SELECT  acquirer_name,\n        amount,\n        approval_canceled_at,\n        approval_seq,\n        authorization_number,\n        base_fee,\n        business_id,\n        card_number,\n        card_type,\n        credential_key,\n        encrypted_card_number,\n        estimated_paid_at,\n        etc_fee,\n        fee,\n        installment,\n        issuer_name,\n        masked_card_number,\n        merchant_number,\n        paid_at,\n        payment,\n        point_fee,\n        purchase_cancel_seq,\n        purchase_canceled_at,\n        purchase_delayed,\n        purchase_seq,\n        purchased_at,\n        scraping_type,\n        status,\n        transacted_at,\n        vat_fee,\n        CAST(null AS integer) AS visit_order,\n        created_at,\n        updated_at,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    current_txs_cancelled""}, 'role': 'process', 'type': 'sql'}]"
1390,process:::prev_approved_txs:::add_visit_orders,process:::visits_approved:::add_visit_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'add_visit_orders.json', 'options': {'sql': ""SELECT  *\nFROM    transactions_raw\nWHERE   created_at_date >= '2019-12-30'\nAND     created_at_date < '2020-12-29'\nAND     transacted_at >= '2019-12-30'\nAND     transacted_at < '2020-12-29'\nAND     (\n          (purchased_at is not null AND purchase_canceled_at is null) OR\n          (purchased_at is null AND approval_canceled_at is null)\n        )""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'add_visit_orders.json', 'options': {'sql': ""SELECT  tx.acquirer_name,\n        tx.amount,\n        tx.approval_canceled_at,\n        tx.approval_seq,\n        tx.authorization_number,\n        tx.base_fee,\n        tx.business_id,\n        tx.card_number,\n        tx.card_type,\n        tx.credential_key,\n        tx.encrypted_card_number,\n        tx.estimated_paid_at,\n        tx.etc_fee,\n        tx.fee,\n        tx.installment,\n        tx.issuer_name,\n        tx.masked_card_number,\n        tx.merchant_number,\n        tx.paid_at,\n        tx.payment,\n        tx.point_fee,\n        tx.purchase_cancel_seq,\n        tx.purchase_canceled_at,\n        tx.purchase_delayed,\n        tx.purchase_seq,\n        tx.purchased_at,\n        tx.scraping_type,\n        tx.status,\n        tx.transacted_at,\n        tx.vat_fee,\n        tx.visit_order,\n        tx.created_at,\n        tx.updated_at,\n        tx.created_at_date\nFROM    (\n  SELECT  explode(append_visit_count(histories)) AS tx\n  FROM    (\n    SELECT  key,\n            business_id,\n            credential_key,\n            collect_list(struct(*)) AS histories\n    FROM    (\n       SELECT acquirer_name,\n              amount,\n              approval_canceled_at,\n              approval_seq,\n              authorization_number,\n              base_fee,\n              business_id,\n              card_number,\n              card_type,\n              credential_key,\n              encrypted_card_number,\n              estimated_paid_at,\n              etc_fee,\n              fee,\n              installment,\n              issuer_name,\n              masked_card_number,\n              merchant_number,\n              paid_at,\n              payment,\n              point_fee,\n              purchase_cancel_seq,\n              purchase_canceled_at,\n              purchase_delayed,\n              purchase_seq,\n              purchased_at,\n              scraping_type,\n              status,\n              transacted_at,\n              vat_fee,\n              created_at,\n              updated_at,\n              date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n              COALESCE(encrypted_card_number, CONCAT_WS('_', issuer_name, card_number)) AS key\n       FROM   prev_approved_txs\n\n       UNION ALL\n\n       SELECT acquirer_name,\n              amount,\n              approval_canceled_at,\n              approval_seq,\n              authorization_number,\n              base_fee,\n              business_id,\n              card_number,\n              card_type,\n              credential_key,\n              encrypted_card_number,\n              estimated_paid_at,\n              etc_fee,\n              fee,\n              installment,\n              issuer_name,\n              masked_card_number,\n              merchant_number,\n              paid_at,\n              payment,\n              point_fee,\n              purchase_cancel_seq,\n              purchase_canceled_at,\n              purchase_delayed,\n              purchase_seq,\n              purchased_at,\n              scraping_type,\n              status,\n              transacted_at,\n              vat_fee,\n              created_at,\n              updated_at,\n              date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n              COALESCE(encrypted_card_number, CONCAT_WS('_', issuer_name, card_number)) AS key\n       FROM   current_txs_approved\n    )\n    GROUP BY key, business_id, credential_key\n  )\n)\nWHERE   tx.created_at_date >= '2020-12-29'""}, 'role': 'process', 'type': 'sql'}]"
1391,process:::visits_approved:::add_visit_orders,process:::visits:::add_visit_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'add_visit_orders.json', 'options': {'sql': ""SELECT  tx.acquirer_name,\n        tx.amount,\n        tx.approval_canceled_at,\n        tx.approval_seq,\n        tx.authorization_number,\n        tx.base_fee,\n        tx.business_id,\n        tx.card_number,\n        tx.card_type,\n        tx.credential_key,\n        tx.encrypted_card_number,\n        tx.estimated_paid_at,\n        tx.etc_fee,\n        tx.fee,\n        tx.installment,\n        tx.issuer_name,\n        tx.masked_card_number,\n        tx.merchant_number,\n        tx.paid_at,\n        tx.payment,\n        tx.point_fee,\n        tx.purchase_cancel_seq,\n        tx.purchase_canceled_at,\n        tx.purchase_delayed,\n        tx.purchase_seq,\n        tx.purchased_at,\n        tx.scraping_type,\n        tx.status,\n        tx.transacted_at,\n        tx.vat_fee,\n        tx.visit_order,\n        tx.created_at,\n        tx.updated_at,\n        tx.created_at_date\nFROM    (\n  SELECT  explode(append_visit_count(histories)) AS tx\n  FROM    (\n    SELECT  key,\n            business_id,\n            credential_key,\n            collect_list(struct(*)) AS histories\n    FROM    (\n       SELECT acquirer_name,\n              amount,\n              approval_canceled_at,\n              approval_seq,\n              authorization_number,\n              base_fee,\n              business_id,\n              card_number,\n              card_type,\n              credential_key,\n              encrypted_card_number,\n              estimated_paid_at,\n              etc_fee,\n              fee,\n              installment,\n              issuer_name,\n              masked_card_number,\n              merchant_number,\n              paid_at,\n              payment,\n              point_fee,\n              purchase_cancel_seq,\n              purchase_canceled_at,\n              purchase_delayed,\n              purchase_seq,\n              purchased_at,\n              scraping_type,\n              status,\n              transacted_at,\n              vat_fee,\n              created_at,\n              updated_at,\n              date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n              COALESCE(encrypted_card_number, CONCAT_WS('_', issuer_name, card_number)) AS key\n       FROM   prev_approved_txs\n\n       UNION ALL\n\n       SELECT acquirer_name,\n              amount,\n              approval_canceled_at,\n              approval_seq,\n              authorization_number,\n              base_fee,\n              business_id,\n              card_number,\n              card_type,\n              credential_key,\n              encrypted_card_number,\n              estimated_paid_at,\n              etc_fee,\n              fee,\n              installment,\n              issuer_name,\n              masked_card_number,\n              merchant_number,\n              paid_at,\n              payment,\n              point_fee,\n              purchase_cancel_seq,\n              purchase_canceled_at,\n              purchase_delayed,\n              purchase_seq,\n              purchased_at,\n              scraping_type,\n              status,\n              transacted_at,\n              vat_fee,\n              created_at,\n              updated_at,\n              date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n              COALESCE(encrypted_card_number, CONCAT_WS('_', issuer_name, card_number)) AS key\n       FROM   current_txs_approved\n    )\n    GROUP BY key, business_id, credential_key\n  )\n)\nWHERE   tx.created_at_date >= '2020-12-29'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'add_visit_orders.json', 'options': {'sql': 'SELECT  *\nFROM    visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    visits_cancelled'}, 'role': 'process', 'type': 'sql'}]"
1392,process:::visits_cancelled:::add_visit_orders,process:::visits:::add_visit_orders,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'add_visit_orders.json', 'options': {'sql': ""SELECT  acquirer_name,\n        amount,\n        approval_canceled_at,\n        approval_seq,\n        authorization_number,\n        base_fee,\n        business_id,\n        card_number,\n        card_type,\n        credential_key,\n        encrypted_card_number,\n        estimated_paid_at,\n        etc_fee,\n        fee,\n        installment,\n        issuer_name,\n        masked_card_number,\n        merchant_number,\n        paid_at,\n        payment,\n        point_fee,\n        purchase_cancel_seq,\n        purchase_canceled_at,\n        purchase_delayed,\n        purchase_seq,\n        purchased_at,\n        scraping_type,\n        status,\n        transacted_at,\n        vat_fee,\n        CAST(null AS integer) AS visit_order,\n        created_at,\n        updated_at,\n        date_format(created_at, 'yyyy-MM-dd') AS created_at_date\nFROM    current_txs_cancelled""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'add_visit_orders.json', 'options': {'sql': 'SELECT  *\nFROM    visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    visits_cancelled'}, 'role': 'process', 'type': 'sql'}]"
1393,process:::visits:::add_visit_orders,s3://kcd-de-production/raw/etl/snowdon/card_sales/visits,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'add_visit_orders.json', 'options': {'sql': 'SELECT  *\nFROM    visits_approved\n\nUNION ALL\n\nSELECT  *\nFROM    visits_cancelled'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'visit_with_duration.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_stats.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_visit_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits'}, 'role': 'source', 'type': 'file'}, {'filename': 'add_visit_orders.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/visits', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
1394,process:::transactions:::daily_transaction_type_stats,process:::transactions_without_canceled:::daily_transaction_type_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_transaction_type_stats.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n          t.transacted_at >= '2020-01-01' OR\n          t.purchased_at >= '2020-01-01' OR\n          t.paid_at >= '2020-01-01'\n)\nAND      (\n          t.transacted_at < '2021-12-01' OR\n          t.purchased_at < '2021-12-01' OR\n          t.paid_at < '2021-12-01'\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_transaction_type_stats.json', 'options': {'sql': 'SELECT    *\nFROM      transactions\nWHERE     (purchased_at is not null AND purchase_canceled_at is null)\nOR        (purchased_at is null AND approval_canceled_at is null)'}, 'role': 'process', 'type': 'sql'}]"
1395,process:::transactions:::daily_transaction_type_stats,s3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/daily_transaction,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_transaction_type_stats.json', 'options': {'sql': ""SELECT    t.*\nFROM      transactions_raw t, credential_keys k, credentials c\nWHERE     t.business_id = k.business_id\nAND       t.credential_key = k.uuid\nAND       k.credential_id = c.id\nAND       c.status = 1\nAND       (\n          t.transacted_at >= '2020-01-01' OR\n          t.purchased_at >= '2020-01-01' OR\n          t.paid_at >= '2020-01-01'\n)\nAND      (\n          t.transacted_at < '2021-12-01' OR\n          t.purchased_at < '2021-12-01' OR\n          t.paid_at < '2021-12-01'\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'purchases_canceled_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/daily_transaction'}, 'role': 'source', 'type': 'file'}, {'filename': 'daily_transaction_type_stats.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/daily_transaction', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
1396,process:::transactions_without_canceled:::daily_transaction_type_stats,process:::daily_transaction_type_stats:::daily_transaction_type_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_transaction_type_stats.json', 'options': {'sql': 'SELECT    *\nFROM      transactions\nWHERE     (purchased_at is not null AND purchase_canceled_at is null)\nOR        (purchased_at is null AND approval_canceled_at is null)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_transaction_type_stats.json', 'options': {'sql': ""SELECT  business_id,\n        date,\n        sum(IF (type = 'approvals', amount, 0)) as approvals_amount,\n        sum(IF (type = 'approvals', payment, 0)) as approvals_payment,\n        sum(IF (type = 'approvals', count, 0)) as approvals_count,\n        sum(IF (type = 'purchases', payment, 0)) as purchases_payment,\n        sum(IF (type = 'purchases', count, 0)) as purchases_count,\n        sum(IF (type = 'payments', payment, 0)) as payments_payment,\n        sum(IF (type = 'payments', count, 0)) as payments_count\nFROM (\n      SELECT  business_id,\n              'approvals' as type,\n              date_trunc('day', transacted_at) as date,\n              sum(amount) as amount,\n              sum(payment) as payment,\n              count(1) as count\n      FROM    transactions_without_canceled\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  business_id,\n              'purchases' as type,\n              date_trunc('day', purchased_at) as date,\n              sum(amount) as amount,\n              sum(payment) as payment,\n              count(1) as count\n      FROM    transactions_without_canceled\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  business_id,\n              'payments' as type,\n              date_trunc('day', paid_at) as date,\n              sum(amount) as amount,\n              sum(payment) as payment,\n              count(1) as count\n      FROM    transactions_without_canceled\n      GROUP BY 1, 2, 3\n)\nWHERE date is not null\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]"
1397,process:::daily_transaction_type_stats:::daily_transaction_type_stats,s3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/results/daily_transaction_type_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'daily_transaction_type_stats.json', 'options': {'sql': ""SELECT  business_id,\n        date,\n        sum(IF (type = 'approvals', amount, 0)) as approvals_amount,\n        sum(IF (type = 'approvals', payment, 0)) as approvals_payment,\n        sum(IF (type = 'approvals', count, 0)) as approvals_count,\n        sum(IF (type = 'purchases', payment, 0)) as purchases_payment,\n        sum(IF (type = 'purchases', count, 0)) as purchases_count,\n        sum(IF (type = 'payments', payment, 0)) as payments_payment,\n        sum(IF (type = 'payments', count, 0)) as payments_count\nFROM (\n      SELECT  business_id,\n              'approvals' as type,\n              date_trunc('day', transacted_at) as date,\n              sum(amount) as amount,\n              sum(payment) as payment,\n              count(1) as count\n      FROM    transactions_without_canceled\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  business_id,\n              'purchases' as type,\n              date_trunc('day', purchased_at) as date,\n              sum(amount) as amount,\n              sum(payment) as payment,\n              count(1) as count\n      FROM    transactions_without_canceled\n      GROUP BY 1, 2, 3\n\n      UNION ALL\n\n      SELECT  business_id,\n              'payments' as type,\n              date_trunc('day', paid_at) as date,\n              sum(amount) as amount,\n              sum(payment) as payment,\n              count(1) as count\n      FROM    transactions_without_canceled\n      GROUP BY 1, 2, 3\n)\nWHERE date is not null\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'daily_transaction_type_stats.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.sinks.CSVSink', 'format': 'csv', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/DR/DR-71/210115/2020/results/daily_transaction_type_stats', 'header': 'true', 'numPartitions': '1', 'sep': '|'}, 'role': 'sink', 'type': 'custom'}]"
1398,process:::select_columns:::message_send,s3://kcd-de-staging/raw/catalog_v2/raw/tb=dmp_message_result_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'copy_message_send.json', 'options': {'sql': 'SELECT\n        created_at_date,\n        timestamp,\n        meta_campaign_id,\n        meta_ad_group_id,\n        meta_creative_id,\n        meta_user_id,\n        meta_business_id,\n        meta_user_type,\n        meta_type,\n        message_message_type,\n        message_ad_flag,\n        message_template_code,\n        status,\n        error_code\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n        FROM    send_log\n        WHERE   nvl(meta_test_mode, false) = false\n        AND     nvl(meta_test_mode_skip_user, false) = false\n        AND     nvl(meta_test_mode_skip_frequency_cap, false) = false\n        AND     nvl(meta_test_mode_skip_ad_group, false) = false\n        AND     nvl(meta_test_mode_skip_send, false) = false\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'copy_message_send.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/catalog_v2/raw/tb=dmp_message_result_stat', 'evenPartitions': 'true', 'partitions': 'created_at_date'}, 'role': 'sink', 'type': 'file'}]"
1399,process:::mappings:::registration_number_card_sales,process:::cashnote:::registration_number_card_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_card_sales.json', 'options': {'sql': 'SELECT    registration_number, id AS business_id\nFROM      businesses'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""  SELECT  registration_number,\n          SUM(amount_sum) AS amount_sum,\n          SUM(tx_count) AS tx_count\n  FROM (\n          SELECT\n                  mappings.registration_number,\n                  c.*\n          FROM    (\n                      SELECT  *\n                      FROM    cashnote_cardsales\n                      WHERE   date_id between '2020-08-01' AND '2021-01-28'\n          ) c\n          JOIN    mappings\n          ON      c.business_id = mappings.business_id\n  )\n  GROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]"
1400,process:::cashnote:::registration_number_card_sales,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=cardsales/name=cashnote,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""  SELECT  registration_number,\n          SUM(amount_sum) AS amount_sum,\n          SUM(tx_count) AS tx_count\n  FROM (\n          SELECT\n                  mappings.registration_number,\n                  c.*\n          FROM    (\n                      SELECT  *\n                      FROM    cashnote_cardsales\n                      WHERE   date_id between '2020-08-01' AND '2021-01-28'\n          ) c\n          JOIN    mappings\n          ON      c.business_id = mappings.business_id\n  )\n  GROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=cardsales/name=cashnote'}, 'role': 'sink', 'type': 'file'}]"
1401,process:::payments_with_user_demo:::registration_number_card_sales,process:::paynote_stat:::registration_number_card_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_card_sales.json', 'options': {'sql': "" SELECT\n         payment.*,\n         paynote_users.gender,\n         paynote_users.age_band\n FROM (\n     SELECT\n             date_trunc('MONTH', approved_at) AS timestamp,\n             registration_number,\n             user_id,\n             amount\n     FROM    card_payments\n     WHERE   approved_at between '2020-08-01' AND '2021-01-28'\n     AND     card_issuer IS NOT NULL\n ) AS payment\n JOIN paynote_users\n ON payment.user_id = paynote_users.user_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""  SELECT\n          timestamp, registration_number, gender, age_band,\n          concat(age_band, '_', gender) AS age_band_gender,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count\n  FROM   payments_with_user_demo\n  GROUP BY timestamp, registration_number, gender, age_band""}, 'role': 'process', 'type': 'sql'}]"
1402,process:::paynote_stat:::registration_number_card_sales,process:::paynote_stat_gender:::registration_number_card_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""  SELECT\n          timestamp, registration_number, gender, age_band,\n          concat(age_band, '_', gender) AS age_band_gender,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count\n  FROM   payments_with_user_demo\n  GROUP BY timestamp, registration_number, gender, age_band""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""SELECT\n        registration_number,\n        collect_list(\n          named_struct('key', gender, 'values', struct(amount_sum, tx_count))\n        ) AS stats\nFROM (\n          SELECT\n                  registration_number,\n                  gender,\n                  SUM(amount_sum) AS amount_sum,\n                  SUM(tx_count) AS tx_count\n          FROM   paynote_stat\n          GROUP BY registration_number, gender\n)\nGROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]"
1403,process:::paynote_stat:::registration_number_card_sales,process:::paynote_stat_age_band:::registration_number_card_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""  SELECT\n          timestamp, registration_number, gender, age_band,\n          concat(age_band, '_', gender) AS age_band_gender,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count\n  FROM   payments_with_user_demo\n  GROUP BY timestamp, registration_number, gender, age_band""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""  SELECT\n          registration_number,\n          collect_list(\n            named_struct('key', age_band, 'values', struct(amount_sum, tx_count))\n          ) AS stats\n  FROM (\n          SELECT\n                  registration_number,\n                  age_band,\n                  SUM(amount_sum) AS amount_sum,\n                  SUM(tx_count) AS tx_count\n          FROM   paynote_stat\n          GROUP BY registration_number, age_band\n )\n GROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]"
1404,process:::paynote_stat:::registration_number_card_sales,process:::paynote_stat_age_band_gender:::registration_number_card_sales,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""  SELECT\n          timestamp, registration_number, gender, age_band,\n          concat(age_band, '_', gender) AS age_band_gender,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count\n  FROM   payments_with_user_demo\n  GROUP BY timestamp, registration_number, gender, age_band""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""  SELECT\n          registration_number,\n          SUM(amount_sum) AS total_amount_sum,\n          SUM(tx_count) AS total_tx_count,\n          collect_list(\n            named_struct('key', age_band_gender, 'values', struct(amount_sum, tx_count))\n          ) AS stats\n FROM     (\n             SELECT\n                     registration_number,\n                     age_band_gender,\n                     SUM(amount_sum) AS amount_sum,\n                     SUM(tx_count) AS tx_count\n             FROM   paynote_stat\n             GROUP BY registration_number, age_band_gender\n )\n GROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]"
1405,process:::paynote_stat_gender:::registration_number_card_sales,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=cardsales/name=paynote_gender,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""SELECT\n        registration_number,\n        collect_list(\n          named_struct('key', gender, 'values', struct(amount_sum, tx_count))\n        ) AS stats\nFROM (\n          SELECT\n                  registration_number,\n                  gender,\n                  SUM(amount_sum) AS amount_sum,\n                  SUM(tx_count) AS tx_count\n          FROM   paynote_stat\n          GROUP BY registration_number, gender\n)\nGROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=cardsales/name=paynote_gender'}, 'role': 'sink', 'type': 'file'}]"
1406,process:::paynote_stat_age_band:::registration_number_card_sales,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=cardsales/name=paynote_age_band,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""  SELECT\n          registration_number,\n          collect_list(\n            named_struct('key', age_band, 'values', struct(amount_sum, tx_count))\n          ) AS stats\n  FROM (\n          SELECT\n                  registration_number,\n                  age_band,\n                  SUM(amount_sum) AS amount_sum,\n                  SUM(tx_count) AS tx_count\n          FROM   paynote_stat\n          GROUP BY registration_number, age_band\n )\n GROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=cardsales/name=paynote_age_band'}, 'role': 'sink', 'type': 'file'}]"
1407,process:::paynote_stat_age_band_gender:::registration_number_card_sales,s3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=cardsales/name=paynote_age_band_gender,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'registration_number_card_sales.json', 'options': {'sql': ""  SELECT\n          registration_number,\n          SUM(amount_sum) AS total_amount_sum,\n          SUM(tx_count) AS total_tx_count,\n          collect_list(\n            named_struct('key', age_band_gender, 'values', struct(amount_sum, tx_count))\n          ) AS stats\n FROM     (\n             SELECT\n                     registration_number,\n                     age_band_gender,\n                     SUM(amount_sum) AS amount_sum,\n                     SUM(tx_count) AS tx_count\n             FROM   paynote_stat\n             GROUP BY registration_number, age_band_gender\n )\n GROUP BY registration_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'registration_number_card_sales.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=registration_number/subject=cardsales/name=paynote_age_band_gender'}, 'role': 'sink', 'type': 'file'}]"
1408,s3://kcd-de-production/service/message/reports/user_type=business_id/report_name=common,process:::formatted:::bulkload_with_formatting_cashnote_business_meta_common,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bulkload_cashnote_business_meta_common.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/service/message/reports/user_type=business_id/latest/report_name=common'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'bulkload_cashnote_business_meta_common.json', 'options': {'sql': ""  SELECT\n          unix_timestamp()* 1000 AS timestamp,\n          business_id AS `from`,\n          business_id AS to,\n          'cashnote_business_meta_common' AS label,\n          to_json(struct(*)) AS props\n  FROM    bulkload_file\n  WHERE   business_id IS NOT NULL\n  AND     business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]"
1409,process:::formatted:::bulkload_with_formatting_cashnote_business_meta_common,s2graph_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'bulkload_cashnote_business_meta_common.json', 'options': {'sql': ""  SELECT\n          unix_timestamp()* 1000 AS timestamp,\n          business_id AS `from`,\n          business_id AS to,\n          'cashnote_business_meta_common' AS label,\n          to_json(struct(*)) AS props\n  FROM    bulkload_file\n  WHERE   business_id IS NOT NULL\n  AND     business_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'bulkload_paynote_place_topk.json', 'options': {'s2.spark.sql.streaming.sink.writeMethod': 'bulk', 's2.spark.sql.bulkload.sink.label.mapping': 'paynote_place_topk:paynote_place_topk-2021-01-24_09-24-37', 's2.spark.sql.bulkload.sink.build.degree': 'false', 's2.spark.sql.bulkload.sink.auto.edge.create': 'false', 's2.spark.sql.streaming.sink.skip.error': 'true', 's2.spark.sql.bulkload.sink.hbase.table.name': 'paynote_place_topk-2021-01-24_09-24-37', 's2.spark.sql.bulkload.sink.hbase.table.num.regions': '10', 's2.spark.sql.bulkload.sink.hbase.temp.dir': '/tmp/bulkload/paynote_place_topk-2021-01-24_09-24-37', 's2.spark.sql.bulkload.sink.hbase.incrementalLoad': 'false', 's2.spark.sql.bulkload.sink.hbase.compression': 'LZ4', 'runLoadIncrementalHFiles': 'false', 'hbase.zookeeper.quorum': 'ec2-13-125-222-89.ap-northeast-2.compute.amazonaws.com:2181', 'cache.max.size': '10000', 'cache.ttl.seconds': '6000', 'db.default.driver': 'com.mysql.jdbc.Driver', 'db.default.url': 'jdbc:mysql://s2graph-meta-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com/graph_production', 'db.default.user': 'graph', 'db.default.password': '90f5b058-0151-4dcc-b0cb-c8346ebba924'}, 'role': 'sink', 'type': 's2graph'}, {'filename': 'bulkload_cashnote_user_meta_common.json', 'options': {'s2.spark.sql.streaming.sink.writeMethod': 'bulk', 's2.spark.sql.bulkload.sink.label.mapping': 'cashnote_user_meta_common:cashnote_user_meta_common-2020-08-27_10-03-58', 's2.spark.sql.bulkload.sink.build.degree': 'false', 's2.spark.sql.bulkload.sink.auto.edge.create': 'false', 's2.spark.sql.streaming.sink.skip.error': 'true', 's2.spark.sql.bulkload.sink.hbase.table.name': 'cashnote_user_meta_common-2020-08-27_10-03-58', 's2.spark.sql.bulkload.sink.hbase.table.num.regions': '5', 's2.spark.sql.bulkload.sink.hbase.temp.dir': '/tmp/bulkload/cashnote_user_meta_common-2020-08-27_10-03-58', 's2.spark.sql.bulkload.sink.hbase.incrementalLoad': 'false', 's2.spark.sql.bulkload.sink.hbase.compression': 'LZ4', 'runLoadIncrementalHFiles': 'false', 'hbase.zookeeper.quorum': 'ec2-13-125-222-89.ap-northeast-2.compute.amazonaws.com:2181', 'cache.max.size': '10000', 'cache.ttl.seconds': '6000', 'db.default.driver': 'com.mysql.jdbc.Driver', 'db.default.url': 'jdbc:mysql://s2graph-meta-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com/graph_production', 'db.default.user': 'graph', 'db.default.password': '90f5b058-0151-4dcc-b0cb-c8346ebba924'}, 'role': 'sink', 'type': 's2graph'}, {'filename': 'bulkload_cashnote_business_meta_common.json', 'options': {'s2.spark.sql.streaming.sink.writeMethod': 'bulk', 's2.spark.sql.bulkload.sink.label.mapping': 'cashnote_business_meta_common:cashnote_business_meta_common-2021-01-29_00-49-51', 's2.spark.sql.bulkload.sink.build.degree': 'false', 's2.spark.sql.bulkload.sink.auto.edge.create': 'false', 's2.spark.sql.streaming.sink.skip.error': 'true', 's2.spark.sql.bulkload.sink.hbase.table.name': 'cashnote_business_meta_common-2021-01-29_00-49-51', 's2.spark.sql.bulkload.sink.hbase.table.num.regions': '5', 's2.spark.sql.bulkload.sink.hbase.temp.dir': '/tmp/bulkload/cashnote_business_meta_common-2021-01-29_00-49-51', 's2.spark.sql.bulkload.sink.hbase.incrementalLoad': 'false', 's2.spark.sql.bulkload.sink.hbase.compression': 'LZ4', 'runLoadIncrementalHFiles': 'false', 'hbase.zookeeper.quorum': 'ec2-13-125-222-89.ap-northeast-2.compute.amazonaws.com:2181', 'cache.max.size': '10000', 'cache.ttl.seconds': '6000', 'db.default.driver': 'com.mysql.jdbc.Driver', 'db.default.url': 'jdbc:mysql://s2graph-meta-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com/graph_production', 'db.default.user': 'graph', 'db.default.password': '90f5b058-0151-4dcc-b0cb-c8346ebba924'}, 'role': 'sink', 'type': 's2graph'}]"
1410,process:::merchant_places:::merchant_places,process:::kakao_places:::merchant_places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_places.json', 'options': {'sql': 'SELECT    *\nFROM (\n          SELECT\n                  issuer AS card_issuer, merchant_number,\n                  places.*,\n                  row_number() OVER (PARTITION BY place_merchants.registration_number, issuer, merchant_number, type ORDER BY places.updated_at DESC ) AS rank\n          FROM      place_merchants\n          JOIN      places\n          ON        place_merchants.place_id = places.id\n          AND       place_merchants.registration_number = places.registration_number\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_places.json', 'options': {'sql': ""SELECT    *\nFROM      merchant_places\nWHERE     type = 'Places::Kakao'\n""}, 'role': 'process', 'type': 'sql'}]"
1411,process:::merchant_places:::merchant_places,process:::naver_places:::merchant_places,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_places.json', 'options': {'sql': 'SELECT    *\nFROM (\n          SELECT\n                  issuer AS card_issuer, merchant_number,\n                  places.*,\n                  row_number() OVER (PARTITION BY place_merchants.registration_number, issuer, merchant_number, type ORDER BY places.updated_at DESC ) AS rank\n          FROM      place_merchants\n          JOIN      places\n          ON        place_merchants.place_id = places.id\n          AND       place_merchants.registration_number = places.registration_number\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_places.json', 'options': {'sql': ""SELECT    *\nFROM      merchant_places\nWHERE     type = 'Places::Naver'""}, 'role': 'process', 'type': 'sql'}]"
1412,process:::kakao_places:::merchant_places,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_places.json', 'options': {'sql': ""SELECT    *\nFROM      merchant_places\nWHERE     type = 'Places::Kakao'\n""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_place.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=kakao'}, 'role': 'source', 'type': 'file'}]"
1413,process:::naver_places:::merchant_places,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_places.json', 'options': {'sql': ""SELECT    *\nFROM      merchant_places\nWHERE     type = 'Places::Naver'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_classification_place.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_places.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver'}, 'role': 'sink', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=places/name=naver'}, 'role': 'source', 'type': 'file'}]"
1414,s3://kcd-de-production/raw/catalog_v2/raw/tb=owl_db_bank_transactions,process:::bank_transactions_formatted:::build_bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_bank_transactions.json', 'options': {'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=owl_db_bank_transactions'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_bank_transactions.json', 'options': {'sql': ""SELECT  *\nFROM    (\n  SELECT  CAST(bank_account_id AS int) AS bank_account_id,\n          CAST(withdrawal AS bigint) AS withdrawal,\n          CAST(deposit AS bigint) AS deposit,\n          CAST(balance AS bigint) AS balance,\n          CAST(note AS string) AS note,\n          CAST(content AS string) AS content,\n          CAST(processing_branch AS string) AS processing_branch,\n          to_timestamp(transacted_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS transacted_at,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    bank_transactions_src\n)\nWHERE   created_at_date >= '2021-01-27'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]"
1415,s3://kcd-de-production/raw/etl/snowdon/bank/bank_transactions_merged,process:::prev_bank_transactions:::build_bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_bank_transactions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/bank/bank_transactions_merged'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_bank_transactions.json', 'options': {'sql': ""SELECT  *\nFROM    prev_bank_transactions_src\nWHERE   created_at_date >= '2021-01-18'\nAND     created_at_date < '2021-01-27'""}, 'role': 'process', 'type': 'sql'}]"
1416,process:::bank_transactions_formatted:::build_bank_transactions,process:::bank_transactions:::build_bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_bank_transactions.json', 'options': {'sql': ""SELECT  *\nFROM    (\n  SELECT  CAST(bank_account_id AS int) AS bank_account_id,\n          CAST(withdrawal AS bigint) AS withdrawal,\n          CAST(deposit AS bigint) AS deposit,\n          CAST(balance AS bigint) AS balance,\n          CAST(note AS string) AS note,\n          CAST(content AS string) AS content,\n          CAST(processing_branch AS string) AS processing_branch,\n          to_timestamp(transacted_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS transacted_at,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    bank_transactions_src\n)\nWHERE   created_at_date >= '2021-01-27'\nAND     created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_bank_transactions.json', 'options': {'sql': 'SELECT  bank_account_id,\n        transacted_at,\n        balance,\n        MAX(withdrawal) AS withdrawal,\n        MAX(deposit) AS deposit,\n        MAX(note) AS note,\n        MAX(content) AS content,\n        MAX(processing_branch) AS processing_branch,\n        MAX(created_at) AS created_at,\n        MAX(updated_at) AS updated_at\nFROM    bank_transactions_formatted\nGROUP BY bank_account_id, transacted_at, balance'}, 'role': 'process', 'type': 'sql'}]"
1417,process:::bank_transactions:::build_bank_transactions,process:::bank_transactions_unique:::build_bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_bank_transactions.json', 'options': {'sql': 'SELECT  bank_account_id,\n        transacted_at,\n        balance,\n        MAX(withdrawal) AS withdrawal,\n        MAX(deposit) AS deposit,\n        MAX(note) AS note,\n        MAX(content) AS content,\n        MAX(processing_branch) AS processing_branch,\n        MAX(created_at) AS created_at,\n        MAX(updated_at) AS updated_at\nFROM    bank_transactions_formatted\nGROUP BY bank_account_id, transacted_at, balance'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_bank_transactions.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_bank_transactions prev RIGHT OUTER JOIN bank_transactions current\nON      (\n  prev.bank_account_id = current.bank_account_id AND\n  prev.transacted_at = current.transacted_at AND\n  prev.balance = current.balance\n)\nWHERE   prev.bank_account_id is null'}, 'role': 'process', 'type': 'sql'}]"
1418,process:::prev_bank_transactions:::build_bank_transactions,process:::bank_transactions_unique:::build_bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_bank_transactions.json', 'options': {'sql': ""SELECT  *\nFROM    prev_bank_transactions_src\nWHERE   created_at_date >= '2021-01-18'\nAND     created_at_date < '2021-01-27'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_bank_transactions.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_bank_transactions prev RIGHT OUTER JOIN bank_transactions current\nON      (\n  prev.bank_account_id = current.bank_account_id AND\n  prev.transacted_at = current.transacted_at AND\n  prev.balance = current.balance\n)\nWHERE   prev.bank_account_id is null'}, 'role': 'process', 'type': 'sql'}]"
1419,process:::bank_transactions_unique:::build_bank_transactions,process:::merged_bank_transactions:::build_bank_transactions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_bank_transactions.json', 'options': {'sql': 'SELECT  current.*\nFROM    prev_bank_transactions prev RIGHT OUTER JOIN bank_transactions current\nON      (\n  prev.bank_account_id = current.bank_account_id AND\n  prev.transacted_at = current.transacted_at AND\n  prev.balance = current.balance\n)\nWHERE   prev.bank_account_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_bank_transactions.json', 'options': {'sql': ""SELECT  *,\n        row_number() OVER (\n            PARTITION BY bank_account_id, CAST(transacted_at AS DATE)\n            ORDER BY transacted_at DESC\n        ) AS seq\nFROM    (\n  SELECT  t.bank_account_id,\n          t.withdrawal,\n          t.deposit,\n          t.balance,\n          t.note,\n          t.content,\n          t.processing_branch,\n          t.transacted_at,\n          t.created_at,\n          t.updated_at,\n          a.business_id,\n          a.bank_name,\n          a.account_type,\n          a.account_number,\n          a.created_at AS account_created_at,\n          a.updated_at AS account_updated_at,\n          a.credential_id,\n          a.name,\n          a.uuid,\n          a.holder_name,\n          date_format(t.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    bank_transactions_unique t LEFT OUTER JOIN bank_accounts a\n  ON      t.bank_account_id = a.id\n)\nWHERE   created_at_date is not null""}, 'role': 'process', 'type': 'sql'}]"
1420,process:::merged_bank_transactions:::build_bank_transactions,s3://kcd-de-production/test/raw/etl/snowdon/bank/bank_transactions_merged,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_bank_transactions.json', 'options': {'sql': ""SELECT  *,\n        row_number() OVER (\n            PARTITION BY bank_account_id, CAST(transacted_at AS DATE)\n            ORDER BY transacted_at DESC\n        ) AS seq\nFROM    (\n  SELECT  t.bank_account_id,\n          t.withdrawal,\n          t.deposit,\n          t.balance,\n          t.note,\n          t.content,\n          t.processing_branch,\n          t.transacted_at,\n          t.created_at,\n          t.updated_at,\n          a.business_id,\n          a.bank_name,\n          a.account_type,\n          a.account_number,\n          a.created_at AS account_created_at,\n          a.updated_at AS account_updated_at,\n          a.credential_id,\n          a.name,\n          a.uuid,\n          a.holder_name,\n          date_format(t.created_at, 'yyyy-MM-dd') AS created_at_date\n  FROM    bank_transactions_unique t LEFT OUTER JOIN bank_accounts a\n  ON      t.bank_account_id = a.id\n)\nWHERE   created_at_date is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_bank_account_balances.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/test/raw/etl/snowdon/bank/bank_transactions_merged'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_bank_transactions.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/test/raw/etl/snowdon/bank/bank_transactions_merged', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
1421,process:::pos_menus_v2:::pos_menus_tok_k,process:::pos_menus_with_time_bucket_v2:::pos_menus_tok_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'sql': ""    SELECT\n        *\n    FROM\n        pos_menus_raw_v2\n    WHERE\n        created_at_date >= '2020-09-01'\n    AND uid IS NOT NULL\n    AND name IS NOT NULL\n    AND name != ''""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'sql': '   SELECT\n       *,\n       CASE\n           WHEN order_hour = -1 then \'전체\'\n           WHEN order_hour between 0 and 5 then \'새벽\'\n           WHEN order_hour between 6 and 10 then \'아침\'\n           WHEN order_hour between 11 and 13 then \'점심\'\n           WHEN order_hour between 14 and 16 then \'오후\'\n           ELSE \'저녁\'\n       END AS time_bucket\n   FROM\n       (SELECT\n           uid,\n           uid_type,\n           name,\n           price,\n           order_time,\n           order_month,\n           count,\n           CAST(date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""HH"") as integer) as order_hour\n       FROM\n           pos_menus_v2\n\n       UNION ALL\n\n       SELECT\n           uid,\n           uid_type,\n           name,\n           price,\n           order_time,\n           order_month,\n           count,\n           -1 as order_hour\n       FROM\n           pos_menus_v2\n       )'}, 'role': 'process', 'type': 'sql'}]"
1422,process:::pos_menus_with_time_bucket_v2:::pos_menus_tok_k,process:::pos_menus_top_k_v2:::pos_menus_tok_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'sql': '   SELECT\n       *,\n       CASE\n           WHEN order_hour = -1 then \'전체\'\n           WHEN order_hour between 0 and 5 then \'새벽\'\n           WHEN order_hour between 6 and 10 then \'아침\'\n           WHEN order_hour between 11 and 13 then \'점심\'\n           WHEN order_hour between 14 and 16 then \'오후\'\n           ELSE \'저녁\'\n       END AS time_bucket\n   FROM\n       (SELECT\n           uid,\n           uid_type,\n           name,\n           price,\n           order_time,\n           order_month,\n           count,\n           CAST(date_format(to_timestamp(order_time, ""yyyy-MM-dd HH:mm:ss""), ""HH"") as integer) as order_hour\n       FROM\n           pos_menus_v2\n\n       UNION ALL\n\n       SELECT\n           uid,\n           uid_type,\n           name,\n           price,\n           order_time,\n           order_month,\n           count,\n           -1 as order_hour\n       FROM\n           pos_menus_v2\n       )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'sql': '   SELECT\n       *,\n       row_number() OVER (PARTITION BY uid, uid_type, order_month, time_bucket ORDER BY total_amount DESC) AS rank\n   FROM\n      (\n       SELECT\n           uid,\n           uid_type,\n           order_month,\n           time_bucket,\n           name,\n           sum(price * count) as total_amount,\n           sum(`count`) as total_count\n       FROM\n           pos_menus_with_time_bucket_v2\n       GROUP BY\n           uid,\n           uid_type,\n           order_month,\n           time_bucket,\n           name\n      )'}, 'role': 'process', 'type': 'sql'}]"
1423,process:::pos_menus_top_k_v2:::pos_menus_tok_k,process:::pos_menus_top_k_jdbc_v2:::pos_menus_tok_k,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'sql': '   SELECT\n       *,\n       row_number() OVER (PARTITION BY uid, uid_type, order_month, time_bucket ORDER BY total_amount DESC) AS rank\n   FROM\n      (\n       SELECT\n           uid,\n           uid_type,\n           order_month,\n           time_bucket,\n           name,\n           sum(price * count) as total_amount,\n           sum(`count`) as total_count\n       FROM\n           pos_menus_with_time_bucket_v2\n       GROUP BY\n           uid,\n           uid_type,\n           order_month,\n           time_bucket,\n           name\n      )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'sql': '   SELECT\n       uid,\n       uid_type,\n       order_month,\n       time_bucket,\n       sum(total_amount) as total_amount,\n       sum(total_count) as total_count,\n       to_json(collect_list(struct(rank, name, total_amount, total_count))) as rows\n   FROM\n       pos_menus_top_k_v2\n   GROUP BY\n       uid,\n       uid_type,\n       order_month,\n       time_bucket'}, 'role': 'process', 'type': 'sql'}]"
1424,process:::pos_menus_top_k_v2:::pos_menus_tok_k,s3://kcd-de-production/raw/etl/pos/pos_topk_menus_v2,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'sql': '   SELECT\n       *,\n       row_number() OVER (PARTITION BY uid, uid_type, order_month, time_bucket ORDER BY total_amount DESC) AS rank\n   FROM\n      (\n       SELECT\n           uid,\n           uid_type,\n           order_month,\n           time_bucket,\n           name,\n           sum(price * count) as total_amount,\n           sum(`count`) as total_count\n       FROM\n           pos_menus_with_time_bucket_v2\n       GROUP BY\n           uid,\n           uid_type,\n           order_month,\n           time_bucket,\n           name\n      )'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/pos/pos_topk_menus_v2', 'format': 'parquet', 'partitions': 'order_month', 'numPartitions': '10'}, 'role': 'sink', 'type': 'file'}]"
1425,process:::pos_menus_top_k_jdbc_v2:::pos_menus_tok_k,jdbc_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'sql': '   SELECT\n       uid,\n       uid_type,\n       order_month,\n       time_bucket,\n       sum(total_amount) as total_amount,\n       sum(total_count) as total_count,\n       to_json(collect_list(struct(rank, name, total_amount, total_count))) as rows\n   FROM\n       pos_menus_top_k_v2\n   GROUP BY\n       uid,\n       uid_type,\n       order_month,\n       time_bucket'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_preferred_menus_by_visit_type_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'uid_type:bills_id_type,menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats_v2', 'conflictColumns': 'uid,uid_type,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus', 'conflictColumns': 'business_id,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'daily_delivery_orders_stat.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'daily_delivery_orders_stat', 'conflictColumns': 'business_id,delivery_app,shop_number,date', 'updateColumns': 'closed_orders_amount,closed_orders_count,cancelled_orders_amount,cancelled_orders_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'hometax_business_label_upload.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://snowdon-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/ebdb', 'user': 'scraper', 'password': 'g6XEyybrQU.nDA6jTp', 'operation': 'upsert', 'dbtable': 'hometax_businesses', 'conflictColumns': 'business_id', 'updateColumns': 'regular_employees_count,size_category,updated_at', 'typeCastColumns': 'size_category:hometax_business_size_category'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'update_sdk_event.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'dbtable': 'sdk_event', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'conflictColumns': 'sdk_name,event_type, user_type', 'updateColumns': 'sdk_name,event_type,user_type'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'delivery_receipt_stats.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-staging.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_staging', 'user': 'plover', 'password': 'welcome!', 'operation': 'upsert', 'dbtable': 'pos_receipt_stat', 'conflictColumns': 'public_id,target_date,date_type,h3_index,h3_resolution', 'updateColumns': 'metric', 'typeCastColumns': 'metric:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_sales_amount_daily.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_bill_stats', 'conflictColumns': 'business_id,date_id,paid_type', 'updateColumns': 'total_amount,total_count', 'typeCastColumns': 'paid_type:bills_paid_type_t'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_preferred_menus_by_visit_type.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_preferred_menus', 'conflictColumns': 'business_id,order_month,visit_type', 'updateColumns': 'menus,times', 'typeCastColumns': 'menus:jsonb,times:jsonb'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_menu_top_k.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_menu_top_k', 'conflictColumns': 'business_id,order_month,time_bucket,name', 'updateColumns': 'total_amount,total_count'}, 'role': 'sink', 'type': 'jdbc'}, {'filename': 'pos_topk_menus_by_time_bucket_v2.json', 'options': {'driver': 'org.postgresql.Driver', 'url': 'jdbc:postgresql://plover-data-production.cmf8pqcqka6h.ap-northeast-2.rds.amazonaws.com:5432/plover_data_production', 'user': 'plover', 'password': '3d1f620c-f097-43b3-9125-c4ec60a5d3da', 'operation': 'upsert', 'dbtable': 'pos_topk_menus_v2', 'conflictColumns': 'uid,uid_type,order_month,time_bucket', 'updateColumns': 'rows,total_amount,total_count', 'typeCastColumns': 'rows:jsonb,uid_type:bills_id_type'}, 'role': 'sink', 'type': 'jdbc'}]"
1426,s3://kcd-de-production/raw/etl/snowdon/places/similarity/grouped,process:::sessions:::build_session,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sessions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/places/similarity/grouped'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/snowdon/places/similarity/grouped'}, 'role': 'sink', 'type': 'file'}]","[{'filename': 'build_sessions.json', 'options': {'sql': 'SELECT  tx_stat.*\nFROM    (\n  SELECT  explode(to_sessions(encrypted_card_number, histories)) AS tx_stat\n  FROM    txs\n  WHERE   size(histories) < 10000\n)'}, 'role': 'process', 'type': 'sql'}]"
1427,process:::sessions:::build_session,s3://kcd-de-production/raw/etl/snowdon/places/similarity/sessions,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_sessions.json', 'options': {'sql': 'SELECT  tx_stat.*\nFROM    (\n  SELECT  explode(to_sessions(encrypted_card_number, histories)) AS tx_stat\n  FROM    txs\n  WHERE   size(histories) < 10000\n)'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sessions.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/snowdon/places/similarity/sessions'}, 'role': 'sink', 'type': 'file'}]"
1428,process:::payments_stat:::card_sales_payments,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'sales_payments.json', 'options': {'sql': ""  SELECT\n          timestamp,\n          business_id,\n          date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n          SUM(sales_amount_sum) AS sales_amount_sum,\n          SUM(sales_count) AS sales_count,\n          map_from_entries(collect_list(struct(issuer_name, sales_amount_sum))) AS issuer_amount_sum,\n          map_from_entries(collect_list(struct(issuer_name, sales_count))) AS issuer_tx_count\n  FROM (\n          SELECT\n                  timestamp,\n                  business_id,\n                  issuer_name,\n                  SUM(sales_amount) AS sales_amount_sum,\n                  SUM(sales_count) AS sales_count\n          FROM (\n                  SELECT\n                          business_id,\n                          date_trunc('MONTH', received_at) AS timestamp,\n                          sales_amount,\n                          sales_count,\n                          issuer_name\n                  FROM    payments\n                  WHERE   business_id IS NOT NULL\n                  AND     received_at between '2019-01-01' AND '2020-09-05'\n          )\n          GROUP BY business_id, issuer_name, timestamp\n ) GROUP BY business_id, timestamp""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'sales_payments.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_payments', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
1429,s3://kcd-de-production/test/raw/stat/snowdon/delivery_app/delivery_app_orders_stat,process:::delivery_app_orders_stat:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/test/raw/stat/snowdon/delivery_app/delivery_app_orders_stat'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]"
1430,process:::card_purchases_stat:::build_daily_reports,process:::card_purchases:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      card_purchases_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time AS month,\n          SUM(amount) AS amount\nFROM      card_purchases_stat\nWHERE     time_unit = 'month'\nGROUP BY  business_id, time""}, 'role': 'process', 'type': 'sql'}]"
1431,process:::hometax_stat:::build_daily_reports,process:::hometax:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      hometax_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time AS month,\n          hometax_sales_invoices_amount,\n          hometax_sales_cash_receipts_amount,\n          hometax_purchases_invoices_amount,\n          hometax_purchases_cash_receipts_amount\nFROM      hometax_stat\nWHERE     time_unit = 'month'""}, 'role': 'process', 'type': 'sql'}]"
1432,process:::payments_stat:::build_daily_reports,process:::card_payments:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      payments_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time AS date,\n          date_trunc('month', time) AS month,\n          collect_set(\n            struct(\n              issuer_name,\n              reserved,\n              received\n            )\n          ) as payments\nFROM      payments_stat\nWHERE     time_unit = 'day'\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]"
1433,process:::transactions_stat:::build_daily_reports,process:::daily_card_sales:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      transactions_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM      transactions_stat\nWHERE     time_unit = 'day'""}, 'role': 'process', 'type': 'sql'}]"
1434,process:::transactions_stat:::build_daily_reports,process:::monthly_card_sales:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      transactions_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM      transactions_stat\nWHERE     time_unit = 'month'""}, 'role': 'process', 'type': 'sql'}]"
1435,process:::transactions_stat:::build_daily_reports,process:::hourly_sales:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      transactions_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *,\n          date_trunc('month', date) AS month\nFROM      (\n  SELECT    business_id,\n            time AS date,\n            SUM(IF (hour >= 0 AND hour < 6, amount, 0)) AS 0_6_sales_amount,\n            SUM(IF (hour >= 6 AND hour < 11, amount, 0)) AS 6_11_sales_amount,\n            SUM(IF (hour >= 11 AND hour < 14, amount, 0)) AS 11_14_sales_amount,\n            SUM(IF (hour >= 14 AND hour < 17, amount, 0)) AS 14_17_sales_amount,\n            SUM(IF (hour >= 17 AND hour < 24, amount, 0)) AS 17_24_sales_amount\n  FROM      (\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              card_sales_amount AS amount\n    FROM      transactions_stat\n    WHERE     time_unit = 'day_hour'\n\n    UNION ALL\n\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              (baemin_online_amount_sum + yogiyo_online_amount_sum + baedaltong_online_amount_sum) AS amount\n    FROM      delivery_app_orders_stat\n    WHERE     time_unit = 'day_hour'\n  )\n  GROUP BY  1, 2\n)""}, 'role': 'process', 'type': 'sql'}]"
1436,process:::delivery_app_orders_stat:::build_daily_reports,process:::daily_delivery_app_sales:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          amount_sum,\n          baemin_online_amount_sum,\n          yogiyo_online_amount_sum,\n          baedaltong_online_amount_sum\nFROM      delivery_app_orders_stat\nWHERE     time_unit = 'day'""}, 'role': 'process', 'type': 'sql'}]"
1437,process:::delivery_app_orders_stat:::build_daily_reports,process:::monthly_delivery_app_sales:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          amount_sum,\n          baemin_online_amount_sum,\n          yogiyo_online_amount_sum,\n          baedaltong_online_amount_sum\nFROM      delivery_app_orders_stat\nWHERE     time_unit = 'month'""}, 'role': 'process', 'type': 'sql'}]"
1438,process:::delivery_app_orders_stat:::build_daily_reports,process:::hourly_sales:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *,\n          date_trunc('month', date) AS month\nFROM      (\n  SELECT    business_id,\n            time AS date,\n            SUM(IF (hour >= 0 AND hour < 6, amount, 0)) AS 0_6_sales_amount,\n            SUM(IF (hour >= 6 AND hour < 11, amount, 0)) AS 6_11_sales_amount,\n            SUM(IF (hour >= 11 AND hour < 14, amount, 0)) AS 11_14_sales_amount,\n            SUM(IF (hour >= 14 AND hour < 17, amount, 0)) AS 14_17_sales_amount,\n            SUM(IF (hour >= 17 AND hour < 24, amount, 0)) AS 17_24_sales_amount\n  FROM      (\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              card_sales_amount AS amount\n    FROM      transactions_stat\n    WHERE     time_unit = 'day_hour'\n\n    UNION ALL\n\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              (baemin_online_amount_sum + yogiyo_online_amount_sum + baedaltong_online_amount_sum) AS amount\n    FROM      delivery_app_orders_stat\n    WHERE     time_unit = 'day_hour'\n  )\n  GROUP BY  1, 2\n)""}, 'role': 'process', 'type': 'sql'}]"
1439,process:::delivery_app_payments_stat:::build_daily_reports,process:::delivery_app_payments:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_payments_stat_raw\nWHERE     (\n  (\n    time_unit = 'month' AND\n    time >= date_trunc('month', to_date('2020-11-19')) AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  ) OR\n  (\n    time_unit = 'day_hour' AND\n    time >= '2020-11-19' AND\n    time < '2020-11-20'\n  )\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time AS date,\n          date_trunc('month', time) AS month,\n          received_amount,\n          baemin_received_amount,\n          baedaltong_received_amount,\n          yogiyo_received_amount,\n          order_amount,\n          baemin_order_amount,\n          baedaltong_order_amount,\n          yogiyo_order_amount,\n          period_started_at,\n          period_ended_at\nFROM      delivery_app_payments_stat\nWHERE     time_unit = 'day'""}, 'role': 'process', 'type': 'sql'}]"
1440,process:::daily_card_sales:::build_daily_reports,process:::card_sales:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM      transactions_stat\nWHERE     time_unit = 'day'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2020-11-19', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.card_sales_amount,\n          d.card_sales_count,\n          d.card_sales_fee,\n          d.card_sales_vat_fee,\n          d.card_sales_payment,\n          d.returning_amount,\n          d.new_amount,\n          m.card_sales_amount AS monthly_card_sales_amount\nFROM      daily_card_sales d\nFULL OUTER JOIN monthly_card_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}]"
1441,process:::monthly_card_sales:::build_daily_reports,process:::card_sales:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          card_sales_amount,\n          card_sales_count,\n          card_sales_fee,\n          card_sales_vat_fee,\n          card_sales_payment,\n          returning_amount,\n          card_sales_amount - returning_amount AS new_amount\nFROM      transactions_stat\nWHERE     time_unit = 'month'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2020-11-19', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.card_sales_amount,\n          d.card_sales_count,\n          d.card_sales_fee,\n          d.card_sales_vat_fee,\n          d.card_sales_payment,\n          d.returning_amount,\n          d.new_amount,\n          m.card_sales_amount AS monthly_card_sales_amount\nFROM      daily_card_sales d\nFULL OUTER JOIN monthly_card_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}]"
1442,process:::card_sales:::build_daily_reports,process:::daily_stat_joined:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2020-11-19', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.card_sales_amount,\n          d.card_sales_count,\n          d.card_sales_fee,\n          d.card_sales_vat_fee,\n          d.card_sales_payment,\n          d.returning_amount,\n          d.new_amount,\n          m.card_sales_amount AS monthly_card_sales_amount\nFROM      daily_card_sales d\nFULL OUTER JOIN monthly_card_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
1443,process:::daily_delivery_app_sales:::build_daily_reports,process:::delivery_app_sales:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          amount_sum,\n          baemin_online_amount_sum,\n          yogiyo_online_amount_sum,\n          baedaltong_online_amount_sum\nFROM      delivery_app_orders_stat\nWHERE     time_unit = 'day'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2020-11-19', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.amount_sum,\n          d.baemin_online_amount_sum,\n          d.yogiyo_online_amount_sum,\n          d.baedaltong_online_amount_sum,\n          m.baemin_online_amount_sum + m.baedaltong_online_amount_sum + m.yogiyo_online_amount_sum AS monthly_delivery_app_sales_amount\nFROM      daily_delivery_app_sales d\nFULL OUTER JOIN   monthly_delivery_app_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}]"
1444,process:::monthly_delivery_app_sales:::build_daily_reports,process:::delivery_app_sales:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time,\n          amount_sum,\n          baemin_online_amount_sum,\n          yogiyo_online_amount_sum,\n          baedaltong_online_amount_sum\nFROM      delivery_app_orders_stat\nWHERE     time_unit = 'month'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2020-11-19', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.amount_sum,\n          d.baemin_online_amount_sum,\n          d.yogiyo_online_amount_sum,\n          d.baedaltong_online_amount_sum,\n          m.baemin_online_amount_sum + m.baedaltong_online_amount_sum + m.yogiyo_online_amount_sum AS monthly_delivery_app_sales_amount\nFROM      daily_delivery_app_sales d\nFULL OUTER JOIN   monthly_delivery_app_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}]"
1445,process:::delivery_app_sales:::build_daily_reports,process:::daily_stat_joined:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    nvl(d.business_id, m.business_id) AS business_id,\n          nvl(d.time, to_timestamp('2020-11-19', 'yyyy-MM-dd')) AS date,\n          m.time AS month,\n          d.amount_sum,\n          d.baemin_online_amount_sum,\n          d.yogiyo_online_amount_sum,\n          d.baedaltong_online_amount_sum,\n          m.baemin_online_amount_sum + m.baedaltong_online_amount_sum + m.yogiyo_online_amount_sum AS monthly_delivery_app_sales_amount\nFROM      daily_delivery_app_sales d\nFULL OUTER JOIN   monthly_delivery_app_sales m\nON        d.business_id = m.business_id\nAND       date_trunc('month', d.time) = date_trunc('month', m.time)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
1446,process:::delivery_app_payments:::build_daily_reports,process:::daily_stat_joined:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time AS date,\n          date_trunc('month', time) AS month,\n          received_amount,\n          baemin_received_amount,\n          baedaltong_received_amount,\n          yogiyo_received_amount,\n          order_amount,\n          baemin_order_amount,\n          baedaltong_order_amount,\n          yogiyo_order_amount,\n          period_started_at,\n          period_ended_at\nFROM      delivery_app_payments_stat\nWHERE     time_unit = 'day'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
1447,process:::card_payments:::build_daily_reports,process:::daily_stat_joined:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time AS date,\n          date_trunc('month', time) AS month,\n          collect_set(\n            struct(\n              issuer_name,\n              reserved,\n              received\n            )\n          ) as payments\nFROM      payments_stat\nWHERE     time_unit = 'day'\nGROUP BY  1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
1448,process:::hourly_sales:::build_daily_reports,process:::daily_stat_joined:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *,\n          date_trunc('month', date) AS month\nFROM      (\n  SELECT    business_id,\n            time AS date,\n            SUM(IF (hour >= 0 AND hour < 6, amount, 0)) AS 0_6_sales_amount,\n            SUM(IF (hour >= 6 AND hour < 11, amount, 0)) AS 6_11_sales_amount,\n            SUM(IF (hour >= 11 AND hour < 14, amount, 0)) AS 11_14_sales_amount,\n            SUM(IF (hour >= 14 AND hour < 17, amount, 0)) AS 14_17_sales_amount,\n            SUM(IF (hour >= 17 AND hour < 24, amount, 0)) AS 17_24_sales_amount\n  FROM      (\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              card_sales_amount AS amount\n    FROM      transactions_stat\n    WHERE     time_unit = 'day_hour'\n\n    UNION ALL\n\n    SELECT    business_id,\n              date_trunc('day', time) AS time,\n              hour(time) AS hour,\n              (baemin_online_amount_sum + yogiyo_online_amount_sum + baedaltong_online_amount_sum) AS amount\n    FROM      delivery_app_orders_stat\n    WHERE     time_unit = 'day_hour'\n  )\n  GROUP BY  1, 2\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
1449,process:::daily_stat_joined:::build_daily_reports,process:::daily_stat:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,date,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *, date_format(date, 'yyyy-MM-dd') AS date_str\nFROM      daily_stat_joined""}, 'role': 'process', 'type': 'sql'}]"
1450,process:::daily_stat:::build_daily_reports,process:::merged_stat:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    *, date_format(date, 'yyyy-MM-dd') AS date_str\nFROM      daily_stat_joined""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
1451,process:::card_purchases:::build_daily_reports,process:::merged_stat:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time AS month,\n          SUM(amount) AS amount\nFROM      card_purchases_stat\nWHERE     time_unit = 'month'\nGROUP BY  business_id, time""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
1452,process:::hometax:::build_daily_reports,process:::merged_stat:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': ""SELECT    business_id,\n          time AS month,\n          hometax_sales_invoices_amount,\n          hometax_sales_cash_receipts_amount,\n          hometax_purchases_invoices_amount,\n          hometax_purchases_cash_receipts_amount\nFROM      hometax_stat\nWHERE     time_unit = 'month'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
1453,process:::merged_stat:::build_daily_reports,process:::merged_stat_with_date:::build_daily_reports,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'business_id,month', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'build_daily_reports.json', 'options': {'sql': 'SELECT  business_id,\n   daily_stat.date,\n   date_id,\n   daily_stat.card_sales.card_sales_amount AS card_sales_amount,\n   daily_stat.card_sales.card_sales_count AS card_sales_count,\n   daily_stat.card_sales.card_sales_fee AS card_sales_fee,\n   daily_stat.card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n   daily_stat.card_sales.card_sales_payment AS card_sales_payment,\n   daily_stat.card_sales.returning_amount AS returning_amount,\n   daily_stat.card_sales.new_amount AS new_amount,\n   daily_stat.card_sales.monthly_card_sales_amount AS monthly_card_sales_amount,\n   daily_stat.hourly_sales.0_6_sales_amount AS 0_6_sales_amount,\n   daily_stat.hourly_sales.6_11_sales_amount AS 6_11_sales_amount,\n   daily_stat.hourly_sales.11_14_sales_amount AS 11_14_sales_amount,\n   daily_stat.hourly_sales.14_17_sales_amount AS 14_17_sales_amount,\n   daily_stat.hourly_sales.17_24_sales_amount AS 17_24_sales_amount,\n   daily_stat.delivery_app_sales.baemin_online_amount_sum AS baemin_online_amount_sum,\n   daily_stat.delivery_app_sales.yogiyo_online_amount_sum AS yogiyo_online_amount_sum,\n   daily_stat.delivery_app_sales.baedaltong_online_amount_sum AS baedaltong_online_amount_sum,\n   daily_stat.delivery_app_sales.monthly_delivery_app_sales_amount AS monthly_delivery_app_sales_amount,\n   daily_stat.delivery_app_payments.baemin_received_amount AS baemin_received_amount,\n   daily_stat.delivery_app_payments.yogiyo_received_amount AS yogiyo_received_amount,\n   daily_stat.delivery_app_payments.baedaltong_received_amount AS baedaltong_received_amount,\n   daily_stat.card_payments.payments AS card_payments,\n   card_purchases.amount AS card_purchases_amount,\n   hometax.hometax_sales_invoices_amount AS hometax_sales_invoices_amount,\n   hometax.hometax_sales_cash_receipts_amount AS hometax_sales_cash_receipts_amount,\n   hometax.hometax_purchases_invoices_amount AS hometax_purchases_invoices_amount,\n   hometax.hometax_purchases_cash_receipts_amount AS hometax_purchases_cash_receipts_amount\nFROM    (\nSELECT  *,\n     daily_stat.date_str AS date_id\nFROM    merged_stat\n)\nWHERE   date_id is not null'}, 'role': 'process', 'type': 'sql'}]"
1454,process:::merged_stat_with_date:::build_daily_reports,s3://kcd-de-staging/raw/stat/snowdon/report/daily_report/report,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_daily_reports.json', 'options': {'sql': 'SELECT  business_id,\n   daily_stat.date,\n   date_id,\n   daily_stat.card_sales.card_sales_amount AS card_sales_amount,\n   daily_stat.card_sales.card_sales_count AS card_sales_count,\n   daily_stat.card_sales.card_sales_fee AS card_sales_fee,\n   daily_stat.card_sales.card_sales_vat_fee AS card_sales_vat_fee,\n   daily_stat.card_sales.card_sales_payment AS card_sales_payment,\n   daily_stat.card_sales.returning_amount AS returning_amount,\n   daily_stat.card_sales.new_amount AS new_amount,\n   daily_stat.card_sales.monthly_card_sales_amount AS monthly_card_sales_amount,\n   daily_stat.hourly_sales.0_6_sales_amount AS 0_6_sales_amount,\n   daily_stat.hourly_sales.6_11_sales_amount AS 6_11_sales_amount,\n   daily_stat.hourly_sales.11_14_sales_amount AS 11_14_sales_amount,\n   daily_stat.hourly_sales.14_17_sales_amount AS 14_17_sales_amount,\n   daily_stat.hourly_sales.17_24_sales_amount AS 17_24_sales_amount,\n   daily_stat.delivery_app_sales.baemin_online_amount_sum AS baemin_online_amount_sum,\n   daily_stat.delivery_app_sales.yogiyo_online_amount_sum AS yogiyo_online_amount_sum,\n   daily_stat.delivery_app_sales.baedaltong_online_amount_sum AS baedaltong_online_amount_sum,\n   daily_stat.delivery_app_sales.monthly_delivery_app_sales_amount AS monthly_delivery_app_sales_amount,\n   daily_stat.delivery_app_payments.baemin_received_amount AS baemin_received_amount,\n   daily_stat.delivery_app_payments.yogiyo_received_amount AS yogiyo_received_amount,\n   daily_stat.delivery_app_payments.baedaltong_received_amount AS baedaltong_received_amount,\n   daily_stat.card_payments.payments AS card_payments,\n   card_purchases.amount AS card_purchases_amount,\n   hometax.hometax_sales_invoices_amount AS hometax_sales_invoices_amount,\n   hometax.hometax_sales_cash_receipts_amount AS hometax_sales_cash_receipts_amount,\n   hometax.hometax_purchases_invoices_amount AS hometax_purchases_invoices_amount,\n   hometax.hometax_purchases_cash_receipts_amount AS hometax_purchases_cash_receipts_amount\nFROM    (\nSELECT  *,\n     daily_stat.date_str AS date_id\nFROM    merged_stat\n)\nWHERE   date_id is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_reports.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-staging/raw/stat/snowdon/report/daily_report/report', 'format': 'parquet', 'partitions': 'date_id', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}]"
1455,process:::businesses_with_nice_monthly_variables:::build_nice_monthly_variables,s3://kcd-de-staging/work/ryan/2021-01-01/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_nice_monthly_variables.json', 'options': {'sql': ""SELECT  stats.business_id,\n        stats.registration_number,\n        stats.registration_code,\n        stats.status_code,\n        date_format(date_sub('2021-01-01', 1), 'yyyyMMdd') as standard_date,\n        CAST(3_month_avg_card_sales_amount AS bigint) AS TR0102_M03,\n        3_month_sum_returning_count AS TR0251_M03,\n        CAST((1 - 3_month_sum_returning_count / 3_month_sum_card_sales_count) * 100 AS int) AS TR0260_M03,\n        CAST((3_month_sum_returning_count / 3_month_sum_card_sales_count) * 100 AS int) AS TR0261_M03,\n        6_month_sum_returning_count AS TR0251_M06,\n        CAST((1 - 6_month_sum_returning_count / 6_month_sum_card_sales_count) * 100 AS int) AS TR0260_M06,\n        CAST(12_month_avg_returning_count AS int) AS TR0256_M12,\n        CAST((3_month_sum_card_sales_amount / 6_month_sum_card_sales_amount) * 100 AS int) AS TR4101_M03,\n        CAST((3_month_avg_card_sales_amount / 6_month_avg_card_sales_amount) * 100 AS int) AS TR4102_M03,\n        CAST((3_month_sum_card_sales_count / 6_month_sum_card_sales_count) * 100 AS int) AS TR4201_M03,\n        CAST((3_month_avg_card_sales_count / 6_month_avg_card_sales_count) * 100 AS int) AS TR4202_M03,\n        CAST((6_month_sum_card_sales_amount / before_6_month_sum_card_sales_amount) * 100 AS int) AS TR6101_M06,\n        CAST((6_month_avg_card_sales_amount / before_6_month_avg_card_sales_amount) * 100 AS int) AS TR6102_M06,\n        CAST((6_month_sum_card_sales_count / before_6_month_sum_card_sales_count) * 100 AS int) AS TR6201_M06,\n        CAST((6_month_avg_card_sales_count / before_6_month_avg_card_sales_count) * 100 AS int) AS TR6202_M06,\n        CAST((3_month_avg_card_sales_amount / last_year_3_month_avg_card_sales_amount) * 100 AS int) AS TR7102_M03,\n        CAST((6_month_avg_card_sales_count / last_year_6_month_avg_card_sales_count) * 100 AS int) AS TR7202_M06,\n        CAST((3_month_sum_card_sales_count / address_3_month_avg_card_sales_count) * 100 AS int) AS LT8201_M03,\n        CAST((6_month_sum_card_sales_amount / classification_6_month_avg_card_sales_amount) * 100 AS int) AS CL8101_M06,\n        CAST((6_month_sum_card_sales_count / classification_6_month_avg_card_sales_count) * 100 AS int) AS CL8201_M06,\n        CAST((3_month_avg_hometax_sales_amount / 12_month_avg_hometax_sales_amount) * 100 AS int) AS SL5102_M03\nFROM businesses_monthly_stats stats\nLEFT OUTER JOIN address_monthly_stats ON stats.address = address_monthly_stats.address\nLEFT OUTER JOIN classification_monthly_stats classification ON stats.classification = classification.classification\nLEFT OUTER JOIN hometax_sales_monthly_stat hometax_stats ON stats.business_id = hometax_stats.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_stats.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat'}, 'role': 'sink', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/address_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/classification_monthly_stats', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'paths': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/hometax_sales_monthly_stat', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_nice_monthly_variables.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-staging/work/ryan/nice_monthly/2021-01-01/businesses_with_nice_monthly_variables'}, 'role': 'sink', 'type': 'file'}]"
1456,s3://kcd-logs-raw/dev/dumps/2019-08-27/card_sales_payments,process:::current_payments:::payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payments_initial.json', 'options': {'paths': 's3://kcd-logs-raw/dev/dumps/2019-08-27/card_sales_payments', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'payments_initial.json', 'options': {'sql': '  SELECT  CAST(a.business_id AS int) AS business_id,\n          k.uuid AS credential_key,\n          trim(issuer_name) AS issuer_name,\n          trim(merchant_number) AS merchant_number,\n          trim(bank_name) AS bank_name,\n          trim(account_number) AS account_number,\n          CAST(COALESCE(sales_count, 0) AS INT) AS sales_count,\n          CAST(null AS string) AS scraping_type,\n          CAST(COALESCE(reserved_amount, 0) AS BIGINT) AS reserved_amount,\n          CAST(COALESCE(etc_amount, 0) AS BIGINT) AS etc_amount,\n          CAST(COALESCE(sales_amount, 0) AS BIGINT) AS sales_amount,\n          CAST(COALESCE(received_amount, 0) AS BIGINT) AS received_amount,\n          CAST(COALESCE(vat_fee_amount, 0) AS BIGINT) AS vat_fee_amount,\n          received_at,\n          a.created_at,\n          a.updated_at\n  FROM    current_payments_raw a INNER JOIN credential_keys k\n  ON      a.business_id = k.business_id'}, 'role': 'process', 'type': 'sql'}]"
1457,process:::current_payments:::payments,process:::reformat_payments:::payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payments_initial.json', 'options': {'sql': '  SELECT  CAST(a.business_id AS int) AS business_id,\n          k.uuid AS credential_key,\n          trim(issuer_name) AS issuer_name,\n          trim(merchant_number) AS merchant_number,\n          trim(bank_name) AS bank_name,\n          trim(account_number) AS account_number,\n          CAST(COALESCE(sales_count, 0) AS INT) AS sales_count,\n          CAST(null AS string) AS scraping_type,\n          CAST(COALESCE(reserved_amount, 0) AS BIGINT) AS reserved_amount,\n          CAST(COALESCE(etc_amount, 0) AS BIGINT) AS etc_amount,\n          CAST(COALESCE(sales_amount, 0) AS BIGINT) AS sales_amount,\n          CAST(COALESCE(received_amount, 0) AS BIGINT) AS received_amount,\n          CAST(COALESCE(vat_fee_amount, 0) AS BIGINT) AS vat_fee_amount,\n          received_at,\n          a.created_at,\n          a.updated_at\n  FROM    current_payments_raw a INNER JOIN credential_keys k\n  ON      a.business_id = k.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'payments_initial.json', 'options': {'sql': 'SELECT    *\nFROM      (\n  SELECT  * FROM current_payments\n\n  UNION ALL\n\n  SELECT * FROM after_payments\n)\nWHERE     business_id is not null\nAND       merchant_number is not null\nAND       bank_name is not null\nAND       received_at is not null'}, 'role': 'process', 'type': 'sql'}]"
1458,process:::catalog_payments_filtered:::payments,process:::after_payments:::payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payments_initial.json', 'options': {'sql': "" SELECT   *\n FROM     catalog_payments_raw\n WHERE    created_at_date >= '2020-12-25'\n AND      created_at_date < '2021-01-25'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'payments_initial.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n\n  UNION ALL\n\n  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          trim(IF (stlbanknm = '', null, replace(stlbanknm, '은행', ''))) AS bank_name,\n          trim(stlacctno) AS account_number,\n          CAST(pcacnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvamt AS BIGINT) AS reserved_amount,\n          CAST(etcamt AS BIGINT) AS etc_amount,\n          CAST(pcaamt AS BIGINT) AS sales_amount,\n          CAST(rcpscdamt AS BIGINT) AS received_amount,\n          CAST(vatfeeamt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymdate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n  FROM    catalog_payments_filtered a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}]"
1459,process:::after_payments:::payments,process:::reformat_payments:::payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payments_initial.json', 'options': {'sql': ""  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,\n          trim(IF (merNo = '', null, merNo)) AS merchant_number,\n          trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,\n          trim(stlAcctNo) AS account_number,\n          CAST(pcaCnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvAmt AS BIGINT) AS reserved_amount,\n          CAST(etcAmt AS BIGINT) AS etc_amount,\n          CAST(pcaAmt AS BIGINT) AS sales_amount,\n          CAST(rcpScdAmt AS BIGINT) AS received_amount,\n          CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')\n          ) AS updated_at\n  FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id\n\n  UNION ALL\n\n  SELECT  CAST(a.business_id AS int) AS business_id,\n          COALESCE(a.credential_key, k.uuid) AS credential_key,\n          trim(IF (cardnm = '', null, replace(cardnm, '카드', ''))) AS issuer_name,\n          trim(IF (merno = '', null, merno)) AS merchant_number,\n          trim(IF (stlbanknm = '', null, replace(stlbanknm, '은행', ''))) AS bank_name,\n          trim(stlacctno) AS account_number,\n          CAST(pcacnt AS int) AS sales_count,\n          scraping_type,\n          CAST(rsvamt AS BIGINT) AS reserved_amount,\n          CAST(etcamt AS BIGINT) AS etc_amount,\n          CAST(pcaamt AS BIGINT) AS sales_amount,\n          CAST(rcpscdamt AS BIGINT) AS received_amount,\n          CAST(vatfeeamt AS BIGINT) AS vat_fee_amount,\n          to_timestamp(unix_timestamp(pymdate, 'yyyyMMdd')) AS received_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS created_at,\n          to_timestamp(\n            concat(created_at_date, ' ', created_at_hour, ':00:00.000')\n          ) AS updated_at\n  FROM    catalog_payments_filtered a LEFT OUTER JOIN credential_keys k\n  ON      a.business_id = k.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'payments_initial.json', 'options': {'sql': 'SELECT    *\nFROM      (\n  SELECT  * FROM current_payments\n\n  UNION ALL\n\n  SELECT * FROM after_payments\n)\nWHERE     business_id is not null\nAND       merchant_number is not null\nAND       bank_name is not null\nAND       received_at is not null'}, 'role': 'process', 'type': 'sql'}]"
1460,process:::reformat_payments:::payments,process:::payments:::payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payments_initial.json', 'options': {'sql': 'SELECT    *\nFROM      (\n  SELECT  * FROM current_payments\n\n  UNION ALL\n\n  SELECT * FROM after_payments\n)\nWHERE     business_id is not null\nAND       merchant_number is not null\nAND       bank_name is not null\nAND       received_at is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'payments_initial.json', 'options': {'sql': ""  SELECT  business_id,\n          credential_key,\n          merchant_number,\n          bank_name,\n          received_at,\n          MIN(issuer_name) AS issuer_name,\n          MIN(account_number) AS account_number,\n          MIN(sales_count) AS sales_count,\n          MIN(scraping_type) AS scraping_type,\n          MIN(reserved_amount) AS reserved_amount,\n          MIN(etc_amount) AS etc_amount,\n          MIN(sales_amount) AS sales_amount,\n          MIN(received_amount) AS received_amount,\n          MIN(vat_fee_amount) AS vat_fee_amount,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(date_format(created_at, 'yyyy-MM-dd')) AS created_at_date\n  FROM    reformat_payments\n  GROUP BY business_id, credential_key, merchant_number, bank_name, received_at""}, 'role': 'process', 'type': 'sql'}]"
1461,process:::payments:::payments,payments_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payments_initial.json', 'options': {'sql': ""  SELECT  business_id,\n          credential_key,\n          merchant_number,\n          bank_name,\n          received_at,\n          MIN(issuer_name) AS issuer_name,\n          MIN(account_number) AS account_number,\n          MIN(sales_count) AS sales_count,\n          MIN(scraping_type) AS scraping_type,\n          MIN(reserved_amount) AS reserved_amount,\n          MIN(etc_amount) AS etc_amount,\n          MIN(sales_amount) AS sales_amount,\n          MIN(received_amount) AS received_amount,\n          MIN(vat_fee_amount) AS vat_fee_amount,\n          MIN(created_at) AS created_at,\n          MIN(updated_at) AS updated_at,\n          MIN(date_format(created_at, 'yyyy-MM-dd')) AS created_at_date\n  FROM    reformat_payments\n  GROUP BY business_id, credential_key, merchant_number, bank_name, received_at""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_raw_tables.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/card_sales/payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1', 'checkpoint': 'false'}, 'role': 'sink', 'type': 'custom'}, {'filename': 'payments_initial.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-data-staging/raw/etl/snowdon/card_sales/payments', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
1462,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_to_payment_code_20210127.tsv,process:::bccard:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payment_code_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/bccard_to_payment_code_20210127.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'payment_code_classification.json', 'options': {'sql': '  SELECT\n          registration_number,\n          card_issuer,\n          merchant_number,\n          payment_code\n  FROM    bccard_business_classification AS b\n  JOIN    bccard_to_payment_code_mapping AS m\n  ON      b.depth_3_code = m.classification_code'}, 'role': 'process', 'type': 'sql'}]"
1463,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_to_payment_code_20210118.tsv,process:::shinhancard:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payment_code_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/shinhancard_to_payment_code_20210118.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'payment_code_classification.json', 'options': {'sql': '  SELECT\n          registration_number,\n          card_issuer,\n          merchant_number,\n          payment_code\n  FROM    shinhancard_business_classification AS b\n  JOIN    shinhancard_to_payment_code_mapping AS m\n  ON      b.classification_code = m.classification_code'}, 'role': 'process', 'type': 'sql'}]"
1464,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_to_payment_code_20210118.tsv,process:::hyundaicard:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payment_code_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/hyundaicard_to_payment_code_20210118.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'payment_code_classification.json', 'options': {'sql': '  SELECT\n          registration_number,\n          card_issuer,\n          merchant_number,\n          payment_code\n  FROM    hyundaicard_business_classification AS b\n  JOIN    hyundaicard_to_payment_code_mapping AS m\n  ON      b.classification_code = m.classification_code'}, 'role': 'process', 'type': 'sql'}]"
1465,s3://kcd-de-production/data_sources/lookup/subject=classification_v2/payment_code_20210118.tsv,process:::payment_code_classification:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payment_code_classification.json', 'options': {'format': 'csv', 'read': '{""header"":""true"",""delimiter"":""\\\\t""}', 'paths': 's3://kcd-de-production/data_sources/lookup/subject=classification_v2/payment_code_20210118.tsv'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'payment_code_classification.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number, payment_code.*\nFROM      merged_classification\nJOIN      payment_code\nON        merged_classification.payment_code = payment_code.category_code\n'}, 'role': 'process', 'type': 'sql'}]"
1466,process:::bccard:::payment_code_classification,process:::merged:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payment_code_classification.json', 'options': {'sql': '  SELECT\n          registration_number,\n          card_issuer,\n          merchant_number,\n          payment_code\n  FROM    bccard_business_classification AS b\n  JOIN    bccard_to_payment_code_mapping AS m\n  ON      b.depth_3_code = m.classification_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'payment_code_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'merchant_number,card_issuer,registration_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
1467,process:::shinhancard:::payment_code_classification,process:::merged:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payment_code_classification.json', 'options': {'sql': '  SELECT\n          registration_number,\n          card_issuer,\n          merchant_number,\n          payment_code\n  FROM    shinhancard_business_classification AS b\n  JOIN    shinhancard_to_payment_code_mapping AS m\n  ON      b.classification_code = m.classification_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'payment_code_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'merchant_number,card_issuer,registration_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
1468,process:::hyundaicard:::payment_code_classification,process:::merged:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payment_code_classification.json', 'options': {'sql': '  SELECT\n          registration_number,\n          card_issuer,\n          merchant_number,\n          payment_code\n  FROM    hyundaicard_business_classification AS b\n  JOIN    hyundaicard_to_payment_code_mapping AS m\n  ON      b.classification_code = m.classification_code'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'payment_code_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'merchant_number,card_issuer,registration_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]"
1469,process:::merged:::payment_code_classification,process:::merged_classification:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payment_code_classification.json', 'options': {'class': 'com.kcd.thrush.dmp.spark.MergeSchemaProcess', 'joinColumns': 'merchant_number,card_issuer,registration_number', 'joinType': 'full_outer'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'payment_code_classification.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number, payment_code\nFROM (\n    SELECT    registration_number,\n              card_issuer,\n              merchant_number,\n              CASE\n                  WHEN   bccard IS NOT NULL THEN bccard.payment_code\n                  WHEN   shinhancard IS NOT NULL THEN shinhancard.payment_code\n                  WHEN   hyundaicard IS NOT NULL THEN hyundaicard.payment_code\n                  ELSE   null\n              END AS payment_code\n    FROM      merged\n)\nWHERE     payment_code is not null'}, 'role': 'process', 'type': 'sql'}]"
1470,process:::merged_classification:::payment_code_classification,process:::payment_code_classification:::payment_code_classification,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payment_code_classification.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number, payment_code\nFROM (\n    SELECT    registration_number,\n              card_issuer,\n              merchant_number,\n              CASE\n                  WHEN   bccard IS NOT NULL THEN bccard.payment_code\n                  WHEN   shinhancard IS NOT NULL THEN shinhancard.payment_code\n                  WHEN   hyundaicard IS NOT NULL THEN hyundaicard.payment_code\n                  ELSE   null\n              END AS payment_code\n    FROM      merged\n)\nWHERE     payment_code is not null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'payment_code_classification.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number, payment_code.*\nFROM      merged_classification\nJOIN      payment_code\nON        merged_classification.payment_code = payment_code.category_code\n'}, 'role': 'process', 'type': 'sql'}]"
1471,process:::payment_code_classification:::payment_code_classification,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=payment_code,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'payment_code_classification.json', 'options': {'sql': 'SELECT    registration_number, card_issuer, merchant_number, payment_code.*\nFROM      merged_classification\nJOIN      payment_code\nON        merged_classification.payment_code = payment_code.category_code\n'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'payment_code_classification.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=classification/name=payment_code'}, 'role': 'sink', 'type': 'file'}]"
1472,process:::add_join_field:::cashnote_user_stats_es_sink,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'cashnote_user_stat_es_sink.json', 'options': {'sql': ""  SELECT\n            named_struct(\n                'name', 'stat',\n                'parent', target_id\n            ) AS join_field,\n            *\n  FROM      cashnote_user_stats\n  WHERE     user_id IS NOT NULL""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
1473,process:::purchases_without_cancel:::match_to_purchases,process:::merged_purchases:::match_to_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'match_to_purchases.json', 'options': {'sql': ""SELECT    purchased.*,\n          CAST(null AS TIMESTAMP) AS purchase_canceled_at,\n          'purchased' AS type\nFROM      purchase_candidates\nWHERE     canceled.business_id is null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'match_to_purchases.json', 'options': {'sql': 'SELECT  * FROM purchases_without_cancel\nUNION ALL\nSELECT  * FROM purchases_with_cancel'}, 'role': 'process', 'type': 'sql'}]"
1474,process:::purchases_with_cancel:::match_to_purchases,process:::merged_purchases:::match_to_purchases,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'match_to_purchases.json', 'options': {'sql': ""SELECT    purchased.*,\n          canceled.purchased_at AS purchase_canceled_at,\n          'purchase_cancel' AS type\nFROM      purchase_candidates\nWHERE     purchased.business_id is not null AND canceled.business_id is not null""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'match_to_purchases.json', 'options': {'sql': 'SELECT  * FROM purchases_without_cancel\nUNION ALL\nSELECT  * FROM purchases_with_cancel'}, 'role': 'process', 'type': 'sql'}]"
1475,process:::merged_purchases:::match_to_purchases,s3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/purchases_current,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'match_to_purchases.json', 'options': {'sql': 'SELECT  * FROM purchases_without_cancel\nUNION ALL\nSELECT  * FROM purchases_with_cancel'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_transaction_candidates.json', 'options': {'paths': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/purchases_current', 'format': 'parquet'}, 'role': 'source', 'type': 'file'}, {'filename': 'match_to_purchases.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-staging/raw/etl/snowdon/card_sales/matches/merged/purchases_current', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
1476,pos_payments_raw_v2,process:::pos_payments_distinct_v2:::dedup_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_payments_v2.json', 'options': {'class': 'com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource', 'format': 'json', 'paths': 's3://kcd-de-production/raw/catalog_v2/raw/tb=posetl_payments_v2/created_at_date=2021-01-28,s3://kcd-de-production/raw/catalog_v2/raw/tb=posetl_payments_v2/created_at_date=2021-01-27,s3://kcd-de-production/raw/catalog_v2/raw/tb=posetl_payments_v2/created_at_date=2021-01-26', 'partition_keys': 'created_at_date,created_at_hour', 'mergeSchema': 'true'}, 'role': 'source', 'type': 'custom'}]","[{'filename': 'dedup_payments_v2.json', 'options': {'sql': 'SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  card_number,\n  client_id,\n  idx,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  timestamp,\n  CAST(null AS int) AS visit_order,\n  CAST(created_at_date as string) AS created_at_date,\n  paid_at_timestamp AS transacted_at,\n  CAST(to_date(paid_at_timestamp, \'yyyy-MM-dd\') AS string) AS transacted_at_date\nFROM    (\n  SELECT\n    *,\n    COALESCE(\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd\'T\'HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"")\n    ) AS paid_at_timestamp,\n    row_number() OVER (PARTITION BY payment_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_payments_raw_v2\n  WHERE\n    created_at_date >= \'2020-07-30\' AND created_at_date < \'2021-01-29\'\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]"
1477,process:::pos_payments_distinct_v2:::dedup_payments,process:::pos_payments_with_sales_card_number:::dedup_payments,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_payments_v2.json', 'options': {'sql': 'SELECT\n  _event_id,\n  `type`,\n  amount,\n  authorization_number,\n  bill_key,\n  bill_no,\n  uid,\n  uid_type,\n  card_number,\n  client_id,\n  idx,\n  issuer_name,\n  label_name,\n  merchant_number,\n  order_status,\n  paid_at,\n  payment_key,\n  pos_no,\n  pos_type,\n  service_name,\n  shop_code,\n  timestamp,\n  CAST(null AS int) AS visit_order,\n  CAST(created_at_date as string) AS created_at_date,\n  paid_at_timestamp AS transacted_at,\n  CAST(to_date(paid_at_timestamp, \'yyyy-MM-dd\') AS string) AS transacted_at_date\nFROM    (\n  SELECT\n    *,\n    COALESCE(\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd\'T\'HH:mm:ss""),\n      to_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"")\n    ) AS paid_at_timestamp,\n    row_number() OVER (PARTITION BY payment_key ORDER BY timestamp DESC) AS rank\n  FROM\n    pos_payments_raw_v2\n  WHERE\n    created_at_date >= \'2020-07-30\' AND created_at_date < \'2021-01-29\'\n)\nWHERE rank = 1'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'dedup_payments_v2.json', 'options': {'sql': ""SELECT\n   p._event_id,\n   p.`type`,\n   p.amount,\n   p.authorization_number,\n   p.bill_key,\n   p.bill_no,\n   p.uid,\n   p.uid_type,\n   COALESCE(c.masked_card_number, p.card_number) as card_number,\n   p.client_id,\n   p.idx,\n   p.issuer_name,\n   p.label_name,\n   p.merchant_number,\n   p.order_status,\n   p.paid_at,\n   p.payment_key,\n   p.pos_no,\n   p.pos_type,\n   p.service_name,\n   p.shop_code,\n   p.timestamp,\n   p.visit_order,\n   p.created_at_date,\n   p.transacted_at,\n   p.transacted_at_date\n FROM\n   pos_payments_distinct_v2 p\n LEFT OUTER JOIN card_sales_transactions c\n   ON c.authorization_number = p.authorization_number\n   AND date_trunc('hour', c.transacted_at) = date_trunc('hour', p.transacted_at)\n   AND c.business_id = p.uid\n   AND p.uid_type = 'business_id'\n   AND c.amount = p.amount\n   AND c.created_at_date >= '2020-07-30' AND c.created_at_date < '2021-01-29'""}, 'role': 'process', 'type': 'sql'}]"
1478,process:::pos_payments_with_sales_card_number:::dedup_payments,s3://kcd-de-production/raw/etl/pos/pos_payments_v2,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'dedup_payments_v2.json', 'options': {'sql': ""SELECT\n   p._event_id,\n   p.`type`,\n   p.amount,\n   p.authorization_number,\n   p.bill_key,\n   p.bill_no,\n   p.uid,\n   p.uid_type,\n   COALESCE(c.masked_card_number, p.card_number) as card_number,\n   p.client_id,\n   p.idx,\n   p.issuer_name,\n   p.label_name,\n   p.merchant_number,\n   p.order_status,\n   p.paid_at,\n   p.payment_key,\n   p.pos_no,\n   p.pos_type,\n   p.service_name,\n   p.shop_code,\n   p.timestamp,\n   p.visit_order,\n   p.created_at_date,\n   p.transacted_at,\n   p.transacted_at_date\n FROM\n   pos_payments_distinct_v2 p\n LEFT OUTER JOIN card_sales_transactions c\n   ON c.authorization_number = p.authorization_number\n   AND date_trunc('hour', c.transacted_at) = date_trunc('hour', p.transacted_at)\n   AND c.business_id = p.uid\n   AND p.uid_type = 'business_id'\n   AND c.amount = p.amount\n   AND c.created_at_date >= '2020-07-30' AND c.created_at_date < '2021-01-29'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental_v2.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/pos/pos_payments_v2'}, 'role': 'source', 'type': 'file'}, {'filename': 'dedup_payments_v2.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/pos/pos_payments_v2', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
1479,process:::store_info_with_ts:::store_info_sink,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'store_info_sink.json', 'options': {'sql': ""  SELECT\n            to_timestamp('2021-01-24', 'yyyy-MM-dd') AS timestamp,\n            *\n  FROM      store_info""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
1480,process:::delivery_app_orders:::delivery_app_orders_stat,process:::hourly_delivery_apps_order_stats:::delivery_app_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    *\nFROM      delivery_app_orders_src\nWHERE     created_at_date >= ''\nAND       created_at_date < ''\nAND       closed""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('hour', ordered_at) AS time,\n          'day_hour' AS time_unit,\n          SUM(order_amount) AS amount_sum,\n          SUM(IF (app_name = 'baemin', order_amount, 0)) AS baemin_amount_sum,\n          SUM(IF (app_name = 'baedaltong', order_amount, 0)) AS baedaltong_amount_sum,\n          SUM(IF (app_name = 'yogiyo', order_amount, 0)) AS yogiyo_amount_sum,\n          SUM(IF (paid_online, order_amount, 0)) AS online_amount_sum,\n          SUM(IF (paid_online and app_name = 'baemin', order_amount, 0)) AS baemin_online_amount_sum,\n          SUM(IF (paid_online and app_name = 'baedaltong', order_amount, 0)) AS baedaltong_online_amount_sum,\n          SUM(IF (paid_online and app_name = 'yogiyo', order_amount, 0)) AS yogiyo_online_amount_sum,\n          SUM(IF (paid_offline, order_amount, 0)) AS offline_amount_sum,\n          SUM(IF (paid_offline and app_name = 'baemin', order_amount, 0)) AS baemin_offline_amount_sum,\n          SUM(IF (paid_offline and app_name = 'baedaltong', order_amount, 0)) AS baedaltong_offline_amount_sum,\n          SUM(IF (paid_offline and app_name = 'yogiyo', order_amount, 0)) AS yogiyo_offline_amount_sum,\n          COUNT(*) AS order_count,\n          SUM(IF (app_name = 'baemin', 1, 0)) AS baemin_order_count,\n          SUM(IF (app_name = 'baedaltong', 1, 0)) AS baedaltong_order_count,\n          SUM(IF (app_name = 'yogiyo', 1, 0)) AS yogiyo_order_count,\n          SUM(IF (paid_online, 1, 0)) AS online_order_count,\n          SUM(IF (paid_online and app_name = 'baemin', 1, 0)) AS baemin_online_order_count,\n          SUM(IF (paid_online and app_name = 'baedaltong', 1, 0)) AS baedaltong_online_order_count,\n          SUM(IF (paid_online and app_name = 'yogiyo', 1, 0)) AS yogiyo_online_order_count,\n          SUM(IF (paid_offline, 1, 0)) AS offline_order_count,\n          SUM(IF (paid_offline and app_name = 'baemin', 1, 0)) AS baemin_offline_order_count,\n          SUM(IF (paid_offline and app_name = 'baedaltong', 1, 0)) AS baedaltong_offline_order_count,\n          SUM(IF (paid_offline and app_name = 'yogiyo', 1, 0)) AS yogiyo_offline_order_count\nFROM      delivery_app_orders\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]"
1481,process:::hourly_delivery_apps_order_stats:::delivery_app_orders_stat,process:::daily_delivery_apps_order_stats:::delivery_app_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('hour', ordered_at) AS time,\n          'day_hour' AS time_unit,\n          SUM(order_amount) AS amount_sum,\n          SUM(IF (app_name = 'baemin', order_amount, 0)) AS baemin_amount_sum,\n          SUM(IF (app_name = 'baedaltong', order_amount, 0)) AS baedaltong_amount_sum,\n          SUM(IF (app_name = 'yogiyo', order_amount, 0)) AS yogiyo_amount_sum,\n          SUM(IF (paid_online, order_amount, 0)) AS online_amount_sum,\n          SUM(IF (paid_online and app_name = 'baemin', order_amount, 0)) AS baemin_online_amount_sum,\n          SUM(IF (paid_online and app_name = 'baedaltong', order_amount, 0)) AS baedaltong_online_amount_sum,\n          SUM(IF (paid_online and app_name = 'yogiyo', order_amount, 0)) AS yogiyo_online_amount_sum,\n          SUM(IF (paid_offline, order_amount, 0)) AS offline_amount_sum,\n          SUM(IF (paid_offline and app_name = 'baemin', order_amount, 0)) AS baemin_offline_amount_sum,\n          SUM(IF (paid_offline and app_name = 'baedaltong', order_amount, 0)) AS baedaltong_offline_amount_sum,\n          SUM(IF (paid_offline and app_name = 'yogiyo', order_amount, 0)) AS yogiyo_offline_amount_sum,\n          COUNT(*) AS order_count,\n          SUM(IF (app_name = 'baemin', 1, 0)) AS baemin_order_count,\n          SUM(IF (app_name = 'baedaltong', 1, 0)) AS baedaltong_order_count,\n          SUM(IF (app_name = 'yogiyo', 1, 0)) AS yogiyo_order_count,\n          SUM(IF (paid_online, 1, 0)) AS online_order_count,\n          SUM(IF (paid_online and app_name = 'baemin', 1, 0)) AS baemin_online_order_count,\n          SUM(IF (paid_online and app_name = 'baedaltong', 1, 0)) AS baedaltong_online_order_count,\n          SUM(IF (paid_online and app_name = 'yogiyo', 1, 0)) AS yogiyo_online_order_count,\n          SUM(IF (paid_offline, 1, 0)) AS offline_order_count,\n          SUM(IF (paid_offline and app_name = 'baemin', 1, 0)) AS baemin_offline_order_count,\n          SUM(IF (paid_offline and app_name = 'baedaltong', 1, 0)) AS baedaltong_offline_order_count,\n          SUM(IF (paid_offline and app_name = 'yogiyo', 1, 0)) AS yogiyo_offline_order_count\nFROM      delivery_app_orders\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('day', time) AS time,\n          'day' AS time_unit,\n          SUM(amount_sum) AS amount_sum,\n          SUM(baemin_amount_sum) AS baemin_amount_sum,\n          SUM(baedaltong_amount_sum) AS baedaltong_amount_sum,\n          SUM(yogiyo_amount_sum) AS yogiyo_amount_sum,\n          SUM(online_amount_sum) AS online_amount_sum,\n          SUM(baemin_online_amount_sum) AS baemin_online_amount_sum,\n          SUM(baedaltong_online_amount_sum) AS baedaltong_online_amount_sum,\n          SUM(yogiyo_online_amount_sum) AS yogiyo_online_amount_sum,\n          SUM(offline_amount_sum) AS offline_amount_sum,\n          SUM(baemin_offline_amount_sum) AS baemin_offline_amount_sum,\n          SUM(baedaltong_offline_amount_sum) AS baedaltong_offline_amount_sum,\n          SUM(yogiyo_offline_amount_sum) AS yogiyo_offline_amount_sum,\n          SUM(order_count) AS order_count,\n          SUM(baemin_order_count) AS baemin_order_count,\n          SUM(baedaltong_order_count) AS baedaltong_order_count,\n          SUM(yogiyo_order_count) AS yogiyo_order_count,\n          SUM(online_order_count) AS online_order_count,\n          SUM(baemin_online_order_count) AS baemin_online_order_count,\n          SUM(baedaltong_online_order_count) AS baedaltong_online_order_count,\n          SUM(yogiyo_online_order_count) AS yogiyo_online_order_count,\n          SUM(offline_order_count) AS offline_order_count,\n          SUM(baemin_offline_order_count) AS baemin_offline_order_count,\n          SUM(baedaltong_offline_order_count) AS baedaltong_offline_order_count,\n          SUM(yogiyo_offline_order_count) AS yogiyo_offline_order_count\nFROM      hourly_delivery_apps_order_stats\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]"
1482,process:::hourly_delivery_apps_order_stats:::delivery_app_orders_stat,process:::delivery_app_orders_stat:::delivery_app_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('hour', ordered_at) AS time,\n          'day_hour' AS time_unit,\n          SUM(order_amount) AS amount_sum,\n          SUM(IF (app_name = 'baemin', order_amount, 0)) AS baemin_amount_sum,\n          SUM(IF (app_name = 'baedaltong', order_amount, 0)) AS baedaltong_amount_sum,\n          SUM(IF (app_name = 'yogiyo', order_amount, 0)) AS yogiyo_amount_sum,\n          SUM(IF (paid_online, order_amount, 0)) AS online_amount_sum,\n          SUM(IF (paid_online and app_name = 'baemin', order_amount, 0)) AS baemin_online_amount_sum,\n          SUM(IF (paid_online and app_name = 'baedaltong', order_amount, 0)) AS baedaltong_online_amount_sum,\n          SUM(IF (paid_online and app_name = 'yogiyo', order_amount, 0)) AS yogiyo_online_amount_sum,\n          SUM(IF (paid_offline, order_amount, 0)) AS offline_amount_sum,\n          SUM(IF (paid_offline and app_name = 'baemin', order_amount, 0)) AS baemin_offline_amount_sum,\n          SUM(IF (paid_offline and app_name = 'baedaltong', order_amount, 0)) AS baedaltong_offline_amount_sum,\n          SUM(IF (paid_offline and app_name = 'yogiyo', order_amount, 0)) AS yogiyo_offline_amount_sum,\n          COUNT(*) AS order_count,\n          SUM(IF (app_name = 'baemin', 1, 0)) AS baemin_order_count,\n          SUM(IF (app_name = 'baedaltong', 1, 0)) AS baedaltong_order_count,\n          SUM(IF (app_name = 'yogiyo', 1, 0)) AS yogiyo_order_count,\n          SUM(IF (paid_online, 1, 0)) AS online_order_count,\n          SUM(IF (paid_online and app_name = 'baemin', 1, 0)) AS baemin_online_order_count,\n          SUM(IF (paid_online and app_name = 'baedaltong', 1, 0)) AS baedaltong_online_order_count,\n          SUM(IF (paid_online and app_name = 'yogiyo', 1, 0)) AS yogiyo_online_order_count,\n          SUM(IF (paid_offline, 1, 0)) AS offline_order_count,\n          SUM(IF (paid_offline and app_name = 'baemin', 1, 0)) AS baemin_offline_order_count,\n          SUM(IF (paid_offline and app_name = 'baedaltong', 1, 0)) AS baedaltong_offline_order_count,\n          SUM(IF (paid_offline and app_name = 'yogiyo', 1, 0)) AS yogiyo_offline_order_count\nFROM      delivery_app_orders\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': 'SELECT * FROM hourly_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM daily_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM weekly_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM monthly_delivery_apps_order_stats'}, 'role': 'process', 'type': 'sql'}]"
1483,process:::daily_delivery_apps_order_stats:::delivery_app_orders_stat,process:::weekly_delivery_apps_order_stats:::delivery_app_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('day', time) AS time,\n          'day' AS time_unit,\n          SUM(amount_sum) AS amount_sum,\n          SUM(baemin_amount_sum) AS baemin_amount_sum,\n          SUM(baedaltong_amount_sum) AS baedaltong_amount_sum,\n          SUM(yogiyo_amount_sum) AS yogiyo_amount_sum,\n          SUM(online_amount_sum) AS online_amount_sum,\n          SUM(baemin_online_amount_sum) AS baemin_online_amount_sum,\n          SUM(baedaltong_online_amount_sum) AS baedaltong_online_amount_sum,\n          SUM(yogiyo_online_amount_sum) AS yogiyo_online_amount_sum,\n          SUM(offline_amount_sum) AS offline_amount_sum,\n          SUM(baemin_offline_amount_sum) AS baemin_offline_amount_sum,\n          SUM(baedaltong_offline_amount_sum) AS baedaltong_offline_amount_sum,\n          SUM(yogiyo_offline_amount_sum) AS yogiyo_offline_amount_sum,\n          SUM(order_count) AS order_count,\n          SUM(baemin_order_count) AS baemin_order_count,\n          SUM(baedaltong_order_count) AS baedaltong_order_count,\n          SUM(yogiyo_order_count) AS yogiyo_order_count,\n          SUM(online_order_count) AS online_order_count,\n          SUM(baemin_online_order_count) AS baemin_online_order_count,\n          SUM(baedaltong_online_order_count) AS baedaltong_online_order_count,\n          SUM(yogiyo_online_order_count) AS yogiyo_online_order_count,\n          SUM(offline_order_count) AS offline_order_count,\n          SUM(baemin_offline_order_count) AS baemin_offline_order_count,\n          SUM(baedaltong_offline_order_count) AS baedaltong_offline_order_count,\n          SUM(yogiyo_offline_order_count) AS yogiyo_offline_order_count\nFROM      hourly_delivery_apps_order_stats\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('week', time) AS time,\n          'week' AS time_unit,\n          SUM(amount_sum) AS amount_sum,\n          SUM(baemin_amount_sum) AS baemin_amount_sum,\n          SUM(baedaltong_amount_sum) AS baedaltong_amount_sum,\n          SUM(yogiyo_amount_sum) AS yogiyo_amount_sum,\n          SUM(online_amount_sum) AS online_amount_sum,\n          SUM(baemin_online_amount_sum) AS baemin_online_amount_sum,\n          SUM(baedaltong_online_amount_sum) AS baedaltong_online_amount_sum,\n          SUM(yogiyo_online_amount_sum) AS yogiyo_online_amount_sum,\n          SUM(offline_amount_sum) AS offline_amount_sum,\n          SUM(baemin_offline_amount_sum) AS baemin_offline_amount_sum,\n          SUM(baedaltong_offline_amount_sum) AS baedaltong_offline_amount_sum,\n          SUM(yogiyo_offline_amount_sum) AS yogiyo_offline_amount_sum,\n          SUM(order_count) AS order_count,\n          SUM(baemin_order_count) AS baemin_order_count,\n          SUM(baedaltong_order_count) AS baedaltong_order_count,\n          SUM(yogiyo_order_count) AS yogiyo_order_count,\n          SUM(online_order_count) AS online_order_count,\n          SUM(baemin_online_order_count) AS baemin_online_order_count,\n          SUM(baedaltong_online_order_count) AS baedaltong_online_order_count,\n          SUM(yogiyo_online_order_count) AS yogiyo_online_order_count,\n          SUM(offline_order_count) AS offline_order_count,\n          SUM(baemin_offline_order_count) AS baemin_offline_order_count,\n          SUM(baedaltong_offline_order_count) AS baedaltong_offline_order_count,\n          SUM(yogiyo_offline_order_count) AS yogiyo_offline_order_count\nFROM      daily_delivery_apps_order_stats\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]"
1484,process:::daily_delivery_apps_order_stats:::delivery_app_orders_stat,process:::monthly_delivery_apps_order_stats:::delivery_app_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('day', time) AS time,\n          'day' AS time_unit,\n          SUM(amount_sum) AS amount_sum,\n          SUM(baemin_amount_sum) AS baemin_amount_sum,\n          SUM(baedaltong_amount_sum) AS baedaltong_amount_sum,\n          SUM(yogiyo_amount_sum) AS yogiyo_amount_sum,\n          SUM(online_amount_sum) AS online_amount_sum,\n          SUM(baemin_online_amount_sum) AS baemin_online_amount_sum,\n          SUM(baedaltong_online_amount_sum) AS baedaltong_online_amount_sum,\n          SUM(yogiyo_online_amount_sum) AS yogiyo_online_amount_sum,\n          SUM(offline_amount_sum) AS offline_amount_sum,\n          SUM(baemin_offline_amount_sum) AS baemin_offline_amount_sum,\n          SUM(baedaltong_offline_amount_sum) AS baedaltong_offline_amount_sum,\n          SUM(yogiyo_offline_amount_sum) AS yogiyo_offline_amount_sum,\n          SUM(order_count) AS order_count,\n          SUM(baemin_order_count) AS baemin_order_count,\n          SUM(baedaltong_order_count) AS baedaltong_order_count,\n          SUM(yogiyo_order_count) AS yogiyo_order_count,\n          SUM(online_order_count) AS online_order_count,\n          SUM(baemin_online_order_count) AS baemin_online_order_count,\n          SUM(baedaltong_online_order_count) AS baedaltong_online_order_count,\n          SUM(yogiyo_online_order_count) AS yogiyo_online_order_count,\n          SUM(offline_order_count) AS offline_order_count,\n          SUM(baemin_offline_order_count) AS baemin_offline_order_count,\n          SUM(baedaltong_offline_order_count) AS baedaltong_offline_order_count,\n          SUM(yogiyo_offline_order_count) AS yogiyo_offline_order_count\nFROM      hourly_delivery_apps_order_stats\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('month', time) AS time,\n          'month' AS time_unit,\n          SUM(amount_sum) AS amount_sum,\n          SUM(baemin_amount_sum) AS baemin_amount_sum,\n          SUM(baedaltong_amount_sum) AS baedaltong_amount_sum,\n          SUM(yogiyo_amount_sum) AS yogiyo_amount_sum,\n          SUM(online_amount_sum) AS online_amount_sum,\n          SUM(baemin_online_amount_sum) AS baemin_online_amount_sum,\n          SUM(baedaltong_online_amount_sum) AS baedaltong_online_amount_sum,\n          SUM(yogiyo_online_amount_sum) AS yogiyo_online_amount_sum,\n          SUM(offline_amount_sum) AS offline_amount_sum,\n          SUM(baemin_offline_amount_sum) AS baemin_offline_amount_sum,\n          SUM(baedaltong_offline_amount_sum) AS baedaltong_offline_amount_sum,\n          SUM(yogiyo_offline_amount_sum) AS yogiyo_offline_amount_sum,\n          SUM(order_count) AS order_count,\n          SUM(baemin_order_count) AS baemin_order_count,\n          SUM(baedaltong_order_count) AS baedaltong_order_count,\n          SUM(yogiyo_order_count) AS yogiyo_order_count,\n          SUM(online_order_count) AS online_order_count,\n          SUM(baemin_online_order_count) AS baemin_online_order_count,\n          SUM(baedaltong_online_order_count) AS baedaltong_online_order_count,\n          SUM(yogiyo_online_order_count) AS yogiyo_online_order_count,\n          SUM(offline_order_count) AS offline_order_count,\n          SUM(baemin_offline_order_count) AS baemin_offline_order_count,\n          SUM(baedaltong_offline_order_count) AS baedaltong_offline_order_count,\n          SUM(yogiyo_offline_order_count) AS yogiyo_offline_order_count\nFROM      daily_delivery_apps_order_stats\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]"
1485,process:::daily_delivery_apps_order_stats:::delivery_app_orders_stat,process:::delivery_app_orders_stat:::delivery_app_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('day', time) AS time,\n          'day' AS time_unit,\n          SUM(amount_sum) AS amount_sum,\n          SUM(baemin_amount_sum) AS baemin_amount_sum,\n          SUM(baedaltong_amount_sum) AS baedaltong_amount_sum,\n          SUM(yogiyo_amount_sum) AS yogiyo_amount_sum,\n          SUM(online_amount_sum) AS online_amount_sum,\n          SUM(baemin_online_amount_sum) AS baemin_online_amount_sum,\n          SUM(baedaltong_online_amount_sum) AS baedaltong_online_amount_sum,\n          SUM(yogiyo_online_amount_sum) AS yogiyo_online_amount_sum,\n          SUM(offline_amount_sum) AS offline_amount_sum,\n          SUM(baemin_offline_amount_sum) AS baemin_offline_amount_sum,\n          SUM(baedaltong_offline_amount_sum) AS baedaltong_offline_amount_sum,\n          SUM(yogiyo_offline_amount_sum) AS yogiyo_offline_amount_sum,\n          SUM(order_count) AS order_count,\n          SUM(baemin_order_count) AS baemin_order_count,\n          SUM(baedaltong_order_count) AS baedaltong_order_count,\n          SUM(yogiyo_order_count) AS yogiyo_order_count,\n          SUM(online_order_count) AS online_order_count,\n          SUM(baemin_online_order_count) AS baemin_online_order_count,\n          SUM(baedaltong_online_order_count) AS baedaltong_online_order_count,\n          SUM(yogiyo_online_order_count) AS yogiyo_online_order_count,\n          SUM(offline_order_count) AS offline_order_count,\n          SUM(baemin_offline_order_count) AS baemin_offline_order_count,\n          SUM(baedaltong_offline_order_count) AS baedaltong_offline_order_count,\n          SUM(yogiyo_offline_order_count) AS yogiyo_offline_order_count\nFROM      hourly_delivery_apps_order_stats\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': 'SELECT * FROM hourly_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM daily_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM weekly_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM monthly_delivery_apps_order_stats'}, 'role': 'process', 'type': 'sql'}]"
1486,process:::weekly_delivery_apps_order_stats:::delivery_app_orders_stat,process:::delivery_app_orders_stat:::delivery_app_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('week', time) AS time,\n          'week' AS time_unit,\n          SUM(amount_sum) AS amount_sum,\n          SUM(baemin_amount_sum) AS baemin_amount_sum,\n          SUM(baedaltong_amount_sum) AS baedaltong_amount_sum,\n          SUM(yogiyo_amount_sum) AS yogiyo_amount_sum,\n          SUM(online_amount_sum) AS online_amount_sum,\n          SUM(baemin_online_amount_sum) AS baemin_online_amount_sum,\n          SUM(baedaltong_online_amount_sum) AS baedaltong_online_amount_sum,\n          SUM(yogiyo_online_amount_sum) AS yogiyo_online_amount_sum,\n          SUM(offline_amount_sum) AS offline_amount_sum,\n          SUM(baemin_offline_amount_sum) AS baemin_offline_amount_sum,\n          SUM(baedaltong_offline_amount_sum) AS baedaltong_offline_amount_sum,\n          SUM(yogiyo_offline_amount_sum) AS yogiyo_offline_amount_sum,\n          SUM(order_count) AS order_count,\n          SUM(baemin_order_count) AS baemin_order_count,\n          SUM(baedaltong_order_count) AS baedaltong_order_count,\n          SUM(yogiyo_order_count) AS yogiyo_order_count,\n          SUM(online_order_count) AS online_order_count,\n          SUM(baemin_online_order_count) AS baemin_online_order_count,\n          SUM(baedaltong_online_order_count) AS baedaltong_online_order_count,\n          SUM(yogiyo_online_order_count) AS yogiyo_online_order_count,\n          SUM(offline_order_count) AS offline_order_count,\n          SUM(baemin_offline_order_count) AS baemin_offline_order_count,\n          SUM(baedaltong_offline_order_count) AS baedaltong_offline_order_count,\n          SUM(yogiyo_offline_order_count) AS yogiyo_offline_order_count\nFROM      daily_delivery_apps_order_stats\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': 'SELECT * FROM hourly_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM daily_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM weekly_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM monthly_delivery_apps_order_stats'}, 'role': 'process', 'type': 'sql'}]"
1487,process:::monthly_delivery_apps_order_stats:::delivery_app_orders_stat,process:::delivery_app_orders_stat:::delivery_app_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': ""SELECT    business_id,\n          date_trunc('month', time) AS time,\n          'month' AS time_unit,\n          SUM(amount_sum) AS amount_sum,\n          SUM(baemin_amount_sum) AS baemin_amount_sum,\n          SUM(baedaltong_amount_sum) AS baedaltong_amount_sum,\n          SUM(yogiyo_amount_sum) AS yogiyo_amount_sum,\n          SUM(online_amount_sum) AS online_amount_sum,\n          SUM(baemin_online_amount_sum) AS baemin_online_amount_sum,\n          SUM(baedaltong_online_amount_sum) AS baedaltong_online_amount_sum,\n          SUM(yogiyo_online_amount_sum) AS yogiyo_online_amount_sum,\n          SUM(offline_amount_sum) AS offline_amount_sum,\n          SUM(baemin_offline_amount_sum) AS baemin_offline_amount_sum,\n          SUM(baedaltong_offline_amount_sum) AS baedaltong_offline_amount_sum,\n          SUM(yogiyo_offline_amount_sum) AS yogiyo_offline_amount_sum,\n          SUM(order_count) AS order_count,\n          SUM(baemin_order_count) AS baemin_order_count,\n          SUM(baedaltong_order_count) AS baedaltong_order_count,\n          SUM(yogiyo_order_count) AS yogiyo_order_count,\n          SUM(online_order_count) AS online_order_count,\n          SUM(baemin_online_order_count) AS baemin_online_order_count,\n          SUM(baedaltong_online_order_count) AS baedaltong_online_order_count,\n          SUM(yogiyo_online_order_count) AS yogiyo_online_order_count,\n          SUM(offline_order_count) AS offline_order_count,\n          SUM(baemin_offline_order_count) AS baemin_offline_order_count,\n          SUM(baedaltong_offline_order_count) AS baedaltong_offline_order_count,\n          SUM(yogiyo_offline_order_count) AS yogiyo_offline_order_count\nFROM      daily_delivery_apps_order_stats\nGROUP BY 1, 2""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': 'SELECT * FROM hourly_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM daily_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM weekly_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM monthly_delivery_apps_order_stats'}, 'role': 'process', 'type': 'sql'}]"
1488,process:::delivery_app_orders_stat:::delivery_app_orders_stat,s3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_orders_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'delivery_app_orders_stat.json', 'options': {'sql': 'SELECT * FROM hourly_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM daily_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM weekly_delivery_apps_order_stats\nUNION ALL\nSELECT * FROM monthly_delivery_apps_order_stats'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merge_stats_with_meta.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_orders_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'delivery_app_orders_stat.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/delivery_app/delivery_app_orders_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
1489,s3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions/,process:::result:::sales_amount_by_region,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'sales_amount_by_region.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/fact/time_unit=MONTH/id_type=business_id/subject=cardsales/name=sales_transactions/date_id=2020-12-01'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'sales_amount_by_region.json', 'options': {'sql': ""  SELECT\n          place_metric.*,\n          to_json(region.geometry) AS geometry\n  FROM (\n  SELECT\n          address.sido, address.sigungu, address.sigungu_code,\n          place_classification.depth_1_name AS kcd_classification_1_depth,\n          COUNT(distinct(business_id)) AS business_cnt,\n          SUM(amount_sum) AS amount_sum,\n          cast(AVG(amount_sum) as bigint) AS amount_avg,\n          SUM(tx_count) AS payment_cnt_sum,\n          cast(AVG(tx_count) as bigint) AS payment_cnt_avg,\n          cast(AVG(unit_price) as bigint) AS unit_price\n  FROM (\n      SELECT  meta.business_id,\n              address,\n              place_classification,\n              amount_sum,\n              tx_count,\n              (amount_sum / tx_count) AS unit_price\n      FROM (\n              SELECT  business_id,\n                      location.common AS address,\n                      classification.place AS place_classification\n              FROM business_meta\n              WHERE classification.place is not null\n              AND  location.common is not null\n      ) AS meta\n      JOIN card_sales_transactions\n      ON meta.business_id = card_sales_transactions.business_id\n  )\n  GROUP BY address.sido, address.sigungu, address.sigungu_code, place_classification.depth_1_name\n  HAVING business_cnt > 10\n  ) AS place_metric\n  LEFT OUTER JOIN (SELECT * FROM total_region WHERE region_type = 'sigungu') AS region\n  ON place_metric.sigungu_code = region.code\n  ORDER BY sigungu, business_cnt DESC""}, 'role': 'process', 'type': 'sql'}]"
1490,process:::result:::sales_amount_by_region,s3://kcd-de-production/data_request/bccard/sales_amount_by_region/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'sales_amount_by_region.json', 'options': {'sql': ""  SELECT\n          place_metric.*,\n          to_json(region.geometry) AS geometry\n  FROM (\n  SELECT\n          address.sido, address.sigungu, address.sigungu_code,\n          place_classification.depth_1_name AS kcd_classification_1_depth,\n          COUNT(distinct(business_id)) AS business_cnt,\n          SUM(amount_sum) AS amount_sum,\n          cast(AVG(amount_sum) as bigint) AS amount_avg,\n          SUM(tx_count) AS payment_cnt_sum,\n          cast(AVG(tx_count) as bigint) AS payment_cnt_avg,\n          cast(AVG(unit_price) as bigint) AS unit_price\n  FROM (\n      SELECT  meta.business_id,\n              address,\n              place_classification,\n              amount_sum,\n              tx_count,\n              (amount_sum / tx_count) AS unit_price\n      FROM (\n              SELECT  business_id,\n                      location.common AS address,\n                      classification.place AS place_classification\n              FROM business_meta\n              WHERE classification.place is not null\n              AND  location.common is not null\n      ) AS meta\n      JOIN card_sales_transactions\n      ON meta.business_id = card_sales_transactions.business_id\n  )\n  GROUP BY address.sido, address.sigungu, address.sigungu_code, place_classification.depth_1_name\n  HAVING business_cnt > 10\n  ) AS place_metric\n  LEFT OUTER JOIN (SELECT * FROM total_region WHERE region_type = 'sigungu') AS region\n  ON place_metric.sigungu_code = region.code\n  ORDER BY sigungu, business_cnt DESC""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'sales_amount_by_region.json', 'options': {'format': 'json', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_request/bccard/sales_amount_by_region/date_id=2020-12-01', 'numPartitions': '1'}, 'role': 'sink', 'type': 'file'}]"
1491,process:::card_purchases:::build_card_purchases_stat,process:::daily_card_purchases_stat:::build_card_purchases_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases_stat.json', 'options': {'sql': ""SELECT    *\nFROM      card_purchases_src\nWHERE     created_at_date >= '2021-01-21'\nAND       created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_purchases_stat.json', 'options': {'sql': ""SELECT    business_id,\n          card_id,\n          date_trunc('day', approved_at) AS time,\n          'day' AS time_unit,\n          SUM(amount) AS amount,\n          COUNT(1) AS count\nFROM      card_purchases\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]"
1492,process:::card_purchases:::build_card_purchases_stat,process:::monthly_card_purchases_stat:::build_card_purchases_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases_stat.json', 'options': {'sql': ""SELECT    *\nFROM      card_purchases_src\nWHERE     created_at_date >= '2021-01-21'\nAND       created_at_date < '2021-01-28'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_purchases_stat.json', 'options': {'sql': ""SELECT    business_id,\n          card_id,\n          date_trunc('month', approved_at) AS time,\n          'month' AS time_unit,\n          SUM(amount) AS amount,\n          COUNT(1) AS count\nFROM      card_purchases\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]"
1493,process:::daily_card_purchases_stat:::build_card_purchases_stat,process:::card_purchases_stat:::build_card_purchases_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases_stat.json', 'options': {'sql': ""SELECT    business_id,\n          card_id,\n          date_trunc('day', approved_at) AS time,\n          'day' AS time_unit,\n          SUM(amount) AS amount,\n          COUNT(1) AS count\nFROM      card_purchases\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_purchases_stat.json', 'options': {'sql': 'SELECT  s.*,\n        c.issuer,\n        c.name,\n        c.card_type\nFROM    (\n  SELECT    *\n  FROM      daily_card_purchases_stat\n\n  UNION ALL\n\n  SELECT    *\n  FROM      monthly_card_purchases_stat\n) s, cards c\nWHERE   s.card_id = c.id\nAND     s.business_id = c.business_id'}, 'role': 'process', 'type': 'sql'}]"
1494,process:::monthly_card_purchases_stat:::build_card_purchases_stat,process:::card_purchases_stat:::build_card_purchases_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases_stat.json', 'options': {'sql': ""SELECT    business_id,\n          card_id,\n          date_trunc('month', approved_at) AS time,\n          'month' AS time_unit,\n          SUM(amount) AS amount,\n          COUNT(1) AS count\nFROM      card_purchases\nGROUP BY  1, 2, 3""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_card_purchases_stat.json', 'options': {'sql': 'SELECT  s.*,\n        c.issuer,\n        c.name,\n        c.card_type\nFROM    (\n  SELECT    *\n  FROM      daily_card_purchases_stat\n\n  UNION ALL\n\n  SELECT    *\n  FROM      monthly_card_purchases_stat\n) s, cards c\nWHERE   s.card_id = c.id\nAND     s.business_id = c.business_id'}, 'role': 'process', 'type': 'sql'}]"
1495,process:::card_purchases_stat:::build_card_purchases_stat,s3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_card_purchases_stat.json', 'options': {'sql': 'SELECT  s.*,\n        c.issuer,\n        c.name,\n        c.card_type\nFROM    (\n  SELECT    *\n  FROM      daily_card_purchases_stat\n\n  UNION ALL\n\n  SELECT    *\n  FROM      monthly_card_purchases_stat\n) s, cards c\nWHERE   s.card_id = c.id\nAND     s.business_id = c.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'test_build_daily_report.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_daily_reports.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_card_purchases_stat.json', 'options': {'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/stat/snowdon/card/card_purchases_stat', 'format': 'parquet'}, 'role': 'sink', 'type': 'file'}]"
1496,process:::visits:::snapshot_business_stat,process:::snapshots:::snapshot_business_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'snapshot_business_stat.json', 'options': {'sql': ""SELECT  *,\n        CASE\n          WHEN visit_order = 1 THEN '1회'\n          WHEN visit_order = 2 THEN '2회'\n          WHEN visit_order >= 3 AND visit_order < 10 THEN '3~9회'\n          ELSE '10회이상'\n        END AS visit_count\nFROM    visit_with_duration""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'snapshot_business_stat.json', 'options': {'sql': ""SELECT  business_id, visit_count, month,\n        'month' AS type,\n        SUM(amount) AS total_amount,\n        COUNT(distinct encrypted_card_number) AS total_card_numbers,\n        COUNT(1) AS total_transaction_count\nFROM    (\n  SELECT  *, transacted_at_month AS month\n  FROM    visits\n)\nGROUP BY business_id, visit_count, month\n\nUNION ALL\n\nSELECT  business_id, visit_count, min(month) AS month,\n        '3_month' AS type,\n        SUM(amount) AS total_amount,\n        COUNT(distinct encrypted_card_number) AS total_card_numbers,\n        COUNT(1) AS total_transaction_count\nFROM    (\n  SELECT  *, transacted_at_month AS month\n  FROM    visits\n)\nWHERE   within_3_month = true\nGROUP BY business_id, visit_count\n\nUNION ALL\n\nSELECT  business_id, visit_count, min(month) AS month,\n        '6_month' AS type,\n        SUM(amount) AS total_amount,\n        COUNT(distinct encrypted_card_number) AS total_card_numbers,\n        COUNT(1) AS total_transaction_count\nFROM    (\n  SELECT  *, transacted_at_month AS month\n  FROM    visits\n)\nWHERE   within_6_month = true\nGROUP BY business_id, visit_count\n\nUNION ALL\n\nSELECT  business_id, visit_count, min(month) AS month,\n        '9_month' AS type,\n        SUM(amount) AS total_amount,\n        COUNT(distinct encrypted_card_number) AS total_card_numbers,\n        COUNT(1) AS total_transaction_count\nFROM    (\n  SELECT  *, transacted_at_month AS month\n  FROM    visits\n)\nWHERE   within_9_month = true\nGROUP BY business_id, visit_count\n\nUNION ALL\n\nSELECT  business_id, visit_count, min(month) AS month,\n        '12_month' AS type,\n        SUM(amount) AS total_amount,\n        COUNT(distinct encrypted_card_number) AS total_card_numbers,\n        COUNT(1) AS total_transaction_count\nFROM    (\n  SELECT  *, transacted_at_month AS month\n  FROM    visits\n)\nWHERE   within_12_month = true\nGROUP BY business_id, visit_count""}, 'role': 'process', 'type': 'sql'}]"
1497,process:::snapshots:::snapshot_business_stat,s3://kcd-de-production/service/market_area/analysis/snapshot_business_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'snapshot_business_stat.json', 'options': {'sql': ""SELECT  business_id, visit_count, month,\n        'month' AS type,\n        SUM(amount) AS total_amount,\n        COUNT(distinct encrypted_card_number) AS total_card_numbers,\n        COUNT(1) AS total_transaction_count\nFROM    (\n  SELECT  *, transacted_at_month AS month\n  FROM    visits\n)\nGROUP BY business_id, visit_count, month\n\nUNION ALL\n\nSELECT  business_id, visit_count, min(month) AS month,\n        '3_month' AS type,\n        SUM(amount) AS total_amount,\n        COUNT(distinct encrypted_card_number) AS total_card_numbers,\n        COUNT(1) AS total_transaction_count\nFROM    (\n  SELECT  *, transacted_at_month AS month\n  FROM    visits\n)\nWHERE   within_3_month = true\nGROUP BY business_id, visit_count\n\nUNION ALL\n\nSELECT  business_id, visit_count, min(month) AS month,\n        '6_month' AS type,\n        SUM(amount) AS total_amount,\n        COUNT(distinct encrypted_card_number) AS total_card_numbers,\n        COUNT(1) AS total_transaction_count\nFROM    (\n  SELECT  *, transacted_at_month AS month\n  FROM    visits\n)\nWHERE   within_6_month = true\nGROUP BY business_id, visit_count\n\nUNION ALL\n\nSELECT  business_id, visit_count, min(month) AS month,\n        '9_month' AS type,\n        SUM(amount) AS total_amount,\n        COUNT(distinct encrypted_card_number) AS total_card_numbers,\n        COUNT(1) AS total_transaction_count\nFROM    (\n  SELECT  *, transacted_at_month AS month\n  FROM    visits\n)\nWHERE   within_9_month = true\nGROUP BY business_id, visit_count\n\nUNION ALL\n\nSELECT  business_id, visit_count, min(month) AS month,\n        '12_month' AS type,\n        SUM(amount) AS total_amount,\n        COUNT(distinct encrypted_card_number) AS total_card_numbers,\n        COUNT(1) AS total_transaction_count\nFROM    (\n  SELECT  *, transacted_at_month AS month\n  FROM    visits\n)\nWHERE   within_12_month = true\nGROUP BY business_id, visit_count""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'store_info.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/snapshot_business_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'snapshot_business_stat.json', 'options': {'path': 's3://kcd-de-production/service/market_area/analysis/snapshot_business_stat', 'format': 'parquet', 'mode': 'overwrite', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}]"
1498,process:::kcd_places:::build_user_tags,process:::user_tags:::build_user_tags,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_tags.json', 'options': {'sql': ""  SELECT\n          CAST(address.business_id AS INT) AS business_id,\n          address.value AS address,\n          cate.value AS classification\n  FROM (\n      SELECT business_id, b_code AS value\n      FROM location\n      WHERE b_code is not null\n  ) AS address\n  JOIN (\n      SELECT business_id, concat(depth_1_name, '>', depth_2_name) AS value\n      FROM classification\n      WHERE depth_2_name is not null\n  ) AS cate\n  ON address.business_id = cate.business_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_user_tags.json', 'options': {'class': 'com.kcd.thrush.analysis.spark.tasks.BuildUserTagsProcess', 'places': 'kcd_places', 'transactions': 'snapshots'}, 'role': 'process', 'type': 'custom'}]"
1499,process:::user_tags:::build_user_tags,s3://kcd-de-production/service/market_area/analysis/user_tags,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_user_tags.json', 'options': {'class': 'com.kcd.thrush.analysis.spark.tasks.BuildUserTagsProcess', 'places': 'kcd_places', 'transactions': 'snapshots'}, 'role': 'process', 'type': 'custom'}]","[{'filename': 'aggregate_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/user_tags'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_user_tags.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/user_tags', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}, {'filename': 'address_classification_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/user_tags'}, 'role': 'source', 'type': 'file'}]"
1500,process:::hometax_business:::hometax,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=hometax,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'hometax.json', 'options': {'sql': ""SELECT\n          business_id,\n          name,\n          phone_number,\n          to_date(opened_at, 'yyyyMMdd') AS opend_at,\n          operation_status,\n          taxation_type,\n          created_at\nFROM      hometax_businesses_src""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'hometax_business_label.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=hometax'}, 'role': 'source', 'type': 'file'}, {'filename': 'hometax.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=hometax/name=hometax'}, 'role': 'sink', 'type': 'file'}]"
1501,process:::message_history:::message_send_stat,process:::joined:::message_send_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_send_stat.json', 'options': {'sql': ""SELECT\n        timestamp,\n        created_at_date AS date_id,\n        meta_campaign_id AS campaign_id,\n        meta_ad_group_id AS ad_group_id,\n        meta_creative_id AS creative_id,\n        meta_user_id AS user_id,\n        meta_business_id AS business_id,\n        meta_user_type AS user_type,\n        meta_type AS ad_group_type,\n        message_message_type AS message_type,\n        message_ad_flag AS ad_flag,\n        message_template_code AS template_code\nFROM (\n        SELECT  *,\n                row_number() OVER (PARTITION BY _event_id ORDER BY timestamp DESC) AS rank\n        FROM    send_log\n        WHERE   status = true\n        AND     meta_user_type = 'cashnote'\n        AND     nvl(meta_test_mode, false) = false\n        AND     nvl(meta_test_mode_skip_user, false) = false\n        AND     nvl(meta_test_mode_skip_frequency_cap, false) = false\n        AND     nvl(meta_test_mode_skip_ad_group, false) = false\n        AND     nvl(meta_test_mode_skip_send, false) = false\n)\nWHERE rank = 1""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_send_stat.json', 'options': {'sql': 'SELECT\n          message_history.*,\n          cashnote_user_meta.classification,\n          cashnote_user_meta.device_type,\n          age_band,\n          business_type,\n          location,\n          credential_types,\n          is_advanced_user,\n          is_paid_user,\n          regular_employees_count,\n          size_category\nFROM      message_history\nLEFT OUTER JOIN   cashnote_user_meta\nON        message_history.user_id = cashnote_user_meta.user_id\nAND       message_history.business_id = cashnote_user_meta.business_id'}, 'role': 'process', 'type': 'sql'}]"
1502,process:::joined:::message_send_stat,s3://kcd-de-production/data_cubes/fact/time_unit=DAY/name=message_send_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'message_send_stat.json', 'options': {'sql': 'SELECT\n          message_history.*,\n          cashnote_user_meta.classification,\n          cashnote_user_meta.device_type,\n          age_band,\n          business_type,\n          location,\n          credential_types,\n          is_advanced_user,\n          is_paid_user,\n          regular_employees_count,\n          size_category\nFROM      message_history\nLEFT OUTER JOIN   cashnote_user_meta\nON        message_history.user_id = cashnote_user_meta.user_id\nAND       message_history.business_id = cashnote_user_meta.business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'message_send_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/fact/time_unit=DAY/name=message_send_stat', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
1503,process:::pos_payments_distinct:::pos_add_visit_order,process:::pos_payments:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT\n  distinct(payment_key),\n  *\nFROM\n  pos_payments_raw\nWHERE\n  created_at_date >= '2018-09-23' AND created_at_date < '2020-09-23'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT\n  *,\n  cast(unix_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"") as timestamp) as transacted_at,\n  cast(to_date(CAST(unix_timestamp(paid_at, ""yyyy-MM-dd"") as timestamp), \'yyyy-MM-dd\') as string) as transacted_at_date\nFROM\n  pos_payments_distinct'}, 'role': 'process', 'type': 'sql'}]"
1504,process:::pos_payments:::pos_add_visit_order,process:::current_pos_payments:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT\n  *,\n  cast(unix_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"") as timestamp) as transacted_at,\n  cast(to_date(CAST(unix_timestamp(paid_at, ""yyyy-MM-dd"") as timestamp), \'yyyy-MM-dd\') as string) as transacted_at_date\nFROM\n  pos_payments_distinct'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments\nWHERE\n  created_at_date >= '2019-09-23' AND created_at_date < '2020-09-23'""}, 'role': 'process', 'type': 'sql'}]"
1505,process:::pos_payments:::pos_add_visit_order,process:::prev_pos_payments:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders.json', 'options': {'sql': 'SELECT\n  *,\n  cast(unix_timestamp(paid_at, ""yyyy-MM-dd HH:mm:ss.SSS"") as timestamp) as transacted_at,\n  cast(to_date(CAST(unix_timestamp(paid_at, ""yyyy-MM-dd"") as timestamp), \'yyyy-MM-dd\') as string) as transacted_at_date\nFROM\n  pos_payments_distinct'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments\nWHERE\n  created_at_date >= '2018-09-23' AND created_at_date < '2019-09-23'""}, 'role': 'process', 'type': 'sql'}]"
1506,process:::current_pos_payments:::pos_add_visit_order,process:::current_pos_payments_approved:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments\nWHERE\n  created_at_date >= '2019-09-23' AND created_at_date < '2020-09-23'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src\nWHERE\n  created_at_date >= '2019-10-23' AND created_at_date < '2020-10-23' AND\n  (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT *\nFROM   current_pos_payments\nWHERE  (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}]"
1507,process:::current_pos_payments:::pos_add_visit_order,process:::current_pos_payments_canceled:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments\nWHERE\n  created_at_date >= '2019-09-23' AND created_at_date < '2020-09-23'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src\nWHERE\n  created_at_date >= '2019-10-23' AND created_at_date < '2020-10-23' AND\n  NOT (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT *\nFROM   current_pos_payments\nWHERE  NOT (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}]"
1508,process:::prev_pos_payments:::pos_add_visit_order,process:::prev_pos_payments_approved:::pos_add_visit_order,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments\nWHERE\n  created_at_date >= '2018-09-23' AND created_at_date < '2019-09-23'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'pos_add_visit_orders_incremental.json', 'options': {'sql': ""SELECT\n  *\nFROM\n  pos_payments_distinct_src\nWHERE\n  created_at_date >= date_sub(to_date('2019-10-23'), 365) AND created_at_date < '2019-10-23' AND\n  (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}, {'filename': 'pos_add_visit_orders.json', 'options': {'sql': ""SELECT  *\nFROM    prev_pos_payments\nWHERE   (amount >= 0 AND card_number is not null AND card_number != '')""}, 'role': 'process', 'type': 'sql'}]"
1509,process:::latest_ids:::get_latest_ids,s3://kcd-de-production/misc/db_dump/,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'get_latest_ids.json', 'options': {'sql': ""\nSELECT  'report_logs' AS table, max(id) AS latest_id\nFROM    report_logs\nWHERE   created_at > (SELECT max(created_at_date) FROM report_logs)\n    \nUNION ALL\n\nSELECT  'hometax_card_purchases' AS table, max(id) AS latest_id\nFROM    hometax_card_purchases\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_purchases)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_purchases_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_purchases_invoices' AS table, max(id) AS latest_id\nFROM    hometax_purchases_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_purchases_invoices)\n    \nUNION ALL\n\nSELECT  'hometax_card_sales' AS table, max(id) AS latest_id\nFROM    hometax_card_sales\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_card_sales)\n    \nUNION ALL\n\nSELECT  'hometax_sales_cash_receipts' AS table, max(id) AS latest_id\nFROM    hometax_sales_cash_receipts\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_cash_receipts)\n    \nUNION ALL\n\nSELECT  'hometax_sales_invoices' AS table, max(id) AS latest_id\nFROM    hometax_sales_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM hometax_sales_invoices)\n    \nUNION ALL\n\nSELECT  'bank_transactions' AS table, max(id) AS latest_id\nFROM    bank_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM bank_transactions)\n    \nUNION ALL\n\nSELECT  'shinhancard_customer_statistics' AS table, max(id) AS latest_id\nFROM    shinhancard_customer_statistics\nWHERE   created_at > (SELECT max(created_at_date) FROM shinhancard_customer_statistics)\n    \nUNION ALL\n\nSELECT  'daily_reports' AS table, max(id) AS latest_id\nFROM    daily_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM daily_reports)\n    \nUNION ALL\n\nSELECT  'weekly_reports' AS table, max(id) AS latest_id\nFROM    weekly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM weekly_reports)\n    \nUNION ALL\n\nSELECT  'monthly_reports' AS table, max(id) AS latest_id\nFROM    monthly_reports\nWHERE   created_at > (SELECT max(created_at_date) FROM monthly_reports)\n    \nUNION ALL\n\nSELECT  'place_comments' AS table, max(id) AS latest_id\nFROM    place_comments\nWHERE   created_at > (SELECT max(created_at_date) FROM place_comments)\n    \nUNION ALL\n\nSELECT  'place_reviews' AS table, max(id) AS latest_id\nFROM    place_reviews\nWHERE   created_at > (SELECT max(created_at_date) FROM place_reviews)\n    \nUNION ALL\n\nSELECT  'baemin_payments' AS table, max(id) AS latest_id\nFROM    baemin_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_payments)\n    \nUNION ALL\n\nSELECT  'baemin_orders' AS table, max(id) AS latest_id\nFROM    baemin_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_orders)\n    \nUNION ALL\n\nSELECT  'baemin_sales_vats' AS table, max(id) AS latest_id\nFROM    baemin_sales_vats\nWHERE   created_at > (SELECT max(created_at_date) FROM baemin_sales_vats)\n    \nUNION ALL\n\nSELECT  'baedaltong_orders' AS table, max(id) AS latest_id\nFROM    baedaltong_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_orders)\n    \nUNION ALL\n\nSELECT  'baedaltong_payments' AS table, max(id) AS latest_id\nFROM    baedaltong_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM baedaltong_payments)\n    \nUNION ALL\n\nSELECT  'yogiyo_orders' AS table, max(id) AS latest_id\nFROM    yogiyo_orders\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_orders)\n    \nUNION ALL\n\nSELECT  'yogiyo_payments' AS table, max(id) AS latest_id\nFROM    yogiyo_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM yogiyo_payments)\n    \nUNION ALL\n\nSELECT  'card_purchases_approvals' AS table, max(id) AS latest_id\nFROM    card_purchases_approvals\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_approvals)\n    \nUNION ALL\n\nSELECT  'card_purchases_bills' AS table, max(id) AS latest_id\nFROM    card_purchases_bills\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_bills)\n    \nUNION ALL\n\nSELECT  'card_purchases_payments' AS table, max(id) AS latest_id\nFROM    card_purchases_payments\nWHERE   created_at > (SELECT max(created_at_date) FROM card_purchases_payments)\n    \nUNION ALL\n\nSELECT  'vendor_transactions' AS table, max(id) AS latest_id\nFROM    vendor_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_transactions)\n    \nUNION ALL\n\nSELECT  'vendor_invoices' AS table, max(id) AS latest_id\nFROM    vendor_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM vendor_invoices)\n    \nUNION ALL\n\nSELECT  'customer_transactions' AS table, max(id) AS latest_id\nFROM    customer_transactions\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_transactions)\n    \nUNION ALL\n\nSELECT  'customer_invoices' AS table, max(id) AS latest_id\nFROM    customer_invoices\nWHERE   created_at > (SELECT max(created_at_date) FROM customer_invoices)\n    ""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'get_latest_ids_goose.json', 'options': {'format': 'json', 'mode': 'overwrite', 'path': 's3://kcd-de-production/misc/db_dump/dump_latest_ids_goose', 'numPartitions': '1'}, 'role': 'sink', 'type': 'file'}, {'filename': 'get_latest_ids.json', 'options': {'format': 'json', 'mode': 'overwrite', 'path': 's3://kcd-de-production/misc/db_dump/dump_latest_ids_snowdon', 'numPartitions': '1'}, 'role': 'sink', 'type': 'file'}]"
1510,process:::naver_address:::merchant_location_sources,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=naver,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_location_sources.json', 'options': {'sql': ""SELECT\n        registration_number, card_issuer, merchant_number,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        registration_number, card_issuer, merchant_number,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n            latitude > 100,\n            CONCAT(longitude, ',', latitude),\n            CONCAT(latitude, ',', longitude)\n        ) AS location\n    FROM  naver\n    WHERE lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=naver'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=naver'}, 'role': 'sink', 'type': 'file'}]"
1511,process:::kakao_address:::merchant_location_sources,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=kakao,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_location_sources.json', 'options': {'sql': ""SELECT\n        registration_number, card_issuer, merchant_number,\n        source_address.address AS full_address,\n        source_address.location AS geo_point,\n        region.code AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\n\nFROM (\n    SELECT\n        registration_number, card_issuer, merchant_number,\n        get_addr_key(lot_address) AS addr_key,\n        lot_address AS address,\n        IF(\n              latitude > 100,\n              CONCAT(longitude, ',', latitude),\n              CONCAT(latitude, ',', longitude)\n          ) AS location\n    FROM  kakao\n    WHERE lot_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'b_dong'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=kakao'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=kakao'}, 'role': 'sink', 'type': 'file'}]"
1512,process:::merchant_address:::merchant_location_sources,s3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=card,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'merchant_location_sources.json', 'options': {'sql': ""SELECT\n        registration_number, card_issuer, merchant_number,\n        CAST(null as STRING) AS geo_point,\n        source_address.address AS full_address,\n        CAST(null as STRING) AS b_code,\n        region.sido,\n        region.sido_code,\n        region.sigungu,\n        region.sigungu_code,\n        region.dong,\n        region.mapping_codes AS h_codes\nFROM (\n        SELECT  registration_number, card_issuer, merchant_number,\n                get_addr_key_sigungu(merchant_address) AS addr_key,\n                merchant_address AS address\n        FROM  merchant_info\n        WHERE merchant_address is not null\n) AS source_address\nJOIN (\n    SELECT  *\n    FROM total_region\n    WHERE region_type = 'sigungu'\n) AS region\nON source_address.addr_key = region.full_address""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'merchant_location_common.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=card'}, 'role': 'source', 'type': 'file'}, {'filename': 'merchant_location_sources.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=merchant_number/subject=location/name=card'}, 'role': 'sink', 'type': 'file'}]"
1513,process:::template_with_answers:::acceptance_templates,process:::result:::acceptance_templates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'acceptance_templates.json', 'options': {'sql': ""  SELECT\n          business_id,\n          IF (template_type = 'poll' AND answer IS NOT NULL AND answer != '[]', t.id, null) AS complete_poll,\n          IF (template_type = 'poll', t.id, null) AS enter_poll,\n          IF (template_type = 'application', t.id, null) AS complete_application\n  FROM (\n      SELECT IF(step_layout = true, 'poll', 'application') AS template_type,\n              user_type, id, title\n      FROM templates\n      WHERE user_type = 'cashnote'\n  ) AS t\n  JOIN answers\n  ON t.id = answers.acceptanced_business_template_id""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'acceptance_templates.json', 'options': {'sql': 'SELECT\n          business_id,\n          collect_set(complete_poll) AS complete_polls,\n          collect_set(enter_poll) AS enter_polls,\n          collect_set(complete_application) AS complete_applications\nFROM      template_with_answers\nGROUP BY  business_id'}, 'role': 'process', 'type': 'sql'}]"
1514,process:::result:::acceptance_templates,s3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=acceptance_templates,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'acceptance_templates.json', 'options': {'sql': 'SELECT\n          business_id,\n          collect_set(complete_poll) AS complete_polls,\n          collect_set(enter_poll) AS enter_polls,\n          collect_set(complete_application) AS complete_applications\nFROM      template_with_answers\nGROUP BY  business_id'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'acceptance_templates.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_sources/dimension/id_type=business_id/subject=businesses/name=acceptance_templates'}, 'role': 'sink', 'type': 'file'}]"
1515,process:::txs:::build_session,s3://kcd-de-production/raw/etl/snowdon/places/similarity/grouped,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'pre_process.json', 'options': {'sql': ""SELECT  encrypted_card_number,\n        collect_list(\n          struct(\n            business_id,\n            transacted_at\n          )\n        ) AS histories\nFROM    transactions\nWHERE   encrypted_card_number is not null\nAND     approval_canceled_at IS NULL AND purchase_canceled_at IS NULL\nAND     created_at_date >= '2020-01-25'\nAND     created_at_date < '2021-01-23'\nAND     transacted_at >= '2020-01-25'\nAND     transacted_at < '2021-01-23'\nAND     (\n          (purchased_at is not null AND purchase_canceled_at is null) OR\n          (purchased_at is null AND approval_canceled_at is null)\n        )\nGROUP BY encrypted_card_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_sessions.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/places/similarity/grouped'}, 'role': 'source', 'type': 'file'}, {'filename': 'pre_process.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/raw/etl/snowdon/places/similarity/grouped'}, 'role': 'sink', 'type': 'file'}]"
1516,s3://kcd-data/raw/catalog_v2/raw/tb=owl_db_hometax_sales_cash_receipts,process:::hometax_sales_cash_receipts:::build_hometax_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=owl_db_hometax_sales_cash_receipts', 'read': '{""mode"":""DROPMALFORMED""}'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': ""SELECT  business_id,\n        sold_at,\n        authorization_number,\n        MAX(price) AS price,\n        MAX(vat) AS vat,\n        MAX(service) AS service,\n        MAX(amount) AS amount,\n        MAX(identification_method) AS identification_method,\n        MAX(receipt_type) AS receipt_type,\n        MAX(created_at) AS created_at,\n        MAX(updated_at) AS updated_at,\n        MAX(created_at_date) AS created_at_date\nFROM    (\n  SELECT  CAST(business_id AS int) AS business_id,\n          price,\n          vat,\n          CAST(service AS int) AS service,\n          amount,\n          authorization_number,\n          identification_method,\n          CAST(receipt_type AS int) AS receipt_type,\n          to_timestamp(sold_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS sold_at,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    hometax_sales_cash_receipts_src\n)\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'\nGROUP BY  business_id, sold_at, authorization_number""}, 'role': 'process', 'type': 'sql'}]"
1517,s3://kcd-data/raw/catalog_v2/raw/tb=owl_db_hometax_purchases_cash_receipts,process:::hometax_purchases_cash_receipts:::build_hometax_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'json', 'paths': 's3://kcd-data/raw/catalog_v2/raw/tb=owl_db_hometax_purchases_cash_receipts', 'read': '{""mode"":""DROPMALFORMED""}'}, 'role': 'source', 'type': 'file'}]","[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': ""SELECT  business_id,\n        purchased_at,\n        authorization_number,\n        MAX(price) AS price,\n        MAX(vat) AS vat,\n        MAX(service) AS service,\n        MAX(amount) AS amount,\n        MAX(tax_deductible) AS tax_deductible,\n        MAX(vendor_registration_number) AS vendor_registration_number,\n        MAX(vendor_business_name) AS vendor_business_name,\n        MAX(vendor_business_code) AS vendor_business_code,\n        MAX(identification_method) AS identification_method,\n        MAX(receipt_type) AS receipt_type,\n        MAX(created_at) AS created_at,\n        MAX(updated_at) AS updated_at,\n        MAX(vendor_address) AS vendor_address\nFROM    (\n  SELECT  CAST(business_id AS int) AS business_id,\n          to_timestamp(purchased_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS purchased_at,\n          authorization_number,\n          price,\n          vat,\n          service,\n          amount,\n          tax_deductible,\n          vendor_registration_number,\n          vendor_business_name,\n          vendor_business_code,\n          identification_method,\n          CAST(receipt_type AS int) receipt_type,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          CAST(null AS string) AS vendor_address,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    hometax_purchases_cash_receipts_src\n)\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'\nGROUP BY business_id, purchased_at, authorization_number""}, 'role': 'process', 'type': 'sql'}]"
1518,process:::hometax_sales_cash_receipts:::build_hometax_cash_receipts,process:::hometax_sales_cash_receipts_unique:::build_hometax_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': ""SELECT  business_id,\n        sold_at,\n        authorization_number,\n        MAX(price) AS price,\n        MAX(vat) AS vat,\n        MAX(service) AS service,\n        MAX(amount) AS amount,\n        MAX(identification_method) AS identification_method,\n        MAX(receipt_type) AS receipt_type,\n        MAX(created_at) AS created_at,\n        MAX(updated_at) AS updated_at,\n        MAX(created_at_date) AS created_at_date\nFROM    (\n  SELECT  CAST(business_id AS int) AS business_id,\n          price,\n          vat,\n          CAST(service AS int) AS service,\n          amount,\n          authorization_number,\n          identification_method,\n          CAST(receipt_type AS int) AS receipt_type,\n          to_timestamp(sold_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS sold_at,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    hometax_sales_cash_receipts_src\n)\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'\nGROUP BY  business_id, sold_at, authorization_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_cash_receipts\n  WHERE   is_sales\n) prev RIGHT OUTER JOIN hometax_sales_cash_receipts current\nON      (\n  prev.business_id = current.business_id AND\n  prev.sold_at = current.sold_at AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]"
1519,process:::prev_hometax_cash_receipts:::build_hometax_cash_receipts,process:::hometax_sales_cash_receipts_unique:::build_hometax_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': ""SELECT  *\nFROM    prev_hometax_cash_receipts_src\nWHERE   created_at_date >= '${PREV_MIN_DATE}'\nAND     created_at_date < '2021-01-21'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_cash_receipts\n  WHERE   is_sales\n) prev RIGHT OUTER JOIN hometax_sales_cash_receipts current\nON      (\n  prev.business_id = current.business_id AND\n  prev.sold_at = current.sold_at AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]"
1520,process:::prev_hometax_cash_receipts:::build_hometax_cash_receipts,process:::hometax_purchases_cash_receipts_unique:::build_hometax_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': ""SELECT  *\nFROM    prev_hometax_cash_receipts_src\nWHERE   created_at_date >= '${PREV_MIN_DATE}'\nAND     created_at_date < '2021-01-21'""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_cash_receipts\n  WHERE   is_purchases\n) prev RIGHT OUTER JOIN hometax_purchases_cash_receipts current\nON      (\n  prev.business_id = current.business_id AND\n  prev.purchased_at = current.purchased_at AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]"
1521,process:::hometax_sales_cash_receipts_unique:::build_hometax_cash_receipts,process:::hometax_cash_receipts:::build_hometax_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_cash_receipts\n  WHERE   is_sales\n) prev RIGHT OUTER JOIN hometax_sales_cash_receipts current\nON      (\n  prev.business_id = current.business_id AND\n  prev.sold_at = current.sold_at AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': ""SELECT  /*+BROADCAST(b) */\n        r.*,\n        b.id AS trader_business_id\nFROM    (\n  SELECT  business_id,\n          price,\n          IF (receipt_type  = 1, -vat, vat) AS vat,\n          service,\n          IF (receipt_type = 1, -amount, amount) AS amount,\n          authorization_number,\n          identification_method,\n          receipt_type,\n          created_at,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          updated_at,\n          receipt_type = 0 AS approved,\n          receipt_type = 1 AS canceled,\n          authorization_number like 'I7%' AS online,\n          true AS is_sales,\n          false AS is_purchases,\n          CAST(null AS timestamp) AS purchased_at,\n          sold_at,\n          CAST(null AS boolean) AS tax_deductible,\n          CAST(null AS string) AS vendor_registration_number,\n          CAST(null AS string) AS vendor_business_name,\n          CAST(null AS string) AS vendor_business_code,\n          CAST(null AS string) AS vendor_address\n  FROM    hometax_sales_cash_receipts_unique\n\n  UNION ALL\n\n  SELECT  business_id,\n          price,\n          IF (receipt_type  = 1, -vat, vat) AS vat,\n          service,\n          IF (receipt_type = 1, -amount, amount) AS amount,\n          authorization_number,\n          identification_method,\n          receipt_type,\n          created_at,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          updated_at,\n          receipt_type = 0 AS approved,\n          receipt_type = 1 AS canceled,\n          CAST(null AS boolean) AS online,\n          true AS is_sales,\n          false AS is_purchases,\n          purchased_at,\n          CAST(null AS timestamp) AS sold_at,\n          tax_deductible,\n          vendor_registration_number,\n          vendor_business_name,\n          vendor_business_code,\n          CAST(null AS string) AS vendor_address\n  FROM    hometax_purchases_cash_receipts_unique\n) r LEFT OUTER JOIN businesses b\nON (COALESCE(r.vendor_registration_number, 'none') = b.registration_number)""}, 'role': 'process', 'type': 'sql'}]"
1522,process:::hometax_purchases_cash_receipts:::build_hometax_cash_receipts,process:::hometax_purchases_cash_receipts_unique:::build_hometax_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': ""SELECT  business_id,\n        purchased_at,\n        authorization_number,\n        MAX(price) AS price,\n        MAX(vat) AS vat,\n        MAX(service) AS service,\n        MAX(amount) AS amount,\n        MAX(tax_deductible) AS tax_deductible,\n        MAX(vendor_registration_number) AS vendor_registration_number,\n        MAX(vendor_business_name) AS vendor_business_name,\n        MAX(vendor_business_code) AS vendor_business_code,\n        MAX(identification_method) AS identification_method,\n        MAX(receipt_type) AS receipt_type,\n        MAX(created_at) AS created_at,\n        MAX(updated_at) AS updated_at,\n        MAX(vendor_address) AS vendor_address\nFROM    (\n  SELECT  CAST(business_id AS int) AS business_id,\n          to_timestamp(purchased_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS purchased_at,\n          authorization_number,\n          price,\n          vat,\n          service,\n          amount,\n          tax_deductible,\n          vendor_registration_number,\n          vendor_business_name,\n          vendor_business_code,\n          identification_method,\n          CAST(receipt_type AS int) receipt_type,\n          to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS created_at,\n          to_timestamp(updated_at, 'yyyy-MM-dd HH:mm:ss.SSS') AS updated_at,\n          CAST(null AS string) AS vendor_address,\n          date_format(to_timestamp(created_at, 'yyyy-MM-dd HH:mm:ss.SSS'), 'yyyy-MM-dd') AS created_at_date\n  FROM    hometax_purchases_cash_receipts_src\n)\nWHERE   created_at_date >= '2021-01-21'\nAND     created_at_date < '2021-01-28'\nGROUP BY business_id, purchased_at, authorization_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_cash_receipts\n  WHERE   is_purchases\n) prev RIGHT OUTER JOIN hometax_purchases_cash_receipts current\nON      (\n  prev.business_id = current.business_id AND\n  prev.purchased_at = current.purchased_at AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]"
1523,process:::hometax_purchases_cash_receipts_unique:::build_hometax_cash_receipts,process:::hometax_cash_receipts:::build_hometax_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': 'SELECT  current.*\nFROM    (\n  SELECT  *\n  FROM    prev_hometax_cash_receipts\n  WHERE   is_purchases\n) prev RIGHT OUTER JOIN hometax_purchases_cash_receipts current\nON      (\n  prev.business_id = current.business_id AND\n  prev.purchased_at = current.purchased_at AND\n  prev.authorization_number = current.authorization_number\n)\nWHERE   prev.business_id is null'}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': ""SELECT  /*+BROADCAST(b) */\n        r.*,\n        b.id AS trader_business_id\nFROM    (\n  SELECT  business_id,\n          price,\n          IF (receipt_type  = 1, -vat, vat) AS vat,\n          service,\n          IF (receipt_type = 1, -amount, amount) AS amount,\n          authorization_number,\n          identification_method,\n          receipt_type,\n          created_at,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          updated_at,\n          receipt_type = 0 AS approved,\n          receipt_type = 1 AS canceled,\n          authorization_number like 'I7%' AS online,\n          true AS is_sales,\n          false AS is_purchases,\n          CAST(null AS timestamp) AS purchased_at,\n          sold_at,\n          CAST(null AS boolean) AS tax_deductible,\n          CAST(null AS string) AS vendor_registration_number,\n          CAST(null AS string) AS vendor_business_name,\n          CAST(null AS string) AS vendor_business_code,\n          CAST(null AS string) AS vendor_address\n  FROM    hometax_sales_cash_receipts_unique\n\n  UNION ALL\n\n  SELECT  business_id,\n          price,\n          IF (receipt_type  = 1, -vat, vat) AS vat,\n          service,\n          IF (receipt_type = 1, -amount, amount) AS amount,\n          authorization_number,\n          identification_method,\n          receipt_type,\n          created_at,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          updated_at,\n          receipt_type = 0 AS approved,\n          receipt_type = 1 AS canceled,\n          CAST(null AS boolean) AS online,\n          true AS is_sales,\n          false AS is_purchases,\n          purchased_at,\n          CAST(null AS timestamp) AS sold_at,\n          tax_deductible,\n          vendor_registration_number,\n          vendor_business_name,\n          vendor_business_code,\n          CAST(null AS string) AS vendor_address\n  FROM    hometax_purchases_cash_receipts_unique\n) r LEFT OUTER JOIN businesses b\nON (COALESCE(r.vendor_registration_number, 'none') = b.registration_number)""}, 'role': 'process', 'type': 'sql'}]"
1524,process:::hometax_cash_receipts:::build_hometax_cash_receipts,s3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'build_hometax_cash_receipts.json', 'options': {'sql': ""SELECT  /*+BROADCAST(b) */\n        r.*,\n        b.id AS trader_business_id\nFROM    (\n  SELECT  business_id,\n          price,\n          IF (receipt_type  = 1, -vat, vat) AS vat,\n          service,\n          IF (receipt_type = 1, -amount, amount) AS amount,\n          authorization_number,\n          identification_method,\n          receipt_type,\n          created_at,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          updated_at,\n          receipt_type = 0 AS approved,\n          receipt_type = 1 AS canceled,\n          authorization_number like 'I7%' AS online,\n          true AS is_sales,\n          false AS is_purchases,\n          CAST(null AS timestamp) AS purchased_at,\n          sold_at,\n          CAST(null AS boolean) AS tax_deductible,\n          CAST(null AS string) AS vendor_registration_number,\n          CAST(null AS string) AS vendor_business_name,\n          CAST(null AS string) AS vendor_business_code,\n          CAST(null AS string) AS vendor_address\n  FROM    hometax_sales_cash_receipts_unique\n\n  UNION ALL\n\n  SELECT  business_id,\n          price,\n          IF (receipt_type  = 1, -vat, vat) AS vat,\n          service,\n          IF (receipt_type = 1, -amount, amount) AS amount,\n          authorization_number,\n          identification_method,\n          receipt_type,\n          created_at,\n          date_format(created_at, 'yyyy-MM-dd') AS created_at_date,\n          updated_at,\n          receipt_type = 0 AS approved,\n          receipt_type = 1 AS canceled,\n          CAST(null AS boolean) AS online,\n          true AS is_sales,\n          false AS is_purchases,\n          purchased_at,\n          CAST(null AS timestamp) AS sold_at,\n          tax_deductible,\n          vendor_registration_number,\n          vendor_business_name,\n          vendor_business_code,\n          CAST(null AS string) AS vendor_address\n  FROM    hometax_purchases_cash_receipts_unique\n) r LEFT OUTER JOIN businesses b\nON (COALESCE(r.vendor_registration_number, 'none') = b.registration_number)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'build_hometax_stat.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts'}, 'role': 'source', 'type': 'file'}, {'filename': 'build_hometax_cash_receipts.json', 'options': {'mode': 'overwritePartitions', 'path': 's3://kcd-de-production/raw/etl/snowdon/hometax/hometax_cash_receipts', 'format': 'parquet', 'class': 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink', 'partitions': 'created_at_date', 'evenPartitions': 'true', 'numOfRecordPerFile': '4000000', 'sampleRatio': '0.1'}, 'role': 'sink', 'type': 'custom'}]"
1525,process:::formatted_conv:::conv_log_to_es,es_sink,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'conv_log_to_es.json', 'options': {'sql': ""    SELECT\n            'conversion' AS type,\n            cast(timestamp/1000 as timestamp) AS timestamp,\n            _event_id,\n            click_timestamp,\n            event_type,\n            campaign_id,\n            ad_group_id,\n            creative_id,\n            user_id,\n            sdk_name AS sdk_type,\n            conv_duration_millis,\n            diff_days,\n            true AS status\n    FROM    conv_log""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'send_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'market_info_sink.json', 'options': {'path': 'market_info-2021-01-01', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'doc_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'message_send_stat_es_sink.json', 'options': {'path': 'message_cube-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'click_log.json', 'options': {'path': 'message_history-2020-09', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'registration_number_meta_es_sink.json', 'options': {'path': 'registration_number_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'registration_number'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_user_meta_es_sink.json', 'options': {'path': 'paynote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'business_meta_es_sink.json', 'options': {'path': 'business_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'business_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'paynote_custom_set.json', 'options': {'path': 'paynote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'user_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'check_daily_reports.json', 'options': {'path': 'report_diff', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_meta_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_custom_set.json', 'options': {'path': 'cashnote', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'target_id', 'es.mapping.join': 'join_field', 'es.write.operation': 'upsert'}, 'role': 'sink', 'type': 'es'}, {'filename': 'cashnote_user_stat_es_sink.json', 'options': {'path': 'cashnote_user_cube-2021-01-29', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.join': 'join_field'}, 'role': 'sink', 'type': 'es'}, {'filename': 'store_info_sink.json', 'options': {'path': 'store_info-2021-01-24', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': 'public_id'}, 'role': 'sink', 'type': 'es'}, {'filename': 'conv_log_to_es.json', 'options': {'path': 'message_history-2020-10', 'es.nodes': 'https://vpc-dmp-es-prod-tw5nccwbgynfhq5ivdolhmaxsq.ap-northeast-2.es.amazonaws.com', 'es.index.auto.create': 'true', 'es.port': '443', 'es.batch.size.entries': '1000', 'es.nodes.wan.only': 'true', 'es.mapping.id': '_event_id'}, 'role': 'sink', 'type': 'es'}]"
1526,process:::aggr:::address_classification_stat,s3://kcd-de-production/service/market_area/analysis/address_classification_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'address_classification_stat.json', 'options': {'sql': ""SELECT\n   type,\n   min(month) AS month,\n   address,\n   classification,\n   approx_count_distinct(encrypted_card_number) AS user_cnt,\n   approx_count_distinct(business_id) AS business_cnt\nFROM user_tags\nWHERE type != 'month'\nGROUP BY type, address, classification\n\nUNION ALL\n\nSELECT\n   type,\n   month,\n   address,\n   classification,\n   approx_count_distinct(encrypted_card_number) AS user_cnt,\n   approx_count_distinct(business_id) AS business_cnt\nFROM user_tags\nWHERE type = 'month'\nGROUP BY type, month, address, classification""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'aggregate_user_tags.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/service/market_area/analysis/address_classification_stat'}, 'role': 'source', 'type': 'file'}, {'filename': 'address_classification_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/service/market_area/analysis/address_classification_stat', 'partitions': 'type'}, 'role': 'sink', 'type': 'file'}]"
1527,process:::merchant:::paynote_user_stat,process:::merged:::paynote_user_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_user_stat.json', 'options': {'sql': ""SELECT    registration_number, card_issuer, merchant_number,\n          named_struct(\n              'merchant', merchant.info.merchant,\n              'kakao', places.kakao.name,\n              'naver', places.naver.name\n          ) AS name,\n          classification,\n          location\nFROM      merchant_meta""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat.json', 'options': {'sql': ""SELECT\n          *,\n          array(\n            classification.depth_1_name,\n            CONCAT(classification.depth_1_name, '>', classification.depth_2_name),\n            CONCAT(classification.depth_1_name, '>', classification.depth_2_name, '>', classification.depth_3_name)\n          ) AS classification_names,\n          array(\n            location.sido,\n            CONCAT(location.sido, '>', location.sigungu),\n            CONCAT(location.sido, '>', location.sigungu, '>', location.dong)\n          ) AS location_names\nFROM (\n        SELECT\n                  date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n                  card_payments_stat.timestamp,\n                  card_payments_stat.user_id,\n                  card_payments_stat.registration_number,\n                  card_payments_stat.card_issuer,\n                  card_payments_stat.merchant_number,\n                  card_payments_stat.amount_sum AS card_payments_amount_sum,\n                  card_payments_stat.tx_count AS card_payments_tx_count,\n                  merchant.name,\n                  merchant.classification.kcd AS classification,\n                  merchant.location.common AS location\n        FROM      card_payments_stat\n        LEFT OUTER JOIN   merchant\n        ON        card_payments_stat.registration_number = merchant.registration_number\n        AND       card_payments_stat.card_issuer = merchant.card_issuer\n        AND       card_payments_stat.merchant_number = merchant.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
1528,process:::card_payments_stat:::paynote_user_stat,process:::merged:::paynote_user_stat,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_user_stat.json', 'options': {'sql': ""  SELECT\n          user_id, timestamp,\n          registration_number, card_issuer, merchant_number,\n          SUM(amount) AS amount_sum,\n          COUNT(1) AS tx_count\n  FROM (\n          SELECT\n                  user_id,\n                  date_trunc('MONTH', approved_at) AS timestamp,\n                  registration_number, card_issuer, merchant_number,\n                  amount\n          FROM    card_payments\n          WHERE   approved_at between '2019-01-01' AND '2021-01-29'\n          AND     card_issuer IS NOT NULL\n )\n GROUP BY user_id, timestamp, registration_number, card_issuer, merchant_number""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat.json', 'options': {'sql': ""SELECT\n          *,\n          array(\n            classification.depth_1_name,\n            CONCAT(classification.depth_1_name, '>', classification.depth_2_name),\n            CONCAT(classification.depth_1_name, '>', classification.depth_2_name, '>', classification.depth_3_name)\n          ) AS classification_names,\n          array(\n            location.sido,\n            CONCAT(location.sido, '>', location.sigungu),\n            CONCAT(location.sido, '>', location.sigungu, '>', location.dong)\n          ) AS location_names\nFROM (\n        SELECT\n                  date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n                  card_payments_stat.timestamp,\n                  card_payments_stat.user_id,\n                  card_payments_stat.registration_number,\n                  card_payments_stat.card_issuer,\n                  card_payments_stat.merchant_number,\n                  card_payments_stat.amount_sum AS card_payments_amount_sum,\n                  card_payments_stat.tx_count AS card_payments_tx_count,\n                  merchant.name,\n                  merchant.classification.kcd AS classification,\n                  merchant.location.common AS location\n        FROM      card_payments_stat\n        LEFT OUTER JOIN   merchant\n        ON        card_payments_stat.registration_number = merchant.registration_number\n        AND       card_payments_stat.card_issuer = merchant.card_issuer\n        AND       card_payments_stat.merchant_number = merchant.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]"
1529,process:::merged:::paynote_user_stat,s3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=paynote_user_stats,paynote_user_stat.json,paynote_user_stat,"[{'filename': 'paynote_user_stat.json', 'options': {'sql': ""SELECT\n          *,\n          array(\n            classification.depth_1_name,\n            CONCAT(classification.depth_1_name, '>', classification.depth_2_name),\n            CONCAT(classification.depth_1_name, '>', classification.depth_2_name, '>', classification.depth_3_name)\n          ) AS classification_names,\n          array(\n            location.sido,\n            CONCAT(location.sido, '>', location.sigungu),\n            CONCAT(location.sido, '>', location.sigungu, '>', location.dong)\n          ) AS location_names\nFROM (\n        SELECT\n                  date_format(timestamp, 'yyyy-MM-dd') AS date_id,\n                  card_payments_stat.timestamp,\n                  card_payments_stat.user_id,\n                  card_payments_stat.registration_number,\n                  card_payments_stat.card_issuer,\n                  card_payments_stat.merchant_number,\n                  card_payments_stat.amount_sum AS card_payments_amount_sum,\n                  card_payments_stat.tx_count AS card_payments_tx_count,\n                  merchant.name,\n                  merchant.classification.kcd AS classification,\n                  merchant.location.common AS location\n        FROM      card_payments_stat\n        LEFT OUTER JOIN   merchant\n        ON        card_payments_stat.registration_number = merchant.registration_number\n        AND       card_payments_stat.card_issuer = merchant.card_issuer\n        AND       card_payments_stat.merchant_number = merchant.merchant_number\n)""}, 'role': 'process', 'type': 'sql'}]","[{'filename': 'paynote_user_stat_es_sink.json', 'options': {'format': 'parquet', 'paths': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=paynote_user_stats'}, 'role': 'source', 'type': 'file'}, {'filename': 'paynote_user_stat.json', 'options': {'format': 'parquet', 'mode': 'overwrite', 'path': 's3://kcd-de-production/data_cubes/fact/time_unit=MONTH/name=paynote_user_stats', 'evenPartitions': 'true', 'partitions': 'date_id'}, 'role': 'sink', 'type': 'file'}]"
