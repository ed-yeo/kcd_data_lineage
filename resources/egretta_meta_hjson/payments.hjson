{
  name: payments
  udfs: []
  source:
  [
    {
      inputs: []
      name: credential_keys
      options:
      {
        paths: "s3://kcd-de-production/raw/db/snowdon/snapshot/latest/credential_keys"
        format: parquet
      }
      type: file
    }
    {
      inputs: []
      name: current_payments_raw
      options:
      {
        paths: "${PAYMENTS_PATH}"
        format: parquet
      }
      type: file
    }
    {
      inputs: []
      name: after_payments_raw
      options:
      {
        class: com.kcd.thrush.jobs.tasks.RecoverPartitionFileSource
        paths: "${AFTER_PAYMENTS_PATH}"
        format: parquet
        partition_keys: 'year,month,day,hour'
        log_leaf_file: 'true'
        mergeSchema: 'true'
        extraColumns: 'credential_key:string,scraping_type:string'
      }
      type: custom
    }
  ]
  process:
  [
    {
      name: current_payments
      inputs:
      [
        credential_keys
        current_payments_raw
      ]
      type: sql
      options:
      {
        sql:
          '''
            SELECT  CAST(a.business_id AS int) AS business_id,
                    k.uuid AS credential_key,
                    trim(issuer_name) AS issuer_name,
                    trim(merchant_number) AS merchant_number,
                    trim(bank_name) AS bank_name,
                    trim(account_number) AS account_number,
                    CAST(COALESCE(sales_count, 0) AS INT) AS sales_count,
                    CAST(null AS string) AS scraping_type,
                    CAST(COALESCE(reserved_amount, 0) AS BIGINT) AS reserved_amount,
                    CAST(COALESCE(etc_amount, 0) AS BIGINT) AS etc_amount,
                    CAST(COALESCE(sales_amount, 0) AS BIGINT) AS sales_amount,
                    CAST(COALESCE(received_amount, 0) AS BIGINT) AS received_amount,
                    CAST(COALESCE(vat_fee_amount, 0) AS BIGINT) AS vat_fee_amount,
                    received_at,
                    a.created_at,
                    a.updated_at
            FROM    current_payments_raw a INNER JOIN credential_keys k
            ON      a.business_id = k.business_id
          '''
      }
    }
    {
      name: after_payments
      inputs:
      [
        credential_keys
        after_payments_raw
      ]
      type: sql
      options:
      {
        sql:
          '''
            SELECT  CAST(a.business_id AS int) AS business_id,
                    COALESCE(a.credential_key, k.uuid) AS credential_key,
                    trim(IF (cardNm = '', null, replace(cardNm, '카드', ''))) AS issuer_name,
                    trim(IF (merNo = '', null, merNo)) AS merchant_number,
                    trim(IF (stlBankNm = '', null, replace(stlBankNm, '은행', ''))) AS bank_name,
                    trim(stlAcctNo) AS account_number,
                    CAST(pcaCnt AS int) AS sales_count,
                    scraping_type,
                    CAST(rsvAmt AS BIGINT) AS reserved_amount,
                    CAST(etcAmt AS BIGINT) AS etc_amount,
                    CAST(pcaAmt AS BIGINT) AS sales_amount,
                    CAST(rcpScdAmt AS BIGINT) AS received_amount,
                    CAST(vatFeeAmt AS BIGINT) AS vat_fee_amount,
                    to_timestamp(unix_timestamp(pymDate, 'yyyyMMdd')) AS received_at,
                    to_timestamp(
                      concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')
                    ) AS created_at,
                    to_timestamp(
                      concat(concat_ws('-', year, month, day), ' ', hour, ':00:00.000')
                    ) AS updated_at
            FROM    after_payments_raw a LEFT OUTER JOIN credential_keys k
            ON      a.business_id = k.business_id
          '''
      }
    }
    {
      name: reformat_payments
      inputs:
      [
        current_payments
        after_payments
      ]
      type: sql
      options:
      {
        sql:
          '''
          SELECT    *
          FROM      (
            SELECT  * FROM current_payments

            UNION ALL

            SELECT * FROM after_payments
          )
          WHERE     business_id is not null
          AND       merchant_number is not null
          AND       bank_name is not null
          AND       received_at is not null
          '''
      }
    }
    {
      name: payments
      inputs:
      [
        reformat_payments
      ]
      type: sql
      options:
      {
        sql:
          '''
            SELECT  business_id,
                    credential_key,
                    merchant_number,
                    bank_name,
                    received_at,
                    MIN(issuer_name) AS issuer_name,
                    MIN(account_number) AS account_number,
                    MIN(sales_count) AS sales_count,
                    MIN(scraping_type) AS scraping_type,
                    MIN(reserved_amount) AS reserved_amount,
                    MIN(etc_amount) AS etc_amount,
                    MIN(sales_amount) AS sales_amount,
                    MIN(received_amount) AS received_amount,
                    MIN(vat_fee_amount) AS vat_fee_amount,
                    MIN(created_at) AS created_at,
                    MIN(updated_at) AS updated_at,
                    MIN(date_format(created_at, 'yyyy-MM-dd')) AS created_at_date
            FROM    reformat_payments
            GROUP BY business_id, credential_key, merchant_number, bank_name, received_at
          '''
      }
    }
  ]
  sink:
  [
    {
      inputs:
      [
        payments
      ]
      name: payments_sink
      options: {
          mode: overwritePartitions
          path: "${OUTPUT_PATH}"
          format: parquet
          class: 'com.kcd.thrush.jobs.tasks.EvenPartitionFileSink'
          partitions: "created_at_date"
          evenPartitions: "true"
          numOfRecordPerFile: "4000000"
          sampleRatio: "0.1"
      }
      type: custom
    }
  ]
}