{
  name: transform_message
  udfs: [
  ]
  source:
  [
    {
        inputs: []
        name: ad_group
        options:
        {
          url: "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DATABASE}"
          dbtable: "ad_group"
          user: "${DB_USERNAME}"
          password:  "${DB_PASSWORD}"
          fetchsize: "${fetchSize}"
          numRowsPerPartition: "${numRowsPerPartition}"
        }
        type: jdbc
    }
    {
        inputs: []
        name: creative
        options:
        {
          url: "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DATABASE}"
          dbtable: "creative"
          user: "${DB_USERNAME}"
          password:  "${DB_PASSWORD}"
          fetchsize: "${fetchSize}"
          numRowsPerPartition: "${numRowsPerPartition}"
        }
        type: jdbc
    }
    {
      inputs: []
      name: user_message_history
      options:
      {
        format: parquet
        paths: ${USER_HISTORY_DIR}/date_id=${TARGET_DATE}
      }
      type: file
    }
    {
        inputs: []
        name: paynote_users
        options:
        {
          format: parquet
          paths: ${DB_DUMP_DIR}/goose/snapshot/latest/users
        }
        type: file
    }
    {
        inputs: []
        name: cashnote_users
        options:
        {
          format: parquet
          paths: ${DB_DUMP_DIR}/snowdon/snapshot/latest/users
        }
        type: file
    }
    {
        inputs: []
        name: cashnote_memberships
        options:
        {
          format: parquet
          paths: ${DB_DUMP_DIR}/snowdon/snapshot/latest/memberships
        }
        type: file
     }
    {
        inputs: []
        name: cashnote_businesses
        options:
        {
          format: parquet
          paths: ${DB_DUMP_DIR}/snowdon/snapshot/latest/businesses
        }
        type: file
     }
  ]
  process:
  [
    {
      inputs:
      [
        ad_group
        creative
      ]
      name: target_group
      options:
      {
        sql:
          '''
            SELECT
                    named_struct(
                        'campaign_id',      a.campaign_id,
                        'ad_group_id',      c.ad_group_id,
                        'creative_id',      c.id,
                        'primary_key',      IF(a.user_type = 'cashnote', 'target_id', 'user_id'),
                        'user_type',        a.user_type,
                        'type',             a.type,
                        'target_type',      a.target_type,
                        'path',             a.path,
                        'frequency_cap',    a.frequency_cap,
                        'message_type',     c.message_type,
                        'template_code',    c.template_code,
                        'exclude_sent_user', a.exclude_sent_user,
                        'test_mode',        a.test_mode,
                        'limit',            a.limit,
                        'test_sequence',    a.test_sequence,
                        'template',         named_struct(
                                                'title',        c.title,
                                                'message',      c.template,
                                                'attachment',   c.attachment
                                            ),
                        'report_name',      a.report_name
                    ) AS meta,

                     named_struct(
                        'title',        CAST(null as STRING),
                        'message',      CAST(null as STRING),
                        'attachment',   named_struct('button', array(
                                                                    named_struct(
                                                                        'name',         CAST(null as STRING),
                                                                        'type',         CAST(null as STRING),
                                                                        'url_mobile',   CAST(null as STRING),
                                                                        'target',       CAST(null as STRING)
                                                                    )
                                                                 ),
                                                      'image', named_struct(
                                                                    'img_url', CAST(null AS STRING),
                                                                    'img_link', CAST(null AS STRING)
                                                                )
                                                     )
                    ) AS result,
                    named_struct(
                        'valid', true,
                        'error', CAST(null as STRING)
                    ) AS status
            FROM (
                    SELECT  *
                    FROM    ad_group
                    WHERE   status = 'RUNNING'
            ) AS a
            JOIN    (
                    SELECT *
                    FROM    creative
                    WHERE   creative.type = 'MESSAGE_TEMPLATE'
                    AND     enabled = true
            ) AS c
            ON      a.id = c.ad_group_id
          '''
      }
      type: sql
      cache: true
    }
    {
      inputs:
      [
        target_group
        user_message_history
      ]
      name: valid_filter
      options:
      {
        sql:
          '''
          SELECT    user_message_history.*
          FROM      (
                        SELECT * FROM target_group WHERE meta.exclude_sent_user = true
          ) AS t
          JOIN      user_message_history
          ON        t.meta.user_type = user_message_history.user_type
          AND       t.meta.ad_group_id = user_message_history.ad_group_id
          '''
      }
      type: sql
    }
    {
      inputs:
      [
        target_group
      ]
      name: target_messages
      options:
      {
        class: com.kcd.thrush.dmp.spark.TargetExtractProcess
        reportDir: ${REPORT_DIR}
      }
      type: custom
    }
    {
      inputs:
      [
        target_messages
        valid_filter
      ]
      name: filtered_message
      options:
      {
        sql:
          '''
            SELECT  t.target_id,
                    t.user_id,
                    t.business_id,
                    t.meta,
                    t.result,
                    CASE
                        WHEN    valid_filter.ad_group_id IS NOT NULL THEN named_struct('valid', false, 'error', 'EXCLUDED_SENT_USER')
                        ELSE    t.status
                    END AS status
            FROM    (
                        SELECT  target_id,
                                IF(targetGroup.meta.user_type = 'cashnote', split(target_id, "_")[0], target_id) AS user_id,
                                IF(targetGroup.meta.user_type = 'cashnote', split(target_id, "_")[1], null) AS business_id,
                                targetGroup.meta,
                                targetGroup.status,
                                targetGroup.result
                        FROM    target_messages
            ) AS t
            LEFT OUTER JOIN     valid_filter
            ON      t.meta.user_type = valid_filter.user_type
            AND     t.meta.ad_group_id = valid_filter.ad_group_id
            AND     t.user_id = valid_filter.user_id
            AND     nvl(t.business_id, 'empty') = nvl(valid_filter.business_id, 'empty')
          '''
      }
      type: sql
    }
    {
      inputs:
      [
        paynote_users
        cashnote_users
        cashnote_memberships
        cashnote_businesses
      ]
      name: id_mapping
      options:
      {
        sql:
          '''
          SELECT
                  b.id AS business_id,
                  b.public_id AS public_business_id,
                  u.id AS user_id,
                  u.uuid AS public_user_id,
                  'cashnote' AS user_type
          FROM cashnote_users AS u, cashnote_memberships AS m, cashnote_businesses AS b
          WHERE u.id = m.user_id
          AND m.business_id = b.id

          UNION ALL

          SELECT  null AS business_id,
                  null AS public_business_id,
                  id AS user_id,
                  uid AS public_user_id,
                  'paynote' AS user_type
          FROM paynote_users
          '''
      }
      type: sql
    }
    {
      inputs:
      [
        id_mapping
        filtered_message
      ]
      name: filtered_message_with_public_id
      options:
      {
        sql:
          '''
            SELECT  filtered_message.*,
                    id_mapping.public_business_id,
                    id_mapping.public_user_id
            FROM    filtered_message
            LEFT OUTER JOIN id_mapping
            ON      filtered_message.user_id = id_mapping.user_id
            AND     filtered_message.meta.user_type = id_mapping.user_type
            AND     nvl(filtered_message.business_id, 'empty') = nvl(id_mapping.business_id, 'empty')
          '''
      }
      type: sql
    }
    {
      inputs:
      [
        filtered_message_with_public_id
      ]
      name: formatted
      options:
      {
        sql:
          '''
          SELECT
                    to_timestamp('${TARGET_DATE} ${TARGET_TS}', 'yyyy-MM-dd HH_mm') AS sent_at,
                    CONCAT(
                        replace('${TARGET_DATE}', '-', ''), '-', '${TARGET_TS}',
                        '_',
                        meta.campaign_id, meta.ad_group_id, meta.creative_id,
                        '_',
                        target_id
                    ) AS id,
                    meta.ad_group_id AS ad_group_id,
                    named_struct(
                        'campaign_id',  CAST(meta.campaign_id AS STRING),
                        'ad_group_id',  CAST(meta.ad_group_id AS STRING),
                        'creative_id',  CAST(meta.creative_id AS STRING),
                        'user_id',      CAST(user_id AS STRING),
                        'business_id',  CAST(business_id AS STRING),
                        'public_user_id',       CAST(public_user_id AS STRING),
                        'public_business_id',   CAST(public_business_id AS STRING),
                        'type',         meta.`type`,
                        'user_type',    meta.user_type,
                        'test_mode',    meta.test_mode
                    ) AS meta,
                    status,
                    named_struct(
                        'message_type',     meta.message_type,
                        'template_code',    meta.template_code,
                        'title',            result.title,
                        'message',          result.message,
                        'ad_flag',          IF(array_contains(array('EXTERNAL_AD', 'INTERNAL_AD'), meta.`type`), 'Y', 'N'),
                        'attachment',       result.attachment
                    ) AS message
          FROM      filtered_message_with_public_id
          '''
      }
      type: sql
    }
  ]
  sink:
  [
    {
      inputs:
      [
        target_group
      ]
      name: target_group_sink
      options:
      {
        format: parquet
        mode: overwrite
        path: ${TARGET_GROUP_PATH}
        numPartitions: "1"
      }
      type: file
    }
    {
      inputs:
      [
        formatted
      ]
      name: target_messages_sink
      options:
      {
        format: parquet
        mode: overwrite
        path: ${TARGET_MESSAGE_PATH}
        partitions: ad_group_id
      }
      type: file
    }
  ]
}