{
  // PARAMS: TEMP_PATH, TARGET_PATH
  name: custom_set
  udfs: [
  ]
  source:
  [
    {
        inputs: []
        name: custom_set
        options:
        {
          url: "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DATABASE}"
          dbtable: "custom_set"
          user: "${DB_USERNAME}"
          password:  "${DB_PASSWORD}"
          fetchsize: "${fetchSize}"
          numRowsPerPartition: "${numRowsPerPartition}"
        }
        type: jdbc
    }
    {
      inputs: []
      name: memberships
      options:
      {
        format: parquet
        paths: ${DB_DUMP_DIR}/snowdon/snapshot/latest/memberships
      }
      type: file
      cache: true
    }
  ]
  process:
  [
    {
      inputs:
      [
        custom_set
      ]
      name: valid_custom_set
      options:
      {
        sql:
          '''
          SELECT    *
          FROM      custom_set
          WHERE     enabled = true
          '''
      }
      type: sql
    }
    {
      inputs:
      [
        valid_custom_set
      ]
      name: custom_set_values
      options:
      {
        class: com.kcd.thrush.message.spark.CustomSetReadProcess
      }
      type: custom
      cache: true
    }
    {
      inputs:
      [
        custom_set_values
        memberships
      ]
      name: custom_set_new
      options:
      {
        sql:
          '''
            SELECT
                    business_id,
                    collect_set(custom_set_id) AS custom_set_ids
            FROM (
                    SELECT    memberships.business_id, custom_set_id
                    FROM (
                      SELECT    custom_set_id, custom_set_value
                      FROM      custom_set_values
                      WHERE     dimension = 'user_id'
                      AND       status = 'REQUEST'
                    ) AS custom_set
                    JOIN memberships
                    ON custom_set.custom_set_value = memberships.user_id

                    UNION ALL

                    SELECT    custom_set_value AS business_id, custom_set_id
                    FROM      custom_set_values
                    WHERE     dimension = 'business_id'
                    AND       status = 'REQUEST'
            )
            GROUP BY business_id
          '''
      }
      type: sql
    }
    {
      inputs:
      [
        custom_set_values
        memberships
      ]
      name: custom_set_old
      options:
      {
        sql:
          '''
            SELECT
                    business_id,
                    collect_set(custom_set_id) AS custom_set_ids
            FROM (
                    SELECT    memberships.business_id, custom_set_id
                    FROM (
                      SELECT    custom_set_id, custom_set_value
                      FROM      custom_set_values
                      WHERE     dimension = 'user_id'
                      AND       status = 'COMPLETE'
                    ) AS custom_set
                    JOIN memberships
                    ON custom_set.custom_set_value = memberships.user_id

                    UNION ALL

                    SELECT    custom_set_value AS business_id, custom_set_id
                    FROM      custom_set_values
                    WHERE     dimension = 'business_id'
                    AND       status = 'COMPLETE'
            )
            GROUP BY business_id
          '''
      }
      type: sql
    }
    {
      inputs:
      [
        custom_set_new
        custom_set_old
      ]
      name: custom_set_all
      options:
      {
        sql:
          '''
          SELECT    custom_set_new.business_id,
                    array_union(
                        custom_set_new.custom_set_ids,
                        custom_set_old.custom_set_ids
                    ) AS custom_set_ids
          FROM      custom_set_new
          JOIN      custom_set_old
          ON        custom_set_new.business_id = custom_set_old.business_id
          '''
      }
      type: sql
    }
    {
      inputs:
      [
        custom_set_all
      ]
      name: add_join_field
      options:
      {
        sql:
          '''
          SELECT
                    to_timestamp('${TARGET_DATE} ${TARGET_TS}', 'yyyy-MM-dd HH_mm') AS timestamp,
                    named_struct(
                      'name', 'business_meta'
                    ) AS business_join_field,
                    *
          FROM      custom_set_all
          '''
      }
      type: sql
    }
  ]
  sink:
  [
    {
      inputs:
      [
        add_join_field
      ]
      name: file_sink
      options:
      {
        format: parquet
        mode: overwrite
        path: ${TARGET_PATH}/date_id=${TARGET_DATE}/ts=${TARGET_TS}
      }
      type: file
    }
    {
      "inputs": [
        add_join_field
      ],
      "name": "es_sink",
      "options": {
        "path": "${targetIndexName}",
        "es.nodes": "${ES_HOST}",
        "es.index.auto.create": "true",
        "es.port": "443",
        "es.batch.size.entries": "1000",
        "es.nodes.wan.only": "true",
        "es.mapping.id": "business_id",
        "es.mapping.join": "business_join_field",
        "es.write.operation": "${ES_WRITE_METHOD}"
      },
      "type": "es"
    }
  ]
}